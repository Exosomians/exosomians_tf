%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGAAGUCCAAGGUACCACAUUACCAAUCGUGAGACCUGAGACUUAGGCCAUUAGGCUCAAGUUUAGAGCCACCUUGGAACCUAAAUCAGGAGACGUCAGUUUAGGGGUAGCAGAGAGGUGUUAGAUAUGACAACGAGUAUGUUUAGUGAGCUGGUUUAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[58.51617050 137.84582520]
[46.18383026 146.38476562]
[33.85149002 154.92369080]
[26.91014862 169.14088440]
[12.04179287 170.02476501]
[-0.29054755 178.56370544]
[-12.62288761 187.10263062]
[-24.95522881 195.64157104]
[-37.28756714 204.18051147]
[-40.23887634 219.47518921]
[-52.86726379 227.95921326]
[-67.43022156 225.05133057]
[-79.76256561 233.59027100]
[-92.09490204 242.12919617]
[-104.42724609 250.66813660]
[-107.37855530 265.96282959]
[-120.00694275 274.44683838]
[-134.56990051 271.53897095]
[-146.90223694 280.07788086]
[-159.23458862 288.61682129]
[-157.89646912 303.91732788]
[-164.40242004 317.83020020]
[-177.00234985 326.61297607]
[-192.30696106 327.90310669]
[-206.19938660 321.35360718]
[-214.94261169 308.72619629]
[-216.18478394 293.41760254]
[-209.59175110 279.54577637]
[-196.93699646 270.84216309]
[-181.62460327 269.64801025]
[-167.77351379 276.28448486]
[-155.44117737 267.74554443]
[-143.10884094 259.20660400]
[-140.70631409 244.55180359]
[-128.32119751 235.71643066]
[-112.96617889 238.33578491]
[-100.63383484 229.79685974]
[-88.30149841 221.25791931]
[-75.96915436 212.71899414]
[-73.56662750 198.06417847]
[-61.18152618 189.22880554]
[-45.82649994 191.84815979]
[-33.49415970 183.30923462]
[-21.16182137 174.77029419]
[-8.82948112 166.23136902]
[3.50285912 157.69242859]
[9.56210899 144.08601379]
[25.31255722 142.59135437]
[37.64489746 134.05242920]
[49.97723770 125.51348877]
[45.93252182 115.16320038]
[44.00522995 104.21908569]
[44.27083969 93.10973358]
[46.71895218 82.27022552]
[51.25368881 72.12506104]
[57.69746017 63.07155228]
[47.81616974 51.78615952]
[37.93487930 40.50076675]
[28.05358887 29.21537399]
[18.17229652 17.92998123]
[2.54302192 18.43965530]
[-9.72532082 8.74317265]
[-12.83999538 -6.58108377]
[-5.33034658 -20.29746819]
[9.25779819 -25.92952347]
[24.03636360 -20.81796455]
[32.02736282 -7.37631512]
[29.45768929 8.04869080]
[39.33898163 19.33408356]
[49.22027206 30.61947632]
[59.10156250 41.90486908]
[68.98285675 53.19026184]
[82.01248932 46.80540848]
[96.24314117 43.97232056]
[110.72463989 44.88015747]
[124.49005127 49.46830368]
[136.62028503 57.43041611]
[146.30541992 68.23487091]
[152.89875793 81.16025543]
[167.57490540 78.06009674]
[182.25103760 74.95993042]
[196.92716980 71.85977173]
[211.60331726 68.75961304]
[216.28616333 55.76924133]
[226.70117188 46.86841965]
[240.04965210 44.30784607]
[252.81376648 48.65313339]
[261.68350220 58.66416550]
[276.41567993 55.84229279]
[291.14785767 53.02042007]
[300.03265381 40.22597122]
[315.01339722 37.57405472]
[327.15618896 46.12321091]
[341.88836670 43.30133438]
[356.62054443 40.47946167]
[371.35272217 37.65758896]
[386.08489990 34.83571625]
[400.81707764 32.01384354]
[415.52188110 29.05269432]
[428.90478516 16.43410873]
[445.36257935 22.47138405]
[459.97741699 19.09404373]
[474.52572632 15.44073677]
[489.00228882 11.51276970]
[503.47888184 7.58480263]
[507.49014282 -7.17517376]
[518.27954102 -17.87495422]
[532.87896729 -21.71208382]
[547.34204102 -17.75289917]
[557.81097412 -7.15727949]
[572.28753662 -11.08524704]
[586.76409912 -15.01321411]
[601.24072266 -18.94118118]
[615.71728516 -22.86914825]
[623.35778809 -36.70382690]
[638.56591797 -41.00344086]
[652.31909180 -33.21710205]
[656.45764160 -17.96430969]
[648.52636719 -4.29427385]
[633.23065186 -0.31718481]
[619.64526367 -8.39257908]
[605.16864014 -4.46461153]
[590.69207764 -0.53664440]
[576.21551514 3.39132285]
[561.73895264 7.31929016]
[558.06140137 21.75331688]
[547.58306885 32.47992706]
[533.04638672 36.54836655]
[518.32849121 32.76956177]
[507.40682983 22.06137276]
[492.93026733 25.98933983]
[478.45370483 29.91730690]
[475.32608032 33.57957458]
[469.84802246 35.28928375]
[463.35476685 33.70888519]
[448.73992920 37.08622360]
[442.04638672 47.19522858]
[429.86456299 50.10950470]
[418.62203979 43.72883224]
[412.70138550 48.20775223]
[403.63894653 46.74602127]
[388.90676880 49.56789398]
[374.17459106 52.38976669]
[359.44241333 55.21163940]
[344.71023560 58.03351212]
[329.97805786 60.85538483]
[321.85394287 73.28656769]
[306.95361328 76.35820770]
[293.96972656 67.75259399]
[279.23754883 70.57447052]
[264.50537109 73.39633942]
[258.02334595 88.45615387]
[243.70681763 96.78200531]
[227.08207703 94.93159485]
[214.70347595 83.43574524]
[200.02732849 86.53591156]
[185.35119629 89.63607025]
[170.67506409 92.73622894]
[155.99891663 95.83639526]
[154.60595703 113.09212494]
[148.02291870 129.10350037]
[136.87548828 142.34870911]
[122.22319031 151.56883240]
[105.45866394 155.88754272]
[88.17530823 154.89436340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[12 39]
[13 38]
[14 37]
[15 36]
[18 33]
[19 32]
[20 31]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[79 159]
[80 158]
[81 157]
[82 156]
[83 155]
[88 151]
[89 150]
[90 149]
[93 146]
[94 145]
[95 144]
[96 143]
[97 142]
[98 141]
[99 139]
[101 136]
[102 135]
[103 132]
[104 131]
[105 130]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
