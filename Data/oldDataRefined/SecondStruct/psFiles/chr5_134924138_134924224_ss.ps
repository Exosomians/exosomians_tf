%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGACAACUCACACCCAAAUCAUUACCCCAAACACCCCAAAAGAAGAUUCGGAAGAGGAUAAAUACCCCCAAAUCAUAACUAACAA\
) } def
/len { sequence length } bind def

/coor [
[-24.15279579 290.63195801]
[-37.82458115 296.83679199]
[-52.07005692 301.57852173]
[-66.73314667 304.80520630]
[-81.65319824 306.48147583]
[-96.66673279 306.58895874]
[-111.60925293 305.12649536]
[-126.31703949 302.11010742]
[-140.62895203 297.57281494]
[-154.38818359 291.56436157]
[-167.44396973 284.15060425]
[-179.65325928 275.41268921]
[-190.88230896 265.44644165]
[-201.00805664 254.36100769]
[-209.91957092 242.27784729]
[-217.51921082 229.32937622]
[-223.72372437 215.65744019]
[-228.46511841 201.41184998]
[-231.69143677 186.74867249]
[-233.36734009 171.82858276]
[-233.47447205 156.81504822]
[-232.01164246 141.87257385]
[-228.99488831 127.16485596]
[-224.45726013 112.85305023]
[-218.44848633 99.09397125]
[-211.03437805 86.03836823]
[-202.29618835 73.82927704]
[-192.32966614 62.60047913]
[-181.24397278 52.47499847]
[-169.16061401 43.56377411]
[-156.21194458 35.96444321]
[-142.53985596 29.76026726]
[-128.29415894 25.01922417]
[-113.63090515 21.79326057]
[-98.71077728 20.11771774]
[-83.69723511 20.01095772]
[-68.75478363 21.47414780]
[-54.04714584 24.49125671]
[-39.73545456 29.02923012]
[-25.97651863 35.03834534]
[-12.92109394 42.45276260]
[-0.71221930 51.19124603]
[10.51633739 61.15805054]
[20.64155006 72.24398041]
[29.55248070 84.32756042]
[37.15149689 97.27641296]
[43.35533905 110.94864655]
[57.58773041 106.21165466]
[71.82011414 101.47466278]
[86.05250549 96.73766327]
[95.47650146 86.40907288]
[109.21050262 89.02994537]
[123.44288635 84.29295349]
[126.51290894 80.49938202]
[130.30165100 78.26067352]
[134.17550659 77.60439301]
[137.56715393 78.32959747]
[140.05064392 80.05407715]
[154.81231689 77.39077759]
[161.43765259 63.35922241]
[175.06135559 55.93127441]
[190.44482422 57.96313095]
[201.67280579 68.67350006]
[204.42791748 83.94403076]
[197.65074158 97.90288544]
[183.94726562 105.18260193]
[168.58674622 102.98398590]
[157.47561646 92.15244293]
[142.71394348 94.81574249]
[128.17988586 98.52533722]
[113.94749451 103.26233673]
[104.52349854 113.59092712]
[90.78949738 110.97005463]
[76.55711365 115.70704651]
[62.32472229 120.44403839]
[48.09233475 125.18103790]
[51.31936646 139.84405518]
[52.99599838 154.76405334]
[53.10385132 169.77758789]
[51.64175034 184.72013855]
[48.62571335 199.42800903]
[44.08878326 213.74002075]
[38.08066940 227.49940491]
[30.66720390 240.55535889]
[21.92961121 252.76487732]
[11.96362305 263.99417114]
[0.87843353 274.12017822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[47 76]
[48 75]
[49 74]
[50 73]
[52 71]
[53 70]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
