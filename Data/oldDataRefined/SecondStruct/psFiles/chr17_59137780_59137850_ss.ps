%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:47 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUUUUGGGAUAUUCGUUAUAACGUGAUGAGUCUUGAUAAAUGUGUCGUCUCUGUUAUAACUAUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[31.35068321 371.03430176]
[20.34820938 382.14645386]
[4.77240562 383.53509521]
[-8.02230930 374.54458618]
[-11.99466324 359.41995239]
[-5.26903105 345.30258179]
[8.97894859 338.85827637]
[12.86123466 324.36941528]
[16.74352074 309.88052368]
[20.62580681 295.39163208]
[24.50809097 280.90274048]
[28.39037704 266.41384888]
[32.27266312 251.92497253]
[36.15494919 237.43608093]
[34.45647049 234.00317383]
[34.54365921 229.51127625]
[36.92465591 224.91604614]
[41.60723495 221.37416077]
[47.34748459 207.51596069]
[53.08773804 193.65777588]
[58.82798767 179.79957581]
[64.56823730 165.94139099]
[70.30849457 152.08319092]
[76.04874420 138.22500610]
[81.78899384 124.36681366]
[87.52924347 110.50861359]
[84.80081940 94.08936310]
[97.90511322 83.82711792]
[103.03541565 69.73172760]
[108.16571808 55.63633728]
[113.29602051 41.54094696]
[118.42632294 27.44555855]
[111.99654388 13.25768661]
[117.40019226 -0.96395898]
[130.96578979 -7.00633478]
[121.54120636 -19.22029495]
[120.23887634 -34.59259033]
[127.47437286 -48.21797943]
[140.93887329 -55.74864578]
[156.33589172 -54.78158569]
[168.75230408 -45.62538147]
[174.22608948 -31.20174599]
[171.01057434 -16.11320877]
[160.13180542 -5.17446613]
[145.06117249 -1.87603259]
[151.56906128 11.47249031]
[146.56700134 25.84030342]
[132.52171326 32.57586288]
[127.39141083 46.67124939]
[122.26110840 60.76663971]
[117.13080597 74.86203003]
[112.00050354 88.95742035]
[116.30799103 99.98866272]
[112.01585388 111.02587891]
[101.38744354 116.24887085]
[95.64718628 130.10705566]
[89.90693665 143.96525574]
[84.16668701 157.82344055]
[78.42643738 171.68164062]
[72.68618011 185.53984070]
[66.94593048 199.39802551]
[61.20568085 213.25622559]
[55.46542740 227.11441040]
[50.64383698 241.31835938]
[46.76155090 255.80725098]
[42.87926483 270.29614258]
[38.99697876 284.78503418]
[35.11469269 299.27392578]
[31.23240852 313.76278687]
[27.35012245 328.25167847]
[23.46783638 342.74057007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[35 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
