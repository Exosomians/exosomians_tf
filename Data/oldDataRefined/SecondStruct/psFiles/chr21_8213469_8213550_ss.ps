%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGCGCGGGCACCGGCGCCGCGGCCCCAAGCGCACAGGGGCCGCCGCUGGGCGCCCUGCGGCGCCACAGCAGGCGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[77.86895752 163.20674133]
[76.16934204 148.30334473]
[74.46972656 133.39994812]
[60.75119400 127.33349609]
[48.58265305 136.10427856]
[36.41411591 144.87506104]
[24.24557495 153.64584351]
[12.07703400 162.41662598]
[5.40598345 176.76261902]
[-9.44298363 177.92771912]
[-15.67264271 193.09753418]
[-31.95883942 195.01895142]
[-41.54772949 181.71537781]
[-34.57508850 166.87239075]
[-18.21376610 165.75918579]
[-12.41309071 152.04052734]
[3.30625105 150.24809265]
[15.47479057 141.47729492]
[27.64333153 132.70651245]
[39.81187057 123.93573761]
[51.98041153 115.16495514]
[54.80228424 100.43277740]
[46.73614120 87.78614044]
[38.66999817 75.13951111]
[30.60385323 62.49287796]
[22.53770828 49.84624481]
[14.47156525 37.19961166]
[6.40542221 24.55297852]
[-1.66072166 11.90634441]
[-17.08800507 11.95608807]
[-30.08084869 3.63806272]
[-36.49328232 -10.39348125]
[-34.27912521 -25.66112900]
[-24.14490318 -37.29302979]
[-9.32441235 -41.57748413]
[5.45318556 -37.14733887]
[15.47241020 -25.41624260]
[17.53616524 -10.12753773]
[10.98591137 3.84020090]
[19.05205536 16.48683357]
[27.11819839 29.13346672]
[35.18434143 41.78010178]
[43.25048447 54.42673492]
[51.31662750 67.07336426]
[59.38277435 79.72000122]
[67.44891357 92.36663055]
[96.39971161 71.14862061]
[121.93868256 88.61656189]
[136.72161865 86.07398224]
[151.50456238 83.53141022]
[166.28750610 80.98883820]
[181.01968384 78.16696167]
[195.69581604 75.06680298]
[210.37196350 71.96664429]
[225.04809570 68.86647797]
[239.72422791 65.76631927]
[254.40037537 62.66615677]
[266.23294067 51.31177521]
[281.90487671 56.14114380]
[285.29421997 72.18621826]
[272.91430664 82.94120789]
[257.50051880 77.34229279]
[242.82438660 80.44245911]
[228.14825439 83.54261780]
[213.47212219 86.64277649]
[198.79597473 89.74294281]
[184.11984253 92.84310150]
[178.07640076 97.42070007]
[168.83007812 95.77177429]
[154.04713440 98.31435394]
[139.26420593 100.85692596]
[124.48126221 103.39949799]
[123.35585022 112.43474579]
[118.81443024 121.01062012]
[111.08160400 127.82116699]
[100.88084412 131.67829895]
[89.37312317 131.70033264]
[91.07273865 146.60372925]
[92.77235413 161.50712585]
[102.95793915 174.35960388]
[96.66941071 189.50511169]
[80.37587738 191.36325073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[10 15]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[48 72]
[49 71]
[50 70]
[51 69]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
