%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAUAGGCAUUAAAUAGGAUGGUGCUGACCCGAUGACACCUCUUCUCAAACGACCUUUCUUCGAUUUUGCUAAUGACUCCAA\
) } def
/len { sequence length } bind def

/coor [
[122.80711365 419.31610107]
[115.54611206 406.04458618]
[112.74361420 391.17846680]
[114.67416382 376.17419434]
[121.14863586 362.50173950]
[131.53273010 351.50054932]
[144.80909729 344.24844360]
[142.02043152 329.50994873]
[139.23175049 314.77145386]
[136.44308472 300.03295898]
[120.98881531 297.08404541]
[107.79002380 288.45123291]
[98.85166931 275.41104126]
[95.54473114 259.91220093]
[98.39601898 244.28427124]
[107.00446320 230.88755798]
[120.09728241 221.75663757]
[116.75946808 207.13272095]
[113.42165375 192.50878906]
[110.08383942 177.88487244]
[99.70844269 167.19841003]
[104.18092346 152.02253723]
[100.84311676 137.39862061]
[97.50530243 122.77469635]
[81.92535400 114.07897186]
[77.30741119 96.84457397]
[86.45217896 81.52388763]
[82.03085327 67.19029236]
[77.60951996 52.85670090]
[73.39130402 48.98513794]
[71.45778656 44.31302261]
[71.70697784 39.92024994]
[73.59393311 36.66510010]
[70.80525970 21.92660332]
[60.63723755 9.80547047]
[65.87350464 -4.13837433]
[63.08482742 -18.87687111]
[51.98357010 -30.94725037]
[57.14373016 -46.51339340]
[73.25698090 -49.56218338]
[83.74739075 -36.95729065]
[77.82332611 -21.66554451]
[80.61199951 -6.92704821]
[90.58055878 4.13988829]
[85.54376221 19.13792992]
[88.33243561 33.87642670]
[91.94311523 48.43537521]
[96.36444092 62.76896667]
[100.78576660 77.10256195]
[111.86138153 80.39852142]
[119.91956329 88.68093109]
[122.91037750 99.84281921]
[120.07299805 111.04468536]
[112.12921906 119.43688202]
[115.46703339 134.06080627]
[118.80484772 148.68472290]
[129.41897583 160.41717529]
[124.70775604 174.54705811]
[128.04557800 189.17098999]
[131.38339233 203.79490662]
[134.72120667 218.41882324]
[148.94879150 220.42800903]
[161.59025574 227.19493103]
[171.11216736 237.87522888]
[176.36759949 251.15138245]
[176.73425293 265.39508057]
[172.18804932 278.86700439]
[163.30360413 289.92922974]
[151.18157959 297.24429321]
[153.97024536 311.98278809]
[156.75892639 326.72128296]
[159.54759216 341.45977783]
[174.55572510 343.36016846]
[188.24118042 349.80712891]
[199.26319885 360.16909790]
[206.54197693 373.43087769]
[209.36441040 388.29321289]
[207.45396423 403.30004883]
[200.99781799 416.98117065]
[190.62847900 427.99627686]
[177.36183167 435.26614380]
[162.49760437 438.07861328]
[147.49205017 436.15811157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 72]
[8 71]
[9 70]
[10 69]
[17 61]
[18 60]
[19 59]
[20 58]
[22 56]
[23 55]
[24 54]
[27 49]
[28 48]
[29 47]
[33 46]
[34 45]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
