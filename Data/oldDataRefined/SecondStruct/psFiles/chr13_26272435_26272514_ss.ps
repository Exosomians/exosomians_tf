%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAGACUCCCCAUCACGUCUGUACCUCGACAGUAGAGGAUACUACUAUUACGGAACUACACCUUAUGGAGGACUUCCU\
) } def
/len { sequence length } bind def

/coor [
[102.10031128 154.12545776]
[85.19199371 152.10278320]
[69.74723816 144.93046570]
[57.29254532 133.31741333]
[44.30216217 140.81741333]
[31.31178284 148.31741333]
[18.32140160 155.81741333]
[5.33101988 163.31741333]
[5.41125774 178.67610168]
[-2.21253109 192.00926208]
[-15.48958588 199.73036194]
[-30.84844398 199.76246643]
[-44.15764999 192.09692383]
[-51.83709717 178.79573059]
[-51.82104874 163.43684387]
[-44.11382675 150.15173340]
[-30.78862953 142.51400757]
[-15.42987061 142.57820129]
[-2.16897988 150.32704163]
[10.82140160 142.82704163]
[23.81178284 135.32704163]
[36.80216217 127.82703400]
[49.79254532 120.32703400]
[45.85341263 98.54254150]
[50.95873642 77.00149536]
[64.25573730 59.30203247]
[56.01309967 46.76971817]
[47.77046585 34.23740005]
[39.52783203 21.70508194]
[23.97601891 20.06949997]
[13.15121937 8.78421021]
[12.16457367 -6.82221603]
[21.48194504 -19.38090324]
[36.70395660 -22.96202087]
[50.64323807 -15.87467766]
[56.71808624 -1.46529865]
[52.06014633 13.46244812]
[60.30278397 25.99476433]
[68.54541779 38.52708054]
[76.78805542 51.05939865]
[85.18203735 47.90004730]
[93.98229218 46.16911697]
[102.94753265 45.91405869]
[111.83195496 47.14187241]
[120.39199066 49.81888962]
[128.39292908 53.87171936]
[135.61543274 59.18924332]
[141.86146545 65.62567139]
[146.95979309 73.00453949]
[150.77061462 81.12353516]
[153.18948364 89.76006317]
[154.15003967 98.67734528]
[153.62599182 107.63088226]
[151.63166809 116.37521362]
[165.16418457 122.84600067]
[178.69668579 129.31678772]
[192.22920227 135.78758240]
[205.83639526 128.56607056]
[220.91052246 130.71646118]
[231.70034790 141.20663452]
[234.21408081 155.86334229]
[250.00190735 154.83619690]
[258.14627075 167.30691528]
[271.67880249 173.77769470]
[287.97778320 171.96812439]
[297.47512817 185.33720398]
[290.40078735 200.13198853]
[274.03219604 201.13285828]
[265.20800781 187.31021118]
[251.67549133 180.83941650]
[236.85559082 182.32939148]
[227.74328613 169.39584351]
[214.75686646 176.64091492]
[199.81770325 174.82833862]
[188.68019104 164.44522095]
[185.75840759 149.32009888]
[172.22590637 142.84930420]
[158.69338989 136.37850952]
[145.16087341 129.90773010]
[133.64355469 142.45100403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[26 40]
[27 39]
[28 38]
[29 37]
[54 79]
[55 78]
[56 77]
[57 76]
[61 72]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
