%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGGUGAUGACUAGUCGUGCCCUCAAAACUGGACGAGGCAAAGGCUGGACCCGGCCAAGUGGGGAGGAAUCCGUUGGACCACCAGGGGGCGAGGGCCCUCCAGUGGUAUAACUACGGCUUG\
) } def
/len { sequence length } bind def

/coor [
[-13.56209087 137.55799866]
[-27.11812401 138.98472595]
[-39.49743652 133.54370117]
[-47.48338318 122.76635742]
[-62.40642166 124.28388214]
[-77.32946014 125.80140686]
[-92.25250244 127.31893158]
[-82.96141052 139.09500122]
[-86.12216949 153.75819397]
[-99.43959045 160.66084290]
[-113.24320221 154.79054260]
[-117.50949097 140.41003418]
[-109.13919067 127.96098328]
[-124.13437653 127.58099365]
[-139.12956238 127.20100403]
[-154.12474060 126.82101440]
[-169.11993408 126.44102478]
[-184.11511230 126.06103516]
[-200.01150513 135.25000000]
[-214.64421082 125.65108490]
[-229.64421082 125.65108490]
[-244.64421082 125.65108490]
[-259.64419556 125.65108490]
[-268.33993530 128.80918884]
[-275.02297974 125.45626068]
[-290.01818848 125.07627106]
[-297.96356201 138.22033691]
[-311.42422485 145.61668396]
[-326.77932739 145.27572632]
[-339.89843750 137.28919983]
[-347.25256348 123.80540466]
[-346.86346436 108.45144653]
[-338.83584595 95.35744476]
[-325.32907104 88.04562378]
[-309.97640991 88.48283386]
[-296.90762329 96.55146027]
[-289.63818359 110.08108521]
[-274.64300537 110.46107483]
[-259.64419556 110.65108490]
[-244.64421082 110.65108490]
[-229.64421082 110.65108490]
[-214.64421082 110.65108490]
[-205.80613708 102.28759766]
[-193.23596191 102.23269653]
[-183.73512268 111.06584930]
[-168.73994446 111.44583893]
[-153.74475098 111.82582855]
[-138.74957275 112.20581818]
[-123.75438690 112.58580780]
[-108.75919342 112.96579742]
[-93.77002716 112.39588928]
[-78.84698486 110.87836456]
[-63.92394638 109.36083984]
[-49.00090790 107.84331512]
[-41.25021744 93.43202972]
[-26.30494499 86.37230682]
[-9.92625999 89.60292053]
[1.44213772 102.05321503]
[16.32194519 100.15813446]
[31.20175362 98.26305389]
[46.08156204 96.36798096]
[60.96136856 94.47290039]
[72.60913849 85.18965149]
[87.27625275 91.12145996]
[99.13788605 81.93987274]
[104.70213318 68.01007843]
[110.26638031 54.08028030]
[107.38583374 37.93610001]
[120.09947205 27.57774734]
[135.32858276 33.66100311]
[137.40676880 49.92794037]
[124.19617462 59.64452362]
[118.63192749 73.57431793]
[113.06768036 87.50411224]
[121.00214386 100.23377991]
[135.95883179 101.37277222]
[150.91552734 102.51177216]
[165.87222290 103.65076447]
[180.22007751 96.98369598]
[192.32308960 105.66507721]
[207.27976990 106.80407715]
[222.23646545 107.94306946]
[237.19316101 109.08206940]
[252.14985657 110.22106934]
[264.07809448 100.20333862]
[279.23007202 101.57151031]
[288.70693970 113.00499725]
[303.66363525 114.14399719]
[318.62033081 115.28298950]
[333.57702637 116.42198944]
[348.53372192 117.56098175]
[363.49041748 118.69998169]
[378.03189087 111.11856842]
[391.72119141 120.14823914]
[390.47595215 136.50004578]
[375.57714844 143.35264587]
[362.35140991 133.65667725]
[347.39471436 132.51768494]
[332.43801880 131.37867737]
[317.48132324 130.23968506]
[302.52465820 129.10069275]
[287.56796265 127.96169281]
[276.46902466 137.82827759]
[261.28457642 136.88623047]
[251.01086426 125.17775726]
[236.05416870 124.03876495]
[221.09747314 122.89976501]
[206.14077759 121.76077271]
[191.18408203 120.62177277]
[177.90603638 127.37031555]
[164.73323059 118.60746002]
[149.77653503 117.46846771]
[134.81983948 116.32946777]
[119.86314392 115.19046783]
[105.28697968 120.11418152]
[93.48120117 115.25443268]
[89.17133331 106.00126648]
[76.45925903 115.42006683]
[62.85644913 109.35270691]
[47.97663879 111.24778748]
[33.09683228 113.14286804]
[18.21702385 115.03794098]
[3.33721662 116.93302155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[20 42]
[21 41]
[22 40]
[23 39]
[25 38]
[26 37]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[64 117]
[65 74]
[66 73]
[67 72]
[75 114]
[76 113]
[77 112]
[78 111]
[80 109]
[81 108]
[82 107]
[83 106]
[84 105]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
