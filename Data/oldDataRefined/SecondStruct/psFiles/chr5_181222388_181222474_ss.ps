%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGCACAAAGGCGGGCCAAAGCUUGGCCCCUGGAAAGCGCACACUCCGCUUGCACUAUUGGUGAUGUGAUGCCUUUGGUGGAAC\
) } def
/len { sequence length } bind def

/coor [
[68.55558777 328.61251831]
[68.55558777 313.61251831]
[68.55558777 298.61251831]
[68.55558777 283.61251831]
[68.55558777 268.61251831]
[68.55558777 253.61250305]
[68.55558777 238.61250305]
[65.33399963 231.76954651]
[68.83287811 223.07951355]
[69.36826324 208.08906555]
[69.90364838 193.09861755]
[70.43903351 178.10818481]
[70.97441864 163.11773682]
[71.50980377 148.12730408]
[72.04518890 133.13685608]
[62.42618561 121.62709045]
[47.57886505 119.49236298]
[32.73154068 117.35764313]
[17.88422012 115.22291565]
[3.03689837 113.08819580]
[-11.81042290 110.95347595]
[-26.65774536 108.81874847]
[-43.19614029 112.54940796]
[-51.35928345 97.69007874]
[-39.34045029 85.73249054]
[-24.52302170 93.97142792]
[-9.67570114 96.10615540]
[5.17162085 98.24087524]
[20.01894188 100.37559509]
[34.86626434 102.51032257]
[49.71358490 104.64504242]
[64.56090546 106.77976227]
[64.81196594 96.89312744]
[67.71102905 87.65599060]
[72.92549896 79.74732971]
[79.95739746 73.71528625]
[88.18902588 69.93952942]
[96.93629456 68.60845947]
[99.07102203 53.76113892]
[101.20574188 38.91381836]
[103.34046173 24.06649780]
[105.47518921 9.21917629]
[94.91439056 -2.31353951]
[94.28908539 -17.93861580]
[103.89452362 -30.27836990]
[119.19531250 -33.50634766]
[132.96688843 -26.09839439]
[138.70672607 -11.55232239]
[133.70466614 3.26365995]
[120.32250977 11.35389805]
[118.18778992 26.20121956]
[116.05306244 41.04854202]
[113.91834259 55.89586258]
[111.78362274 70.74318695]
[119.79080200 75.44110870]
[126.08341980 82.26669312]
[140.13766479 77.02472687]
[154.19190979 71.78276825]
[168.24615479 66.54080200]
[180.97364807 55.34047699]
[195.25958252 64.47001648]
[190.44157410 80.72495270]
[173.48811340 80.59504700]
[159.43386841 85.83701324]
[145.37962341 91.07897186]
[131.32537842 96.32093811]
[131.79420471 104.48026276]
[130.13589478 112.63114929]
[126.38803864 120.21900177]
[120.73269653 126.70870209]
[113.48864746 131.62219238]
[105.09391785 134.57325745]
[96.07945251 135.29707336]
[87.03562927 133.67224121]
[86.50024414 148.66267395]
[85.96485901 163.65312195]
[85.42947388 178.64356995]
[84.89408875 193.63400269]
[84.35871124 208.62445068]
[83.82332611 223.61489868]
[83.55558777 238.61250305]
[83.55558777 253.61250305]
[83.55558777 268.61251831]
[83.55558777 283.61251831]
[83.55558777 298.61251831]
[83.55558777 313.61251831]
[83.55558777 328.61251831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
