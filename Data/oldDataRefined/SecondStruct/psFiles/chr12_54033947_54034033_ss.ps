%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGCCCUCCCCGCCCUCCCCCCAGGGGCCACGAGCCUAGAGCUCCCACGAAUAACAAGCCAGGCUCGGACCCAGAGGGAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 274.78826904]
[92.50000000 258.94912720]
[92.50000000 243.94914246]
[80.36157990 235.35862732]
[75.55226898 221.09909058]
[80.11502075 206.57205200]
[92.50000000 197.41134644]
[92.50000000 182.41134644]
[92.50000000 167.41134644]
[92.50000000 152.41134644]
[92.50000000 137.41134644]
[81.39073944 133.30998230]
[72.07403564 125.99999237]
[65.44731903 116.18553925]
[62.14892197 104.81199646]
[47.18714142 103.74190521]
[32.22536087 102.67182159]
[17.26357841 101.60173035]
[2.30179620 100.53164673]
[-8.44813633 111.88826752]
[-23.98879242 113.62666321]
[-36.98234940 104.92600250]
[-41.29364777 89.89447784]
[-34.88702393 75.62951660]
[-20.78748894 68.86659241]
[-5.65241337 72.79895782]
[3.37188387 85.56986237]
[18.33366585 86.63995361]
[33.29544830 87.71003723]
[48.25722885 88.78012848]
[63.21900940 89.85021210]
[74.18067932 71.90689850]
[92.98326111 62.49500656]
[113.91670227 64.47276306]
[122.02631378 51.85395813]
[130.13592529 39.23515320]
[138.24554443 26.61635208]
[146.35514832 13.99754906]
[154.46476746 1.37874603]
[162.57437134 -11.24005699]
[164.65644836 -20.37372208]
[171.20541382 -24.15732765]
[173.61216736 -33.21086121]
[180.29200745 -36.75830841]
[189.28117371 -48.76642609]
[198.27033997 -60.77454376]
[190.80818176 -74.04993439]
[189.39718628 -89.21334076]
[194.28186035 -103.63762665]
[204.61589050 -114.82368469]
[218.60882568 -120.83346558]
[233.83631897 -120.62574005]
[247.66012573 -114.23650360]
[257.68518066 -102.77272034]
[262.17456055 -88.22055817]
[260.35049438 -73.10128021]
[252.52897644 -60.03438568]
[240.06513977 -51.28378677]
[225.11843872 -48.36558914]
[210.27845764 -51.78537750]
[201.28929138 -39.77725983]
[192.30014038 -27.76914215]
[183.52673340 -15.60248852]
[175.19317627 -3.13044477]
[167.08357239 9.48835850]
[158.97395325 22.10716057]
[150.86434937 34.72596359]
[142.75473022 47.34476852]
[134.64511108 59.96356964]
[126.53550720 72.58237457]
[133.64669800 82.00670624]
[137.53649902 93.15375519]
[137.83245850 104.95628357]
[134.50625610 116.28427887]
[127.87635040 126.05318451]
[118.57749939 133.32769775]
[107.50000000 137.41134644]
[107.50000000 152.41134644]
[107.50000000 167.41134644]
[107.50000000 182.41134644]
[107.50000000 197.41134644]
[119.88497925 206.57205200]
[124.44773102 221.09909058]
[119.63842010 235.35862732]
[107.50000000 243.94914246]
[107.50000000 258.94912720]
[113.54634094 274.78826904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[42 63]
[44 62]
[45 61]
[46 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
