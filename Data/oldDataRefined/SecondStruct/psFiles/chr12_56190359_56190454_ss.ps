%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUCAGUGCCACCGGCUCACCAAUUCCGCAACCUGAGCUUUAGGUUACCCCAAAGGGGCGUGUCCAAGCUUAGGACAAGCACUGCCCAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[86.91573334 274.21179199]
[81.92279816 259.89932251]
[82.12923431 244.74237061]
[87.51010895 230.57121277]
[97.41564941 219.09706116]
[110.64971161 211.70549011]
[108.23124695 196.90173340]
[105.81278229 182.09799194]
[103.39431763 167.29423523]
[100.97585297 152.49047852]
[98.55739594 137.68673706]
[87.31594849 135.51739502]
[77.24337769 130.07502747]
[69.26790619 121.86113739]
[64.12449646 111.63267517]
[49.22076416 113.32938385]
[34.31703186 115.02608490]
[28.26508522 129.14237976]
[15.95619678 138.32859802]
[0.70139813 140.11373901]
[-13.39584732 134.01756287]
[-22.54345131 121.67994690]
[-24.28075409 106.41962433]
[-18.14043045 92.34156036]
[-5.77419662 83.23267365]
[9.49149323 81.54321289]
[23.55024529 87.72763062]
[32.62032700 100.12236023]
[47.52405548 98.42565155]
[62.42778778 96.72894287]
[67.14115143 81.48873138]
[77.73336792 69.56041718]
[92.30936432 63.07812119]
[108.26130676 63.20160675]
[114.39192963 49.51162720]
[120.52255249 35.82165146]
[126.65317535 22.13167572]
[132.78379822 8.44169807]
[138.91441345 -5.24827862]
[145.04504395 -18.93825531]
[151.17565918 -32.62823105]
[157.30628967 -46.31821060]
[156.99510193 -53.23503113]
[159.90612793 -58.39733505]
[164.30255127 -60.67577744]
[171.30645752 -73.94020844]
[170.90808105 -89.75640106]
[183.69285583 -97.39830780]
[190.69677734 -110.66274261]
[197.70069885 -123.92717743]
[204.48890686 -137.30328369]
[211.05961609 -150.78755188]
[217.63032532 -164.27183533]
[215.94137573 -180.58377075]
[229.38034058 -189.98197937]
[244.12237549 -182.79837036]
[245.00215149 -166.42283630]
[231.11460876 -157.70112610]
[224.54388428 -144.21684265]
[217.97317505 -130.73257446]
[217.87126160 -123.19756317]
[210.96513367 -116.92325592]
[203.96121216 -103.65882874]
[196.95729065 -90.39439392]
[197.85664368 -75.52696228]
[184.57089233 -66.93629456]
[177.56698608 -53.67186356]
[170.99626160 -40.18758774]
[164.86564636 -26.49761009]
[158.73501587 -12.80763245]
[152.60440063 0.88234425]
[146.47377014 14.57232094]
[140.34315491 28.26229858]
[134.21252441 41.95227432]
[128.08190918 55.64225006]
[121.95127869 69.33222961]
[132.76820374 81.32874298]
[137.57406616 96.75035095]
[135.48728943 112.76807404]
[126.89064789 126.44360352]
[113.36114502 135.26826477]
[115.77960968 150.07202148]
[118.19807434 164.87577820]
[120.61653137 179.67951965]
[123.03499603 194.48327637]
[125.45346069 209.28701782]
[140.35179138 212.08265686]
[153.39390564 219.80787659]
[163.00489807 231.52986145]
[168.02418518 245.83308411]
[167.84568787 260.99038696]
[162.49093628 275.17144775]
[152.60656738 286.66384888]
[139.38613892 294.07977295]
[124.42610931 296.52377319]
[109.53295135 293.70071411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[15 30]
[16 29]
[17 28]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[45 67]
[46 66]
[48 64]
[49 63]
[50 62]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
