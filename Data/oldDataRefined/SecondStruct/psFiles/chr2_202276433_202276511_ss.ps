%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAACAACAGUUACUACAUAAGAAGAACCUUGACUUAGAUUCACUAGACUGAGUUAUAAGCAGUGAUGGUGACUCUGUU\
) } def
/len { sequence length } bind def

/coor [
[73.66432953 361.52868652]
[60.95961761 350.30252075]
[68.23004150 334.98660278]
[69.40692902 320.03286743]
[70.58381653 305.07910156]
[71.76070404 290.12533569]
[64.07798767 280.56747437]
[65.10850525 267.94223022]
[74.84106445 259.21606445]
[76.60412598 244.32003784]
[78.36717987 229.42401123]
[80.13024139 214.52798462]
[81.89330292 199.63195801]
[83.65636444 184.73593140]
[85.41942596 169.83990479]
[87.18248749 154.94387817]
[88.65274811 140.01609802]
[89.82962799 125.06233978]
[91.00651550 110.10858154]
[79.58609772 119.83349609]
[65.00889587 123.36975098]
[50.40186691 119.95876312]
[38.89839172 110.33223724]
[32.96607971 96.55516815]
[33.87748337 81.58287811]
[41.43709183 68.62709808]
[54.02329254 60.46697617]
[68.93620300 58.85294724]
[82.97684479 64.13124084]
[93.13334656 75.16960144]
[97.22711182 89.60204315]
[104.55642700 76.51460266]
[106.09136200 67.23245239]
[112.43912506 63.06542587]
[120.27660370 50.27582550]
[128.11407471 37.48622131]
[135.95155334 24.69661903]
[143.53642273 11.75560379]
[150.86573792 -1.33183658]
[158.19505310 -14.41927624]
[165.52438354 -27.50671768]
[172.85369873 -40.59415817]
[180.18301392 -53.68159866]
[175.65240479 -68.82257080]
[183.22850037 -82.69262695]
[198.41653442 -87.06289673]
[212.20570374 -79.34059143]
[216.41516113 -64.10720062]
[208.54750061 -50.40044022]
[193.27044678 -46.35227966]
[185.94113159 -33.26483917]
[178.61181641 -20.17739868]
[171.28250122 -7.08995819]
[163.95318604 5.99748182]
[156.62385559 19.08492279]
[156.08979797 26.65942001]
[148.74116516 32.53409958]
[140.90368652 45.32369995]
[133.06620789 58.11330414]
[125.22872925 70.90290833]
[117.64386749 83.84391785]
[110.31454468 96.93135834]
[105.96028137 111.28546906]
[104.78339386 126.23922729]
[103.60650635 141.19299316]
[106.09863281 150.26512146]
[102.07851410 156.70692444]
[100.31545258 171.60295105]
[98.55239105 186.49897766]
[96.78932953 201.39501953]
[95.02626801 216.29104614]
[93.26320648 231.18707275]
[91.50015259 246.08309937]
[89.73709106 260.97912598]
[97.44745636 277.56381226]
[86.71446228 291.30221558]
[85.53757477 306.25598145]
[84.36068726 321.20974731]
[83.18379974 336.16351318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 65]
[18 64]
[19 63]
[31 62]
[32 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
