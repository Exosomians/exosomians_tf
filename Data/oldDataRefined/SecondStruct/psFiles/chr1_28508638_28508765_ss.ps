%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAUGUCAGGGAAAGGUGUUGCAACUUCUACUUCGACCCGGAGCACAGACGCGGACGUAUAAGGAUGUCGAAGGGUCUCAGGACACCUGUUACUGACCCCUCUGUUUGGUACGUCCUUUGUAUAGAU\
) } def
/len { sequence length } bind def

/coor [
[15.37452412 220.82400513]
[3.28630614 222.02456665]
[-8.74922848 220.44776917]
[-20.10279465 216.18032837]
[-30.18173599 209.44950867]
[-38.46096039 200.61108398]
[-51.63012314 207.79252625]
[-64.79928589 214.97396851]
[-77.88002777 222.31524658]
[-90.87040710 229.81524658]
[-103.86078644 237.31524658]
[-105.60169983 252.62130737]
[-115.90110779 263.83627319]
[-130.65489197 266.80105591]
[-144.16369629 260.58413696]
[-157.15406799 268.08413696]
[-170.14445496 275.58413696]
[-183.13484192 283.08413696]
[-186.98268127 298.41284180]
[-200.58528137 306.45925903]
[-215.87246704 302.44958496]
[-223.77461243 288.76266479]
[-219.60351562 273.51870728]
[-205.83381653 265.76171875]
[-190.63484192 270.09375000]
[-177.64445496 262.59375000]
[-164.65406799 255.09375000]
[-151.66369629 247.59375000]
[-150.29330444 232.78631592]
[-140.34883118 221.49156189]
[-125.48667908 218.17950439]
[-111.36078644 224.32485962]
[-98.37040710 216.82485962]
[-85.38002777 209.32485962]
[-81.11634827 203.19258118]
[-71.98072815 201.80480957]
[-58.81156921 194.62336731]
[-45.64240646 187.44192505]
[-49.03998566 169.73774719]
[-46.29795456 151.89750671]
[-37.71919632 135.99118042]
[-24.28471375 123.86953735]
[-7.54146338 116.94866943]
[10.57575226 116.04468536]
[27.96787643 121.27743530]
[42.61478424 132.05490112]
[54.81413269 123.32701111]
[67.01347351 114.59912872]
[79.21282196 105.87124634]
[91.41217041 97.14336395]
[92.58515930 93.34769440]
[95.47310638 90.11454010]
[99.77243805 88.21842194]
[104.83591461 88.26229858]
[117.63980865 80.44818878]
[130.44371033 72.63408661]
[143.24760437 64.81997681]
[156.05149841 57.00587463]
[168.85539246 49.19176865]
[181.65928650 41.37766647]
[194.46319580 33.56356049]
[198.28329468 21.17341232]
[209.19409180 14.94485950]
[221.02287292 17.76910782]
[234.01324463 10.26910782]
[247.00363159 2.76910758]
[259.99401855 -4.73089266]
[262.23416138 -15.50763798]
[269.92013550 -23.07524681]
[280.29650879 -25.06442642]
[289.82897949 -21.04695892]
[303.16912842 -27.90559387]
[311.90438843 -41.09672546]
[326.76110840 -40.03506470]
[340.10122681 -46.89369965]
[353.44137573 -53.75233459]
[366.78149414 -60.61096954]
[380.12161255 -67.46960449]
[390.60345459 -87.21427917]
[412.16806030 -85.88782501]
[424.77789307 -94.01140594]
[437.38769531 -102.13497925]
[449.99752808 -110.25855255]
[460.03823853 -123.91946411]
[475.94482422 -118.05286407]
[474.71087646 -101.14388275]
[458.12109375 -97.64873505]
[445.51129150 -89.52516174]
[432.90145874 -81.40158081]
[420.29165649 -73.27800751]
[420.29998779 -65.17347717]
[417.01016235 -57.66313171]
[410.90798950 -52.04578781]
[402.97232056 -49.32606125]
[394.51846313 -50.03524017]
[386.98025513 -54.12947083]
[373.64013672 -47.27083588]
[360.29998779 -40.41220093]
[346.95986938 -33.55356598]
[333.61972046 -26.69493294]
[325.83865356 -13.99437809]
[310.02777100 -14.56546211]
[296.68762207 -7.70682716]
[287.55850220 9.26958847]
[267.49401855 8.25948906]
[254.50363159 15.75948906]
[241.51324463 23.25948906]
[228.52287292 30.75948906]
[220.64344788 46.39060211]
[202.27729797 46.36745453]
[189.47340393 54.18156052]
[176.66949463 61.99566650]
[163.86560059 69.80976868]
[151.06170654 77.62387848]
[138.25781250 85.43798065]
[125.45391846 93.25209045]
[112.65001678 101.06619263]
[100.14005280 109.34270477]
[87.94070435 118.07059479]
[75.74136353 126.79847717]
[63.54201508 135.52635193]
[51.34267044 144.25424194]
[55.67438889 155.68301392]
[57.29424667 167.78793335]
[56.12166595 179.93499756]
[52.22222137 191.48892212]
[45.80397415 201.84643555]
[37.20640182 210.46775818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 38]
[7 37]
[8 36]
[9 34]
[10 33]
[11 32]
[15 28]
[16 27]
[17 26]
[18 25]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[54 117]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[64 108]
[65 107]
[66 106]
[67 105]
[71 103]
[72 102]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
