%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCUCAGUCGAUUUAUGAAACUGCGGCCACCCCUAUCGCUACUAAUACCAUCGCCUCCACUUUA\
) } def
/len { sequence length } bind def

/coor [
[81.64721680 200.47331238]
[71.39787292 189.27888489]
[65.88817596 175.13647461]
[65.86328125 159.95874023]
[71.32654572 145.79832458]
[81.53911591 134.57032776]
[95.11981964 127.79324341]
[93.69397736 112.86116028]
[85.74091339 101.36157990]
[91.37394714 88.56468201]
[89.94810486 73.63259888]
[88.52226257 58.70052338]
[87.09642029 43.76844406]
[72.22980499 41.23488998]
[58.53625107 34.94425964]
[46.94669724 25.33082390]
[38.24732971 13.05451965]
[33.02625275 -1.04434776]
[31.63373947 -16.00261879]
[34.15873337 -30.80008316]
[40.42319107 -44.42905807]
[49.99462891 -55.96300888]
[62.21597290 -64.61954498]
[76.25066376 -69.81347656]
[74.82482147 -84.74555206]
[73.39897919 -99.67763519]
[71.97314453 -114.60971069]
[58.21393967 -121.58738708]
[50.43109894 -134.90769958]
[51.10809708 -150.32020569]
[60.02890396 -162.90681458]
[74.34692383 -168.65119934]
[89.49332428 -165.72032166]
[100.63495636 -155.04945374]
[104.21655273 -140.04359436]
[99.09524536 -125.49107361]
[86.90522003 -116.03555298]
[88.33106232 -101.10346985]
[89.75690460 -86.17139435]
[91.18273926 -71.23931122]
[105.94676971 -68.79532623]
[119.58551788 -62.60813522]
[131.16679382 -53.09402084]
[139.89735413 -40.89689636]
[145.17715454 -26.84469986]
[146.64067078 -11.89320946]
[144.18217468 2.93896770]
[137.96333313 16.63978958]
[128.40257263 28.27283669]
[116.14698029 37.04130554]
[102.02850342 42.34260178]
[103.45433807 57.27468109]
[104.88018036 72.20675659]
[106.30602264 87.13883972]
[114.25908661 98.63842010]
[108.62605286 111.43531799]
[110.05189514 126.36740112]
[124.66975403 130.45185852]
[136.82267761 139.54420471]
[144.86709595 152.41477966]
[147.71504211 167.32295227]
[144.98138428 182.25251770]
[137.03582764 195.18434143]
[124.95291901 204.36953735]
[110.36678314 208.56587219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 57]
[8 56]
[10 54]
[11 53]
[12 52]
[13 51]
[24 40]
[25 39]
[26 38]
[27 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
