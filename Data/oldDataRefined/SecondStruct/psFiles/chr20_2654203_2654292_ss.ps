%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGUCCGAAACGUCACUACUGAACGCUUAGUUUAGACAGUUAGGGGACUCACGUUAGUGACUACAGAGGUACAGAGACUCGUUACGGAC\
) } def
/len { sequence length } bind def

/coor [
[91.56060791 260.50601196]
[75.24933624 258.81060791]
[68.80993652 243.72860718]
[78.86671448 230.77510071]
[80.41747284 215.85548401]
[81.96823120 200.93586731]
[83.51898956 186.01623535]
[85.06974792 171.09661865]
[78.68970490 157.63763428]
[87.81226349 144.71131897]
[89.36302185 129.79170227]
[90.91378021 114.87207031]
[87.57596588 100.24815369]
[79.70539856 87.47888947]
[71.83483124 74.70961761]
[63.96426392 61.94035339]
[56.09369659 49.17108917]
[48.22312927 36.40182114]
[40.35256195 23.63255501]
[28.78826332 14.07917690]
[14.76301956 8.76010418]
[0.73777550 3.44103074]
[-13.28746796 -1.87804258]
[-27.31271172 -7.19711590]
[-41.33795547 -12.51618958]
[-56.49885559 -7.26960707]
[-69.97584534 -15.97307873]
[-71.43051910 -31.95004463]
[-59.74699020 -42.94434738]
[-43.88785172 -40.52209473]
[-36.01888275 -26.54143333]
[-21.99363899 -21.22235870]
[-7.96839476 -15.90328598]
[6.05684900 -10.58421326]
[20.08209229 -5.26513958]
[34.10733795 0.05393374]
[40.12898254 -4.41705990]
[52.17227173 -13.35904694]
[58.19392014 -17.83003998]
[57.15904999 -32.79430008]
[56.12418365 -47.75856018]
[55.08931732 -62.72281647]
[45.48563766 -76.01572418]
[52.44177246 -90.86645508]
[68.80184937 -91.99785614]
[77.73601532 -78.24603271]
[70.05357361 -63.75768661]
[71.08843994 -48.79342651]
[72.12331390 -33.82916641]
[73.15818024 -18.86490822]
[73.42845917 -9.89221573]
[71.71327209 -1.77804530]
[68.37168884 5.07569456]
[63.83740997 10.37638664]
[58.58955765 13.95313644]
[53.12182617 15.76198769]
[60.99239349 28.53125381]
[68.86296082 41.30052185]
[76.73352814 54.06978607]
[84.60409546 66.83905029]
[92.47466278 79.60832214]
[100.34523010 92.37758636]
[103.38745117 89.41403198]
[107.92898560 87.74154663]
[113.44871521 87.91053009]
[119.25118256 90.27458954]
[124.53662109 94.94055176]
[138.36990356 100.74055481]
[152.20320129 106.54055023]
[164.85484314 97.71221924]
[180.27189636 97.14818573]
[193.53482056 105.02843475]
[200.41148376 118.83840179]
[198.70755005 134.17137146]
[188.96675110 146.13465881]
[174.29733276 150.91082764]
[159.38024902 146.97579956]
[148.97550964 135.58525085]
[146.40319824 120.37384796]
[132.56991577 114.57384491]
[118.73661804 108.77384186]
[105.83340454 116.42282867]
[104.28263855 131.34245300]
[102.73188019 146.26208496]
[109.00100708 160.78820801]
[99.98937225 172.64736938]
[98.43861389 187.56700134]
[96.88785553 202.48661804]
[95.33709717 217.40625000]
[93.78633881 232.32586670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[10 84]
[11 83]
[12 82]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[39 50]
[40 49]
[41 48]
[42 47]
[67 81]
[68 80]
[69 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
