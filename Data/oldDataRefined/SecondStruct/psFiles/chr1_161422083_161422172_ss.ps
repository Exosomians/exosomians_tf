%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCGUUUGAAGGGACUGGCCCUUAGCUUGGGCCCGGCGCCGCCACUUUCGCGGCUUAGGAUCGGUGAUCUGGUGGUCCCUCCCGACCA\
) } def
/len { sequence length } bind def

/coor [
[95.84243011 349.44992065]
[80.40850067 347.84570312]
[68.88765717 337.45101929]
[65.70988464 322.26281738]
[72.09711456 308.12127686]
[85.59331512 300.46411133]
[87.14408112 285.54449463]
[88.69483948 270.62487793]
[82.31478882 257.16589355]
[91.43734741 244.23957825]
[85.05730438 230.78059387]
[94.17986298 217.85427856]
[95.73062134 202.93464661]
[97.28137970 188.01502991]
[98.83213806 173.09541321]
[100.38289642 158.17578125]
[101.93365479 143.25616455]
[103.48441315 128.33653259]
[66.12945557 109.33763885]
[51.77065659 104.99885559]
[37.41186523 100.66007996]
[23.05307007 96.32129669]
[8.69427586 91.98251343]
[-4.29275417 100.69291687]
[-19.83470917 98.96617889]
[-30.59315681 87.61761475]
[-31.48828316 72.00566864]
[-22.09743881 59.50183105]
[-6.85469341 56.01002121]
[7.04279470 63.17897034]
[13.03305721 77.62371826]
[27.39185143 81.96250153]
[41.75064468 86.30128479]
[56.10943985 90.64006805]
[70.46823120 94.97884369]
[76.85286713 91.04356384]
[68.98251343 78.27416229]
[81.75203705 70.40402222]
[89.62213135 83.17299652]
[96.00676727 79.23770905]
[98.58315277 64.46062469]
[101.15953827 49.68354034]
[103.73592377 34.90645599]
[106.31230927 20.12937164]
[96.10000610 8.28695583]
[95.94077301 -7.34981728]
[105.90980530 -19.39773941]
[121.30002594 -22.16815186]
[134.84463501 -14.35294914]
[140.14830017 0.35776797]
[134.70678711 15.01804924]
[121.08939362 22.70575714]
[118.51300812 37.48284149]
[115.93662262 52.25992584]
[113.36023712 67.03701019]
[110.78385162 81.81409454]
[115.56053925 87.59624481]
[123.60670471 74.93688965]
[138.13285828 78.67732239]
[139.06431580 93.64836884]
[125.11392212 99.16054535]
[129.89060974 104.94269562]
[144.88836670 105.20159912]
[159.88613892 105.46051025]
[174.88389587 105.71942139]
[189.88166809 105.97833252]
[203.95294189 97.55625153]
[218.14877319 105.76663208]
[217.86570740 122.16333771]
[203.39494324 129.87884521]
[189.62275696 120.97609711]
[174.62500000 120.71718597]
[159.62722778 120.45827484]
[144.62945557 120.19937134]
[129.63169861 119.94046021]
[118.40403748 129.88729858]
[116.85327911 144.80691528]
[115.30252075 159.72654724]
[113.75176239 174.64616394]
[112.20100403 189.56579590]
[110.65023804 204.48541260]
[109.09947968 219.40502930]
[115.36860657 233.93116760]
[106.35697174 245.79032898]
[112.62609863 260.31646729]
[103.61445618 272.17562866]
[102.06369781 287.09524536]
[100.51293945 302.01486206]
[112.14587402 312.28396606]
[115.48822021 327.43679810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 88]
[7 87]
[8 86]
[10 84]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
