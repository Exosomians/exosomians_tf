%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACCGUAGGAAGACUGCGACAUAAGUAGCCAAGAUUGAUUAGUGCGUCCGAAACAGAAGUCAUAUAAGUUAGUGUAUAACACCCAUUUGGACUAGAAAGACUUUCUACUGUUUUUGCCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[102.49645233 292.11520386]
[106.98225403 277.63580322]
[116.15224457 265.56570435]
[128.89910889 257.36245728]
[125.56130219 242.73855591]
[115.18590546 232.05209351]
[119.65838623 216.87620544]
[116.32057190 202.25228882]
[112.98275757 187.62837219]
[109.64494324 173.00445557]
[106.30712891 158.38053894]
[102.96931458 143.75660706]
[99.63150024 129.13269043]
[96.29368591 114.50877380]
[92.87915802 114.02074432]
[89.51544952 112.70965576]
[75.84285736 118.87895966]
[62.17027283 125.04826355]
[48.49768448 131.21757507]
[44.43684387 146.31867981]
[31.58971214 155.23413086]
[16.02230453 153.75430298]
[5.08508015 142.57794189]
[3.94225931 126.98217773]
[13.13344765 114.33084869]
[28.31884766 110.59753418]
[42.32837677 117.54498291]
[56.00096512 111.37567902]
[69.67355347 105.20636749]
[83.34613800 99.03706360]
[69.49501801 104.79434967]
[54.53371811 105.87117767]
[40.00087738 102.15681458]
[27.39105797 94.03324127]
[18.00106239 82.33589172]
[12.79656601 68.26772308]
[12.31280136 53.27552795]
[16.59951782 38.90110397]
[25.21586609 26.62272835]
[37.27573776 17.70311546]
[51.53889084 13.05956650]
[66.53848267 13.16962433]
[80.73195648 18.02197075]
[92.65964508 27.11758995]
[101.09489441 39.52108002]
[105.17021942 53.95685959]
[104.46651459 68.94034576]
[99.05646515 82.93006134]
[104.88298798 69.10791779]
[110.70951080 55.28577423]
[116.53603363 41.46363068]
[122.36255646 27.64148712]
[128.18907166 13.81934452]
[134.01559448 -0.00279876]
[124.23247528 -10.28258419]
[119.14103699 -23.48217964]
[119.48464966 -37.58204651]
[125.17781067 -50.43849564]
[135.32423401 -60.10960388]
[148.35778809 -65.14851379]
[162.28413391 -64.81983948]
[168.45344543 -78.49242401]
[167.07669067 -94.25361633]
[179.36384583 -102.67234802]
[185.53314209 -116.34493256]
[191.70245361 -130.01751709]
[197.87176514 -143.69010925]
[204.04106140 -157.36270142]
[198.21723938 -172.05482483]
[204.56466675 -186.52844238]
[219.31753540 -192.19660950]
[233.72325134 -185.69651794]
[239.23512268 -170.88453674]
[232.58308411 -156.54835510]
[217.71365356 -151.19338989]
[211.54434204 -137.52079773]
[205.37504578 -123.84821320]
[199.20573425 -110.17562866]
[193.03642273 -96.50303650]
[194.85446167 -81.71980286]
[182.12603760 -72.32312012]
[175.95672607 -58.65053177]
[186.43878174 -46.65628815]
[190.68154907 -31.24252319]
[187.79310608 -15.45966339]
[178.29804993 -2.45394111]
[164.04301453 5.15979290]
[147.83773804 5.82372332]
[142.01121521 19.64586639]
[136.18469238 33.46800995]
[130.35818481 47.29015350]
[124.53165436 61.11229706]
[118.70513153 74.93444061]
[112.87860870 88.75658417]
[124.07015991 78.76912689]
[138.93978882 76.79574585]
[152.34895325 83.51840210]
[159.66383362 96.61391449]
[158.35661316 111.55684662]
[148.87899780 123.18332672]
[134.50622559 127.47556305]
[120.20511627 122.95027924]
[110.91761017 111.17095947]
[114.25542450 125.79488373]
[117.59323883 140.41879272]
[120.93105316 155.04272461]
[124.26886749 169.66664124]
[127.60667419 184.29055786]
[130.94448853 198.91447449]
[134.28230286 213.53839111]
[144.89643860 225.27085876]
[140.18521118 239.40074158]
[143.52302551 254.02465820]
[158.56681824 255.88485718]
[172.06570435 262.78091431]
[182.38964844 273.88012695]
[188.29199219 287.84213257]
[189.05996704 302.98104858]
[184.60086060 317.46868896]
[175.45312500 329.55566406]
[162.72140503 337.78237915]
[147.94309998 341.15542603]
[132.90275574 339.26748657]
[119.41660309 332.34658813]
[109.11312866 321.22839355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 113]
[5 112]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[14 103]
[16 30]
[17 29]
[18 28]
[19 27]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[61 82]
[62 81]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
