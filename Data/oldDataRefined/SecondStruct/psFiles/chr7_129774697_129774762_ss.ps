%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUAACCGUGACGUGUACUAACGAGUCUCGCCUCUCUGUGUUCGUUUUUACACGAUCACGGUUUU\
) } def
/len { sequence length } bind def

/coor [
[80.60708618 356.36373901]
[66.48905945 349.63949585]
[60.04333878 335.39215088]
[64.31339264 320.34887695]
[77.28304291 311.61260986]
[78.68766785 296.67852783]
[80.09228516 281.74441528]
[81.49691010 266.81033325]
[82.90153503 251.87625122]
[84.30615234 236.94215393]
[85.71077728 222.00807190]
[87.11540222 207.07397461]
[88.16954041 192.11106873]
[88.87262726 177.12754822]
[89.57571411 162.14404297]
[90.27879333 147.16052246]
[90.98188019 132.17701721]
[91.68495941 117.19349670]
[82.00868988 106.40850830]
[82.68784332 91.93491364]
[93.33152771 82.10341644]
[94.03460693 67.11990356]
[94.73769379 52.13639069]
[95.44077301 37.15287781]
[96.14385986 22.16936302]
[96.84694672 7.18585014]
[94.07685852 1.92192495]
[93.89688110 -3.31343007]
[95.78746796 -7.44312716]
[98.84784698 -9.80502415]
[101.64475250 -24.54196358]
[104.44165039 -39.27890015]
[95.34002686 -52.19927216]
[98.12256622 -67.75668335]
[111.13844299 -76.72119904]
[126.66556549 -73.77433014]
[135.49197388 -60.66440201]
[132.38110352 -45.16930389]
[119.17858887 -36.48199844]
[116.38169098 -21.74506187]
[113.58478546 -7.00812387]
[111.83045959 7.88893414]
[111.12737274 22.87244797]
[110.42428589 37.85596085]
[109.72120667 52.83947372]
[109.01811981 67.82299042]
[108.31504059 82.80650330]
[117.99131012 93.59149170]
[117.31215668 108.06508636]
[106.66847229 117.89658356]
[105.96539307 132.88009644]
[105.26230621 147.86361694]
[104.55922699 162.84712219]
[103.85614014 177.83064270]
[103.15305328 192.81414795]
[105.94784546 201.88772583]
[102.04949188 208.47860718]
[100.64486694 223.41268921]
[99.24024200 238.34678650]
[97.83562469 253.28086853]
[96.43099976 268.21496582]
[95.02637482 283.14904785]
[93.62175751 298.08312988]
[92.21713257 313.01724243]
[103.33036041 324.01858521]
[104.72056580 339.59426880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
