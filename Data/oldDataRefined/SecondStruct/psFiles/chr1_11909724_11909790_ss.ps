%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAAACUCACACAAAGAACAAAGUCUCAUUUAUGCUUGGCAGCAUUACCGAUUCCCGUAGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[-27.05274582 201.16574097]
[-33.47614670 214.77914429]
[-42.50869751 226.82064819]
[-53.78051758 236.79716492]
[-66.83003235 244.30017090]
[-81.12287903 249.02239990]
[-96.07376862 250.77050781]
[-111.07046509 249.47288513]
[-125.49887848 245.18267822]
[-138.76815796 238.07557678]
[-150.33496094 228.44259644]
[-159.72560120 216.67822266]
[-166.55555725 203.26417542]
[-170.54513550 188.74975586]
[-171.53099060 173.72933960]
[-169.47271729 158.81799316]
[-164.45462036 144.62631226]
[-156.68218994 131.73545837]
[-146.47369385 120.67329407]
[-134.24716187 111.89280701]
[-120.50328064 105.75355530]
[-105.80483246 102.50693512]
[-90.75371552 102.28589630]
[-75.96627045 105.09948730]
[-62.04802704 110.83250427]
[-49.56893158 119.25016022]
[-39.03999329 130.00778198]
[-30.89236832 142.66484070]
[-16.90528488 137.24621582]
[-2.91820168 131.82759094]
[11.06888199 126.40896606]
[25.05596542 120.99034119]
[39.04304886 115.57171631]
[53.03013229 110.15309143]
[67.01721191 104.73446655]
[81.00429535 99.31584167]
[91.92267609 82.79356384]
[111.60899353 84.94889069]
[124.71333313 77.64981842]
[137.81767273 70.35075378]
[150.92199707 63.05168533]
[152.64765930 47.63086700]
[163.13273621 36.19219971]
[178.34547424 33.13409042]
[192.43629456 39.63244247]
[199.98696899 53.18850708]
[198.09411621 68.58969879]
[187.48558044 79.91394806]
[172.24055481 82.80684662]
[158.22106934 76.15602112]
[145.11672974 83.45508575]
[132.01239014 90.75415802]
[118.90805817 98.05322266]
[117.57200623 107.24771881]
[112.03760529 114.71057129]
[103.62715149 118.65873718]
[94.35009766 118.14891815]
[86.42292023 113.30292511]
[72.43583679 118.72154999]
[58.44875717 124.14017487]
[44.46167374 129.55879211]
[30.47459030 134.97741699]
[16.48750687 140.39604187]
[2.50042343 145.81466675]
[-11.48666000 151.23329163]
[-25.47374344 156.65191650]
[-22.96790886 171.49461365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[38 53]
[39 52]
[40 51]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
