%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUGUUCCAAAAAAGGAUCACAGGUUUCUCGACAAGGAGAAACCUGAUUGUCAAUUUAAAUGUCCCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[100.78865814 168.40959167]
[95.48767853 154.37748718]
[92.92099762 139.59872437]
[93.18025970 124.60095978]
[96.25504303 109.92346954]
[82.58661652 116.10198975]
[73.19850922 128.83674622]
[58.41405487 127.02867889]
[44.74562836 133.20719910]
[31.07719994 139.38571167]
[25.73225021 154.25874329]
[11.40056324 160.92045593]
[-3.41512704 155.41854858]
[-9.92493343 141.01722717]
[-4.26670313 126.26054382]
[10.20263577 119.90335846]
[24.89868164 125.71729279]
[38.56710815 119.53877258]
[52.23553467 113.36025238]
[60.64598465 101.06742096]
[76.40809631 102.43356323]
[90.07652283 96.25504303]
[97.39195251 83.15983582]
[95.48668671 68.28132629]
[93.58141327 53.40282059]
[91.67614746 38.52431488]
[89.77088165 23.64580727]
[87.86561584 8.76730156]
[85.96035004 -6.11120510]
[84.05507660 -20.98971176]
[82.14981079 -35.86821747]
[80.24454498 -50.74672318]
[67.58856964 -60.21255112]
[65.41551971 -75.86672974]
[75.01461792 -88.42192078]
[90.69090271 -90.42934418]
[103.14389801 -80.69803619]
[104.98547363 -65.00141144]
[95.12305450 -52.65199280]
[97.02832031 -37.77348709]
[98.93358612 -22.89497948]
[100.83885193 -8.01647186]
[102.74411774 6.86203432]
[104.64939117 21.74054146]
[106.55465698 36.61904907]
[108.45992279 51.49755478]
[110.36518860 66.37606049]
[112.27045441 81.25457001]
[123.15972137 70.93836975]
[135.79521179 62.85478973]
[149.72578430 57.29246521]
[164.45399475 54.45000076]
[179.45397949 54.42889023]
[194.19013977 57.22989273]
[208.13630676 62.75299072]
[220.79449463 70.80097198]
[231.71275330 81.08648682]
[240.50122070 93.24225616]
[246.84608459 106.83426666]
[250.52081299 121.37718201]
[251.39418030 136.35173035]
[249.43501282 151.22323608]
[244.71325684 165.46069336]
[237.39750671 178.55572510]
[227.74899292 190.04075623]
[216.11221313 199.50570679]
[202.90267944 206.61262512]
[188.59205627 211.10774231]
[173.69131470 212.83055115]
[158.73251343 211.71954346]
[144.24978638 207.81437683]
[130.76022339 201.25450134]
[118.74551392 192.27415466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[8 19]
[9 18]
[10 17]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
