%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUCGACCAAGGUACCCAAUUACCACUCGUGGGACCUGAGACUUAGUUCGCUAGGCUCAAGUUUAGAGCCACCAUGGAACCACAGACGACCGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[120.67771912 226.88787842]
[117.40557098 212.24911499]
[114.13342285 197.61036682]
[110.86127472 182.97161865]
[107.58912659 168.33287048]
[104.31697845 153.69410706]
[90.52053833 153.02673340]
[77.34738922 148.87283325]
[65.66364288 141.50552368]
[56.23752213 131.40922546]
[49.68879318 119.24777222]
[46.44803619 105.82076263]
[31.45543861 105.34960175]
[16.46283913 104.87844086]
[1.47024107 104.40727997]
[-7.38750315 107.30524445]
[-13.98380375 103.67848969]
[-28.95420456 102.73662567]
[-43.92460632 101.79476929]
[-58.89500809 100.85291290]
[-66.79018402 113.96492004]
[-79.88047791 121.89604187]
[-95.15784454 122.82376099]
[-109.11165619 116.53488922]
[-118.53542328 104.47457886]
[-121.26363373 89.41418457]
[-116.66936493 74.81448364]
[-105.80834961 64.03037262]
[-91.17636871 59.53997040]
[-76.13574219 62.37513733]
[-64.14270020 71.88436890]
[-57.95314789 85.88251495]
[-42.98274612 86.82437134]
[-28.01234627 87.76622772]
[-13.04194546 88.70808411]
[1.94140244 89.41468048]
[16.93400002 89.88584137]
[31.92659950 90.35700226]
[46.91919708 90.82816315]
[50.72294617 78.24072266]
[57.46311569 66.94992065]
[66.73806763 57.62857437]
[77.99509430 50.83214188]
[90.56339264 46.96562958]
[103.69402313 46.25943375]
[116.60453033 48.75564575]
[128.52557373 54.30551529]
[138.74676514 62.57831573]
[150.88201904 53.76153946]
[163.01727295 44.94475937]
[175.15252686 36.12798309]
[172.86177063 18.86157036]
[179.49600220 2.85177231]
[193.18870544 -7.62687063]
[210.20175171 -9.82440567]
[225.94567871 -3.23669410]
[237.50337219 -12.79805374]
[249.06106567 -22.35941315]
[260.61877441 -31.92077446]
[272.17648315 -41.48213196]
[272.10470581 -57.11955261]
[282.14096069 -69.11152649]
[297.54644775 -71.79581451]
[311.04711914 -63.90497208]
[316.26843262 -49.16481781]
[310.74499512 -34.53520203]
[297.08480835 -26.92378235]
[281.73782349 -29.92443466]
[270.18014526 -20.36307526]
[258.62243652 -10.80171490]
[247.06472778 -1.24035525]
[235.50703430 8.32100487]
[238.97164917 20.67405891]
[237.43870544 33.45936203]
[231.10580444 44.72547531]
[220.90596008 52.73892593]
[208.37023926 56.25091553]
[195.39805603 54.69181824]
[183.96931458 48.26323700]
[171.83406067 57.08001328]
[159.69879150 65.89679718]
[147.56353760 74.71356964]
[153.27317810 92.02116394]
[152.88471985 110.24208069]
[146.44262695 127.29059601]
[134.68431091 141.21520996]
[118.95572662 150.42196655]
[122.22787476 165.06071472]
[125.50002289 179.69946289]
[128.77217102 194.33822632]
[132.04432678 208.97697449]
[135.31646729 223.61572266]
[149.61027527 229.65447998]
[157.59588623 242.95898438]
[156.20265198 258.41339111]
[145.96629333 270.07513428]
[130.82292175 273.46008301]
[116.59545898 267.26663208]
[108.75466156 253.87628174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[12 39]
[13 38]
[14 37]
[15 36]
[17 35]
[18 34]
[19 33]
[20 32]
[48 82]
[49 81]
[50 80]
[51 79]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
