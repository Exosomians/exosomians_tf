%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUAAACUCAAAAACUCCAGUCUUAAAUUUUCAUCGACGGCUUUGGGCCCUAGCUUGGUCCCUGGAAAUCUAGAAGUCAGAUUGCGAGAGGGUUGACUCGAUAAAGCCGUGCAAGACCCAAC\
) } def
/len { sequence length } bind def

/coor [
[-73.66303253 341.93841553]
[-80.21977234 355.42950439]
[-86.77651215 368.92056274]
[-93.33324432 382.41165161]
[-99.88998413 395.90274048]
[-93.34490204 410.10470581]
[-97.50978851 425.17745972]
[-110.41809845 434.00408936]
[-125.97492981 432.41693115]
[-136.83482361 421.16540527]
[-137.87005615 405.56213379]
[-128.59184265 392.97448730]
[-113.38105774 389.34597778]
[-106.82432556 375.85491943]
[-100.26758575 362.36383057]
[-93.71085358 348.87274170]
[-87.15411377 335.38168335]
[-97.29219818 321.58056641]
[-99.12019348 304.46508789]
[-92.05347443 288.67300415]
[-77.92974854 278.52853394]
[-60.53211975 276.85824585]
[-54.66151428 263.05474854]
[-48.79090881 249.25128174]
[-42.92030334 235.44779968]
[-37.04970169 221.64431763]
[-42.06087875 216.96885681]
[-45.91937637 211.28585815]
[-48.42742157 204.87434387]
[-49.45376205 198.05099487]
[-48.94050598 191.15446472]
[-46.90635681 184.52857971]
[-43.44599915 178.50517273]
[-38.72573853 173.38755798]
[-32.97549438 169.43513489]
[-26.47762680 166.85031128]
[-19.55306625 165.76815796]
[-12.54545784 166.24934387]
[-5.80411530 168.27674866]
[3.31483936 156.36689758]
[12.43379402 144.45704651]
[21.55274773 132.54718018]
[30.67170334 120.63732910]
[39.79065704 108.72747803]
[48.90961075 96.81761932]
[58.02856445 84.90776062]
[60.09542084 70.05084229]
[54.57355118 56.10419464]
[49.05168533 42.15754700]
[43.52981567 28.21089935]
[38.00794601 14.26425266]
[23.11370277 9.50027657]
[14.81003284 -3.75050068]
[17.01767921 -19.23146629]
[28.69425774 -29.63298416]
[44.32644272 -30.04377174]
[56.53319931 -20.26987076]
[59.55086517 -4.92621756]
[51.95459366 8.74238491]
[57.47646332 22.68903160]
[62.99833298 36.63567734]
[68.52020264 50.58232498]
[74.04206848 64.52897644]
[89.04088593 64.34048462]
[94.21052551 50.25947571]
[99.38017273 36.17846680]
[104.54981232 22.09745979]
[101.21564484 6.04083014]
[113.63244629 -4.67154694]
[129.02688599 0.98030317]
[131.56246948 17.18224144]
[118.63082123 27.26710320]
[113.46118164 41.34811020]
[108.29153442 55.42911911]
[103.12189484 69.51012421]
[113.61128235 77.07818604]
[118.69421387 87.17996216]
[133.17494202 83.26734161]
[147.65567017 79.35472107]
[162.13639832 75.44209290]
[176.61711121 71.52947235]
[191.09783936 67.61685181]
[194.95623779 56.23117065]
[203.77783203 48.24269104]
[215.25428772 45.58345795]
[226.45851135 48.81129074]
[234.59117126 56.99764252]
[246.36169434 45.57893753]
[262.05969238 50.32281113]
[265.53643799 66.34917450]
[253.21533203 77.17147827]
[237.77127075 71.65666199]
[228.91604614 87.58491516]
[210.95150757 92.17057800]
[195.01046753 82.09757233]
[180.52973938 86.01020050]
[166.04901123 89.92282104]
[151.56828308 93.83544159]
[137.08757019 97.74806213]
[122.60684204 101.66069031]
[118.14215088 116.11232758]
[104.92722321 125.38662720]
[87.78167725 124.58824158]
[73.92504120 112.81296539]
[69.93842316 94.02671814]
[60.81946945 105.93657684]
[51.70051193 117.84642792]
[42.58155823 129.75628662]
[33.46260452 141.66613770]
[24.34364891 153.57600403]
[15.22469521 165.48585510]
[6.10574102 177.39570618]
[12.54481030 201.05603027]
[0.15019481 221.94105530]
[-23.24622154 227.51492310]
[-29.11682701 241.31840515]
[-34.98743057 255.12188721]
[-40.85803604 268.92535400]
[-46.72864151 282.72885132]
[-37.94520569 292.36358643]
[-33.51146698 304.57409668]
[-34.06267929 317.50588989]
[-39.47990417 329.20950317]
[-48.91334915 337.93426514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[22 119]
[23 118]
[24 117]
[25 116]
[26 115]
[39 112]
[40 111]
[41 110]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[64 75]
[65 74]
[66 73]
[67 72]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
