%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACAUUCAGGCACCCGUUAAUACUCUUACUGACGCGGCCACUUCGAAGUCCCCCAAACCUACUCUUA\
) } def
/len { sequence length } bind def

/coor [
[132.42877197 266.67984009]
[121.97182465 255.88386536]
[113.28553009 243.61811829]
[106.57348633 230.17010498]
[101.99304199 215.85508728]
[99.65156555 201.00860596]
[99.60395050 185.97869873]
[101.85131073 171.11767578]
[106.34095764 156.77392578]
[112.96765900 143.28366089]
[121.57606506 130.96311951]
[110.73414612 120.59717560]
[99.89221954 110.23123169]
[92.09394073 107.25038910]
[88.80963898 99.14865112]
[73.68037415 94.52091217]
[70.47750854 79.97474670]
[60.11157227 69.13282776]
[49.74563217 58.29090118]
[39.37969208 47.44897842]
[29.01375198 36.60705566]
[14.11196709 40.32624817]
[-0.64852554 36.08084488]
[-11.29722786 25.01284218]
[-14.96969128 10.09947300]
[-10.67804337 -4.64763975]
[0.42328492 -15.26159668]
[15.34809208 -18.88729668]
[30.08168030 -14.54944515]
[40.66078568 -3.41490126]
[44.23968887 11.52119732]
[39.85567474 26.24111557]
[50.22161484 37.08303833]
[60.58755493 47.92496109]
[70.95349121 58.76688385]
[81.31943512 69.60881042]
[95.70726013 73.46105194]
[99.65155792 88.78270721]
[110.25816345 99.38931274]
[121.10008240 109.75524902]
[131.94200134 120.12119293]
[143.86392212 110.96868896]
[157.04330444 103.74342346]
[171.17118835 98.61476135]
[185.91641235 95.70293427]
[200.93333435 95.07618713]
[215.86990356 96.74922180]
[230.37602234 100.68280792]
[244.11161804 106.78475189]
[256.75473022 114.91200256]
[268.00897217 124.87405396]
[277.61053467 136.43737793]
[285.33435059 149.33091736]
[290.99932861 163.25241089]
[294.47271729 177.87554932]
[295.67306519 192.85752869]
[294.57226562 207.84713745]
[291.19607544 222.49302673]
[285.62368774 236.45185852]
[277.98571777 249.39640808]
[268.46115112 261.02325439]
[257.27334595 271.05984497]
[244.68449402 279.27090454]
[230.98973083 285.46392822]
[216.51007080 289.49380493]
[201.58493042 291.26602173]
[186.56419373 290.73904419]
[171.79994202 287.92520142]
[157.63830566 282.89050293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 41]
[12 40]
[13 39]
[15 38]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
