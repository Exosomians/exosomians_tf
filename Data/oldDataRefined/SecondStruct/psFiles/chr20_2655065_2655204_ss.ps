%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCGGAGGACCACGAAUGGUGUCCGACACAAGAAUGUGACUGACAUAUCUUUCUCCUCCAUCUCAUUUGGAUGGGGUAUAUGUGGAGUCGAGUCCGGGACACGGACCAGACAUAACACUUACCCCCUUGUAUCUUAACU\
) } def
/len { sequence length } bind def

/coor [
[151.84848022 111.57437134]
[136.89407349 110.40581512]
[121.93965149 109.23725128]
[106.98523712 108.06869507]
[91.98896027 108.40288544]
[77.10144806 110.23645020]
[62.21393967 112.07002258]
[47.32642365 113.90358734]
[32.43891144 115.73715973]
[17.55140114 117.57072449]
[14.04554653 120.43582916]
[10.19147778 121.84190369]
[6.50725603 121.86413574]
[3.42943048 120.74337769]
[1.26464331 118.84339142]
[-13.72698021 119.34461975]
[-28.71860313 119.84584045]
[-41.04088974 134.15245056]
[-59.58694839 134.97970581]
[-72.67880249 122.26876068]
[-87.63321686 123.43731689]
[-102.58763123 124.60587311]
[-117.54204559 125.77443695]
[-132.49645996 126.94299316]
[-145.65193176 135.73185730]
[-158.94328308 129.00958252]
[-172.09875488 137.79844666]
[-185.39010620 131.07617188]
[-200.34452820 132.24472046]
[-215.29893494 133.41328430]
[-230.25334167 134.58183289]
[-243.45989990 144.30392456]
[-258.37219238 137.48078918]
[-259.64974976 121.13147736]
[-245.97833252 112.07476807]
[-231.42190552 119.62742615]
[-216.46748352 118.45886993]
[-201.51307678 117.29031372]
[-186.55867004 116.12174988]
[-174.47283936 107.41646576]
[-160.11184692 114.05516815]
[-148.02601624 105.34987640]
[-133.66500854 111.98857880]
[-118.71060181 110.82002258]
[-103.75618744 109.65146637]
[-88.80177307 108.48291016]
[-73.84736633 107.31434631]
[-68.43307495 97.16510773]
[-58.67101669 90.85575104]
[-46.95334625 90.07150269]
[-36.21972275 95.12623596]
[-29.21982765 104.85421753]
[-14.22820473 104.35299683]
[0.76341867 103.85176849]
[15.71783161 102.68321228]
[30.60534477 100.84964752]
[45.49285507 99.01607513]
[60.38036728 97.18251038]
[75.26788330 95.34893799]
[90.15539551 93.51537323]
[77.74581146 85.08908844]
[71.71630096 71.35427094]
[73.91285706 56.51597214]
[83.66297913 45.11706543]
[97.98157501 40.64742279]
[112.48488617 44.47547150]
[122.73258972 55.42921829]
[125.58725739 70.15507507]
[120.17491150 84.14459229]
[108.15379333 93.11428833]
[123.10820770 94.28284454]
[138.06262207 95.45140076]
[153.01702881 96.61995697]
[167.95750427 95.28487396]
[182.46778870 91.48335266]
[196.97807312 87.68183899]
[211.48837280 83.88031769]
[225.99865723 80.07879639]
[240.50894165 76.27727509]
[248.51754761 62.91688538]
[263.28720093 59.26830673]
[275.97491455 66.98561859]
[290.48522949 63.18409729]
[304.99551392 59.38257599]
[310.71835327 45.08029938]
[323.61474609 36.98485565]
[338.62759399 38.02329254]
[350.01394653 47.58829117]
[364.52423096 43.78676987]
[379.03451538 39.98524857]
[387.04312134 26.62485695]
[401.81277466 22.97628021]
[414.50051880 30.69359016]
[429.01080322 26.89207077]
[443.52108765 23.09054947]
[458.03137207 19.28903008]
[472.54165649 15.48751068]
[481.84906006 2.42031050]
[497.87567139 1.69377923]
[508.32720947 13.86524963]
[505.18618774 29.59781075]
[490.86209106 36.82278824]
[476.34317017 29.99779892]
[461.83288574 33.79931641]
[447.32260132 37.60083771]
[432.81231689 41.40235901]
[418.30203247 45.20387650]
[411.02810669 58.15090561]
[396.36676025 62.21289062]
[382.83602905 54.49553680]
[368.32574463 58.29705811]
[353.81546021 62.09857559]
[348.58172607 76.01783752]
[336.00656128 84.28399658]
[320.79742432 83.55186462]
[308.79702759 73.89286804]
[294.28674316 77.69438171]
[279.77645874 81.49590302]
[272.50250244 94.44293213]
[257.84118652 98.50492096]
[244.31045532 90.78756714]
[229.80017090 94.58908081]
[215.28988647 98.39060211]
[200.77960205 102.19212341]
[186.26931763 105.99364471]
[171.75901794 109.79516602]
[185.92718506 114.72091675]
[197.42895508 124.34948730]
[204.77030945 137.43017578]
[206.99766541 152.26388550]
[203.82168579 166.92379761]
[195.65492249 179.50569153]
[183.55818176 188.37522888]
[169.10275269 192.38034058]
[154.16633606 191.00076294]
[140.68905640 184.41571045]
[130.42153931 173.48051453]
[124.69748688 159.61563110]
[124.26040649 144.62199402]
[129.16706848 130.44721985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[15 54]
[16 53]
[17 52]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[26 41]
[28 39]
[29 38]
[30 37]
[31 36]
[74 126]
[75 125]
[76 124]
[77 123]
[78 122]
[79 121]
[82 118]
[83 117]
[84 116]
[88 112]
[89 111]
[90 110]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
