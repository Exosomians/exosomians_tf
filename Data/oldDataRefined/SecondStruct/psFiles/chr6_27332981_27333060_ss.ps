%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUAUCGUCUCCUACCAAAGCUAGGUAGCUGGAGACCCAAUACCCGGGUCGUGCGAAGGCGACGCGGUGAGACGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[74.22116852 266.42694092]
[73.63953400 251.43821716]
[70.60559082 247.44219971]
[70.23435974 241.43655396]
[73.63953400 235.27496338]
[74.22116852 220.28623962]
[74.80279541 205.29751587]
[75.38442993 190.30880737]
[75.96605682 175.32008362]
[76.54769135 160.33135986]
[77.12931824 145.34263611]
[77.71095276 130.35392761]
[67.63082886 119.24576569]
[52.65621185 118.37358856]
[37.68158722 117.50141907]
[22.70696449 116.62924957]
[7.73234320 115.75707245]
[-2.86649489 127.25484467]
[-18.38280869 129.19856262]
[-31.49026871 120.67045593]
[-35.99993515 105.69725037]
[-29.78247833 91.34882355]
[-15.77359390 84.40007019]
[-0.58784753 88.13198090]
[8.60451508 100.78244781]
[23.57913780 101.65462494]
[38.55376053 102.52679443]
[53.52838135 103.39897156]
[68.50300598 104.27114105]
[73.06593323 89.27673340]
[83.56481171 79.60219574]
[77.89181519 65.71633148]
[72.21881866 51.83047485]
[58.93264008 42.21748734]
[60.88356400 25.93479919]
[76.06465149 19.73264313]
[88.85889435 29.99126625]
[86.10467529 46.15747452]
[91.77767181 60.04333496]
[97.45066833 73.92919159]
[102.93213654 73.96946716]
[108.28520966 75.14962006]
[113.27546692 77.41797638]
[117.68439484 80.67519379]
[121.31891632 84.77864075]
[135.51113892 79.92263794]
[149.70336914 75.06662750]
[160.25553894 63.27840805]
[174.80226135 66.47879028]
[188.99447632 61.62278366]
[203.18670654 56.76677322]
[217.37892151 51.91076279]
[231.57115173 47.05475616]
[238.30088806 32.75489426]
[253.19915771 27.48070145]
[267.42706299 34.36126328]
[272.54345703 49.31446075]
[265.51284790 63.46883011]
[250.50640869 68.42683411]
[236.42715454 61.24697876]
[222.23493958 66.10298920]
[208.04270935 70.95899963]
[193.85049438 75.81500244]
[179.65826416 80.67101288]
[170.12120056 92.11190033]
[154.55937195 89.25885010]
[140.36715698 94.11486053]
[126.17492676 98.97086334]
[118.43487549 122.37381744]
[92.69966888 130.93554688]
[92.11804199 145.92427063]
[91.53640747 160.91299438]
[90.95478058 175.90171814]
[90.37314606 190.89042664]
[89.79151917 205.87915039]
[89.20988464 220.86787415]
[88.62825775 235.85658264]
[88.62825775 250.85658264]
[89.20988464 265.84530640]
[92.14579773 285.00335693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[31 40]
[32 39]
[33 38]
[45 68]
[46 67]
[47 66]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
