%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGGUAGGUUCAUGAUUGGUCCGGGCUGGGACGAAUCGAAGGCUCUAGUCUGCUCUAGCCCGCGCAAGUCCCACCAUACCGGUAUCUG\
) } def
/len { sequence length } bind def

/coor [
[92.81770325 353.76226807]
[85.60807037 340.37982178]
[84.07345581 325.25653076]
[88.44786072 310.69860840]
[98.06423950 298.92602539]
[111.45615387 291.73400879]
[109.92218781 276.81265259]
[108.38822937 261.89129639]
[106.85426331 246.96994019]
[105.06577301 232.07695007]
[103.02326965 217.21665955]
[100.98077393 202.35636902]
[90.40403748 197.46371460]
[83.51061249 187.91770935]
[82.16537476 176.09802246]
[86.83145905 165.02366638]
[96.42118835 157.58197021]
[95.39755249 142.61692810]
[94.37391663 127.65190125]
[93.35028076 112.68686676]
[85.70944977 100.97750092]
[91.68468475 88.33676910]
[90.66104889 73.37173462]
[82.00003052 60.13174820]
[88.85075378 46.90613556]
[87.82711792 31.94110298]
[86.80348206 16.97607040]
[85.77984619 2.01103902]
[84.75621033 -12.95399284]
[83.73257446 -27.91902351]
[82.70893860 -42.88405609]
[81.68530273 -57.84908676]
[80.66166687 -72.81411743]
[72.66943359 -75.64772797]
[65.82489777 -80.60693359]
[60.67618561 -87.27549744]
[57.63018417 -95.10110474]
[56.92044830 -103.44107819]
[58.58934021 -111.61518097]
[62.48583984 -118.96107483]
[68.27908325 -124.88799286]
[75.48639679 -128.92425537]
[83.51348114 -130.75477600]
[86.06213379 -145.53666687]
[88.61079407 -160.31855774]
[91.15944672 -175.10046387]
[84.98751831 -190.29385376]
[95.27158356 -203.06765747]
[111.43228149 -200.28126526]
[116.84487152 -184.80108643]
[105.94134521 -172.55180359]
[103.39268494 -157.76991272]
[100.84403229 -142.98802185]
[98.29537201 -128.20611572]
[113.62234497 -111.83386993]
[112.65785980 -89.17973328]
[95.62669373 -73.83775330]
[96.65032959 -58.87272263]
[97.67397308 -43.90769196]
[98.69760895 -28.94265938]
[99.72124481 -13.97762871]
[100.74488068 0.98740292]
[101.76851654 15.95243454]
[102.79215240 30.91746521]
[103.81578827 45.88249588]
[112.40358734 58.05208588]
[105.62608337 72.34809875]
[106.64971924 87.31313324]
[114.29055023 99.02249908]
[108.31531525 111.66323090]
[109.33895111 126.62826538]
[110.36258698 141.59329224]
[111.38622284 156.55831909]
[126.08470917 168.24340820]
[127.76548767 186.63046265]
[115.84106445 200.31387329]
[117.88356018 215.17416382]
[119.92606354 230.03443909]
[124.27587891 238.31156921]
[121.77562714 245.43597412]
[123.30958557 260.35733032]
[124.84355164 275.27868652]
[126.37751007 290.20004272]
[140.95257568 294.51699829]
[152.76301575 304.08682251]
[160.00782776 317.45025635]
[161.58222961 332.56942749]
[157.24613953 347.13879395]
[147.66076660 358.93664551]
[134.28782654 366.16387939]
[119.16658783 367.71838379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 83]
[7 82]
[8 81]
[9 80]
[10 78]
[11 77]
[12 76]
[17 73]
[18 72]
[19 71]
[20 70]
[22 68]
[23 67]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
