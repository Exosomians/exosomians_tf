%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGGACCGCCCGUCGACACCACGUAACAUCAACGUAACGUACAAGACCACCAUGGGUACGUUACAAAGGUGUCACGUAGUGUCUCCGGACGGACCGGGAGCUCUCUGACGGGACUGACUUCCG\
) } def
/len { sequence length } bind def

/coor [
[78.46441650 342.50747681]
[84.51075745 326.66833496]
[84.51075745 311.66833496]
[84.51075745 296.66833496]
[84.51075745 281.66833496]
[84.51075745 266.66833496]
[76.77345276 253.94107056]
[84.51075745 240.14089966]
[76.77345276 227.41363525]
[84.51075745 213.61346436]
[84.32376099 198.61462402]
[83.94979858 183.61929321]
[83.57584381 168.62394714]
[83.20188141 153.62861633]
[82.82791901 138.63327026]
[82.45395660 123.63793945]
[85.51731110 93.56430054]
[77.06751251 81.17071533]
[68.61771393 68.77713013]
[60.16791153 56.38355255]
[51.71810913 43.98997116]
[37.55133820 36.94630814]
[36.77466965 22.07196808]
[28.32486725 9.67838573]
[19.87506676 -2.71519566]
[11.42526627 -15.10877705]
[-2.74150515 -22.15243912]
[-3.51817513 -37.02677917]
[-11.96797562 -49.42036057]
[-20.41777611 -61.81394196]
[-28.86757851 -74.20752716]
[-37.31737900 -86.60110474]
[-52.71073532 -87.19332886]
[-64.66402435 -96.62583923]
[-68.72307587 -111.11680603]
[-63.53304672 -125.05242920]
[-71.98284912 -137.44601440]
[-80.43264771 -149.83959961]
[-88.88245392 -162.23316956]
[-97.33225250 -174.62675476]
[-105.78205109 -187.02033997]
[-114.23184967 -199.41392517]
[-122.68165588 -211.80751038]
[-131.13145447 -224.20108032]
[-135.34898376 -226.02676392]
[-138.39851379 -228.85653687]
[-140.10401917 -232.17567444]
[-140.48371887 -235.46681213]
[-139.73272705 -238.27644348]
[-146.90653992 -251.44976807]
[-154.08033752 -264.62307739]
[-166.96549988 -275.64166260]
[-159.94448853 -291.07351685]
[-143.17211914 -288.59884644]
[-140.90702820 -271.79690552]
[-133.73321533 -258.62356567]
[-126.55940247 -245.45024109]
[-118.73787689 -232.65087891]
[-110.28807068 -220.25730896]
[-101.83827209 -207.86372375]
[-93.38847351 -195.47013855]
[-84.93866730 -183.07655334]
[-76.48886871 -170.68298340]
[-68.03907013 -158.28939819]
[-59.58926773 -145.89581299]
[-51.13946533 -133.50222778]
[-36.27103043 -133.24223328]
[-24.26470566 -124.16963196]
[-19.85125732 -109.59654236]
[-24.92379761 -95.05091095]
[-16.47399521 -82.65732574]
[-8.02419567 -70.26374817]
[0.42560560 -57.87016296]
[8.87540627 -45.47658157]
[22.43779182 -39.31939316]
[23.81884766 -23.55857849]
[32.26865005 -11.16499615]
[40.71844864 1.22858500]
[49.16825104 13.62216663]
[62.73063660 19.77935600]
[64.11169434 35.54016876]
[72.56149292 47.93375015]
[81.01129150 60.32733154]
[89.46109772 72.72091675]
[97.91089630 85.11449432]
[111.42543030 91.62274933]
[126.38348389 90.50180054]
[141.34153748 89.38085175]
[156.29960632 88.25989532]
[171.25765991 87.13894653]
[182.77009583 75.96560669]
[198.66473389 78.14276886]
[206.74856567 92.00029755]
[200.82037354 106.90789032]
[185.42774963 111.42970276]
[172.37860107 102.09700012]
[157.42054749 103.21795654]
[142.46249390 104.33890533]
[127.50444031 105.45985413]
[112.54637909 106.58081055]
[126.21072388 112.76835632]
[140.63415527 116.88713837]
[149.30775452 129.12515259]
[148.41580200 144.09860229]
[138.35067749 155.22035217]
[123.54026794 157.59770203]
[110.49999237 150.18478394]
[104.96662903 136.24433899]
[97.44929504 123.26397705]
[97.82325745 138.25930786]
[98.19721985 153.25465393]
[98.57118225 168.24998474]
[98.94513702 183.24533081]
[99.31909943 198.24066162]
[102.69179535 206.85058594]
[99.51075745 213.61346436]
[107.24805450 227.41363525]
[99.51075745 240.14089966]
[107.24805450 253.94107056]
[99.51075745 266.66833496]
[99.51075745 281.66833496]
[99.51075745 296.66833496]
[99.51075745 311.66833496]
[99.51075745 326.66833496]
[105.55709839 342.50747681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[8 118]
[10 116]
[11 114]
[12 113]
[13 112]
[14 111]
[15 110]
[16 109]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[23 79]
[24 78]
[25 77]
[26 76]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[49 57]
[50 56]
[51 55]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
