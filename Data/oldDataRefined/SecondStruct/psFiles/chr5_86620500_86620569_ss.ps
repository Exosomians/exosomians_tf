%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGCCACGUACACUACUUCGUUUAGUCAUACUUACUUAAGUACUAUGACAUUUGCGAAAGACUACAUG\
) } def
/len { sequence length } bind def

/coor [
[87.57981110 249.98605347]
[73.34582520 255.40025330]
[58.14064407 254.55039978]
[44.59865189 247.58375549]
[35.06608200 235.70730591]
[31.19450951 220.97872925]
[33.65470886 205.94984436]
[42.02043915 193.22450256]
[54.84228134 185.00743103]
[69.89877319 182.72229004]
[73.83445740 168.24781799]
[77.77014160 153.77334595]
[70.17061615 141.01470947]
[73.95577240 126.27947235]
[87.38972473 118.39489746]
[91.32540894 103.92042542]
[89.68494415 98.56745911]
[91.35394287 92.71072388]
[96.30197906 88.37035370]
[101.50151825 74.30035400]
[106.70104980 60.23035812]
[111.90058899 46.16036224]
[117.10012817 32.09036636]
[107.55455017 18.31496048]
[107.97760773 1.72502851]
[118.01243591 -11.28596020]
[133.63534546 -15.81820679]
[138.20742798 -30.10442543]
[142.77951050 -44.39064407]
[147.35160828 -58.67686081]
[151.92369080 -72.96308136]
[156.49577332 -87.24929810]
[151.25028992 -99.26080322]
[155.58758545 -111.19908142]
[166.59500122 -116.68023682]
[171.79454041 -130.75022888]
[176.99407959 -144.82022095]
[173.69403076 -160.88389587]
[186.13354492 -171.56988525]
[201.51594543 -165.88534546]
[204.01712036 -149.67805481]
[191.06408691 -139.62068176]
[185.86454773 -125.55068970]
[180.66500854 -111.48069763]
[184.67019653 -94.53769684]
[170.78199768 -82.67720795]
[166.20991516 -68.39099121]
[161.63781738 -54.10477448]
[157.06573486 -39.81855774]
[152.49365234 -25.53233910]
[147.92155457 -11.24612045]
[156.87054443 -1.10259116]
[159.58009338 12.26164436]
[155.21919250 25.29698372]
[144.84967041 34.48542404]
[131.17012024 37.28990173]
[125.97058868 51.35990143]
[120.77104950 65.42989349]
[115.57151031 79.49989319]
[110.37197113 93.56988525]
[105.79988861 107.85610962]
[101.86420441 122.33058167]
[109.45596313 135.93215942]
[105.25843048 150.55526733]
[92.24462128 157.70903015]
[88.30893707 172.18350220]
[84.37325287 186.65797424]
[96.19955444 196.25268555]
[103.09511566 209.83102417]
[103.86522675 225.04045105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 67]
[11 66]
[12 65]
[15 62]
[16 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
