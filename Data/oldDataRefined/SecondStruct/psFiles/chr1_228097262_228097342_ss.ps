%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUCCACCCCCGGUCGUCCCUCACCCGACCCGACCCGACCCGGUUCCAUGUUCCGGAGUGGGACGUAGGGCGUGGGUCC\
) } def
/len { sequence length } bind def

/coor [
[74.86895752 418.13806152]
[62.69478989 408.51678467]
[58.53335190 393.56811523]
[63.98480606 379.04019165]
[76.95295715 370.51922607]
[77.52749634 355.53024292]
[78.10204315 340.54122925]
[78.67658234 325.55224609]
[79.25112152 310.56326294]
[72.00698853 297.54895020]
[80.26719666 284.05526733]
[80.84173584 269.06628418]
[81.41627502 254.07728577]
[71.33211517 245.82067871]
[67.87058258 233.05230713]
[72.53997803 220.46505737]
[83.81598663 212.82312012]
[84.96422577 197.86712646]
[86.11246490 182.91114807]
[87.26070404 167.95515442]
[88.40894318 152.99916077]
[89.55718231 138.04318237]
[82.81684875 124.76097107]
[91.58783722 111.59357452]
[85.71808624 98.90351105]
[93.45617676 87.25818634]
[94.60441589 72.30220032]
[87.94621277 57.95023727]
[96.63507080 45.85259247]
[97.78330994 30.89660645]
[91.12510681 16.54464340]
[99.81396484 4.44699955]
[90.14803314 -13.04444313]
[101.15042114 -28.75652122]
[101.15042114 -43.75651932]
[93.41311646 -57.55669403]
[101.15042114 -70.28396606]
[101.15042114 -85.28396606]
[101.15042114 -100.28396606]
[95.10408020 -116.12310028]
[108.65042114 -126.31784821]
[122.19676208 -116.12310028]
[116.15042114 -100.28396606]
[116.15042114 -85.28396606]
[116.15042114 -70.28396606]
[123.88771820 -57.55669403]
[116.15042114 -43.75651932]
[116.15042114 -28.75652122]
[124.20715332 -21.97604561]
[127.12694550 -11.62701035]
[123.66174316 -1.21253181]
[114.76995087 5.59523869]
[121.51028442 18.87745094]
[112.73929596 32.04484558]
[111.59105682 47.00083160]
[118.33139038 60.28304672]
[109.56040192 73.45043945]
[108.41216278 88.40642548]
[114.28191376 101.09648895]
[106.54382324 112.74181366]
[113.20202637 127.09377289]
[104.51316833 139.19142151]
[103.36492920 154.14739990]
[102.21669006 169.10339355]
[101.06845093 184.05938721]
[99.92021179 199.01536560]
[98.77197266 213.97135925]
[110.37067413 226.90115356]
[109.18102264 243.89503479]
[96.40527344 254.65182495]
[95.83072662 269.64080811]
[95.25618744 284.62982178]
[102.45922852 298.71621704]
[94.24011230 311.13778687]
[93.66557312 326.12677002]
[93.09103394 341.11578369]
[92.51649475 356.10476685]
[91.94194794 371.09375000]
[104.21977997 380.58242798]
[108.54313660 395.48504639]
[103.24960327 410.07125854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[11 72]
[12 71]
[13 70]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[24 60]
[26 58]
[27 57]
[29 55]
[30 54]
[32 52]
[34 48]
[35 47]
[37 45]
[38 44]
[39 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
