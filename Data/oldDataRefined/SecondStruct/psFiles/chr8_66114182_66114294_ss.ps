%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGCACCCCCUAAUCGAGUUUACCAUCUCGCGAGCGAAUCGUACGCUCUCCAUCGCCCUAGCUACGGGCGUAGGAGGUCAAAAGGAAGGACAGGGCAUGCCAAAAAGAAAG\
) } def
/len { sequence length } bind def

/coor [
[128.40702820 285.63867188]
[131.44841003 270.74508667]
[139.96195984 258.15191650]
[152.64939880 249.77949524]
[149.77374268 235.05772400]
[146.89807129 220.33595276]
[144.02241516 205.61418152]
[131.56164551 197.53552246]
[128.43560791 182.64651489]
[136.99374390 169.63128662]
[134.11808777 154.90951538]
[131.24241638 140.18774414]
[128.36676025 125.46596527]
[116.08116913 134.21096802]
[101.48345947 137.45401001]
[86.89964294 134.77925110]
[74.61443329 126.70587158]
[66.51335144 114.59083557]
[51.87640381 117.87105560]
[37.23945618 121.15126801]
[31.20858383 135.44841003]
[17.90848351 143.44134521]
[2.45331764 142.05662537]
[-9.21408939 131.82670593]
[-12.60737991 116.68519592]
[-6.42176580 102.45432281]
[6.96425915 94.60614014]
[22.40349579 96.15843964]
[33.95923996 106.51432800]
[48.59618759 103.23410797]
[63.23313141 99.95389557]
[66.31136322 85.27313995]
[54.22488403 76.38961029]
[42.13840866 67.50608063]
[26.43640900 65.56758118]
[20.76351929 51.79559708]
[8.67704296 42.91206741]
[-3.40943336 34.02853775]
[-19.75290871 29.51997375]
[-19.94486618 12.56711388]
[-3.70766926 7.68963909]
[5.47409534 21.94206047]
[17.56057167 30.82559013]
[29.64704895 39.70911789]
[44.48454285 41.01221085]
[51.02193832 55.41960526]
[63.10841370 64.30313873]
[75.19489288 73.18666077]
[103.86374664 62.87648392]
[131.09471130 77.94760895]
[136.73934937 64.05019379]
[142.38398743 50.15278244]
[148.02862549 36.25537109]
[142.12438965 21.84087563]
[148.04682922 7.82733536]
[161.82524109 2.28737712]
[167.46987915 -11.61003399]
[173.11451721 -25.50744438]
[178.75915527 -39.40485764]
[184.40379333 -53.30226517]
[176.92835999 -67.03732300]
[180.08120728 -82.35376740]
[192.37368774 -92.01964569]
[208.00163269 -91.47102356]
[219.58604431 -80.96694183]
[221.65708923 -65.46710968]
[213.23689270 -52.29007339]
[198.30120850 -47.65762711]
[192.65657043 -33.76021576]
[187.01193237 -19.86280441]
[181.36729431 -5.96539354]
[175.72264099 7.93201780]
[181.73577881 21.51060104]
[176.20927429 35.68496323]
[161.92604065 41.90001297]
[156.28140259 55.79742432]
[150.63676453 69.69483185]
[144.99211121 83.59224701]
[153.19633484 96.14974213]
[168.19064331 96.56305695]
[183.18495178 96.97637177]
[191.79492188 84.17512512]
[205.96800232 78.08192444]
[221.18162537 80.64107513]
[232.58117676 91.03597260]
[236.52908325 105.94964600]
[231.76560974 120.62318420]
[219.81074524 130.37432861]
[204.47924805 132.09150696]
[190.66334534 125.22679138]
[182.77163696 111.97068024]
[167.77732849 111.55736542]
[152.78302002 111.14405060]
[143.08853149 122.59030914]
[145.96420288 137.31208801]
[148.83985901 152.03385925]
[151.71551514 166.75563049]
[164.54232788 175.59364319]
[167.24893188 190.56457520]
[158.74418640 202.73852539]
[161.61984253 217.46029663]
[164.49551392 232.18206787]
[167.37117004 246.90383911]
[182.27662659 249.88642883]
[194.90330505 258.35021973]
[203.32571411 271.00451660]
[206.25952148 285.91964722]
[203.25732422 300.82116699]
[194.77694702 313.43667603]
[182.11157227 321.84246826]
[167.19259644 324.75662231]
[152.29504395 321.73483276]
[139.69067383 313.23788452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 103]
[5 102]
[6 101]
[7 100]
[10 97]
[11 96]
[12 95]
[13 94]
[18 31]
[19 30]
[20 29]
[32 48]
[33 47]
[34 46]
[36 44]
[37 43]
[38 42]
[50 78]
[51 77]
[52 76]
[53 75]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[79 93]
[80 92]
[81 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
