%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUUCACUCCGACUGCAGGCCGGGUUCACCCGGGUCGGGCCGGGCGCAGAGCUUCCCCGUGGACACUUGAGUUUUCCGAGAAAAGUCUCGGUGGGU\
) } def
/len { sequence length } bind def

/coor [
[162.38090515 189.09951782]
[162.49555969 172.32794189]
[167.69030762 156.36225891]
[155.38772583 147.78050232]
[143.08514404 139.19874573]
[130.78256226 130.61700439]
[118.47998047 122.03525543]
[106.17739105 113.45350647]
[91.86763000 108.95565796]
[76.86763000 108.95565796]
[61.86763000 108.95565796]
[46.86763000 108.95565796]
[31.86763000 108.95565796]
[16.86763000 108.95565796]
[25.70738792 121.07418060]
[23.68071556 135.93664551]
[11.91902161 145.24591064]
[-3.01161122 143.80500793]
[-12.77601051 132.41833496]
[-11.92310524 117.44259644]
[-0.93043667 107.23870087]
[-15.65382385 104.37132263]
[-30.37721062 101.50393677]
[-45.10059738 98.63655853]
[-59.82398605 95.76918030]
[-75.14716339 101.61146545]
[-87.69583130 91.05385590]
[-84.56098938 74.95712280]
[-68.96749878 69.88020325]
[-56.95660782 81.04579163]
[-42.23321915 83.91316986]
[-27.50983238 86.78055573]
[-12.78644466 89.64793396]
[1.93694270 92.51531219]
[16.86763000 93.95565796]
[31.86763000 93.95565796]
[46.86763000 93.95565796]
[61.86763000 93.95565796]
[76.86763000 93.95565796]
[91.86763000 93.95565796]
[91.76676178 91.26274872]
[92.39711761 88.39001465]
[93.81054688 85.51657104]
[95.72869873 70.63972473]
[97.64685822 55.76287079]
[88.93613434 37.72348785]
[100.89293671 22.67022705]
[101.85398865 7.70104647]
[96.83488464 -8.49293327]
[111.00657654 -17.79882431]
[123.87190247 -6.75709915]
[116.82316589 8.66209984]
[115.86211395 23.63128090]
[123.41605377 30.84784889]
[125.69825745 41.26988602]
[121.68840027 51.39576721]
[112.52371216 57.68103027]
[110.60555267 72.55787659]
[108.68739319 87.43473053]
[114.75914764 101.15091705]
[127.06172943 109.73266602]
[139.36431885 118.31442261]
[151.66690063 126.89617157]
[163.96948242 135.47792053]
[176.27206421 144.05966187]
[186.60639954 135.39297485]
[198.73553467 129.51852417]
[211.92199707 126.78774261]
[225.36544800 127.36108398]
[238.25123596 131.19863892]
[249.79977417 138.06285095]
[259.31372070 147.53318787]
[266.21997070 159.03195190]
[270.10440063 171.85949707]
[270.73648071 185.23677063]
[268.08303833 198.35267639]
[262.31002808 210.41323853]
[273.73171997 220.13665771]
[285.15341187 229.86009216]
[296.57510376 239.58351135]
[307.99679565 249.30694580]
[319.41845703 259.03036499]
[335.63674927 261.45922852]
[341.38983154 276.81613159]
[330.75942993 289.30319214]
[314.68121338 286.07479858]
[309.69503784 270.45205688]
[298.27334595 260.72863770]
[286.85165405 251.00520325]
[275.42996216 241.28178406]
[264.00830078 231.55834961]
[252.58659363 221.83493042]
[238.62828064 230.90997314]
[222.55995178 235.33544922]
[205.88845825 234.68528748]
[190.18054199 229.00996399]
[176.91563416 218.83267212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[43 59]
[44 58]
[45 57]
[47 53]
[48 52]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
