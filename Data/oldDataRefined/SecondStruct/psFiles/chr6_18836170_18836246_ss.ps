%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAGGUACCACAUUACCAAUCGUGAGACCUGAGACUUAGGUCGCUAGGCUCAAGUUUAGAGCCACCUUGGAAAGU\
) } def
/len { sequence length } bind def

/coor [
[116.50170135 232.79960632]
[126.84960175 221.07548523]
[124.44343567 206.26972961]
[122.03726196 191.46397400]
[119.63109589 176.65821838]
[117.22492981 161.85246277]
[114.81875610 147.04672241]
[112.41259003 132.24096680]
[94.59913635 132.34800720]
[80.03971100 123.77602386]
[72.38009644 109.75410461]
[57.42874146 110.96110535]
[42.47738266 112.16810608]
[35.96571732 126.07830811]
[23.36217308 134.85591125]
[8.05703354 136.13977051]
[-5.83269310 129.58453369]
[-14.57074070 116.95353699]
[-15.80661774 101.64444733]
[-9.20788002 87.77533722]
[3.45044470 79.07692719]
[18.76333237 77.88903809]
[32.61169052 84.53121948]
[41.27038193 97.21674347]
[56.22174072 96.00975037]
[71.17310333 94.80274963]
[76.23339081 82.87837982]
[85.94165802 74.30243683]
[82.35192871 59.73831177]
[78.76219177 45.17418671]
[75.17245483 30.61005783]
[71.58271790 16.04593086]
[67.99298859 1.48180318]
[64.40325165 -13.08232403]
[54.74205399 -27.01421547]
[65.45500183 -40.15457916]
[81.04747009 -33.49791718]
[78.96737671 -16.67205811]
[82.55711365 -2.10793161]
[86.14685059 12.45619583]
[89.73658752 27.02032280]
[93.32631683 41.58444977]
[96.91605377 56.14857864]
[100.50579071 70.71270752]
[110.26435089 71.44593811]
[119.56673431 75.44935608]
[127.31452179 82.48948669]
[132.51849365 91.96450043]
[134.42143250 102.95251465]
[149.31205750 101.14447021]
[164.20269775 99.33641815]
[179.09332275 97.52836609]
[193.98396301 95.72031403]
[202.36621094 82.51911163]
[217.28851318 77.84371948]
[231.70497131 83.90171814]
[238.80862427 97.83270264]
[235.24530029 113.05889130]
[222.69752502 122.39093781]
[207.08995056 121.42254639]
[195.79200745 110.61094666]
[180.90138245 112.41899872]
[166.01074219 114.22705078]
[151.12011719 116.03510284]
[136.22947693 117.84314728]
[127.21834564 129.83479309]
[129.62451172 144.64054871]
[132.03068542 159.44630432]
[134.43684387 174.25205994]
[136.84301758 189.05781555]
[139.24919128 203.86355591]
[141.65536499 218.66931152]
[155.18338013 226.51321411]
[160.45584106 241.23513794]
[154.98324585 255.88385010]
[141.34959412 263.54266357]
[125.99227142 260.59533691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[11 26]
[12 25]
[13 24]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
