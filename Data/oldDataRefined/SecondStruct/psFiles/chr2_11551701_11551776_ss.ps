%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUCACCAGAUCACCAAUCCUAAGUCGCGAGGGUGGCGGCGUCGGGCCCAAGCUAAGGGCCAGUACCUUGGUU\
) } def
/len { sequence length } bind def

/coor [
[92.63091278 124.32003784]
[81.72880554 118.82939911]
[74.34849548 108.62322998]
[72.43363190 95.78178406]
[76.76560974 83.13106537]
[62.29000854 79.19953918]
[47.81440353 75.26801300]
[33.33880234 71.33648682]
[18.86319733 67.40496063]
[4.38759327 63.47343445]
[-5.03716087 69.58474731]
[-16.04399681 69.33917999]
[-24.82338905 63.07265854]
[-28.47774124 53.16161346]
[-42.58472061 48.06327438]
[-58.19313431 50.64941025]
[-67.53286743 39.04688263]
[-78.39892578 49.76562881]
[-92.84236908 54.70015717]
[-107.99545288 52.87071228]
[-120.84951019 44.64052963]
[-128.85237122 31.64371872]
[-130.41505432 16.46080780]
[-125.22727966 2.10637355]
[-114.31909180 -8.56950092]
[-99.85632324 -13.44711304]
[-84.71056366 -11.55800915]
[-71.88901520 -3.27727175]
[-63.93740463 9.75095272]
[-62.43452835 24.93989944]
[-47.83514404 21.98909950]
[-37.48638153 33.95629501]
[-23.37940216 39.05463409]
[-4.88734293 34.02458954]
[8.31911850 48.99783325]
[22.79472351 52.92935562]
[37.27032471 56.86088181]
[51.74592972 60.79240799]
[66.22153473 64.72393036]
[80.69713593 68.65545654]
[94.80412292 63.55711746]
[103.42168427 51.27959824]
[112.03925323 39.00207520]
[110.69876099 23.01512337]
[122.46054840 12.10457897]
[138.30197144 14.64007854]
[146.07086182 28.67660332]
[139.80757141 43.44653320]
[124.31677246 47.61964035]
[115.69921112 59.89716339]
[107.08164215 72.17468262]
[119.03030396 80.75923157]
[124.55648041 93.46189117]
[122.89789581 106.34888458]
[135.34864807 114.71421814]
[147.79939270 123.07954407]
[160.25015259 131.44487000]
[172.70091248 139.81021118]
[185.15165710 148.17553711]
[197.60241699 156.54086304]
[210.05316162 164.90620422]
[225.02593994 160.39509583]
[239.37495422 166.61119080]
[246.32504272 180.61941528]
[242.59458923 195.80551147]
[229.94499207 204.99908447]
[214.34901428 203.85919189]
[203.17059326 192.92407227]
[201.68783569 177.35694885]
[189.23707581 168.99162292]
[176.78633118 160.62629700]
[164.33557129 152.26095581]
[151.88482666 143.89562988]
[139.43406677 135.53030396]
[126.98331451 127.16497040]
[114.53256226 118.79963684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[14 33]
[15 32]
[17 30]
[41 51]
[42 50]
[43 49]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
