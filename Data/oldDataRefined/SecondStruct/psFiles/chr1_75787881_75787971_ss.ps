%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAGUUCCAGUUACUACACAACCGUACAUAAUAGACUUAGAUAACGACUACACAUUAUUGUGAAAUCGAGAUCUUAAUGAGACUCUGGA\
) } def
/len { sequence length } bind def

/coor [
[69.67236328 320.28430176]
[61.57695389 333.52227783]
[47.23366165 339.44256592]
[32.15778351 335.76867676]
[22.14629745 323.91329956]
[21.04882622 308.43508911]
[29.28737068 295.28570557]
[43.69404221 289.52139282]
[47.24550629 274.94787598]
[50.79697418 260.37435913]
[54.34843826 245.80085754]
[57.89990616 231.22735596]
[48.14054489 220.00715637]
[46.84413147 205.01437378]
[54.71663284 191.98069763]
[68.91839600 186.01277161]
[72.46986389 171.43927002]
[70.96300507 164.04075623]
[76.39937592 156.43302917]
[80.44632721 141.98927307]
[73.93922424 138.29205322]
[68.11250305 133.59512329]
[63.11827469 128.02113342]
[59.08692932 121.71556854]
[56.12371445 114.84307861]
[54.30599213 107.58306885]
[53.68121719 100.12509155]
[54.26570129 92.66384888]
[56.04418564 85.39412689]
[58.97023392 78.50572968]
[62.96746445 72.17848969]
[67.93151093 66.57759094]
[73.73278046 61.84926605]
[80.21981812 58.11695480]
[87.22325897 55.47809219]
[94.56027222 54.00157928]
[102.03929901 53.72596359]
[109.46508026 54.65843582]
[116.64376068 56.77465439]
[123.38791656 60.01937103]
[129.52146912 64.30787659]
[140.82716370 54.44981766]
[152.13285828 44.59176254]
[163.43855286 34.73370743]
[164.66979980 19.20561028]
[176.27581787 9.36919498]
[191.07189941 10.63868904]
[202.37759399 0.78063434]
[213.68328857 -9.07742119]
[212.44837952 -24.43258858]
[220.39892578 -37.41881180]
[234.30723572 -43.16539764]
[248.75941467 -39.66222763]
[260.06512451 -49.52028275]
[271.37081909 -59.37833786]
[282.67651367 -69.23638916]
[287.47723389 -84.91711426]
[303.51611328 -88.33574677]
[314.29367065 -75.97549438]
[308.72293091 -60.55152512]
[292.53457642 -57.93069458]
[281.22888184 -48.07263947]
[269.92315674 -38.21458435]
[258.61746216 -28.35653114]
[260.12011719 -13.56193447]
[252.53320312 -0.56567127]
[238.58534241 5.54254389]
[223.54133606 2.22827458]
[212.23564148 12.08632946]
[200.92994690 21.94438553]
[200.17288208 36.77551651]
[188.84773254 46.93404007]
[173.29661560 46.03940201]
[161.99092102 55.89745712]
[150.68522644 65.75551605]
[139.37953186 75.61357117]
[146.31848145 100.20778656]
[139.15914917 124.73875427]
[120.08066559 141.73980713]
[94.89008331 146.03622437]
[90.84313202 160.47998047]
[87.04337311 174.99073792]
[83.49190521 189.56423950]
[93.35581207 201.39680481]
[94.34934235 216.59107971]
[86.30062866 229.30651855]
[72.47341156 234.77882385]
[68.92194366 249.35232544]
[65.37048340 263.92584229]
[61.81901550 278.49932861]
[58.26754761 293.07284546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[16 83]
[17 82]
[19 81]
[20 80]
[41 76]
[42 75]
[43 74]
[44 73]
[47 70]
[48 69]
[49 68]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
