%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCUGUUAGGUACACGAAGAGAACAGGAAGUAAGGUGGCCUCAGACAGAGUAUGGGUUGGUCUAAAGUCACCUCACUUCAAGUC\
) } def
/len { sequence length } bind def

/coor [
[99.87799835 158.00227356]
[87.55635071 166.55662537]
[72.74008942 164.21601868]
[63.65540695 152.27999878]
[65.34547424 137.37701416]
[52.18029022 144.56575012]
[39.01510620 151.75448608]
[30.61107826 165.15907288]
[15.73252678 164.46772766]
[2.56734180 171.65646362]
[-5.83668613 185.06105042]
[-20.71523857 184.36972046]
[-26.59652519 199.29586792]
[-41.97484970 203.86607361]
[-55.05327988 194.57444763]
[-55.79916000 178.54873657]
[-43.64031601 168.08250427]
[-27.90397263 171.20452881]
[-20.44160843 158.31413269]
[-4.62139320 158.49128723]
[8.54379177 151.30255127]
[16.00615692 138.41215515]
[31.82637215 138.58929443]
[44.99155807 131.40055847]
[58.15674210 124.21183014]
[70.47805023 115.65699005]
[81.81430054 105.83407593]
[82.95262909 91.38934326]
[93.90307617 81.90072632]
[108.36279297 82.82967377]
[119.69903564 73.00676727]
[131.03527832 63.18385696]
[142.37152100 53.36094284]
[153.70776367 43.53803253]
[159.07038879 28.65338135]
[173.75587463 26.16625214]
[185.09211731 16.34333992]
[196.42835999 6.52042961]
[207.76460266 -3.30248117]
[219.10084534 -13.12539196]
[230.43708801 -22.94830322]
[241.77333069 -32.77121353]
[240.58609009 -48.13014221]
[248.57693481 -61.09162140]
[262.50299072 -66.79500580]
[276.94424438 -63.24698257]
[288.28048706 -73.06989288]
[299.61672974 -82.89280701]
[310.95297241 -92.71571350]
[316.31558228 -107.60037231]
[331.00106812 -110.08750153]
[342.33731079 -119.91040802]
[341.90832520 -135.54211426]
[351.66799927 -147.76023865]
[367.00811768 -150.79577637]
[380.68557739 -143.21543884]
[386.24224854 -128.59841919]
[381.05447388 -113.84642792]
[367.57177734 -105.92491150]
[352.16024780 -108.57416534]
[340.82400513 -98.75125885]
[336.27221680 -84.56920624]
[320.77587891 -81.37947083]
[309.43963623 -71.55656433]
[298.10339355 -61.73365021]
[286.76715088 -51.91073990]
[288.22384644 -37.11154938]
[280.59664917 -24.13890266]
[266.62988281 -18.07401657]
[251.59623718 -21.43497086]
[240.25999451 -11.61205959]
[228.92375183 -1.78914857]
[217.58750916 8.03376198]
[206.25126648 17.85667419]
[194.91502380 27.67958450]
[183.57878113 37.50249481]
[179.02700806 51.68454742]
[163.53067017 54.87427521]
[152.19442749 64.69718933]
[140.85818481 74.52009583]
[129.52194214 84.34300995]
[118.18569946 94.16592407]
[117.04737091 108.61065674]
[106.09692383 118.09927368]
[91.63720703 117.17032623]
[80.30096436 126.99323273]
[94.85623169 130.61872864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[9 21]
[10 20]
[12 18]
[26 86]
[27 85]
[30 82]
[31 81]
[32 80]
[33 79]
[34 78]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[46 66]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
