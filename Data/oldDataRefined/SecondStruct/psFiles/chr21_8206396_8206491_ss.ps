%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAGGGCCCCCCGAGAAGCACUAGCUACACCACUGCAGCACGAGAGGGCCCGGCCCAGGCUCGGCGCUGCCCGCUCCCCGCCUGCAAGCACCGC\
) } def
/len { sequence length } bind def

/coor [
[140.10079956 120.61253357]
[125.80522919 116.06977844]
[111.50965881 111.52703094]
[100.74304199 116.27244568]
[89.58876038 112.52799988]
[83.86636353 102.24728394]
[69.72538757 97.24399567]
[55.58441544 92.24070740]
[41.44344330 87.23742676]
[27.30246735 82.23413849]
[13.16149521 77.23085022]
[-1.05864275 72.45720673]
[-16.55397606 75.65176392]
[-26.34031105 64.42337036]
[-40.63588333 59.88061905]
[-56.13121796 63.07517624]
[-65.91754913 51.84677887]
[-79.82726288 58.85803604]
[-94.26029205 54.04739380]
[-100.85873413 40.74340439]
[-115.15430450 36.20065308]
[-129.44987488 31.65790176]
[-139.53491211 43.06895065]
[-153.39202881 49.38560486]
[-168.62040710 49.51346207]
[-182.58163452 43.43037796]
[-192.85685730 32.19027328]
[-197.66580200 17.74057388]
[-196.17532349 2.58477187]
[-188.64363098 -10.65129757]
[-176.37564087 -19.67440414]
[-161.49687195 -22.92123985]
[-146.58514404 -19.82927322]
[-134.22401428 -10.93420410]
[-126.55510712 2.22284293]
[-124.90712738 17.36232948]
[-110.61155701 21.90508080]
[-96.31598663 26.44783211]
[-83.24813843 19.39326286]
[-68.68567657 23.79661179]
[-61.37480164 37.55120468]
[-46.90198135 34.03171921]
[-36.09313202 45.58504486]
[-21.79755974 50.12779617]
[-7.32474136 46.60830688]
[3.48410845 58.16163254]
[10.95402622 57.16816711]
[18.16478157 63.08987808]
[32.30575562 68.09316254]
[46.44672775 73.09645081]
[60.58769989 78.09973907]
[74.72867584 83.10302734]
[88.86964417 88.10630798]
[105.18399048 84.55749512]
[116.05240631 97.23146057]
[130.34797668 101.77420807]
[144.64355469 106.31695557]
[159.51785278 108.25478363]
[174.50015259 107.52634430]
[189.48245239 106.79791260]
[204.46476746 106.06948090]
[219.44706726 105.34104919]
[230.03799438 93.91870117]
[245.24255371 93.39339447]
[256.06674194 103.56061554]
[271.04904175 102.83218384]
[284.45721436 94.43384552]
[297.54519653 101.54394531]
[312.52749634 100.81551361]
[324.32888794 89.94782257]
[340.16098022 92.54092407]
[347.87875366 106.60561371]
[341.56179810 121.35266113]
[326.05593872 125.46939850]
[313.25592041 115.79782104]
[298.27362061 116.52625275]
[285.93710327 124.87248993]
[271.77749634 117.81448364]
[256.79516602 118.54291534]
[247.00836182 129.71223450]
[231.82455444 130.66439819]
[220.17549133 120.32334900]
[205.19319153 121.05178070]
[190.21089172 121.78022003]
[175.22859192 122.50865173]
[160.24629211 123.23708344]
[171.85766602 132.73318481]
[177.90782166 146.45890808]
[177.08410645 161.43627930]
[169.56521606 174.41572571]
[156.98249817 182.58120728]
[142.06593323 184.16108704]
[128.05187988 178.81259155]
[117.98088074 167.69616699]
[114.03798676 153.22364807]
[117.07866669 138.53507996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 46]
[14 44]
[15 43]
[17 41]
[20 38]
[21 37]
[22 36]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[65 79]
[66 78]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
