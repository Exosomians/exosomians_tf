%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAUAUGAUUUUAACCUUGCUAUGUCUCUUCUAAUCGUACCGGGGACGCGUUCCUACUGUGCGUUUAAGCACUUCGCAAGGUAUAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[68.49356079 383.87411499]
[56.43290710 393.22842407]
[41.50614548 396.41506958]
[26.67700386 392.80130005]
[14.88981533 383.10464478]
[8.48493385 369.25039673]
[8.73405361 353.98931885]
[15.58771324 340.35150146]
[27.68511200 331.04473877]
[42.62430573 327.91693115]
[46.17576981 313.34341431]
[49.72723770 298.76989746]
[53.27870178 284.19641113]
[56.83016968 269.62289429]
[60.13230515 254.99087524]
[63.18414307 240.30462646]
[66.23598480 225.61836243]
[69.28782654 210.93209839]
[72.33966827 196.24583435]
[75.39150238 181.55957031]
[78.44334412 166.87330627]
[68.30660248 155.99284363]
[66.49907684 141.05307007]
[73.92200470 127.75820923]
[87.91173553 121.30890656]
[90.96357727 106.62264252]
[93.76423645 91.88642120]
[96.31288910 77.10452271]
[94.43936920 72.64363098]
[94.25002289 68.28235626]
[95.47646332 64.58012390]
[97.68465424 61.93517685]
[100.34907532 60.54195786]
[104.88679504 46.24478531]
[109.42451477 31.94761467]
[106.22450256 16.45340729]
[117.44945526 6.66311979]
[121.98716736 -7.63405180]
[126.52488708 -21.93122292]
[131.06260681 -36.22839355]
[135.60032654 -50.52556610]
[130.22496033 -69.80679321]
[144.62435913 -82.52204132]
[148.17582703 -97.09555054]
[151.72729492 -111.66905975]
[155.27876282 -126.24256134]
[158.83023071 -140.81607056]
[153.70951843 -156.39523315]
[164.84132385 -168.43745422]
[180.77420044 -164.55471802]
[185.11776733 -148.74125671]
[173.40373230 -137.26460266]
[169.85226440 -122.69110107]
[166.30079651 -108.11759186]
[162.74934387 -93.54408264]
[159.19787598 -78.97058105]
[165.39387512 -70.52473450]
[165.81184387 -59.83581543]
[160.06040955 -50.55397034]
[149.89749146 -45.98784637]
[145.35977173 -31.69067574]
[140.82206726 -17.39350510]
[136.28434753 -3.09633350]
[131.74662781 11.20083809]
[135.27120972 25.67241669]
[123.72168732 36.48533249]
[119.18396759 50.78250504]
[114.64624786 65.07967377]
[111.09477997 79.65318298]
[108.54612732 94.43507385]
[110.41287231 102.46578217]
[105.64984131 109.67448425]
[102.59799957 124.36074829]
[112.86013031 135.84963989]
[114.37183380 151.00114441]
[106.76193237 163.98396301]
[93.12960815 169.92515564]
[90.07776642 184.61141968]
[87.02592468 199.29766846]
[83.97408295 213.98393250]
[80.92224884 228.67019653]
[77.87040710 243.35646057]
[74.81856537 258.04272461]
[76.14538574 267.29858398]
[71.40367889 273.17437744]
[67.85221100 287.74786377]
[64.30074310 302.32138062]
[60.74927521 316.89489746]
[57.19781113 331.46838379]
[69.02309418 341.11853027]
[75.48248291 354.94744873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[25 73]
[26 72]
[27 70]
[28 69]
[33 68]
[34 67]
[35 66]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
