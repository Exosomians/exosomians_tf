%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAGUCAGCGCACUACUGUAAGAGGCCUUAGCGACAUGCCGGAACUACUUUCGUGUAAACUUGGGAAAAGGUAGACUAACG\
) } def
/len { sequence length } bind def

/coor [
[68.00654602 105.69369507]
[53.03071213 104.84251404]
[38.05488205 103.99134064]
[20.75313759 113.99998474]
[4.83005047 103.29953003]
[-10.16726303 103.58339691]
[-25.16457748 103.86725616]
[-33.93560791 107.22619629]
[-40.73229980 103.86725616]
[-55.72961426 103.58339691]
[-61.86151505 117.46415710]
[-72.81111908 127.91159821]
[-86.88838959 133.35623169]
[-101.93694305 132.99743652]
[-115.66435242 126.92098999]
[-125.99137878 116.08134460]
[-131.36689758 102.15177155]
[-146.36421204 101.86790466]
[-158.87179565 111.91477966]
[-174.49291992 108.25962830]
[-181.24438477 93.70636749]
[-173.94703674 79.41902161]
[-158.19879150 76.35761261]
[-146.08033752 86.87059021]
[-131.08302307 87.15445709]
[-125.18424988 73.43827057]
[-114.45442963 62.99718094]
[-100.50691223 57.44455719]
[-85.45556641 57.65546799]
[-71.59440613 63.62891006]
[-61.04799271 74.48322296]
[-55.44575119 88.58608246]
[-40.44844055 88.86994171]
[-25.44843864 88.86994171]
[-10.45112514 88.58608246]
[4.54618883 88.30221558]
[11.16843033 80.12281799]
[21.45334244 77.00593567]
[31.92754364 80.26517487]
[38.90606308 89.01551056]
[53.88189316 89.86668396]
[68.85771942 90.71786499]
[80.08922577 74.31808472]
[98.77029419 67.52713013]
[117.91146088 72.88581085]
[130.35108948 88.38919830]
[145.21966553 86.40785217]
[160.08822632 84.42650604]
[174.95678711 82.44516754]
[189.82536316 80.46382141]
[204.60829163 77.92124939]
[219.28443909 74.82108307]
[233.96057129 71.72092438]
[245.86366272 61.29849625]
[259.91525269 66.23829651]
[274.59140015 63.13813782]
[283.00463867 49.75931549]
[298.43231201 46.32962036]
[311.72143555 54.88383865]
[314.98782349 70.34690094]
[306.29357910 83.54484558]
[290.79684448 86.64756775]
[277.69155884 77.81427765]
[263.01544189 80.91443634]
[252.16207886 91.11511993]
[237.06072998 86.39706421]
[222.38459778 89.49722290]
[207.70846558 92.59738159]
[204.28565979 96.25266266]
[198.44242859 97.63198853]
[191.80670166 95.33238983]
[176.93814087 97.31372833]
[162.06956482 99.29507446]
[147.20100403 101.27642059]
[132.33244324 103.25776672]
[129.68829346 113.21379852]
[124.06087494 121.84202576]
[116.01564026 128.27540588]
[106.36105347 131.86747742]
[96.06726074 132.25729370]
[86.16865540 129.40567017]
[77.65991974 123.59915924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[5 36]
[6 35]
[7 34]
[9 33]
[10 32]
[17 25]
[18 24]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[51 68]
[52 67]
[53 66]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
