%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUUACCCAUCGGACCUAUCGAGUCAACCAUCUCGUAGUCUGAAAAUUAGACUCCCAGGUCCCAAGUUCAGGGACAAGUCCGCUACCGCAAACAAAAA\
) } def
/len { sequence length } bind def

/coor [
[86.66629791 348.31686401]
[73.43548584 341.14526367]
[61.85820389 331.53002930]
[52.37945175 319.84075928]
[45.36356735 306.52670288]
[41.08022308 292.09967041]
[39.69406128 277.11419678]
[41.25835800 262.14627075]
[45.71298981 247.77119446]
[52.88672638 234.54153442]
[62.50383759 222.96582031]
[74.19466400 213.48895264]
[87.50983429 206.47521973]
[101.93756104 202.19421387]
[100.55353546 187.25820923]
[99.16950989 172.32218933]
[97.78548431 157.38618469]
[96.40145874 142.45016479]
[83.09565735 139.10510254]
[71.54303741 131.70437622]
[62.94174957 121.01551819]
[58.18384552 108.14710236]
[57.76277924 94.43373871]
[43.46864700 89.88644409]
[29.17451859 85.33915710]
[14.88038826 80.79186249]
[2.46352649 90.09783936]
[-13.05230331 90.29441833]
[-25.70094872 81.30601501]
[-30.61874580 66.58885193]
[-25.91470337 51.80197906]
[-13.39762020 42.63125229]
[2.11942911 42.60300064]
[14.66982269 51.72808838]
[19.42767906 66.49773407]
[33.72180939 71.04502869]
[48.01593781 75.59231567]
[62.31007004 80.13960266]
[71.78716278 68.07818604]
[84.92179108 60.15512848]
[82.16554260 45.41053391]
[79.40930176 30.66593552]
[76.65306091 15.92133999]
[73.89682007 1.17674303]
[71.14057159 -13.56785297]
[68.38433075 -28.31245041]
[59.53050995 -42.77087784]
[70.97291565 -55.28118134]
[86.16188812 -47.74914551]
[83.12892914 -31.06869316]
[85.88516998 -16.32409668]
[88.64141083 -1.57949972]
[91.39765930 13.16509724]
[94.15390015 27.90969276]
[96.91014099 42.65428925]
[99.66638184 57.39888763]
[106.74720001 57.93526840]
[113.64055634 59.64035034]
[120.15493011 62.46674728]
[126.10933685 66.33594513]
[131.33834839 71.14043427]
[135.69667053 76.74674225]
[149.51025391 70.89994812]
[163.32383728 65.05316162]
[177.13742065 59.20637512]
[190.95100403 53.35958481]
[195.36505127 38.35791779]
[208.41784668 29.74637794]
[223.94624329 31.59107399]
[234.61820984 43.02099609]
[235.39477539 58.63928604]
[225.90925598 71.07146454]
[210.64044189 74.44743347]
[196.79779053 67.17317200]
[182.98420715 73.01995850]
[169.17062378 78.86674500]
[155.35704041 84.71353149]
[141.54345703 90.56031799]
[140.88563538 111.97208405]
[129.89028931 130.35682678]
[111.33747101 141.06614685]
[112.72149658 156.00215149]
[114.10552216 170.93817139]
[115.48954773 185.87417603]
[116.87357330 200.81019592]
[131.84226990 202.36721802]
[146.21949768 206.81486511]
[159.45262146 213.98219299]
[171.03302002 223.59367371]
[180.51556396 235.27989197]
[187.53575134 248.59165955]
[191.82376099 263.01730347]
[193.21478271 278.00234985]
[191.65533447 292.97079468]
[187.20535278 307.34729004]
[180.03588867 320.57925415]
[170.42253113 332.15811157]
[158.73477173 341.63873291]
[145.42187500 348.65679932]
[130.99554443 352.94247437]
[116.01027679 354.33105469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[23 38]
[24 37]
[25 36]
[26 35]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
