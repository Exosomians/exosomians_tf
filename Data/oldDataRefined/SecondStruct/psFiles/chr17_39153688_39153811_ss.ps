%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUAGCUGUGGGUCCUGUUUUUGUCAUAGAGCUUUUCCGGUUUCUCCCCCGUGGGCCUAAACUUGGCCCCUGGAGAACUAGACGUCAGUUUACGAGAUGGUGACUCGAUAUGGGGGAGACGG\
) } def
/len { sequence length } bind def

/coor [
[-9.25441551 232.67930603]
[-24.09121704 234.88595581]
[-37.83819962 228.88424683]
[-46.30620193 216.50309753]
[-46.91475296 201.51544189]
[-39.47710419 188.48727417]
[-53.74295044 193.12252808]
[-68.00879669 197.75778198]
[-82.27464294 202.39303589]
[-96.54049683 207.02828979]
[-109.20538330 222.61590576]
[-127.92990112 218.06234741]
[-141.94483948 223.40852356]
[-155.95976257 228.75469971]
[-169.97470093 234.10087585]
[-180.11093140 246.24861145]
[-194.76005554 243.55557251]
[-208.77499390 248.90174866]
[-222.78993225 254.24794006]
[-236.80487061 259.59411621]
[-241.75563049 274.42730713]
[-255.10969543 282.56381226]
[-270.56170654 280.16180420]
[-280.81567383 268.35543823]
[-281.02999878 252.71934509]
[-271.10348511 240.63636780]
[-255.72311401 237.81175232]
[-242.15104675 245.57917786]
[-228.13610840 240.23300171]
[-214.12117004 234.88682556]
[-200.10624695 229.54064941]
[-190.97244263 217.77531433]
[-175.32087708 220.08595276]
[-161.30595398 214.73977661]
[-147.29101562 209.39358521]
[-133.27607727 204.04740906]
[-129.89363098 194.26058960]
[-121.47006226 187.86590576]
[-110.69308472 187.21153259]
[-101.17575073 192.76243591]
[-86.90990448 188.12718201]
[-72.64405060 183.49192810]
[-58.37820435 178.85667419]
[-44.11235809 174.22142029]
[-30.46076775 168.00578308]
[-17.59786797 160.28919983]
[-4.73496819 152.57260132]
[8.12793159 144.85600281]
[20.99083138 137.13941956]
[33.85373306 129.42282104]
[46.71663284 121.70623016]
[59.57953262 113.98963928]
[72.44242859 106.27304077]
[85.30532837 98.55644989]
[92.85968018 85.59760284]
[93.23663330 70.60233307]
[93.61357880 55.60707474]
[93.99053192 40.61180878]
[94.36748505 25.61654854]
[82.52581787 15.40336990]
[80.07052612 -0.04025490]
[88.16091156 -13.42231846]
[102.97695160 -18.42421913]
[117.52295685 -12.68421459]
[124.93075562 1.08744311]
[121.70260620 16.38819695]
[109.36274719 25.99349976]
[108.98579407 40.98876190]
[108.60884094 55.98402405]
[108.23189545 70.97928619]
[107.85494232 85.97454834]
[121.73110199 91.67123413]
[131.99931335 80.73670959]
[142.26751709 69.80217743]
[152.53572083 58.86764908]
[155.75164795 42.78692245]
[171.37052917 37.78865814]
[183.32499695 49.01464844]
[179.31732178 64.91654968]
[163.47024536 69.13585663]
[153.20204163 80.07038116]
[142.93383789 91.00491333]
[132.66563416 101.93944550]
[134.80326843 109.12835693]
[139.07856750 123.50618744]
[141.21620178 130.69509888]
[155.79067993 134.24258423]
[170.36515808 137.79006958]
[184.98306274 141.15412903]
[199.64208984 144.33422852]
[214.30110168 147.51434326]
[228.96012878 150.69444275]
[238.12542725 149.45176697]
[243.94540405 154.14305115]
[258.51989746 157.69053650]
[271.88916016 149.26211548]
[287.28375244 152.83726501]
[295.57037354 166.29489136]
[291.83267212 181.65083313]
[278.28817749 189.79469299]
[262.97259521 185.89485168]
[254.97239685 172.26501465]
[240.39791870 168.71752930]
[225.78001404 165.35346985]
[211.12100220 162.17337036]
[196.46197510 158.99325562]
[181.80294800 155.81315613]
[174.51780701 157.48852539]
[166.81767273 152.36454773]
[152.24319458 148.81706238]
[137.66871643 145.26957703]
[93.02192688 111.41934967]
[80.15902710 119.13594055]
[67.29612732 126.85253906]
[54.43322372 134.56912231]
[41.57032394 142.28572083]
[28.70742416 150.00231934]
[15.84452438 157.71890259]
[2.98162484 165.43550110]
[-9.88127518 173.15209961]
[-22.74417496 180.86868286]
[-8.03580284 183.81211853]
[2.86977482 194.11106873]
[6.64926863 208.62710571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[12 36]
[13 35]
[14 34]
[15 33]
[17 31]
[18 30]
[19 29]
[20 28]
[45 121]
[46 120]
[47 119]
[48 118]
[49 117]
[50 116]
[51 115]
[52 114]
[53 113]
[54 112]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[72 83]
[73 82]
[74 81]
[75 80]
[86 111]
[87 110]
[88 109]
[89 107]
[90 106]
[91 105]
[92 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
