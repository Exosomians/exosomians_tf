%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUUUUUGAUUCACGCGGCGGGCCCUUAGCUUGGGCCCAGCGUUCUUACCCUUAGAACGUACUAUGGUGAUGUGGUCGCCGCGACAGAUU\
) } def
/len { sequence length } bind def

/coor [
[69.82571411 305.25411987]
[56.08742142 311.46078491]
[41.26285553 314.19860840]
[26.21390152 313.30844116]
[11.81548405 308.84201050]
[-1.09529197 301.05899048]
[-11.76781082 290.41189575]
[-19.58158493 277.51971436]
[-24.08233452 263.13198853]
[-25.00838852 248.08518982]
[-22.30591011 233.25413513]
[-16.13201714 219.50108337]
[-6.84565163 207.62561035]
[5.01328993 198.31814575]
[18.75534439 192.11981201]
[33.58156586 189.39096069]
[48.62997818 190.29026794]
[53.07411194 175.96372986]
[57.51824570 161.63719177]
[61.96237946 147.31065369]
[66.40650940 132.98411560]
[70.85064697 118.65757751]
[65.69418335 104.57173920]
[53.05079651 96.50050354]
[40.40741348 88.42926788]
[27.76402855 80.35803223]
[15.12064552 72.28679657]
[2.47726107 64.21556091]
[-12.38568115 69.07631683]
[-26.87643623 63.19822311]
[-34.15291595 49.35673141]
[-30.77938652 34.08737564]
[-18.34872627 24.59987259]
[-2.73031211 25.37393570]
[8.70131683 36.04407501]
[10.54849625 51.57217407]
[23.19188118 59.64340973]
[35.83526611 67.71464539]
[48.47864914 75.78588104]
[61.12203217 83.85711670]
[73.76541901 91.92835236]
[86.52495575 74.94842529]
[108.28710175 71.74711609]
[114.14294434 57.93736649]
[119.99877930 44.12761688]
[125.85462189 30.31786919]
[131.71046448 16.50811958]
[137.56629944 2.69837189]
[143.42213440 -11.11137676]
[136.15693665 -24.95879364]
[139.54292297 -40.22539902]
[151.98130798 -49.70276260]
[167.59909058 -48.91596985]
[179.02201843 -38.23651505]
[180.85653687 -22.70691109]
[172.23645020 -9.65976524]
[157.23188782 -5.25553751]
[151.37605286 8.55421066]
[145.52020264 22.36395836]
[139.66436768 36.17370605]
[133.80853271 49.98345566]
[127.95269012 63.79320526]
[122.09684753 77.60295105]
[129.95568848 90.37944031]
[144.92219543 91.38133240]
[159.88870239 92.38321686]
[174.85519409 93.38510895]
[189.82170105 94.38700104]
[204.78820801 95.38888550]
[219.25958252 87.67453766]
[233.03106689 96.57838440]
[231.93571472 112.94091034]
[217.10035706 119.92975616]
[203.78631592 110.35539246]
[188.81980896 109.35350037]
[173.85331726 108.35160828]
[158.88681030 107.34972382]
[143.92030334 106.34783173]
[128.95379639 105.34593964]
[111.30930328 126.10092163]
[85.17718506 123.10170746]
[80.73304749 137.42825317]
[76.28891754 151.75479126]
[71.84477997 166.08131409]
[67.40065002 180.40785217]
[62.95651627 194.73439026]
[75.87200928 202.50958252]
[86.55097961 213.15020752]
[94.37256622 226.03765869]
[98.88204193 240.42265320]
[99.81721497 255.46887207]
[97.12372589 270.30157471]
[90.95817566 284.05834961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
