%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUUCGUUGACGAAGCAGAGGGGCAGCCCCUUAGCUUGGGGCCAGAGGGCGCACUGUCUGCCCCUGUGAGUGGUGAUAUGAUUGCUCCUUCUGAAU\
) } def
/len { sequence length } bind def

/coor [
[65.18322754 280.46679688]
[50.18342590 280.38998413]
[38.57224655 270.89361572]
[35.52132034 256.20541382]
[26.24893570 267.99621582]
[16.97655106 279.78701782]
[7.70416594 291.57778931]
[-1.56821871 303.36859131]
[-3.36521244 319.66900635]
[-18.48701859 326.01431274]
[-31.37761879 315.87701416]
[-28.77626991 299.68551636]
[-13.35901546 294.09622192]
[-4.08663034 282.30541992]
[5.18575430 270.51461792]
[14.45813942 258.72381592]
[23.73052406 246.93302917]
[31.63890648 234.18714905]
[38.08583069 220.64324951]
[44.53275299 207.09934998]
[50.97967529 193.55545044]
[57.42660141 180.01155090]
[63.87352371 166.46765137]
[70.32044983 152.92375183]
[76.55167389 139.27928162]
[82.56562805 125.53765106]
[88.57958984 111.79602814]
[85.27493286 97.16458130]
[73.93869019 87.34166718]
[62.60244370 77.51875305]
[51.26620102 67.69584656]
[39.92995834 57.87293243]
[24.51841927 60.52218628]
[11.03570461 52.60067368]
[5.84793615 37.84868622]
[11.40462112 23.23166656]
[25.08206177 15.65132236]
[40.42218781 18.68686104]
[50.18186569 30.90499306]
[49.75286865 46.53668976]
[61.08911133 56.35960007]
[72.42535400 66.18251038]
[83.76159668 76.00542450]
[95.09783936 85.82833099]
[109.86995697 83.22360992]
[117.16291046 70.11586761]
[117.11127472 54.29475021]
[130.06047058 46.93487930]
[137.35342407 33.82714081]
[144.64636230 20.71939850]
[151.93931580 7.61165810]
[153.42620850 -1.59233582]
[159.67730713 -5.79093266]
[167.38247681 -18.66068459]
[175.08763123 -31.53043556]
[172.59210205 -47.37820816]
[183.53227234 -59.11243439]
[199.51579285 -57.73162460]
[208.28146362 -44.29501343]
[203.10502625 -29.11002159]
[187.95738220 -23.82527351]
[180.25222778 -10.95552349]
[172.54705811 1.91422808]
[165.04705811 14.90460873]
[157.75410461 28.01235008]
[150.46115112 41.12009048]
[143.16821289 54.22783279]
[143.74148560 69.11139679]
[130.27064514 77.40882111]
[122.97769928 90.51656342]
[137.22572327 85.82681274]
[152.21095276 86.49250031]
[165.98699951 92.42715454]
[176.76460266 102.85996246]
[183.14387512 116.43585968]
[184.29626465 131.39152527]
[180.07208252 145.78445435]
[171.02000427 157.74520874]
[158.31573486 165.72027588]
[143.60939026 168.67379761]
[128.81109619 166.22216797]
[115.84292603 158.68382263]
[106.38926697 147.03787231]
[101.67800140 132.79695129]
[102.32121277 117.80998230]
[96.30725861 131.55160522]
[90.29329681 145.29324341]
[89.68803406 154.59689331]
[83.86434937 159.37068176]
[77.41741943 172.91458130]
[70.97049713 186.45848083]
[64.52357483 200.00238037]
[58.07665253 213.54627991]
[51.62972641 227.09017944]
[45.18280411 240.63406372]
[59.69634247 236.84498596]
[73.36164856 243.03039551]
[80.09247589 256.43548584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 87]
[26 86]
[27 85]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[45 70]
[46 69]
[48 67]
[49 66]
[50 65]
[51 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
