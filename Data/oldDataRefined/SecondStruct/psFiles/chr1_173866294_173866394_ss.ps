%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGGGUCUAUGUAGUCUGUCUAUCAUGUAGAGAAGUACUAAUUUAGACGACUUGAUACGUUGGUAGUAUCAUAGACAAAAGUGUAAAAGAAGUCAUAAU\
) } def
/len { sequence length } bind def

/coor [
[4.76162052 167.81382751]
[-8.82860756 161.46514893]
[-18.45455742 149.96119690]
[-22.30687141 135.46430969]
[-19.66144371 120.69943237]
[-11.01552677 108.44185638]
[2.00549912 100.99567413]
[-12.73909760 98.23943329]
[-27.48369408 95.48319244]
[-42.22829056 92.72694397]
[-56.97288513 89.97070312]
[-71.12510681 100.11042023]
[-87.91819000 97.02419281]
[-97.16944122 83.07411194]
[-111.99192810 80.77323914]
[-126.81440735 78.47235870]
[-141.63688660 76.17148590]
[-156.49304199 74.09914398]
[-171.37934875 72.25581360]
[-188.06149292 79.85916138]
[-201.70845032 68.94528198]
[-216.64445496 67.56125641]
[-231.58047485 66.17723083]
[-246.51647949 64.79320526]
[-261.45248413 63.40918350]
[-277.78195190 67.96827698]
[-286.68331909 53.53907394]
[-275.28216553 40.99117279]
[-260.06848145 48.47317123]
[-245.13246155 49.85719681]
[-230.19644165 51.24122238]
[-215.26043701 52.62524796]
[-200.32441711 54.00927353]
[-190.71652222 46.48227692]
[-178.16018677 47.62659836]
[-169.53602600 57.36950684]
[-154.64971924 59.21283340]
[-147.50126648 56.87044525]
[-139.33601379 61.34900284]
[-124.51353455 63.64987946]
[-109.69104767 65.95075226]
[-94.86856842 68.25162506]
[-85.54508209 59.21257019]
[-72.51537323 57.21791077]
[-60.56511688 63.22952271]
[-54.21664429 75.22610474]
[-39.47204590 77.98235321]
[-24.72745132 80.73859406]
[-9.98285484 83.49483490]
[4.76174212 86.25107574]
[19.76174164 86.25107574]
[34.50634003 83.49483490]
[49.25093460 80.73859406]
[63.99553299 77.98235321]
[78.74012756 75.22610474]
[92.06302643 68.33405304]
[102.83170319 57.89204407]
[113.60037994 47.45003510]
[124.36905670 37.00802231]
[135.13774109 26.56601524]
[133.83450317 10.98283195]
[142.89501953 -1.76240146]
[158.04119873 -5.65177727]
[172.12147522 1.15114987]
[178.48757935 15.43424511]
[174.13362122 30.45346832]
[161.11540222 39.11720276]
[145.57974243 37.33469391]
[134.81106567 47.77670288]
[124.04238892 58.21871185]
[113.27371216 68.66072083]
[102.50503540 79.10272980]
[113.04426575 85.87284851]
[117.06633759 96.55877686]
[131.61329651 100.21748352]
[146.88389587 96.07992554]
[157.33952332 106.68788910]
[171.88647461 110.34659576]
[187.50292969 105.34077454]
[199.46282959 116.56096649]
[195.46286011 132.46481323]
[179.61784363 136.69178772]
[168.22776794 124.89355469]
[153.68081665 121.23484802]
[139.45071411 125.63410187]
[127.95458221 114.76443481]
[113.40763092 111.10573578]
[105.18157959 117.38132477]
[94.43269348 118.02442169]
[84.78934479 112.34846497]
[79.76760864 101.87908936]
[81.49636841 89.97070312]
[66.75177765 92.72694397]
[52.00717926 95.48319244]
[37.26258087 98.23943329]
[22.51798439 100.99567413]
[35.53919601 108.44202423]
[44.18502426 120.69966125]
[46.83034515 135.46455383]
[42.97792816 149.96141052]
[33.35189438 161.46530151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[14 42]
[15 41]
[16 40]
[17 39]
[18 37]
[19 36]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[74 87]
[75 86]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
