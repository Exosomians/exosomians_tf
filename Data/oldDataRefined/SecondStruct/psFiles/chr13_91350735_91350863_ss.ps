%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAACUCACGAAAAACAAGAUUCCACGUAGAUCACGUCUAUCACUUCAUCUAAUCGUAGAUGACGGGAUUCACGAGGAAGACCGUAUUCUUCAAUACAUAAGUAGGUUAUUAAGUUCGGUUCGUUCA\
) } def
/len { sequence length } bind def

/coor [
[150.49168396 272.77651978]
[138.98661804 282.40115356]
[125.81124115 289.57119751]
[111.48173523 294.00576782]
[96.55948639 295.53109741]
[81.62911987 294.08743286]
[67.27556610 289.73135376]
[54.06115341 282.63351440]
[42.50359344 273.07199097]
[33.05568314 261.42135620]
[26.08756447 248.13809204]
[21.87223053 233.74256897]
[20.57482910 218.79878235]
[22.24618912 203.89219666]
[26.82082939 189.60679626]
[34.11952972 176.50225830]
[43.85634232 165.09196472]
[55.64980316 155.82298279]
[69.03787994 149.05841064]
[83.49606323 145.06327820]
[98.45790863 143.99411011]
[113.33725739 145.89279175]
[127.55574799 150.68699646]
[118.73896790 138.55174255]
[109.92218781 126.41648102]
[101.10540771 114.28122711]
[88.41168213 108.41940308]
[86.75933838 94.53555298]
[77.94255829 82.40029907]
[69.12577820 70.26503754]
[54.75463104 63.64833832]
[53.53333664 48.80388641]
[44.71656036 36.66863251]
[35.89978027 24.53337860]
[27.08300209 12.39812279]
[12.71185589 5.78142023]
[11.49056053 -9.06303024]
[2.67378187 -21.19828415]
[-6.14299679 -33.33353806]
[-14.95977592 -45.46879578]
[-22.61583519 -50.63903046]
[-23.83878708 -58.00550079]
[-32.35975647 -70.35025787]
[-40.88072968 -82.69501495]
[-49.55023575 -94.93592072]
[-58.36701584 -107.07117462]
[-73.50256348 -104.79660034]
[-87.95767212 -109.82736206]
[-98.41065216 -121.00743103]
[-102.45948792 -135.76770020]
[-99.17378235 -150.71636963]
[-89.30857849 -162.41835022]
[-75.13082123 -168.18460083]
[-59.89845276 -166.69009399]
[-47.11176300 -158.27824402]
[-39.70903778 -144.88204956]
[-39.39137268 -129.57983398]
[-46.23176193 -115.88795471]
[-37.41498184 -103.75270081]
[-30.87200928 -100.15408325]
[-28.53597069 -91.21598816]
[-20.01499939 -78.87123108]
[-11.49402905 -66.52647400]
[-2.82452083 -54.28557205]
[5.99225807 -42.15031815]
[14.80903721 -30.01506424]
[23.62581635 -17.87980843]
[37.36632538 -12.13110065]
[39.21825790 3.58134437]
[48.03503418 15.71659946]
[56.85181427 27.85185432]
[65.66859436 39.98711014]
[79.40910339 45.73581696]
[81.26103210 61.44826126]
[90.07781219 73.58351898]
[98.89459229 85.71877289]
[111.58831787 91.58059692]
[113.24066162 105.46444702]
[122.05744171 117.59970093]
[130.87422180 129.73495483]
[139.69099426 141.87020874]
[152.13781738 150.24140930]
[166.70193481 153.83114624]
[181.26606750 157.42086792]
[195.83020020 161.01060486]
[210.39431763 164.60034180]
[219.27392578 156.51502991]
[230.84716797 153.79484558]
[242.16694641 157.01211548]
[250.40890503 165.24230957]
[253.57606506 176.32574463]
[267.94976807 180.61492920]
[282.32345581 184.90411377]
[291.54595947 184.36378479]
[296.99032593 189.47450256]
[311.25616455 194.10975647]
[325.52203369 198.74501038]
[339.78787231 203.38026428]
[354.10867310 207.84280396]
[366.35598755 198.31477356]
[381.86575317 197.83886719]
[394.67419434 206.59806824]
[399.85617065 221.22430420]
[395.41912842 236.09347534]
[383.06918335 245.48808289]
[367.55517578 245.79571533]
[354.84249878 236.89808655]
[349.81948853 222.21649170]
[342.43566895 223.32975769]
[335.15261841 217.64610291]
[320.88677979 213.01084900]
[306.62091064 208.37559509]
[292.35507202 203.74034119]
[278.03427124 199.27780151]
[263.66058350 194.98861694]
[249.28688049 190.69943237]
[233.83370972 200.37461853]
[215.88330078 195.70161438]
[206.80459595 179.16447449]
[192.24046326 175.57473755]
[177.67633057 171.98500061]
[163.11221313 168.39526367]
[148.54808044 164.80552673]
[158.34718323 176.16235352]
[165.71748352 189.22676086]
[170.37022400 203.48692322]
[172.12312317 218.38414001]
[170.90751648 233.33480835]
[166.77102661 247.75317383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 81]
[24 80]
[25 79]
[26 78]
[28 76]
[29 75]
[30 74]
[32 72]
[33 71]
[34 70]
[35 69]
[37 67]
[38 66]
[39 65]
[40 64]
[42 63]
[43 62]
[44 61]
[45 59]
[46 58]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[91 116]
[92 115]
[93 114]
[95 113]
[96 112]
[97 111]
[98 110]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
