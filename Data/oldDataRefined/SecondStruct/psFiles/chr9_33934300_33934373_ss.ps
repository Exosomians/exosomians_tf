%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUGAGUCAGAGUCACGACAGGUGUGUAUGUUGAGUCUAUACACGAACCUUUAUUUUGUAGUAACAGAAAAG\
) } def
/len { sequence length } bind def

/coor [
[91.81808472 194.03681946]
[90.56291199 179.08943176]
[89.30774689 164.14202881]
[88.05258179 149.19464111]
[86.79740906 134.24725342]
[85.54224396 119.29985809]
[86.64314270 114.10340881]
[88.70478058 109.46166992]
[74.64555359 114.69025421]
[60.58632278 119.91883087]
[56.54333496 134.89994812]
[44.44569778 144.61729431]
[28.94519997 145.33435059]
[16.00209808 136.77539062]
[10.59327888 122.23152161]
[14.79854488 107.29514313]
[27.00088501 97.70960236]
[42.50825119 97.16074371]
[55.35774231 105.85960388]
[69.41696930 100.63101959]
[83.47620392 95.40244293]
[91.77707672 82.90862274]
[91.14894104 67.92178345]
[90.52080536 52.93493652]
[89.89266968 37.94809723]
[88.63750458 23.00070190]
[86.75750732 8.11898232]
[84.87750244 -6.76273823]
[82.99750519 -21.64445877]
[81.11750793 -36.52618027]
[79.23751068 -51.40790176]
[77.35751343 -66.28961945]
[64.11595154 -74.60797882]
[59.36848831 -89.50749207]
[65.35673523 -103.95307922]
[79.25322723 -111.12396240]
[94.49645996 -107.63427734]
[103.88904572 -95.13175201]
[102.99609375 -79.51968384]
[92.23923492 -68.16961670]
[94.11923218 -53.28789902]
[95.99922943 -38.40617752]
[97.87922668 -23.52445793]
[99.75922394 -8.64273739]
[101.63922119 6.23898363]
[103.51922607 21.12070465]
[106.91681671 24.85592461]
[107.80070496 30.85248756]
[104.87950897 37.31996155]
[105.50764465 52.30680466]
[106.13578033 67.29364777]
[106.76391602 82.28048706]
[116.08113098 94.03588867]
[130.52857971 98.06968689]
[144.97601318 102.10348511]
[159.42344666 106.13728333]
[173.87088013 110.17108154]
[189.61161804 105.57091522]
[201.27725220 117.09674835]
[196.86720276 132.89178467]
[180.91813660 136.70745850]
[169.83709717 124.61851501]
[155.38964844 120.58471680]
[140.94221497 116.55092621]
[126.49477386 112.51712799]
[112.04733276 108.48332977]
[100.48963928 118.04468536]
[101.74480438 132.99208069]
[102.99996948 147.93946838]
[104.25514221 162.88687134]
[105.51030731 177.83425903]
[106.76547241 192.78164673]
[114.11599731 208.05929565]
[101.47023773 219.35182190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[8 21]
[9 20]
[10 19]
[22 52]
[23 51]
[24 50]
[25 49]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
