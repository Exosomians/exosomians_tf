%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAUAGACUAGCAGAAGCUUGGAGGCUGAAAGCAAGAACUAAUUACUUUUGUAAGAACCGUUUACGAAAGCGAGACC\
) } def
/len { sequence length } bind def

/coor [
[156.83222961 166.33546448]
[149.46405029 159.65432739]
[143.76840210 151.48786926]
[140.03683472 142.24609375]
[138.46209717 132.39421082]
[139.12828064 122.42929077]
[125.05540466 117.23753357]
[110.98253632 112.04577637]
[94.65935516 115.40111542]
[83.91776276 102.66053009]
[69.65190887 98.02527618]
[54.13621140 101.11940002]
[44.42281342 89.82784271]
[30.15696526 85.19258881]
[16.74471092 95.28624725]
[0.12447298 95.49349976]
[-13.26755810 85.92858124]
[-18.36026192 70.45242310]
[-32.79708862 66.38082123]
[-47.23391724 62.30921173]
[-61.67074585 58.23760605]
[-77.42346191 62.79654694]
[-89.05889130 51.24021149]
[-84.60749817 35.45676804]
[-68.64849854 31.68286705]
[-57.59914017 43.80077744]
[-43.16231155 47.87238312]
[-28.72548294 51.94398880]
[-14.28865433 56.01559830]
[-4.48896980 46.73447800]
[8.73895168 43.54814148]
[21.89927101 47.41054153]
[31.45806885 57.39788055]
[34.79222107 70.92674255]
[49.05806732 75.56199646]
[63.55337906 72.13632965]
[74.28716278 83.75942993]
[88.55301666 88.39468384]
[99.39732361 83.71031952]
[110.55813599 87.58055115]
[116.17429352 97.97290802]
[130.24716187 103.16466522]
[144.32003784 108.35642242]
[159.34286499 92.96759796]
[179.77726746 86.46491241]
[200.80935669 90.31933594]
[217.51303101 103.56908417]
[226.00375366 123.05875397]
[241.00375366 123.05875397]
[256.00375366 123.05875397]
[271.00375366 123.05875397]
[286.00375366 123.05875397]
[301.00375366 123.05875397]
[316.00375366 123.05875397]
[331.00375366 123.05875397]
[346.00375366 123.05875397]
[361.00375366 123.05875397]
[373.31896973 112.77698517]
[389.00646973 116.13587189]
[396.03213501 130.55876160]
[389.00646973 144.98164368]
[373.31896973 148.34053040]
[361.00375366 138.05876160]
[346.00375366 138.05876160]
[331.00375366 138.05876160]
[316.00375366 138.05876160]
[301.00375366 138.05876160]
[286.00375366 138.05876160]
[271.00375366 138.05876160]
[256.00375366 138.05876160]
[241.00375366 138.05876160]
[226.00375366 138.05876160]
[223.28005981 147.52902222]
[218.50498962 156.16065979]
[211.91581726 163.51531982]
[203.84205627 169.21836853]
[194.68901062 172.97793579]
[184.91737366 174.59983826]
[175.02012634 173.99760437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[10 38]
[11 37]
[13 35]
[14 34]
[18 29]
[19 28]
[20 27]
[21 26]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
