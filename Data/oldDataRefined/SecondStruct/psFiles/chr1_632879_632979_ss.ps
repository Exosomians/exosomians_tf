%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGAUUGUGAGUGUUGUUUUGAUUGAUUAUGAUUGUAGAGUCUGCGAGUCCUUUAUCUUUGGCAGACUUGAUAGGACGGGCGGUAGUAGGAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[13.87182331 203.32089233]
[-4.32443857 202.92504883]
[-20.55290604 194.79486084]
[-31.94397926 204.55412292]
[-43.33505249 214.31340027]
[-54.72612762 224.07267761]
[-60.17201614 238.92706299]
[-74.87120056 241.33192444]
[-86.26227570 251.09120178]
[-97.65334320 260.85046387]
[-97.31188965 276.48431396]
[-107.13983917 288.64761353]
[-122.49671936 291.59719849]
[-136.13150024 283.94036865]
[-141.60624695 269.29248047]
[-136.33593750 254.56976318]
[-122.80908203 246.72387695]
[-107.41262054 249.45939636]
[-96.02154541 239.70011902]
[-84.63047028 229.94084167]
[-79.99935150 215.78450012]
[-64.48540497 212.68161011]
[-53.09432983 202.92233276]
[-41.70325470 193.16305542]
[-30.31218147 183.40377808]
[-34.81332779 172.33377075]
[-35.95994186 160.41915894]
[-33.64496613 148.65557861]
[-28.05109024 138.02925110]
[-19.63636589 129.43435669]
[-9.09673119 123.59771729]
[2.69154382 121.01736450]
[14.74470806 121.92010498]
[26.05362320 126.24155426]
[35.66825485 133.63066101]
[48.17229080 125.34519196]
[60.67632675 117.05971527]
[73.18035889 108.77423859]
[85.68439484 100.48876953]
[92.08795166 88.05952454]
[106.03012848 87.00719452]
[118.53416443 78.72172546]
[118.11656189 64.84626007]
[124.59856415 52.69401550]
[136.17054749 45.42786407]
[149.71467590 44.87783051]
[161.64462280 51.08133698]
[174.39788818 43.18485260]
[187.15113831 35.28837204]
[199.90440369 27.39188957]
[203.63473511 12.26831913]
[216.68083191 4.44183779]
[231.07586670 8.09133911]
[243.82911682 0.19485644]
[256.58236694 -7.70162582]
[269.33563232 -15.59810829]
[282.08889771 -23.49459076]
[285.69537354 -29.37137604]
[290.97528076 -32.01361847]
[295.87933350 -31.45651627]
[309.09454346 -38.55292130]
[322.30972290 -45.64932251]
[321.58688354 -60.89531708]
[327.55853271 -74.94174194]
[339.03897095 -84.99967957]
[353.74877930 -89.07211304]
[368.76727295 -86.35046387]
[381.11254883 -77.37510681]
[388.33343506 -63.92811584]
[388.99621582 -48.67939377]
[382.96929932 -34.65658951]
[371.44934082 -24.64394188]
[356.72360229 -20.62946510]
[341.71594238 -23.41024017]
[329.40612793 -32.43413925]
[316.19094849 -25.33773804]
[302.97573853 -18.24133301]
[289.98538208 -10.74133396]
[277.23211670 -2.84485149]
[264.47885132 5.05163097]
[251.72560120 12.94811344]
[238.97233582 20.84459496]
[235.82283020 35.35721588]
[223.00169373 43.54704666]
[207.80088806 40.14514542]
[195.04762268 48.04162979]
[182.29437256 55.93811035]
[169.54110718 63.83459473]
[168.89428711 80.15746307]
[158.59156799 93.04656982]
[142.49331665 97.35895538]
[126.81964111 91.22576141]
[114.31560516 99.51123047]
[107.91204834 111.94047546]
[93.96987152 112.99280548]
[81.46583557 121.27827454]
[68.96179962 129.56375122]
[56.45776367 137.84922791]
[43.95372772 146.13470459]
[47.21469116 164.24176025]
[42.41781616 181.95256042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[8 20]
[9 19]
[10 18]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[41 93]
[42 92]
[47 88]
[48 87]
[49 86]
[50 85]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[60 77]
[61 76]
[62 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
