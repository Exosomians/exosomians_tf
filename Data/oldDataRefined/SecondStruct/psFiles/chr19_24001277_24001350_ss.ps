%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUGGGAAGAGGUGAAGCCGGAAGUUUCAAGAGUAAACUUAUAAACGAUGAUGGUGGUUCUAGACGUGGACC\
) } def
/len { sequence length } bind def

/coor [
[95.39250946 117.88762665]
[86.07529449 129.64302063]
[76.75807953 141.39842224]
[67.44086456 153.15382385]
[58.12364578 164.90922546]
[58.53182602 180.94709778]
[46.15523911 191.15492249]
[30.48814392 187.70213318]
[23.54899406 173.23742676]
[30.66091347 158.85687256]
[46.36824417 155.59201050]
[55.68545914 143.83660889]
[65.00267792 132.08120728]
[74.31989288 120.32581329]
[83.63710785 108.57041168]
[80.76435852 96.53148651]
[86.22576904 84.65515900]
[98.46899414 78.35950470]
[112.67255402 81.08356476]
[113.30068970 66.09672546]
[113.92881775 51.10988235]
[114.55695343 36.12303925]
[100.13767242 25.54953384]
[94.78077698 8.65113449]
[100.37737274 -8.00764370]
[114.59988403 -18.06689644]
[113.97175598 -33.05373764]
[113.34362030 -48.04058075]
[112.71548462 -63.02742386]
[102.46354675 -78.15689850]
[110.84095001 -93.43178558]
[109.58577728 -108.37918091]
[108.33061218 -123.32657623]
[96.09910583 -133.33485413]
[94.61019897 -149.06886292]
[104.74724579 -161.19386292]
[120.49610901 -162.51634216]
[132.51325989 -152.25166321]
[133.66915894 -136.48970032]
[123.27800751 -124.58174133]
[124.53317261 -109.63434601]
[125.78833771 -94.68695831]
[134.92446899 -86.48059845]
[135.93197632 -73.83527374]
[127.70232391 -63.65555954]
[128.33045959 -48.66871643]
[128.95860291 -33.68187332]
[129.58673096 -18.69503212]
[140.86126709 -13.37037086]
[148.75657654 -3.62536764]
[151.66047668 8.65113449]
[148.93630981 21.04383850]
[141.06118774 31.08616447]
[129.54379272 36.75117493]
[128.91566467 51.73801804]
[128.28752136 66.72486115]
[127.65939331 81.71170044]
[132.88796997 95.77093506]
[143.15617371 106.70545959]
[153.42439270 117.63999176]
[163.69259644 128.57452393]
[173.96080017 139.50904846]
[189.56285095 138.45555115]
[202.16134644 147.71902466]
[205.80766296 162.92555237]
[198.78010559 176.89506531]
[184.39688110 183.03160095]
[169.44931030 178.43766785]
[160.99517822 165.28237915]
[163.02627563 149.77725220]
[152.75807190 138.84272766]
[142.48985291 127.90819550]
[132.22164917 116.97367096]
[121.95344543 106.03913879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[19 57]
[20 56]
[21 55]
[22 54]
[26 48]
[27 47]
[28 46]
[29 45]
[31 42]
[32 41]
[33 40]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
