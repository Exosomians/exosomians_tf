%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCGACAAGAGUCUUCCUUCCGUUGUUCCUUGCCAAGGCGUCAGACAGAGCCCGCGACACGGGUCGCGUGUAAGGUCCGGAGUAGUGACUUGUCGACUCGG\
) } def
/len { sequence length } bind def

/coor [
[69.89740753 530.32672119]
[63.64228439 516.35778809]
[64.60691833 501.08270264]
[72.56964874 488.01159668]
[85.70069885 480.14813232]
[84.79502106 465.17550659]
[83.88934326 450.20285034]
[82.98366547 435.23022461]
[82.07798767 420.25759888]
[79.03233337 416.38140869]
[78.50444031 410.50927734]
[81.59757996 404.35876465]
[81.59757996 389.35876465]
[81.59757996 374.35876465]
[81.59757996 359.35876465]
[68.63025665 352.02975464]
[61.02185822 339.10815430]
[60.90202332 324.01336670]
[68.40306854 310.79858398]
[81.59757996 303.06216431]
[81.59757996 288.06216431]
[81.59757996 273.06216431]
[81.59757996 258.06216431]
[81.59757996 243.06214905]
[72.41360474 237.86631775]
[66.24031067 229.20817566]
[64.29178619 218.67158508]
[67.00138855 208.22016907]
[73.92777252 199.83148193]
[83.82511902 195.12284851]
[85.18260193 180.18440247]
[86.54008484 165.24594116]
[87.89756775 150.30749512]
[89.25505066 135.36904907]
[90.61253357 120.43060303]
[79.92018127 114.06781006]
[73.53887939 102.17903900]
[74.22194672 87.64942169]
[82.83780670 74.64495850]
[77.94477081 60.46546173]
[73.05172729 46.28596115]
[67.19977570 39.04998398]
[68.23207855 31.60368538]
[63.76953506 17.28287315]
[50.28950119 8.58412838]
[48.82921600 -7.39232731]
[60.50889206 -18.39072418]
[76.36888123 -15.97403336]
[84.24275208 -1.99613321]
[78.09034729 12.82032681]
[82.55289459 27.14113998]
[87.23122406 41.39292145]
[92.12426758 55.57241821]
[97.01730347 69.75191498]
[111.84653473 72.00888062]
[120.73647308 59.92711639]
[129.62640381 47.84534836]
[138.51634216 35.76358032]
[147.40626526 23.68181419]
[156.29620361 11.60004807]
[157.57012939 -4.74954414]
[172.48091125 -11.57599831]
[185.68962097 -1.85684335]
[183.60827637 14.40968704]
[168.37797546 20.48998070]
[159.48803711 32.57174683]
[150.59809875 44.65351486]
[141.70817566 56.73528290]
[132.81823730 68.81704712]
[123.92830658 80.89881897]
[125.17073059 108.44828033]
[105.55097961 121.78808594]
[104.19349670 136.72653198]
[102.83601379 151.66497803]
[101.47853088 166.60342407]
[100.12104797 181.54188538]
[98.76356506 196.48033142]
[112.44965363 210.96928406]
[111.35571289 230.57142639]
[96.59757996 243.06214905]
[96.59757996 258.06216431]
[96.59757996 273.06216431]
[96.59757996 288.06216431]
[96.59757996 303.06216431]
[109.79208374 310.79858398]
[117.29312897 324.01336670]
[117.17329407 339.10815430]
[109.56489563 352.02975464]
[96.59757996 359.35876465]
[96.59757996 374.35876465]
[96.59757996 389.35876465]
[96.59757996 404.35876465]
[97.05062103 419.35192871]
[97.95629883 434.32455444]
[98.86197662 449.29718018]
[99.76765442 464.26980591]
[100.67333221 479.24246216]
[114.65647888 485.46582031]
[124.13669586 497.48181152]
[126.93550873 512.52923584]
[122.40975952 527.15032959]
[111.59943390 537.98522949]
[96.98867798 542.54418945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[12 92]
[13 91]
[14 90]
[15 89]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[39 54]
[40 53]
[41 52]
[43 51]
[44 50]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
