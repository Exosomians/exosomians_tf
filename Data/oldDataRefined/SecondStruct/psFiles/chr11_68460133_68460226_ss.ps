%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUUUAAGGGGACACCUCUUACGUCCGUAGCUAGGGCAAUGGAGAGUGUAUGAUUUGCUUGCGAGGAGGUGAAUUCGACUAAGGGAUCGGGC\
) } def
/len { sequence length } bind def

/coor [
[142.44740295 450.71456909]
[153.12896729 439.29360962]
[151.15058899 424.42465210]
[149.17219543 409.55569458]
[147.19381714 394.68673706]
[145.21543884 379.81774902]
[143.23704529 364.94879150]
[133.88871765 353.35321045]
[139.73829651 338.65310669]
[137.75990295 323.78414917]
[125.81152344 314.96530151]
[123.59334564 299.91424561]
[132.92434692 287.44149780]
[130.94596863 272.57250977]
[128.23275757 257.81994629]
[124.79140472 243.22004700]
[121.35004425 228.62014771]
[117.90868378 214.02024841]
[114.46733093 199.42034912]
[111.02597046 184.82044983]
[107.58460999 170.22055054]
[104.14324951 155.62065125]
[99.45183563 149.71615601]
[100.83795929 140.48124695]
[97.88120270 125.77555084]
[94.92444611 111.06984711]
[57.70361328 103.08206940]
[47.00968552 92.56351471]
[36.31575775 82.04496765]
[25.62183189 71.52641296]
[10.35761738 67.36536407]
[6.70966244 52.92439651]
[-3.98426437 42.40584183]
[-19.98624611 38.81856155]
[-24.62164497 23.08817291]
[-13.12196064 11.39675331]
[2.68291903 15.77143383]
[6.53428745 31.71191597]
[17.22821426 42.23046875]
[31.72752762 45.63915634]
[36.14038467 60.83248901]
[46.83431244 71.35103607]
[57.52823639 81.86959076]
[68.22216034 92.38814545]
[75.59844971 91.03153992]
[97.72731781 86.96173096]
[103.97904205 73.32662964]
[110.23077393 59.69153214]
[116.48249817 46.05643463]
[122.73423004 32.42133331]
[115.87146759 18.37012291]
[119.69638062 3.20753574]
[132.40295410 -5.90711641]
[147.99154663 -4.67017365]
[159.10168457 6.33431816]
[160.48750305 21.91037369]
[151.49467468 34.70345688]
[136.36932373 38.67306137]
[130.11759949 52.30816269]
[123.86586761 65.94326019]
[117.61414337 79.57835388]
[111.36241150 93.21345520]
[109.63014221 108.11309052]
[112.58689880 122.81879425]
[115.54365540 137.52449036]
[118.74314880 152.17929077]
[122.18450928 166.77919006]
[125.62586975 181.37908936]
[129.06723022 195.97898865]
[132.50859070 210.57888794]
[135.94995117 225.17878723]
[139.39129639 239.77868652]
[142.83265686 254.37858582]
[146.70635986 258.45837402]
[148.31878662 263.16464233]
[147.83270264 267.47348022]
[145.81492615 270.59414673]
[147.79331970 285.46310425]
[160.06106567 295.06207275]
[161.85560608 310.16949463]
[152.62887573 321.80575562]
[154.60725403 336.67471313]
[164.09709167 349.33383179]
[158.10601807 362.97042847]
[160.08439636 377.83938599]
[162.06277466 392.70834351]
[164.04116821 407.57730103]
[166.01954651 422.44625854]
[167.99792480 437.31521606]
[181.29421997 445.54580688]
[186.14012146 460.41360474]
[180.24754333 474.89849854]
[166.39877319 482.16113281]
[151.13279724 478.77233887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[9 82]
[10 81]
[13 78]
[14 77]
[15 73]
[16 72]
[17 71]
[18 70]
[19 69]
[20 68]
[21 67]
[22 66]
[24 65]
[25 64]
[26 63]
[27 44]
[28 43]
[29 42]
[30 41]
[32 39]
[33 38]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
