%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCUACUACUGGAGUUAUGUACGUAAGGAACCUUUCGACUUGUUUUACUCACUUUUGAGAUAUGGCAGCAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[61.77848816 345.44201660]
[50.76199722 356.14401245]
[35.86652374 359.88839722]
[21.09887123 355.66793823]
[10.43146896 344.61798096]
[6.73379183 329.71084595]
[11.00049591 314.95648193]
[22.08386040 304.32376099]
[37.00251389 300.67282104]
[41.12433243 286.25027466]
[37.18217850 271.88681030]
[48.41374969 260.74398804]
[52.53556442 246.32142639]
[56.65738297 231.89884949]
[49.22284317 219.04336548]
[53.19749832 204.35810852]
[66.73191071 196.64724731]
[70.85372925 182.22467041]
[74.97554016 167.80210876]
[79.09735870 153.37953186]
[83.21917725 138.95695496]
[87.34099579 124.53438568]
[91.46280670 110.11180878]
[82.15460205 103.12730408]
[80.06990051 88.51808929]
[72.14360809 75.78333282]
[58.28248596 68.15576172]
[58.12598419 53.26197815]
[50.19969177 40.52722549]
[42.27339935 27.79247665]
[27.56044960 20.54946899]
[26.74673843 4.17052269]
[40.66934204 -4.49510813]
[55.00587845 3.46703577]
[55.00814819 19.86618233]
[62.93444443 32.60093307]
[70.86073303 45.33568573]
[84.15491486 52.05238342]
[84.87835693 67.85704041]
[92.80464935 80.59179688]
[85.08493805 67.73076630]
[84.50338745 52.74204254]
[91.20339203 39.32154083]
[103.53287506 30.77847672]
[118.45162964 29.21940231]
[132.28100586 35.02874756]
[141.61094666 46.77405167]
[144.14088440 61.55915833]
[139.24699402 75.73836517]
[128.13600159 85.81536102]
[113.54888153 89.30539703]
[128.19152832 86.05071259]
[142.83416748 82.79602814]
[157.47682190 79.54135132]
[169.18905640 68.06287384]
[184.91102600 72.72678375]
[188.46928406 88.73524475]
[176.20343018 99.62012482]
[160.73150635 94.18399048]
[146.08885193 97.43867493]
[131.44621277 100.69335938]
[116.80356598 103.94803619]
[105.88538361 114.23362732]
[101.76356506 128.65620422]
[97.64174652 143.07876587]
[93.51993561 157.50134277]
[89.39811707 171.92391968]
[85.27629852 186.34649658]
[81.15447998 200.76907349]
[88.57040405 214.46731567]
[84.18483734 229.03514099]
[71.07995605 236.02066040]
[66.95813751 250.44323730]
[62.83632278 264.86581421]
[66.48365784 280.26086426]
[55.54690552 290.37207031]
[51.42508698 304.79464722]
[62.16155243 315.77755737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 77]
[10 76]
[12 74]
[13 73]
[14 72]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
