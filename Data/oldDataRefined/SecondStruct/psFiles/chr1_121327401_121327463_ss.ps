%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGUCUUGCUCUGGGACUAUCAAACUCCUACGUCACUCGACAUUAGUACGGUGACGUGAGG\
) } def
/len { sequence length } bind def

/coor [
[49.50695801 147.06182861]
[33.77529526 155.76686096]
[15.89312267 157.09957886]
[-0.86561745 150.85597229]
[-13.44937801 138.21549988]
[-27.30757141 143.95574951]
[-41.16576385 149.69599915]
[-55.02395630 155.43626404]
[-68.88214874 161.17651367]
[-76.32527161 175.38845825]
[-92.10401154 178.28860474]
[-104.11428070 167.65219116]
[-103.14281464 151.63858032]
[-89.93484497 142.53202820]
[-74.62239838 147.31831360]
[-60.76420975 141.57806396]
[-46.90601349 135.83781433]
[-33.04782104 130.09756470]
[-19.18962860 124.35730743]
[-20.03082466 112.01569366]
[-17.20825577 99.95134735]
[-10.95917130 89.22953033]
[-1.82389247 80.80047607]
[9.40087605 75.41517639]
[21.73152733 73.55847931]
[34.08374023 75.40545654]
[45.36783218 80.80496979]
[54.58488464 89.29196930]
[60.91518021 100.12751770]
[75.62696075 97.20116425]
[90.33873749 94.27481079]
[104.97426605 90.98828888]
[119.52473450 87.34358978]
[134.07521057 83.69889069]
[148.62567139 80.05418396]
[163.17614746 76.40948486]
[177.72660828 72.76477814]
[192.27708435 69.12007904]
[200.18240356 63.81732559]
[207.63096619 65.67224884]
[222.34274292 62.74589157]
[236.97827148 59.45937347]
[251.52874756 55.81467056]
[262.93014526 44.02740097]
[278.77108765 48.26962662]
[282.75576782 64.17731476]
[270.78506470 75.38599396]
[255.17344666 70.36514282]
[240.62297058 74.00984192]
[234.68263245 78.87134552]
[225.26908875 77.45767212]
[210.55731201 80.38402557]
[195.92178345 83.67054749]
[181.37132263 87.31524658]
[166.82084656 90.95995331]
[152.27038574 94.60465240]
[137.71990967 98.24935913]
[123.16944122 101.89405823]
[108.61897278 105.53876495]
[101.90377808 110.56760406]
[93.26509094 108.98658752]
[78.55331421 111.91294861]
[63.84153366 114.83930206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[29 63]
[30 62]
[31 61]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[40 52]
[41 51]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
