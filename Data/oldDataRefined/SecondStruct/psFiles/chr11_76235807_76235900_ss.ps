%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUAAUUCUUUUCUCCCCGAGCAGGCCCUAAACUUGGGCCCUGGAGAGCCUGGGUUUGGCUCUUAGUAUGGGGAUCUGGUUGCUCGGUAGA\
) } def
/len { sequence length } bind def

/coor [
[45.89634323 276.56707764]
[45.90309525 291.74484253]
[40.42290115 305.89871216]
[30.19691849 317.11447144]
[16.60812187 323.87533569]
[1.49428856 325.26690674]
[-13.10056114 321.10098267]
[-25.20259476 311.94100952]
[-33.17510986 299.02575684]
[-35.93988800 284.10195923]
[-33.12302017 269.18786621]
[-25.10546112 256.30053711]
[-12.97152042 247.18287659]
[1.63778603 243.06794739]
[16.74666977 244.51228333]
[23.44580078 231.09133911]
[30.14493370 217.67039490]
[26.60809326 205.97273254]
[32.24241257 194.67565918]
[44.47137070 190.18423462]
[51.61058426 176.99212646]
[58.74979401 163.80001831]
[65.88900757 150.60791016]
[73.02821350 137.41581726]
[80.16742706 124.22370148]
[87.30664062 111.03160095]
[84.83771515 96.23617554]
[73.80185699 86.07695770]
[62.76600266 75.91773224]
[51.73014069 65.75850677]
[40.69428253 55.59928513]
[25.21007729 57.78409195]
[11.97156334 49.46088409]
[7.22956324 34.55962753]
[13.22310352 20.11623955]
[27.12221909 12.95044422]
[42.36417007 16.44571304]
[51.75217819 28.95168495]
[50.85350800 44.56342316]
[61.88936615 54.72264862]
[72.92522430 64.88187408]
[83.96108246 75.04109192]
[94.99694061 85.20031738]
[102.46006012 84.45748138]
[108.63652039 70.78811646]
[117.38630676 82.97179413]
[124.84942627 82.22895050]
[133.66621399 70.09369659]
[142.48298645 57.95844269]
[151.29975891 45.82318878]
[160.11654663 33.68793488]
[168.93331909 21.55267906]
[177.75010681 9.41742325]
[173.79171753 -5.71086979]
[180.53039551 -19.82201004]
[194.78433228 -26.25315094]
[209.82324219 -21.96770096]
[218.54621887 -8.98912048]
[216.83454895 6.55450201]
[205.49642944 17.32394409]
[189.88536072 18.23420334]
[181.06857300 30.36945724]
[172.25180054 42.50471115]
[163.43501282 54.63996887]
[154.61824036 66.77522278]
[145.80146790 78.91047668]
[136.98468018 91.04573059]
[151.98432922 91.14875793]
[166.22854614 95.85005188]
[178.34263611 104.69589233]
[187.15745544 116.83257294]
[191.82228088 131.08877563]
[191.88691711 146.08863831]
[187.34512329 160.38452148]
[178.63522339 172.59672546]
[166.59782410 181.54663086]
[152.39465332 186.37051392]
[137.39645386 186.60279846]
[123.05070496 182.22108459]
[110.74192047 173.64823914]
[101.65802002 161.71162415]
[96.67568970 147.56324768]
[96.27577972 132.56857300]
[100.49874115 118.17080688]
[93.35953522 131.36291504]
[86.22032166 144.55502319]
[79.08110809 157.74713135]
[71.94190216 170.93923950]
[64.80268860 184.13133240]
[57.66347885 197.32344055]
[58.67763901 215.61682129]
[43.56587219 224.36953735]
[36.86674118 237.79046631]
[30.16760826 251.21141052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 94]
[16 93]
[17 92]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
