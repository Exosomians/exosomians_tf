%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUUUGUUUUUGGUUACGUCCAAGGUGGCUCUAAACUUGAGCCUAGCGACCUAAGUCUCAGGUCUCACGAUUGGUAAUGUGGUACCUUGGCGGUG\
) } def
/len { sequence length } bind def

/coor [
[55.68810272 283.18136597]
[49.20235443 296.79702759]
[39.53366089 308.37145996]
[27.28980637 317.17706299]
[13.24044704 322.66033936]
[-1.73125994 324.47659302]
[-16.68418121 322.51165771]
[-30.67836380 316.88906860]
[-42.83412170 307.96221924]
[-52.38733292 296.29232788]
[-58.73747635 282.61288452]
[-61.48537827 267.78387451]
[-60.45829773 252.73741150]
[-55.72079849 238.41935730]
[-47.57069016 225.72973633]
[-36.52028656 215.46623230]
[-23.26423454 208.27401733]
[-8.63581371 204.60520935]
[6.44541836 204.69042969]
[21.03144264 208.52432251]
[28.32439423 195.41658020]
[28.83493805 187.90367126]
[36.06238174 182.01399231]
[43.76754379 169.14424133]
[51.47270584 156.27449036]
[59.17786789 143.40473938]
[66.88302612 130.53498840]
[74.58818817 117.66523743]
[82.29335022 104.79548645]
[80.86750793 89.86340332]
[70.86597443 78.68444061]
[60.86443710 67.50547028]
[50.86290359 56.32650757]
[40.86136627 45.14754105]
[25.23844337 45.82449341]
[12.86700344 36.25989914]
[9.58846188 20.96986580]
[16.95084572 7.17387629]
[31.47786331 1.38597786]
[46.31030273 6.33903885]
[54.44473648 19.69437408]
[52.04033279 35.14600372]
[62.04187012 46.32497025]
[72.04340363 57.50393677]
[82.04493713 68.68290710]
[92.04647827 79.86186981]
[99.53137207 79.38619232]
[98.58024597 64.41637421]
[113.55007935 63.46548080]
[114.50117493 78.43483734]
[121.98607635 77.95915222]
[130.49197388 65.60400391]
[138.99786377 53.24885559]
[147.50376892 40.89370728]
[156.00967407 28.53855896]
[151.66854858 13.51561928]
[158.04685974 -0.76202834]
[172.13294983 -7.55291557]
[187.27578735 -3.65059257]
[196.32540894 9.10238266]
[195.00885010 24.68444443]
[183.94775391 35.73822021]
[168.36482239 37.04445648]
[159.85891724 49.39960480]
[151.35301208 61.75475311]
[142.84712219 74.10990143]
[134.34121704 86.46504974]
[140.35517883 100.20668030]
[155.20249939 102.34140015]
[170.04981995 104.47612762]
[184.89714050 106.61084747]
[199.74446106 108.74556732]
[210.46191406 97.52434540]
[225.73417664 94.77887726]
[239.68876648 101.56484985]
[246.95983887 115.27291870]
[244.75152588 130.63204956]
[233.91296387 141.73634338]
[218.61181641 144.31597900]
[204.73168945 137.37902832]
[197.60974121 123.59288788]
[182.76242065 121.45816803]
[167.91510010 119.32344818]
[153.06777954 117.18872070]
[138.22045898 115.05400085]
[110.93833923 124.94849396]
[95.16310120 112.50064850]
[87.45793915 125.37039948]
[79.75277710 138.24014282]
[72.04761505 151.10989380]
[64.34245300 163.97964478]
[56.63729477 176.84939575]
[48.93213272 189.71914673]
[41.43213272 202.70953369]
[34.13918304 215.81727600]
[45.08705902 226.19006348]
[53.11068344 238.96003723]
[57.70568085 253.32447815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 95]
[21 94]
[23 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
