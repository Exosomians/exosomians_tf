%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGAUAACUGAACCCAAUUAGCACACUGGCGCCACCGACCGUGCUUUAACUGGUUGGGACCCCAAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[74.99424744 389.80682373]
[60.21762848 386.89724731]
[46.41213226 380.87875366]
[34.22346878 372.03280640]
[24.22172165 360.77319336]
[16.87468910 347.62652588]
[12.52600765 333.20767212]
[11.37907219 318.19107056]
[13.48752785 303.27902222]
[18.75275803 289.16906738]
[26.92849731 276.52108765]
[37.63235092 265.92666626]
[50.36368179 257.88134766]
[64.52702332 252.76139832]
[79.45993042 250.80630493]
[80.74940491 235.86183167]
[82.03887177 220.91735840]
[83.32834625 205.97288513]
[84.61782074 191.02841187]
[85.90728760 176.08393860]
[87.19676208 161.13946533]
[88.48623657 146.19499207]
[89.77570343 131.25051880]
[78.52896118 124.90232086]
[70.59461212 114.71237946]
[67.19670105 102.25272369]
[68.85944366 89.44552612]
[75.32631683 78.26660156]
[85.59966278 70.44054413]
[98.09458923 67.17469788]
[100.66398621 52.39639282]
[103.23338318 37.61809158]
[105.80278015 22.83979034]
[108.37217712 8.06148911]
[97.47021484 -2.98056054]
[95.17398834 -18.32679749]
[102.36643982 -32.07627869]
[116.28192902 -38.94205093]
[131.56965637 -36.28408051]
[142.35119629 -25.12441635]
[144.48081970 -9.75417328]
[137.13963318 3.91647530]
[123.15047455 10.63088608]
[120.58107758 25.40918732]
[118.01168060 40.18748856]
[115.44228363 54.96578979]
[112.87288666 69.74409485]
[126.18611145 80.11486053]
[132.60131836 95.72383881]
[130.42857361 112.45925140]
[120.24024963 125.91261292]
[104.72017670 132.53999329]
[103.43070984 147.48446655]
[102.14123535 162.42893982]
[100.85176086 177.37341309]
[99.56229401 192.31788635]
[98.27281952 207.26235962]
[96.98334503 222.20683289]
[95.69387817 237.15130615]
[94.40440369 252.09577942]
[108.78170776 256.57986450]
[121.85870361 264.05023193]
[133.02375793 274.15744019]
[141.75466919 286.42877197]
[147.64305115 300.29025269]
[150.41352844 315.09359741]
[149.93649292 330.14636230]
[146.23426819 344.74456787]
[139.48001099 358.20541382]
[129.98962402 369.89929199]
[118.20700836 379.27926636]
[104.68324280 385.90661621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
