%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGUGGGCAUCUUGGCUGGAACGCCCCGGAAGCGGCGUGUGUUCGAGCACAGACACCCAGGCACAG\
) } def
/len { sequence length } bind def

/coor [
[135.51487732 297.26678467]
[130.74800110 283.04437256]
[125.98113251 268.82196045]
[121.21425629 254.59954834]
[116.44738770 240.37713623]
[111.68051910 226.15472412]
[108.83460999 224.82963562]
[106.44750977 222.10076904]
[105.14186096 218.18284607]
[105.42932892 213.54576111]
[107.61251068 208.85862732]
[105.54016876 194.00247192]
[103.46781921 179.14631653]
[91.46392059 170.40321350]
[89.15063477 155.36647034]
[98.40260315 142.83496094]
[96.33026123 127.97880554]
[94.25791168 113.12264252]
[85.81341553 101.97894287]
[90.88593292 88.94969940]
[88.81358337 74.09354401]
[86.74124146 59.23738480]
[84.66889191 44.38122940]
[82.59654999 29.52507401]
[80.52420044 14.66891766]
[78.10926819 -0.13540888]
[75.01319122 -14.81240845]
[71.57893372 -29.41397858]
[68.14467621 -44.01554871]
[56.52323151 -55.58594894]
[60.99371338 -71.36399841]
[76.95726776 -75.11859131]
[87.99195862 -62.98732758]
[82.74624634 -47.44980621]
[86.18050385 -32.84823608]
[89.61476135 -18.24666595]
[94.37429047 -12.25546265]
[92.85385895 -2.89165163]
[97.33161926 3.31297135]
[95.38036346 12.59657192]
[97.45270538 27.45272827]
[99.52505493 42.30888367]
[101.59739685 57.16504288]
[103.66973877 72.02119446]
[105.74208832 86.87735748]
[114.18658447 98.02105713]
[109.11406708 111.05030060]
[111.18641663 125.90645599]
[113.25875854 140.76261902]
[125.58695221 150.28382874]
[127.47697449 165.37960815]
[118.32397461 177.07397461]
[120.39632416 191.93013000]
[122.46866608 206.78628540]
[125.90292358 221.38784790]
[130.66979980 235.61026001]
[135.43667603 249.83267212]
[140.20353699 264.05508423]
[144.97041321 278.27749634]
[149.73728943 292.49990845]
[164.57844543 297.02975464]
[173.89572144 309.43814087]
[174.10643005 324.95379639]
[165.12953186 337.61059570]
[150.41685486 342.54180908]
[135.62571716 337.85122681]
[126.44358826 325.34249878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[11 54]
[12 53]
[13 52]
[16 49]
[17 48]
[18 47]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 38]
[27 36]
[28 35]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
