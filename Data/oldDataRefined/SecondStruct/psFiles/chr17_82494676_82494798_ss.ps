%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUACCCGGUGUCCGACGGGUCAGUCCUUUCUUUUCCCUCAGAUAUCGUCUCCUACCAAAGCUAGGUAGCUGGAGACCCAAUACCCGGGUCGUGCGAAGGCGACGCGGUGAGACGACCGAUA\
) } def
/len { sequence length } bind def

/coor [
[18.34237862 264.94024658]
[3.18811512 267.08660889]
[-11.22388172 261.93365479]
[-21.58184052 250.66549683]
[-25.50557709 235.87149048]
[-22.09344482 220.95117188]
[-12.12952900 209.33312988]
[2.09653687 203.68710327]
[3.61406183 188.76405334]
[5.13158655 173.84101868]
[6.64911127 158.91798401]
[-4.09099722 148.44657898]
[-18.97080421 150.34165955]
[-33.85061264 152.23674011]
[-46.56268692 161.65553284]
[-60.16549683 155.58818054]
[-75.04530334 157.48326111]
[-83.27236176 161.71466064]
[-90.32547760 159.23292542]
[-105.24851990 160.75045776]
[-120.17155457 162.26797485]
[-130.91729736 176.00242615]
[-147.93130493 177.73887634]
[-160.71702576 166.89318848]
[-175.59683228 168.78826904]
[-185.07133484 181.43775940]
[-200.72698975 183.60009766]
[-213.27560425 173.99240112]
[-215.27229309 158.31474304]
[-205.53247070 145.86840820]
[-189.83457947 144.03758240]
[-177.49191284 153.90846252]
[-162.61210632 152.01338196]
[-156.18167114 140.77116394]
[-144.25749207 135.23509216]
[-131.13565063 137.64860535]
[-121.68907928 147.34494019]
[-106.76604462 145.82742310]
[-91.84300232 144.30989075]
[-76.94038391 142.60345459]
[-62.06057739 140.70837402]
[-50.41280365 131.42512512]
[-35.74569321 137.35693359]
[-20.86588287 135.46185303]
[-5.98607588 133.56677246]
[3.82695484 129.44647217]
[13.71993065 130.18370056]
[21.57215118 134.97618103]
[34.30181503 127.04171753]
[47.03147888 119.10725403]
[59.76114273 111.17279053]
[72.49080658 103.23833466]
[85.22047424 95.30387115]
[92.50000000 82.18867493]
[92.50000000 67.18867493]
[92.50000000 52.18867493]
[92.50000000 37.18867493]
[92.50000000 22.18867493]
[80.40541840 12.27630329]
[77.56279755 -3.10074162]
[85.31433868 -16.68189049]
[100.00000000 -22.05454254]
[114.68566132 -16.68189049]
[122.43720245 -3.10074162]
[119.59458160 12.27630329]
[107.50000000 22.18867493]
[107.50000000 37.18867493]
[107.50000000 52.18867493]
[107.50000000 67.18867493]
[107.50000000 82.18867493]
[121.49978638 87.57624817]
[135.49832153 92.96336365]
[145.55409241 81.83316040]
[155.60986328 70.70295715]
[158.51559448 54.56328964]
[174.03533936 49.26523209]
[186.20373535 60.25897217]
[182.50296021 76.23509216]
[166.74006653 80.75872803]
[156.68429565 91.88893127]
[146.62852478 103.01913452]
[148.87374878 110.17517853]
[163.18591309 105.68496704]
[167.67588806 119.99720764]
[153.36419678 124.48726654]
[155.60942078 131.64331055]
[170.22116089 135.03402710]
[184.83290100 138.42475891]
[200.02487183 134.00723267]
[210.67372131 144.42123413]
[225.28546143 147.81195068]
[239.89720154 151.20266724]
[254.50894165 154.59339905]
[269.12069702 157.98411560]
[282.39865112 149.41256714]
[297.83078003 152.82212830]
[306.26144409 166.18997192]
[302.68893433 181.58517456]
[289.23269653 189.87406921]
[273.87612915 186.13896179]
[265.72994995 172.59585571]
[251.11822510 169.20513916]
[236.50648499 165.81442261]
[221.89474487 162.42369080]
[207.28298950 159.03297424]
[193.13615417 163.69302368]
[181.44218445 153.03649902]
[166.83044434 149.64578247]
[152.21870422 146.25505066]
[102.81258392 140.05802917]
[93.15493011 108.03353882]
[80.42527008 115.96799469]
[67.69560242 123.90245819]
[54.96593857 131.83691406]
[42.23627472 139.77137756]
[29.50661087 147.70584106]
[21.57215118 160.43550110]
[20.05462646 175.35853577]
[18.53710175 190.28158569]
[17.01957703 205.20462036]
[29.81789780 213.59875488]
[37.23915482 226.98471069]
[37.57800293 242.28646851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 120]
[9 119]
[10 118]
[11 117]
[12 45]
[13 44]
[14 43]
[16 41]
[17 40]
[19 39]
[20 38]
[21 37]
[24 33]
[25 32]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[72 81]
[73 80]
[74 79]
[86 109]
[87 108]
[88 107]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
