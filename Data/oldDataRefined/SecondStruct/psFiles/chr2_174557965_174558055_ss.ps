%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUAUACCUUGCGAAGUGCUUAAACGCACAGUAGGAACGCGUCCCCGGUACGAUUAGAAGAGACAUAGCAAGGUUAAAAUCAUAUACA\
) } def
/len { sequence length } bind def

/coor [
[118.65985107 326.75881958]
[125.11923981 312.92990112]
[136.94451904 303.27975464]
[133.39305115 288.70623779]
[129.84159851 274.13275146]
[126.29012299 259.55923462]
[122.73866272 244.98573303]
[117.99694824 239.10997009]
[119.32376862 229.85409546]
[116.27192688 215.16783142]
[113.22009277 200.48156738]
[110.16825104 185.79530334]
[107.11640930 171.10903931]
[104.06456757 156.42279053]
[101.01272583 141.73652649]
[77.82910156 135.37533569]
[61.99707413 117.28411865]
[58.76635361 93.46169281]
[69.20820618 71.80729675]
[60.14466095 59.85522079]
[51.08111572 47.90314484]
[42.01757050 35.95106888]
[32.95402527 23.99899101]
[16.15209007 24.61488724]
[2.38602328 15.25199986]
[-3.10488439 -0.29008433]
[1.62890136 -15.90707111]
[-7.83741760 -27.54274178]
[-17.30373764 -39.17840958]
[-26.77005577 -50.81407928]
[-41.75880814 -47.71636200]
[-56.46706772 -51.95023346]
[-67.51498413 -62.54278564]
[-72.36382294 -77.05992889]
[-69.89936066 -92.16571808]
[-60.68791580 -104.38896942]
[-46.84620285 -110.92086029]
[-31.55495071 -110.26040649]
[-18.32797623 -102.55938721]
[-10.20474243 -89.58743286]
[-9.05190849 -74.32540131]
[-15.13438702 -60.28039932]
[-5.66806746 -48.64472961]
[3.79825163 -37.00905991]
[13.26457119 -25.37339020]
[26.58829498 -27.32929039]
[39.22018433 -22.35651207]
[47.77119064 -11.67273235]
[49.88941193 1.95699513]
[44.90610123 14.93544483]
[53.96964645 26.88752174]
[63.03319168 38.83959961]
[72.09674072 50.79167557]
[81.16028595 62.74375153]
[88.52194214 59.86003113]
[96.29524994 58.41589737]
[104.20142365 58.46313858]
[111.95691681 60.00006104]
[119.28358459 62.97154999]
[125.91867065 67.27102661]
[131.62419128 72.74430084]
[136.19555664 79.19508362]
[139.46879578 86.39200592]
[141.32650757 94.07697296]
[141.70210266 101.97436523]
[140.58207703 109.80094147]
[138.00660706 117.27602386]
[134.06806946 124.13151550]
[128.90769958 130.12155151]
[122.71059418 135.03129578]
[115.69898987 138.68467712]
[118.75083160 153.37094116]
[121.80267334 168.05720520]
[124.85450745 182.74346924]
[127.90634918 197.42973328]
[130.95819092 212.11598206]
[134.01002502 226.80224609]
[137.31216431 241.43426514]
[140.86363220 256.00778198]
[144.41510010 270.58126831]
[147.96656799 285.15478516]
[151.51803589 299.72830200]
[166.45722961 302.85610962]
[178.55462646 312.16287231]
[185.40827942 325.80068970]
[185.65739441 341.06176758]
[179.25251770 354.91601562]
[167.46533203 364.61267090]
[152.63618469 368.22644043]
[137.70942688 365.03979492]
[125.64877319 355.68548584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[15 71]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[27 45]
[28 44]
[29 43]
[30 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
