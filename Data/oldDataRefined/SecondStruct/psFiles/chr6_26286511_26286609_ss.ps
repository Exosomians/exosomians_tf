%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGGACCGUCUUGUCGUCUCACCGCGUCGCCUUCGCACGACCCGGGUAUUGGGUCUCCAGCUACCUAGCUUUGGUAGGAGACGAUCCAGGAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[128.57504272 366.09735107]
[113.44506836 366.69931030]
[98.94012451 362.35357666]
[86.63360596 353.53152466]
[77.86044312 341.19012451]
[73.57226562 326.66806030]
[74.23423767 311.54058838]
[79.77454376 297.44860840]
[89.59221649 285.92074585]
[102.62230682 278.20739746]
[117.45141602 275.14532471]
[119.33141327 260.26361084]
[121.21141052 245.38188171]
[123.09140778 230.50015259]
[124.97140503 215.61843872]
[126.38303375 200.68501282]
[127.32489014 185.71459961]
[128.26675415 170.74420166]
[129.20860291 155.77380371]
[130.15046692 140.80340576]
[131.09231567 125.83300018]
[132.03417969 110.86260223]
[115.33466339 127.63256836]
[93.28507996 128.60128784]
[77.63304138 115.39947510]
[75.29226685 96.66230011]
[61.71986389 90.27561188]
[48.14745712 83.88892365]
[34.02885437 90.61194611]
[18.90495872 86.63679504]
[9.91681290 73.84042358]
[11.30834389 58.26487350]
[22.42251396 47.26445389]
[38.01155090 46.03322220]
[50.71479034 55.15253067]
[54.53414917 70.31651306]
[68.10655212 76.70320892]
[81.67895508 83.08989716]
[88.81826782 74.44232178]
[100.01813507 69.13875580]
[113.59468079 69.02631378]
[112.65282440 54.05591202]
[111.71096802 39.08551025]
[110.76910400 24.11510849]
[109.82724762 9.14470768]
[108.88539124 -5.82569265]
[97.85063171 -17.47101974]
[100.21785736 -33.33846283]
[114.17114258 -41.25587845]
[129.00671387 -35.14970398]
[133.34399414 -19.70407295]
[123.85578918 -6.76755047]
[124.79765320 8.20285034]
[125.73950958 23.17325211]
[126.68136597 38.14365387]
[127.62322235 53.11405182]
[128.56507874 68.08445740]
[134.63270569 72.49284363]
[139.26799011 58.22700500]
[154.26799011 58.22705078]
[158.90316772 72.49291992]
[146.76795959 81.30962372]
[152.83558655 85.71800995]
[167.36433411 81.98766327]
[181.89308167 78.25731659]
[196.42182922 74.52696991]
[210.95057678 70.79661560]
[217.54373169 56.61690140]
[231.73075867 50.03947449]
[246.81295776 54.16999054]
[255.66899109 67.05815125]
[254.11730957 82.61856079]
[242.89056396 93.50406647]
[227.28968811 94.57486725]
[214.68092346 85.32536316]
[200.15217590 89.05571747]
[185.62342834 92.78606415]
[171.09468079 96.51641083]
[156.56593323 100.24675751]
[147.00457764 111.80445862]
[146.06272888 126.77485657]
[145.12086487 141.74525452]
[144.17900085 156.71566772]
[143.23715210 171.68606567]
[142.29528809 186.65646362]
[141.35343933 201.62686157]
[144.06291199 207.97944641]
[143.15583801 213.82228088]
[139.85313416 217.49842834]
[137.97312927 232.38015747]
[136.09312439 247.26187134]
[134.21313477 262.14358521]
[132.33312988 277.02532959]
[145.93484497 283.67904663]
[156.63734436 294.39050293]
[163.27970886 307.99777222]
[165.14143372 323.02484131]
[162.02055359 337.84167480]
[154.25559998 350.84109497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[22 80]
[26 38]
[27 37]
[28 36]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
