%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:53 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCGAGUCUUGAACUCAGGUAAUUGUUUCUAAGAGUAAUGGCUUGAAACAAGAGUCACUCCCGUUCACCCAGUAGUAACGGUCU\
) } def
/len { sequence length } bind def

/coor [
[124.83986664 174.24153137]
[117.00286102 166.30462646]
[111.77930450 156.42498779]
[109.62451935 145.43728638]
[110.73394775 134.27380371]
[115.02555084 123.88541412]
[103.95115662 113.76821899]
[90.33878326 110.57527161]
[85.93164062 97.30618286]
[74.85724640 87.18898010]
[63.78285217 77.07177734]
[52.70845795 66.95457458]
[41.63405991 56.83737183]
[28.19733620 58.98520279]
[16.18530273 53.02082443]
[9.95957947 41.36389542]
[11.63260269 28.45256615]
[0.93068224 17.94214821]
[-9.77123737 7.43172836]
[-20.47315788 -3.07869053]
[-31.17507744 -13.58910942]
[-41.87699890 -24.09952927]
[-57.14437103 -28.24897003]
[-60.80330276 -42.68716431]
[-71.50522614 -53.19758606]
[-82.20714569 -63.70800400]
[-92.90906525 -74.21842194]
[-103.61098480 -84.72884369]
[-114.31290436 -95.23925781]
[-125.01482391 -105.74967957]
[-141.01953125 -109.32479858]
[-145.66688538 -125.05165863]
[-134.17608643 -136.75181580]
[-118.36788940 -132.38914490]
[-114.50440216 -116.45159912]
[-103.80248260 -105.94117737]
[-93.10056305 -95.43076324]
[-82.39864349 -84.92034149]
[-71.69672394 -74.40992737]
[-60.99480438 -63.89950562]
[-50.29288483 -53.38908386]
[-35.79098511 -49.99142075]
[-31.36657906 -34.80144882]
[-20.66465950 -24.29102898]
[-9.96273899 -13.78061104]
[0.73918128 -3.27019167]
[11.44110107 7.24022722]
[22.14302063 17.75064659]
[38.82918930 16.81733513]
[51.34958267 28.38608932]
[51.75126266 45.76297760]
[62.82565689 55.88017654]
[73.90005493 65.99738312]
[84.97444916 76.11458588]
[96.04884338 86.23178101]
[109.66121674 89.42472839]
[114.06835938 102.69381714]
[125.14275360 112.81101990]
[143.35540771 105.72619629]
[162.62634277 108.48520660]
[178.00097656 120.30459595]
[185.56289673 138.08103943]
[183.43136597 157.20588684]
[196.14250183 165.16998291]
[208.85365295 173.13407898]
[221.56478882 181.09817505]
[234.27593994 189.06225586]
[243.43733215 191.04071045]
[247.29493713 197.55035400]
[259.71026611 205.96817017]
[275.18222046 202.74415588]
[288.35629272 211.47451782]
[291.41656494 226.97969055]
[282.54739380 240.06072998]
[267.01071167 242.95687866]
[254.02418518 233.94990540]
[251.29246521 218.38349915]
[238.87713623 209.96569824]
[226.31184387 201.77340698]
[213.60069275 193.80931091]
[200.88955688 185.84521484]
[188.17840576 177.88111877]
[175.46726990 169.91702271]
[166.82098389 176.79249573]
[156.53863525 180.88861084]
[145.49032593 181.84544373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 58]
[7 57]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
