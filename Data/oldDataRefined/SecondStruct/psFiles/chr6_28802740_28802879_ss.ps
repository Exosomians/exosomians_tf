%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUUUACACUCCUCCGUCUCCAGACAGCGAACUCUUGACGGUCUCCCUUUGGUAGUGAACCUCCACAGCCCCUAGCUUGGCUCCGGAGUAUGUACGUUUCGUACGCGAGAUGGUGACUCGAUGUGGGGGAAUGAUAUU\
) } def
/len { sequence length } bind def

/coor [
[127.28942871 775.18902588]
[112.12244415 774.17370605]
[98.50073242 767.42700195]
[88.50151062 755.97784424]
[83.64958954 741.57202148]
[84.68485260 726.40637207]
[91.44942474 712.79357910]
[102.91175842 702.80938721]
[117.32393646 697.97644043]
[118.32582855 683.00994873]
[111.45589447 669.79431152]
[120.09766388 656.54174805]
[121.09955597 641.57525635]
[122.10144806 626.60870361]
[123.10333252 611.64221191]
[124.10522461 596.67572021]
[125.10711670 581.70922852]
[124.94001007 566.71014404]
[123.60493469 551.76971436]
[122.26985168 536.82922363]
[113.43046570 524.84112549]
[119.90876770 510.40704346]
[118.57369232 495.46658325]
[117.23861694 480.52612305]
[103.67044067 474.38037109]
[94.94214630 462.18722534]
[93.47927094 447.16302490]
[99.77436066 433.33303833]
[112.22792053 424.45294189]
[110.89283752 409.51248169]
[109.55776215 394.57202148]
[100.71837616 382.58392334]
[107.19667816 368.14984131]
[105.86160278 353.20938110]
[95.65267181 347.90850830]
[89.23495483 338.21734619]
[88.32022095 326.50912476]
[93.25506592 315.71984863]
[102.90446472 308.61203003]
[102.23625946 293.62692261]
[101.56806183 278.64181519]
[100.89985657 263.65670776]
[89.76996613 253.82505798]
[88.87884521 238.63754272]
[99.26663971 227.03015137]
[86.75759125 218.98890686]
[81.31783295 204.95776367]
[85.22892761 190.24188232]
[97.19352722 180.53855896]
[96.52532196 165.55345154]
[95.85711670 150.56834412]
[95.18891907 135.58323669]
[94.52071381 120.59812927]
[93.85250854 105.61301422]
[84.55295563 106.78443909]
[74.67966461 102.22631073]
[66.99617767 91.97792053]
[61.76133728 77.92102051]
[56.52648926 63.86412048]
[42.05130768 57.52025986]
[36.37949371 42.76878357]
[42.87604141 28.36147690]
[57.68665695 22.84594345]
[72.02447510 29.49444962]
[77.38311005 44.36255264]
[70.58338928 58.62927628]
[75.81823730 72.68617249]
[81.05307770 86.74307251]
[96.03819275 86.07486725]
[100.00112152 71.60783386]
[103.96405029 57.14079285]
[107.92697906 42.67375565]
[98.12433624 30.64513588]
[97.29768372 15.15009594]
[105.76490021 2.14679384]
[120.27016449 -3.36473489]
[135.23590088 0.73480505]
[144.90748596 12.86905670]
[145.56599426 28.37215233]
[136.95822144 41.28283691]
[122.39402008 46.63668823]
[118.43109131 61.10372543]
[114.46815491 75.57076263]
[110.50522614 90.03779602]
[108.83762360 104.94481659]
[109.50582123 119.92992401]
[110.17402649 134.91503906]
[110.84223175 149.90014648]
[111.51042938 164.88525391]
[112.17863464 179.87036133]
[124.95939636 188.47026062]
[130.16474915 202.77961731]
[125.99543762 217.23924255]
[114.25174713 226.36195374]
[125.63143158 236.99870300]
[126.09561157 252.20526123]
[115.88496399 262.98849487]
[116.55316925 277.97360229]
[117.22137451 292.95870972]
[117.88957214 307.94381714]
[132.33256531 320.10595703]
[133.36637878 338.64166260]
[120.80207062 351.87429810]
[122.13714600 366.81478882]
[131.07202148 379.87152100]
[124.49822998 393.23693848]
[125.83330536 408.17739868]
[127.16838837 423.11785889]
[140.99911499 429.64920044]
[149.64657593 442.14392090]
[150.87072754 457.18945312]
[144.44261169 470.73696899]
[132.17907715 479.19104004]
[133.51416016 494.13150024]
[134.84924316 509.07199097]
[143.78411865 522.12872314]
[137.21032715 535.49414062]
[138.54539490 550.43463135]
[139.88047791 565.37506104]
[149.89137268 554.20446777]
[164.71279907 551.89685059]
[177.64590454 559.49523926]
[182.84529114 573.56524658]
[177.96096802 587.74774170]
[165.20053101 595.63262939]
[150.33131409 593.65612793]
[140.07362366 582.71112061]
[139.07173157 597.67761230]
[138.06983948 612.64410400]
[137.06794739 627.61059570]
[136.06605530 642.57714844]
[135.06416321 657.54364014]
[141.86244202 671.82977295]
[133.29232788 684.01184082]
[132.29043579 698.97833252]
[145.92985535 705.68914795]
[155.95916748 717.11199951]
[160.84896851 731.50500488]
[159.85360718 746.67327881]
[153.12487793 760.30383301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 135]
[10 134]
[12 132]
[13 131]
[14 130]
[15 129]
[16 128]
[17 127]
[18 119]
[19 118]
[20 117]
[22 115]
[23 114]
[24 113]
[29 108]
[30 107]
[31 106]
[33 104]
[34 103]
[39 100]
[40 99]
[41 98]
[42 97]
[45 94]
[49 90]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[57 68]
[58 67]
[59 66]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
