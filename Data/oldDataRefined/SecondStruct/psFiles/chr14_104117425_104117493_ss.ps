%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGGUCACCAAGAAUUGUCAAGUUGUCAAGACAUCGCGUUAACACUUUACAAAUCCUGGUGAUCUGG\
) } def
/len { sequence length } bind def

/coor [
[77.10550690 393.78451538]
[80.15813446 374.64474487]
[80.83110046 359.65985107]
[81.50407410 344.67495728]
[82.17704773 329.69003296]
[82.85002136 314.70513916]
[83.52299500 299.72024536]
[84.19596863 284.73535156]
[84.86893463 269.75045776]
[85.54190826 254.76556396]
[86.21488190 239.78067017]
[86.88785553 224.79577637]
[79.72935486 211.73419189]
[88.07800293 198.29504395]
[88.75097656 183.31015015]
[81.59247589 170.24855042]
[89.94112396 156.80941772]
[90.61409760 141.82452393]
[91.28707123 126.83962250]
[91.96004486 111.85472870]
[85.69047546 99.35736084]
[93.05506134 87.47230530]
[93.72803497 72.48740387]
[94.40100861 57.50251007]
[95.07397461 42.51761627]
[92.26543427 33.47206497]
[96.12829590 26.87997437]
[97.47288513 11.94036007]
[89.77603149 3.68260765]
[88.11858368 -7.25741863]
[92.82986450 -17.02136421]
[102.03714752 -22.30875397]
[104.71549988 -37.06769943]
[107.39385223 -51.82664108]
[99.47628784 -65.77983856]
[105.58229828 -80.61547852]
[121.02788544 -84.95292664]
[133.96450806 -75.46486664]
[134.46830750 -59.42972183]
[122.15279388 -49.14828873]
[119.47444153 -34.38934326]
[116.79608917 -19.63040161]
[124.86520386 -2.27975130]
[112.41249847 13.28494930]
[111.06790924 28.22456360]
[110.05887604 43.19058609]
[109.38590240 58.17548370]
[108.71292877 73.16037750]
[108.03995514 88.14527130]
[114.30952454 100.64263916]
[106.94493866 112.52769470]
[106.27196503 127.51259613]
[105.59899139 142.49748230]
[104.92602539 157.48239136]
[112.03639221 171.61579895]
[103.73587036 183.98312378]
[103.06290436 198.96801758]
[110.17327118 213.10142517]
[101.87274933 225.46875000]
[101.19977570 240.45364380]
[100.52680969 255.43853760]
[99.85383606 270.42343140]
[99.18086243 285.40832520]
[98.50788879 300.39321899]
[97.83491516 315.37811279]
[97.16194153 330.36300659]
[96.48897552 345.34790039]
[95.81600189 360.33282471]
[95.14302826 375.31771851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[14 57]
[15 56]
[17 54]
[18 53]
[19 52]
[20 51]
[22 49]
[23 48]
[24 47]
[25 46]
[27 45]
[28 44]
[32 42]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
