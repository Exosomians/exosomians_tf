%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGUUACUACUGAAGGUAUAUAUGUAAGGAACCUUUCGACUUAUUUUACUUACUUUUGAGAUAUGGUAGUAGGAG\
) } def
/len { sequence length } bind def

/coor [
[105.43164825 274.53128052]
[104.22464752 259.57992554]
[103.01764679 244.62857056]
[101.81064606 229.67720032]
[98.02885437 223.08291626]
[100.86849976 214.10156250]
[100.26450348 199.11372375]
[99.66051483 184.12590027]
[99.05652618 169.13806152]
[98.45253754 154.15022278]
[97.84854889 139.16238403]
[96.34072113 124.23836517]
[93.93455505 109.43260956]
[91.23072815 94.67831421]
[88.23033905 79.98145294]
[85.22995758 65.28459167]
[82.22956848 50.58773422]
[79.22918701 35.89087677]
[76.22879791 21.19401550]
[73.22841644 6.49715567]
[60.32712173 -2.23178554]
[57.49366760 -17.17923355]
[65.89488220 -29.42485046]
[62.89449692 -44.12170792]
[50.36948776 -57.44214630]
[56.23589325 -73.85428619]
[52.64615631 -88.41841125]
[49.05642319 -102.98253632]
[45.46668625 -117.54666901]
[41.87695312 -132.11079407]
[27.00106049 -135.71168518]
[15.51018429 -145.82199097]
[10.04484463 -160.11845398]
[11.86093616 -175.31582642]
[20.54113388 -187.92189026]
[34.09079361 -195.03984070]
[49.39630127 -195.03404236]
[62.94056320 -187.90582275]
[71.61120605 -175.29319763]
[73.41578674 -160.09443665]
[67.93961334 -145.80212402]
[56.44108200 -135.70053101]
[60.03081512 -121.13639832]
[63.62054825 -106.57227325]
[67.21028137 -92.00814819]
[70.80001831 -77.44401550]
[81.10532379 -70.78479004]
[84.09625244 -58.46852875]
[77.59135437 -47.12209320]
[80.59174347 -32.42523575]
[93.12056732 -24.45251656]
[96.37274170 -9.59055233]
[87.92527008 3.49677014]
[90.92565918 18.19363022]
[93.92604065 32.89049149]
[96.92642975 47.58734894]
[99.92681122 62.28421021]
[102.92720032 76.98107147]
[105.92758942 91.67792511]
[110.61491394 98.53248596]
[108.74030304 107.02644348]
[111.14647675 121.83219910]
[114.83726501 126.29663849]
[116.10516357 131.24798584]
[115.21042633 135.59947205]
[112.83638763 138.55839539]
[113.44037628 153.54623413]
[114.04436493 168.53407288]
[114.64835358 183.52191162]
[115.25234222 198.50973511]
[115.85633087 213.49757385]
[116.76200867 228.47021484]
[117.96900940 243.42156982]
[119.17600250 258.37292480]
[120.38300323 273.32427979]
[127.68425751 288.62551880]
[115.00218201 299.87725830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 62]
[13 61]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[23 50]
[24 49]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
