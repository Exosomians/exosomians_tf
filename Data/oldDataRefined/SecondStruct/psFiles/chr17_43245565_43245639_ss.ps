%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:45 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUCAAUUCAGUUCGGCCGCGCAGUGUCCGUGAGCCGCACGUUCGGCGGGGCGUCCACGAUGGCAGAGAAUGGA\
) } def
/len { sequence length } bind def

/coor [
[65.99253082 322.13082886]
[57.24147415 334.94482422]
[42.61854172 340.13610840]
[27.74654961 335.70852661]
[18.34408569 323.36456299]
[18.02658463 307.85073853]
[26.91613770 295.13244629]
[41.59452438 290.10009766]
[45.87456894 275.72366333]
[50.15461349 261.34725952]
[54.43465424 246.97085571]
[49.35373688 230.30412292]
[62.48556900 217.58944702]
[66.16784668 203.04843140]
[69.85013580 188.50743103]
[65.47395325 174.27021790]
[76.36223602 162.79171753]
[80.04451752 148.25071716]
[83.72679901 133.70971680]
[87.40908051 119.16870880]
[79.63679504 110.55038452]
[77.07886505 99.23044586]
[80.39028931 88.10757446]
[88.72312164 80.02996063]
[99.94359589 77.06601715]
[104.81408691 62.87876129]
[109.68457794 48.69150162]
[102.99523926 34.62414551]
[108.13671875 20.30562973]
[121.58901215 14.01506329]
[126.45951080 -0.17219552]
[131.33000183 -14.35945415]
[123.35279846 -29.77087975]
[128.74662781 -45.91331482]
[143.78453064 -53.14381409]
[148.06457520 -67.52022552]
[152.34461975 -81.89663696]
[156.62464905 -96.27304840]
[148.88316345 -110.05147552]
[153.23229980 -125.24556732]
[167.09179688 -132.84095764]
[182.23907471 -128.33142090]
[189.68750000 -114.39238739]
[185.01806641 -99.29364777]
[171.00106812 -91.99301147]
[166.72102356 -77.61659241]
[162.44097900 -63.24018478]
[158.16093445 -48.86376953]
[165.88542175 -38.34285355]
[166.05160522 -25.09543419]
[158.36920166 -14.06167793]
[145.51725769 -9.48896217]
[140.64675903 4.69829655]
[135.77627563 18.88555527]
[142.52827454 32.11227036]
[137.79101562 46.56954956]
[123.87183380 53.56199646]
[119.00134277 67.74925232]
[114.13085175 81.93651581]
[122.79691315 97.49575806]
[117.71511841 114.56520081]
[101.95008850 122.85099030]
[98.26780701 137.39199829]
[94.58551788 151.93299866]
[90.90323639 166.47399902]
[95.01603699 181.75128174]
[84.39113617 192.18971252]
[80.70885468 206.73071289]
[77.02657318 221.27172852]
[82.99742126 232.91648865]
[79.42733002 245.08517456]
[68.81106567 251.25088501]
[64.53102112 265.62731934]
[60.25098038 280.00372314]
[55.97093582 294.38012695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 75]
[9 74]
[10 73]
[11 72]
[13 69]
[14 68]
[15 67]
[17 65]
[18 64]
[19 63]
[20 62]
[25 59]
[26 58]
[27 57]
[30 54]
[31 53]
[32 52]
[35 48]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
