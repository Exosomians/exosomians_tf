%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAACGUCACUACAUUUUAAAGAACCGGACUUUAAUGACACUUCUCAUUUUGGCUCGAAAAAUUGUGACUCAGUCG\
) } def
/len { sequence length } bind def

/coor [
[94.72216797 350.33163452]
[94.11817932 335.34381104]
[93.51419067 320.35595703]
[81.03971100 312.26119995]
[75.66012573 298.20684814]
[79.63423157 283.50787354]
[91.64030457 273.85592651]
[91.03631592 258.86807251]
[90.43231964 243.88024902]
[89.82833099 228.89241028]
[89.22434235 213.90457153]
[80.88282013 207.43501282]
[77.55565643 197.18193054]
[80.63350677 186.61872864]
[89.29124451 179.47332764]
[89.89523315 164.48548889]
[90.49922180 149.49765015]
[91.10321808 134.50981140]
[91.70720673 119.52198029]
[81.96598816 111.16479492]
[78.82836151 98.71935272]
[83.44324493 86.74284363]
[94.12078094 79.62076569]
[95.32778168 64.66941071]
[88.72602081 50.29139328]
[97.46235657 38.22798538]
[98.66934967 23.27662659]
[99.87635040 8.32526684]
[101.08335114 -6.62609339]
[102.29034424 -21.57745361]
[100.05608368 -25.46045113]
[99.21305847 -29.46163368]
[99.63373566 -33.14134598]
[101.06417847 -36.14380264]
[103.16126251 -38.23025894]
[105.53775787 -39.29801559]
[109.71102142 -53.70578766]
[113.88428497 -68.11355591]
[118.05754852 -82.52133179]
[110.21404266 -96.24193573]
[114.45033264 -111.46788025]
[128.25309753 -119.16588593]
[143.43339539 -114.76885223]
[150.98504639 -100.88547516]
[146.42776489 -85.75250244]
[132.46531677 -78.34806824]
[128.29205322 -63.94029617]
[124.11879730 -49.53252411]
[119.94553375 -35.12475204]
[117.24170685 -20.37045479]
[116.03470612 -5.41909456]
[114.82771301 9.53226471]
[113.62071228 24.48362541]
[112.41371155 39.43498611]
[119.10180664 52.74357986]
[110.27913666 65.87641144]
[109.07214355 80.82776642]
[120.02429199 93.00670624]
[119.03533936 109.35596466]
[106.69503784 120.12596893]
[106.09104919 135.11380005]
[105.48706055 150.10163879]
[104.88307190 165.08947754]
[104.27908325 180.07731628]
[114.58457947 197.18193054]
[104.21218109 213.30058289]
[104.81616974 228.28842163]
[105.42015839 243.27626038]
[106.02414703 258.26409912]
[106.62813568 273.25192261]
[119.37193298 281.90652466]
[124.51593018 296.23803711]
[120.28469086 310.67965698]
[108.50202179 319.75198364]
[109.10601044 334.73980713]
[109.70999908 349.72763062]
[112.67449188 368.88128662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[23 57]
[24 56]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[36 49]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
