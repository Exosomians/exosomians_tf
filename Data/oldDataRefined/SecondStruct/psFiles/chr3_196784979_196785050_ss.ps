%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUAUACCUUGCGAAGUGCUUAAACGCACAGUAGGAACGCGUCCCCGGUACGAUUAGAAGAGACAUAGC\
) } def
/len { sequence length } bind def

/coor [
[125.29468536 206.68762207]
[120.84399414 192.36311340]
[116.39330292 178.03862000]
[111.94261169 163.71411133]
[107.49191284 149.38961792]
[103.04122162 135.06510925]
[89.27667999 133.52343750]
[77.17272186 126.79042053]
[68.60375214 115.90868378]
[64.89672089 102.56337738]
[66.62570953 88.82110596]
[53.74425125 81.13553619]
[40.86279297 73.44996643]
[27.98133278 65.76438904]
[15.09987259 58.07881927]
[4.34720993 61.43187714]
[-6.21071577 58.20555878]
[-12.97282219 49.76346207]
[-13.78180885 39.20141983]
[-25.95489502 30.43694878]
[-38.12797928 21.67247581]
[-50.30106735 12.90800285]
[-65.85775757 15.69454956]
[-78.78047180 6.59625053]
[-81.40238953 -8.98903465]
[-72.16796875 -21.81483269]
[-56.55583572 -24.27182388]
[-43.82838821 -14.90232086]
[-41.53659439 0.73491728]
[-29.36350822 9.49938965]
[-17.19042206 18.26386261]
[-5.01733589 27.02833557]
[14.12990570 27.22539711]
[22.78544426 45.19736099]
[35.66690445 52.88293076]
[48.54836273 60.56850433]
[61.42982101 68.25407410]
[74.31127930 75.93964386]
[96.22052765 65.00676727]
[119.95890808 71.00943756]
[130.90226746 60.75064468]
[135.19511414 52.33119583]
[142.54414368 50.29846191]
[153.91873169 40.51997757]
[158.82936096 24.87332726]
[174.89181519 21.56731796]
[185.58241272 34.00288773]
[179.90356445 49.38738632]
[163.69720459 51.89456558]
[152.32261658 61.67304993]
[141.16105652 71.69400787]
[130.21769714 81.95279694]
[133.19084167 88.28765869]
[134.85195923 95.08550262]
[135.13537598 102.07762146]
[134.02989197 108.98760223]
[131.57922363 115.54231262]
[127.88023376 121.48263550]
[123.07913208 126.57375336]
[117.36572266 130.61441040]
[121.81641388 144.93891907]
[126.26711273 159.26341248]
[130.71780396 173.58792114]
[135.16848755 187.91241455]
[139.61918640 202.23692322]
[154.35638428 207.09437561]
[163.39653015 219.70608521]
[163.26353455 235.22259521]
[154.00851440 247.67747498]
[139.19023132 252.28158569]
[124.50659943 247.26455688]
[115.60378265 234.55552673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[19 32]
[20 31]
[21 30]
[22 29]
[40 52]
[41 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
