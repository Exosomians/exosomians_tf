%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACUAGAUUUGUUAUGACAUAGAAGAAGGUAAACGAGUUAAAAGUCAGAUAGUCCUGAGUAAAGAGGUCGAACUCAAA\
) } def
/len { sequence length } bind def

/coor [
[54.78938293 110.59328461]
[53.56619263 99.65500641]
[54.95177841 88.73610687]
[41.17853546 82.79490662]
[27.40529442 76.85371399]
[13.63205338 70.91251373]
[-6.04542494 74.38112640]
[-17.34320641 58.88415527]
[-31.53542900 54.02814865]
[-45.72764969 49.17213821]
[-59.91987228 44.31612778]
[-74.11209869 39.46012115]
[-88.30432129 34.60411072]
[-102.49654388 29.74810219]
[-116.68876648 24.89209366]
[-125.75495148 37.00239563]
[-138.12086487 45.71671677]
[-152.57501221 50.18131256]
[-167.70133972 49.95878601]
[-182.01791382 45.07094574]
[-194.12213135 35.99664307]
[-202.82817078 23.62489510]
[-207.28308105 9.16775227]
[-207.05041504 -5.95841885]
[-202.15298462 -20.27171135]
[-193.07057190 -32.36985397]
[-180.69299316 -41.06759262]
[-166.23286438 -45.51281357]
[-151.10685730 -45.27001953]
[-136.79684448 -40.36299515]
[-124.70479584 -31.27248192]
[-116.01535797 -18.88907433]
[-111.57982635 -4.42597532]
[-111.83275604 10.69987011]
[-97.64053345 15.55587959]
[-83.44831085 20.41188812]
[-69.25608826 25.26789856]
[-55.06386566 30.12390709]
[-40.87164307 34.97991562]
[-26.67942047 39.83592606]
[-12.48719788 44.69193268]
[-3.45776749 39.26168442]
[7.28531885 39.85363388]
[16.01810074 46.51309204]
[19.57324982 57.13927460]
[33.34649277 63.08047104]
[47.11973190 69.02166748]
[60.89297485 74.96286774]
[74.66706085 61.08394241]
[92.93328857 54.10578156]
[112.45262146 55.26578522]
[129.76379395 64.35825348]
[141.79713440 79.77087402]
[146.41880798 98.77060699]
[161.13912964 92.97208405]
[172.70220947 102.36060333]
[187.56422424 104.39057159]
[202.42622375 106.42053986]
[213.06428528 95.12402344]
[228.31680298 92.27091980]
[242.31889343 98.95832062]
[249.68644714 112.61477661]
[247.58650208 127.98909760]
[236.82652283 139.16955566]
[221.54394531 141.85702515]
[207.61523438 135.01812744]
[200.39625549 121.28254700]
[185.53425598 119.25257874]
[170.67224121 117.22261047]
[157.01495361 123.16632843]
[144.38883972 113.63261414]
[139.93334961 123.69694519]
[133.23429871 132.42991638]
[124.66804504 139.34088135]
[114.71587372 144.04158020]
[103.93692780 146.26789856]
[92.93679047 145.89476013]
[82.33348846 142.94313049]
[72.72274017 137.57882690]
[64.64450073 130.10325623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[6 45]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[54 71]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
