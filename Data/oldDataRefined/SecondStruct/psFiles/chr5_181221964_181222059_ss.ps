%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUCGCUUUAAUGCGGGUUGCACCCCGAGCUUGGGUGCUGGGACUCUAAUUCUCAGAGUACGAGAUGGCUGACUCGAUCGGCCCGCCGGUACA\
) } def
/len { sequence length } bind def

/coor [
[111.78479767 134.76077271]
[103.45143127 136.54148865]
[94.93202972 136.35255432]
[86.68579865 134.20416260]
[79.15722656 130.21209717]
[68.29614258 140.55795288]
[57.43505096 150.90382385]
[46.57396317 161.24967957]
[35.71287155 171.59553528]
[35.57962036 187.39926147]
[24.25205612 198.42022705]
[8.45062065 198.11990356]
[-2.44997311 186.67645264]
[-1.98259664 170.87907410]
[9.57546329 160.10006714]
[25.36701584 160.73443604]
[36.22810364 150.38858032]
[47.08919525 140.04272461]
[57.95028305 129.69686890]
[68.81137085 119.35101318]
[62.18056870 106.68743134]
[60.73403931 91.82394409]
[65.15609741 76.89173889]
[52.00681686 69.67395020]
[38.85753632 62.45615768]
[25.70825958 55.23836899]
[12.55898094 48.02058029]
[-0.59029782 40.80279160]
[-15.09940910 46.63543320]
[-29.94704056 41.72810745]
[-38.12259674 28.39790535]
[-35.76582718 12.93893814]
[-23.98952866 2.65045881]
[-8.35410786 2.39037228]
[3.75786638 12.28148365]
[6.62749147 27.65351295]
[19.77676964 34.87129974]
[32.92604828 42.08909225]
[46.07532501 49.30688095]
[59.22460556 56.52466965]
[72.37388611 63.74245834]
[85.63831329 56.73854446]
[87.09346008 41.80929184]
[88.54861450 26.88003922]
[90.00376129 11.95078850]
[91.45890808 -2.97846270]
[80.38296509 -14.01737404]
[79.04547882 -29.59765434]
[88.07796478 -42.36277390]
[103.21556091 -46.28542709]
[117.31075287 -39.51346588]
[123.70822906 -25.24439621]
[119.38729095 -10.21563911]
[106.38816071 -1.52331483]
[104.93300629 13.40593624]
[103.47785950 28.33518791]
[102.02271271 43.26443863]
[100.56756592 58.19369125]
[121.89325714 66.39421844]
[134.91703796 84.00526428]
[136.37368774 104.91394806]
[150.51466370 109.91723633]
[164.65563965 114.92051697]
[178.79661560 119.92380524]
[192.92607117 113.36664581]
[207.19575500 118.64213562]
[213.35992432 132.15281677]
[227.48937988 125.59566498]
[241.75906372 130.87115479]
[247.92323303 144.38183594]
[262.06420898 149.38511658]
[276.20516968 154.38841248]
[290.34616089 159.39169312]
[304.48712158 164.39497375]
[318.62808228 169.39826965]
[333.66757202 163.81309509]
[347.33630371 172.21221924]
[349.14880371 188.15255737]
[337.71472168 199.40603638]
[321.80526733 197.33996582]
[313.62481689 183.53923035]
[299.48382568 178.53594971]
[285.34286499 173.53266907]
[271.20190430 168.52937317]
[257.06091309 163.52609253]
[242.91993713 158.52281189]
[229.63050842 165.15051270]
[215.21827698 160.27790833]
[208.35662842 146.29379272]
[195.06719971 152.92149353]
[180.65496826 148.04890442]
[173.79331970 134.06477356]
[159.65235901 129.06149292]
[145.51138306 124.05820465]
[131.37040710 119.05492401]
[126.13092804 125.77532196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[61 95]
[62 94]
[63 93]
[64 92]
[67 89]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
