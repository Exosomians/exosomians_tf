%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGACGUUGUCAUUCACCACUCAAGAAGACAGGUCGCAGUCAUAAAACUACCACCGAAAUCUGAACGGUCUAUUGU\
) } def
/len { sequence length } bind def

/coor [
[168.19439697 183.54830933]
[156.19329834 172.71951294]
[146.57879639 159.71910095]
[139.73548889 145.06376648]
[135.93775940 129.33650208]
[135.33880615 113.16332245]
[120.52347565 110.81680298]
[105.70815277 108.47029114]
[97.65450287 110.45349121]
[90.36191559 105.72979736]
[75.65013885 102.80344391]
[60.93835831 99.87709045]
[46.22657776 96.95073700]
[31.51479912 94.02438354]
[22.21263123 95.43291473]
[16.28798676 90.68350983]
[1.70243704 87.18183136]
[-12.88311195 83.68015289]
[-23.95166588 94.42681122]
[-39.07772064 97.46096039]
[-53.43460083 91.81441498]
[-62.44108582 79.28897095]
[-63.22323227 63.88144302]
[-55.53146362 50.50832748]
[-41.82019806 43.43693161]
[-26.46464348 44.92370987]
[-14.36470604 54.49424362]
[-9.38143158 69.09460449]
[5.20411730 72.59628296]
[19.78966713 76.09796143]
[34.44115448 79.31259918]
[49.15293503 82.23895264]
[63.86471176 85.16531372]
[78.57649231 88.09166718]
[93.28826904 91.01802063]
[108.05467224 93.65496826]
[122.86999512 96.00148010]
[137.68531799 98.34799957]
[142.32392883 85.13136292]
[149.16612244 72.91305542]
[158.00674438 62.05705261]
[168.58113098 52.88654327]
[180.57304382 45.67427444]
[193.62406921 40.63444901]
[207.34442139 37.91637039]
[221.32450867 37.60000229]
[235.14717102 39.69364548]
[248.40017700 44.13369370]
[260.68847656 50.78658295]
[271.64593506 59.45280457]
[280.94638062 69.87289429]
[288.31317139 81.73518372]
[293.52746582 94.68514252]
[296.43475342 108.33596039]
[296.94943237 122.28011322]
[295.05728149 136.10150146]
[309.32315063 140.73675537]
[323.58898926 145.37200928]
[337.85482788 150.00726318]
[349.73245239 140.16217041]
[365.04992676 138.32414246]
[378.91952515 145.07971191]
[386.91549683 158.27319336]
[386.48638916 173.69458008]
[377.76907349 186.42298889]
[363.54525757 192.39680481]
[348.35369873 189.70982361]
[337.04196167 179.21945190]
[333.21957397 164.27311707]
[318.95373535 159.63786316]
[304.68789673 155.00260925]
[290.42202759 150.36735535]
[282.61471558 164.47036743]
[272.15893555 176.74578857]
[259.46969604 186.70332336]
[245.05128479 193.94476318]
[229.47718811 198.17988586]
[213.36727905 199.23808289]
[197.36318970 197.07524109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 38]
[7 37]
[8 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[16 30]
[17 29]
[18 28]
[56 72]
[57 71]
[58 70]
[59 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
