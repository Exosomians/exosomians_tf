%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUCUUUUGGUCGCCCCCCCGUGGGCCUAAACUUGGCCCCUGGAGAACUAGACGUCAGUUUACGAGAUGGGGACUCGAUAUAGGGGUACCCGG\
) } def
/len { sequence length } bind def

/coor [
[82.91113281 301.14730835]
[70.00775146 309.18292236]
[55.01066208 311.66403198]
[40.20682144 308.21224976]
[27.85370445 299.35397339]
[19.83507156 286.44003296]
[17.37370491 271.43969727]
[20.84494781 256.64041138]
[29.71945953 244.29895020]
[42.64393997 236.29731750]
[57.64750290 233.85568237]
[61.05364609 219.24752808]
[64.45979309 204.63937378]
[62.88213730 197.26780701]
[68.22376251 189.61276245]
[72.10604858 175.12387085]
[75.98833466 160.63499451]
[79.87062073 146.14610291]
[83.75290680 131.65721130]
[66.69769287 112.53410339]
[66.91173553 86.91130066]
[54.43968964 78.57774353]
[41.96764374 70.24419403]
[26.19460678 69.01055908]
[19.91088104 55.50633621]
[7.43883753 47.17278290]
[-5.03320694 38.83922958]
[-17.50525093 30.50567436]
[-29.97729492 22.17212105]
[-44.93851852 26.72138023]
[-59.30334091 20.54190445]
[-66.28913116 6.55145073]
[-62.59740829 -8.64411449]
[-49.97129822 -17.86991119]
[-34.37245941 -16.76980019]
[-23.16618729 -5.86321878]
[-21.64374161 9.70007706]
[-9.17169762 18.03363037]
[3.30034661 26.36718369]
[15.77239037 34.70073700]
[28.24443436 43.03429031]
[43.12538910 43.67185593]
[50.30119705 57.77214813]
[62.77324295 66.10570526]
[75.24528503 74.43925476]
[81.00995636 68.79924011]
[88.06750488 64.48291779]
[96.10858154 61.78718185]
[104.75579834 60.93548203]
[113.58141327 62.06231689]
[122.12849426 65.20204926]
[130.86566162 53.00934982]
[139.60282898 40.81665039]
[148.33998108 28.62395096]
[157.07714844 16.43125153]
[158.14520264 0.06692009]
[172.96888733 -6.94666290]
[186.29887390 2.60547471]
[184.42242432 18.89691353]
[169.26985168 25.16841698]
[160.53268433 37.36111832]
[151.79551697 49.55381775]
[143.05834961 61.74651718]
[134.32119751 73.93921661]
[141.17474365 87.28195953]
[156.17474365 87.28195953]
[171.17474365 87.28195953]
[186.17474365 87.28195953]
[196.08711243 75.18737793]
[211.46417236 72.34475708]
[225.04531860 80.09629822]
[230.41796875 94.78195953]
[225.04531860 109.46762085]
[211.46417236 117.21916199]
[196.08711243 114.37654114]
[186.17474365 102.28195953]
[171.17474365 102.28195953]
[156.17474365 102.28195953]
[141.17474365 102.28195953]
[138.29806519 112.52920532]
[132.98213196 121.46704102]
[125.70051575 128.54551697]
[117.04182434 133.36801147]
[107.66334534 135.71249390]
[98.24179077 135.53950500]
[94.35950470 150.02838135]
[90.47721863 164.51727295]
[86.59493256 179.00616455]
[82.71264648 193.49505615]
[79.06794739 208.04551697]
[75.66180420 222.65367126]
[72.25566101 237.26182556]
[84.63203430 246.08757019]
[92.68461609 258.98037720]
[95.18544006 273.97418213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 92]
[12 91]
[13 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[21 45]
[22 44]
[23 43]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[65 79]
[66 78]
[67 77]
[68 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
