%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUCCCUCACUACUACUGGGGUCCAUUGAGAACUCACACAGCGACUACGGUAGUGGCGUCGCGAGACUGGCG\
) } def
/len { sequence length } bind def

/coor [
[98.30193329 229.45466614]
[103.10910034 214.86744690]
[114.57651520 204.65011597]
[111.45783997 189.97789001]
[108.33916473 175.30567932]
[98.12479401 164.46520996]
[102.82379913 149.35792542]
[90.23116302 141.48638916]
[86.85936737 126.65110779]
[95.20114136 113.49616241]
[85.98906708 102.97811890]
[90.12664032 89.62251282]
[87.00796509 74.95030212]
[83.88928986 60.27808762]
[80.77061462 45.60587311]
[77.65193939 30.93365860]
[74.53326416 16.26144409]
[71.41458893 1.58922994]
[68.29591370 -13.08298397]
[65.17723846 -27.75519753]
[54.73979950 -39.64513016]
[59.66187286 -53.70295334]
[56.54319763 -68.37516785]
[53.42452240 -83.04737854]
[50.30584717 -97.71959686]
[46.88058472 -112.32328033]
[33.55960846 -120.39727020]
[29.98347282 -135.18463135]
[37.76288223 -147.83438110]
[34.03253555 -162.36312866]
[19.55609322 -167.94992065]
[11.15652657 -180.99702454]
[12.06364250 -196.48756409]
[21.92863464 -208.46511841]
[36.95821381 -212.32405090]
[51.37319565 -206.58055115]
[59.63073349 -193.44308472]
[58.55562592 -177.96330261]
[48.56128311 -166.09347534]
[52.29162979 -151.56472778]
[65.20284271 -144.22743225]
[69.19291687 -129.54635620]
[61.40933228 -116.05362701]
[66.26570892 -110.18775940]
[64.97806549 -100.83827209]
[68.09674072 -86.16605377]
[71.21541595 -71.49384308]
[74.33409119 -56.82162857]
[84.54846191 -45.98115540]
[79.84945679 -30.87387276]
[82.96813202 -16.20166016]
[86.08680725 -1.52944541]
[89.20548248 13.14276886]
[92.32415771 27.81498337]
[95.44283295 42.48719788]
[98.56150818 57.15941238]
[101.68018341 71.83162689]
[104.79885864 86.50383759]
[114.01093292 97.02188110]
[109.87335968 110.37748718]
[122.84454346 119.00222015]
[125.79831696 133.92636108]
[117.49600983 146.23925781]
[127.93344879 158.12918091]
[123.01137543 172.18701172]
[126.13005066 186.85922241]
[129.24873352 201.53143311]
[143.88049316 206.20121765]
[154.20521545 217.57205200]
[157.44558716 232.58523560]
[152.72996521 247.20228577]
[141.32682800 257.49130249]
[126.30355835 260.68460083]
[111.70134735 255.92318726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[7 63]
[10 60]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[22 48]
[23 47]
[24 46]
[25 45]
[26 43]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
