%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACCGCAGGUACUACAAGGCGUUGAUGGAUGUAACAAACUAGGAGUACUUUCGUCGUGACCGACUCUGCGGU\
) } def
/len { sequence length } bind def

/coor [
[71.74987793 233.36404419]
[56.36731339 237.91995239]
[43.29752350 228.61618042]
[42.56652832 212.58978271]
[54.73508453 202.13484192]
[57.20400620 187.33943176]
[59.67292404 172.54400635]
[62.14184189 157.74859619]
[64.61076355 142.95317078]
[67.07968140 128.15774536]
[69.54859924 113.36233521]
[66.77442932 98.62109375]
[59.09615707 85.73529053]
[51.41788101 72.84947968]
[43.73960495 59.96366882]
[36.06132889 47.07786179]
[22.35046768 39.18337631]
[22.48232651 24.28935432]
[8.77146626 16.39487076]
[8.90332508 1.50084853]
[1.22504890 -11.38496113]
[-7.98814201 -23.22206879]
[-18.59474373 -33.82867050]
[-29.20134544 -44.43527222]
[-39.80794525 -55.04187393]
[-50.41454697 -65.64847565]
[-66.38632965 -69.36792755]
[-70.89151764 -85.13610077]
[-59.29557037 -96.73204803]
[-43.52740097 -92.22685242]
[-39.80794525 -76.25507355]
[-29.20134544 -65.64847565]
[-18.59474373 -55.04187393]
[-7.98814201 -44.43527222]
[2.61845994 -33.82867050]
[5.59523201 -48.53033066]
[17.88230324 -57.13427353]
[32.71556854 -54.90398026]
[41.92922974 -43.06723785]
[40.45110703 -28.14024353]
[29.09491920 -18.34039688]
[14.11085796 -19.06323624]
[21.78913307 -6.17742729]
[34.95079422 0.79537773]
[35.36813736 16.61107826]
[48.52979279 23.58388329]
[48.94713974 39.39958572]
[56.62541199 52.28539276]
[64.30368805 65.17120361]
[71.98196411 78.05701447]
[79.66024017 90.94282532]
[87.56935120 82.48855591]
[98.29006958 79.38616943]
[108.68540192 82.10169983]
[115.93303680 89.45941162]
[118.29100037 99.08642578]
[132.26486206 104.53904724]
[146.23873901 109.99166870]
[160.21260071 115.44429016]
[176.33322144 112.43466949]
[186.79295349 125.06502533]
[180.83174133 140.34233093]
[164.58193970 142.55059814]
[154.75997925 129.41815186]
[140.78611755 123.96553040]
[126.81224823 118.51291656]
[112.83837891 113.06029510]
[99.96954346 120.28946686]
[84.34401703 115.83125305]
[81.87509918 130.62666321]
[79.40618134 145.42208862]
[76.93726349 160.21751404]
[74.46834564 175.01292419]
[71.99942780 189.80834961]
[69.53050232 204.60377502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 51]
[13 50]
[14 49]
[15 48]
[16 47]
[18 45]
[20 43]
[21 42]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
