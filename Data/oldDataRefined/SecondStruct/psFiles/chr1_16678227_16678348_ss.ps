%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUCUGUUCAUUUCUCGGUAUCGCUUCACUUUUUGUUGGUGCACGUCACCGGCCCUUAACUUGGGCCCAGAGGGCGUACCCUCCGCUCUUAAGAUGGUGAUUUGGUGGUUGCGGAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[43.52507401 496.24435425]
[39.32947159 510.85482788]
[29.85814857 522.74438477]
[16.55541611 530.10009766]
[1.44984436 531.80010986]
[-13.15507698 527.58532715]
[-25.03220367 518.09832764]
[-32.37036133 504.78594971]
[-34.05052948 489.67816162]
[-29.81650162 475.07879639]
[-20.31393242 463.21414185]
[-6.99189377 455.89352417]
[8.11809826 454.23321533]
[12.27720451 439.82135010]
[16.43631172 425.40948486]
[20.59541702 410.99761963]
[24.75452423 396.58575439]
[28.91362953 382.17388916]
[25.00864029 367.80029297]
[36.26899338 356.68655396]
[40.42810059 342.27468872]
[44.58720779 327.86285400]
[48.56192780 313.39904785]
[52.35161972 298.88565063]
[56.14131165 284.37228394]
[59.93099976 269.85888672]
[63.72069168 255.34550476]
[66.95169830 240.69761658]
[69.61927795 225.93672180]
[72.28686523 211.17584229]
[74.95444489 196.41494751]
[77.62202454 181.65405273]
[72.27146912 167.75366211]
[82.33963776 155.54945374]
[85.00721741 140.78855896]
[87.67480469 126.02767181]
[76.93061829 120.05885315]
[69.12963867 109.64669800]
[66.09146881 96.25650024]
[68.90673065 82.08198547]
[58.23261642 71.54332733]
[47.55850601 61.00466537]
[36.88439178 50.46600723]
[20.89704895 49.13019180]
[12.09358597 35.71831131]
[17.22726631 20.51880836]
[32.35997009 15.19144249]
[45.88318253 23.82291412]
[47.42304993 39.79189301]
[58.09716415 50.33055496]
[68.77127838 60.86921310]
[79.44538879 71.40787506]
[93.21018219 65.44713593]
[92.82710266 50.45203018]
[92.44402313 35.45692444]
[92.06094360 20.46181488]
[91.67786407 5.46670771]
[79.33408356 -4.13355112]
[76.09967804 -19.43298531]
[83.50184631 -33.20766830]
[98.04550934 -38.95361710]
[112.86359406 -33.95777130]
[120.95944977 -20.57901573]
[118.51046753 -5.13438845]
[106.67297363 5.08362818]
[107.05605316 20.07873535]
[107.43913269 35.07384491]
[107.82221222 50.06895065]
[108.20529175 65.06405640]
[113.51751709 69.32221222]
[117.57899475 74.27070618]
[120.32955933 79.60247040]
[133.31993103 72.10247040]
[146.31031799 64.60247040]
[159.30070496 57.10247040]
[172.29107666 49.60247040]
[185.28146362 42.10247040]
[198.27185059 34.60247040]
[200.80891418 19.17206955]
[212.70451355 9.02176571]
[228.34190369 8.94422245]
[240.33758545 18.97605324]
[243.02757263 34.38053513]
[235.14172363 47.88414001]
[220.40350342 53.11088181]
[205.77185059 47.59284973]
[192.78146362 55.09284973]
[179.79107666 62.59284973]
[166.80070496 70.09284973]
[153.81031799 77.59284973]
[140.81993103 85.09284973]
[127.82955933 92.59284973]
[123.55509186 116.56828308]
[102.43569946 128.69525146]
[99.76811218 143.45614624]
[97.10053253 158.21704102]
[102.26029205 173.17323303]
[92.38291931 184.32162476]
[89.71533966 199.08251953]
[87.04776001 213.84341431]
[84.38017273 228.60430908]
[81.71259308 243.36520386]
[83.57032776 248.49438477]
[83.22803497 253.31756592]
[81.19475555 257.02352905]
[78.23406982 259.13519287]
[74.44438171 273.64859009]
[70.65469360 288.16195679]
[66.86499786 302.67535400]
[63.07530975 317.18872070]
[63.93399429 326.40255737]
[58.99906921 332.02194214]
[54.83996582 346.43380737]
[50.68085861 360.84567261]
[54.28836060 376.25009155]
[43.32549286 386.33300781]
[39.16638947 400.74487305]
[35.00728226 415.15673828]
[30.84817505 429.56860352]
[26.68906975 443.98046875]
[22.52996254 458.39233398]
[34.43200684 467.84799194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[20 114]
[21 113]
[22 112]
[23 110]
[24 109]
[25 108]
[26 107]
[27 106]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[34 96]
[35 95]
[36 94]
[40 52]
[41 51]
[42 50]
[43 49]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
