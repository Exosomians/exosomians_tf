%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUGAAGAAAGAAAGAAGUAAGAAAGAGAGAAAACGGACCUAGCUCUAACAAUUCAGGGAGAGUCACUUCCCAUUCUAAUACUCUAGACUCCCGAC\
) } def
/len { sequence length } bind def

/coor [
[44.71940231 413.53869629]
[32.87547684 422.85632324]
[19.20175743 429.19082642]
[4.43565416 432.20065308]
[-10.62651634 431.72341919]
[-25.17247009 427.78491211]
[-38.41776276 420.59747314]
[-49.64809036 410.54876709]
[-58.25782013 398.18069458]
[-63.78263474 384.16024780]
[-65.92459106 369.24353027]
[-64.56817627 354.23495483]
[-59.78653717 339.94396973]
[-51.83754730 327.14123535]
[-41.14987946 316.51718140]
[-28.29990768 308.64474487]
[-13.98061657 303.94851685]
[1.03577292 302.68173218]
[15.93944645 304.91268921]
[21.51438332 290.98718262]
[27.08932114 277.06164551]
[23.59033203 259.94573975]
[37.94913483 248.55482483]
[43.07943726 234.45942688]
[48.20973969 220.36404419]
[37.72103500 209.75967407]
[32.85665894 195.59466553]
[34.63209152 180.66119385]
[42.74837494 167.92752075]
[55.64085388 159.94812012]
[70.78057098 158.35118103]
[75.91087341 144.25578308]
[81.04117584 130.16040039]
[86.17147827 116.06501007]
[79.44929504 105.19431305]
[80.19887543 92.43508148]
[88.14769745 82.42628479]
[100.40574646 78.80689240]
[105.98068237 64.88137054]
[111.55561829 50.95585251]
[102.18159485 38.86970520]
[100.12931824 23.81364632]
[105.85072327 9.84468651]
[117.71659851 0.67642373]
[132.47895813 -1.30811238]
[138.05389404 -15.23363113]
[143.62882996 -29.15915108]
[149.20376587 -43.08467102]
[154.77870178 -57.01018906]
[148.80230713 -71.39492035]
[154.65446472 -85.43795776]
[168.40493774 -91.04688263]
[161.95396423 -105.47465515]
[167.67237854 -120.20812988]
[182.16754150 -126.50620270]
[196.83973694 -120.63234711]
[202.98420715 -106.07140350]
[196.95555115 -91.46212769]
[182.33045959 -85.47194672]
[188.41154480 -71.92366791]
[182.95614624 -57.72179031]
[168.70422363 -51.43525314]
[163.12928772 -37.50973129]
[157.55435181 -23.58421326]
[151.97941589 -9.65869427]
[146.40447998 4.26682425]
[155.71900940 15.89029408]
[157.97991943 30.71406746]
[152.48101807 44.77210236]
[140.60583496 54.25245285]
[125.48114014 56.53078842]
[119.90620422 70.45630646]
[114.33126831 84.38182831]
[121.18557739 99.30432892]
[115.32500458 114.64434814]
[100.26686859 121.19531250]
[95.13656616 135.29069519]
[90.00626373 149.38609314]
[84.87596130 163.48147583]
[95.44716644 174.43643188]
[100.19431305 188.83613586]
[98.22670746 203.80773926]
[89.98770905 216.38867188]
[77.15629578 224.11293030]
[62.30512619 225.49433899]
[57.17482758 239.58973694]
[52.04452515 253.68511963]
[56.79891968 265.80407715]
[52.09840393 277.51046753]
[41.01483917 282.63659668]
[35.43990326 296.56210327]
[29.86496544 310.48764038]
[42.19080734 319.15771484]
[52.18449402 330.43704224]
[59.30707932 343.71728516]
[63.17444992 358.28231812]
[63.57804489 373.34664917]
[60.49609375 388.09786987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 92]
[20 91]
[21 90]
[23 87]
[24 86]
[25 85]
[31 79]
[32 78]
[33 77]
[34 76]
[38 73]
[39 72]
[40 71]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
