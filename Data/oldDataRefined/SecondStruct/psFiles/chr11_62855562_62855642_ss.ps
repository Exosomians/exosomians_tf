%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGAGGAGUCUCAAUAAAUAGGAGUGCCUCGAGUCAUGUCCAGACACUUUUCCAGGAGUAGUAUCCUUCCCCCUGGAUG\
) } def
/len { sequence length } bind def

/coor [
[117.67578888 155.04264832]
[102.72414398 153.83915710]
[91.63770294 143.73515320]
[89.05596161 128.95899963]
[96.06024933 115.69342041]
[86.08036041 126.89171600]
[76.10047913 138.09001160]
[73.30452728 154.24905396]
[57.82114792 159.65248108]
[45.57831192 148.74171448]
[49.17039871 132.74079895]
[64.90217590 128.11012268]
[74.88206482 116.91183472]
[84.86194611 105.71353149]
[72.36456299 114.00902557]
[57.36541367 113.84905243]
[45.04780197 105.28888702]
[39.66835022 91.28668976]
[43.08605194 76.68123627]
[54.11984253 66.51976013]
[68.95674896 64.31380463]
[82.46954346 70.82566833]
[89.98865509 83.80538940]
[86.01393127 69.34158325]
[82.03920746 54.87778091]
[78.06448364 40.41397858]
[74.08975983 25.95017624]
[70.11504364 11.48637390]
[58.99753189 0.22975063]
[63.08575821 -14.09280682]
[59.11103821 -28.55661011]
[47.99352646 -39.81323242]
[52.08175278 -54.13579178]
[48.10703278 -68.59959412]
[34.24773788 -76.19535065]
[29.89900780 -91.38956451]
[37.64086533 -105.16777039]
[52.88020706 -109.35562134]
[66.57579803 -101.46852112]
[70.60228729 -86.18575287]
[62.57083511 -72.57431793]
[66.54555511 -58.11051178]
[77.37876892 -47.88843918]
[73.57483673 -32.53133392]
[77.54956055 -18.06752968]
[88.38277435 -7.84545469]
[84.57884216 7.51165104]
[88.55356598 21.97545433]
[92.52828979 36.43925476]
[96.50301361 50.90305710]
[100.47772980 65.36685944]
[104.45245361 79.83066559]
[122.93642426 96.03090668]
[137.05352783 101.10115814]
[151.17062378 106.17140961]
[165.28773499 111.24166870]
[179.40483093 116.31192017]
[193.52192688 121.38217163]
[209.12516785 118.76497650]
[218.48797607 130.34889221]
[236.38822937 126.57209778]
[247.35240173 140.13264465]
[261.65335083 144.65846252]
[277.54226685 140.59960938]
[288.80667114 152.51788330]
[283.85870361 168.15277100]
[267.78842163 171.42044067]
[257.12753296 158.95939636]
[242.82658386 154.43359375]
[231.78646851 159.75645447]
[219.72511292 155.90748596]
[213.41772461 144.46600342]
[198.82423401 147.44584656]
[188.45167542 135.49926758]
[174.33457947 130.42901611]
[160.21748352 125.35876465]
[146.10037231 120.28851318]
[131.98327637 115.21826172]
[117.86617279 110.14801025]
[130.35598755 118.45489502]
[135.14753723 132.66902161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[7 12]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[30 45]
[31 44]
[33 42]
[34 41]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[60 72]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
