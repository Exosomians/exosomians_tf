%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAGAGUCUUGGUGUGUCUCUAACGUAGUGACUCUACGAAGUCUGUCCAAGUCUGCUAUACUUAUUUUGGUAGUAACUGAAG\
) } def
/len { sequence length } bind def

/coor [
[72.80093384 202.29899597]
[72.80093384 187.29899597]
[72.80093384 172.29899597]
[72.80093384 157.29899597]
[72.80093384 142.29899597]
[72.80093384 127.29899597]
[64.43859100 114.84623718]
[50.55402756 109.17007446]
[34.85218811 111.10987091]
[25.99922562 99.13179016]
[12.11466026 93.45562744]
[-1.76990426 87.77946472]
[-17.47174263 89.71926117]
[-26.32470512 77.74118805]
[-40.20927048 72.06501770]
[-54.09383392 66.38885498]
[-72.14864349 69.38278198]
[-82.50640106 55.34553146]
[-96.59123230 50.18629837]
[-110.67605591 45.02706528]
[-126.29549408 47.54574585]
[-135.58502197 35.90298080]
[-149.66984558 30.74374580]
[-163.75466919 25.58451271]
[-180.70706177 25.81410217]
[-185.62055969 9.58777237]
[-171.38856506 0.37439150]
[-158.59542847 11.49968624]
[-144.51060486 16.65892029]
[-130.42578125 21.81815338]
[-115.81378937 18.93045044]
[-105.51682281 30.94223976]
[-91.43199921 36.10147476]
[-77.34716797 41.26070786]
[-66.09007263 36.43680954]
[-54.21815491 40.80834961]
[-48.41767120 52.50428772]
[-34.53310394 58.18045425]
[-20.64854050 63.85662079]
[-5.93981791 61.51082230]
[3.90626144 73.89489746]
[17.79082680 79.57106018]
[31.67539215 85.24723053]
[46.38411331 82.90143585]
[56.23019409 95.28550720]
[70.11476135 100.96166992]
[71.89537048 91.38740540]
[76.60437775 83.05307770]
[83.63887024 76.80764771]
[92.16637421 73.24674225]
[101.22254944 72.65679169]
[109.81999207 74.99463654]
[117.05585480 79.90359497]
[122.20663452 86.76321411]
[124.80006409 94.76593018]
[139.73608398 96.14995575]
[154.67208862 97.53398132]
[169.60810852 98.91800690]
[184.54411316 100.30203247]
[199.48013306 101.68605804]
[208.90148926 89.46961212]
[223.43960571 84.30757904]
[238.45542908 87.84714508]
[249.15745544 98.95884705]
[252.13072205 114.09698486]
[246.42646790 128.43103027]
[233.86488342 137.38705444]
[218.45433044 138.10719299]
[205.11227417 130.36167908]
[198.09609985 116.62207031]
[183.16009521 115.23804474]
[168.22407532 113.85401917]
[153.28807068 112.46999359]
[138.35205078 111.08596802]
[123.41603851 109.70195007]
[118.59687805 118.85759735]
[110.21729279 125.66450500]
[99.40508270 128.75596619]
[87.80093384 127.29899597]
[87.80093384 142.29899597]
[87.80093384 157.29899597]
[87.80093384 172.29899597]
[87.80093384 187.29899597]
[87.80093384 202.29899597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 46]
[8 45]
[10 43]
[11 42]
[12 41]
[14 39]
[15 38]
[16 37]
[18 34]
[19 33]
[20 32]
[22 30]
[23 29]
[24 28]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
