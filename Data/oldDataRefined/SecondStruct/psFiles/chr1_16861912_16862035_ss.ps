%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGUCUCCGUAACCACCAAGUCACCAUCUUAAGAGCGGAGGGUGCGCCCUCUGGGCCCAAGUUAAGGGCCGGUUACGUUUUCCCAGAAAAAGUGGGGCGACAACGAGAAAUAGACAGAAAAU\
) } def
/len { sequence length } bind def

/coor [
[61.49202728 238.69160461]
[60.24200821 223.63789368]
[63.28509903 208.84207153]
[70.37460327 195.50357056]
[80.93581390 184.70368958]
[94.11257172 177.31790161]
[90.74850464 162.69999695]
[87.38444519 148.08210754]
[84.02038574 133.46420288]
[79.05364990 111.05051422]
[89.84088135 98.41893768]
[78.04655457 89.15104675]
[66.25222778 79.88315582]
[54.45790482 70.61525726]
[42.66357803 61.34736633]
[30.86925125 52.07947159]
[41.97901154 62.15782547]
[50.17531204 74.72048950]
[54.92411804 88.94894409]
[55.91601562 103.91611481]
[53.08637619 118.64679718]
[46.61956787 132.18121338]
[36.93693924 143.63751221]
[24.66937256 152.26924133]
[10.61617088 157.51400757]
[-4.30701780 159.03007507]
[-19.12785912 156.71865845]
[-32.88069153 150.73036194]
[-44.66943359 141.45536804]
[-53.72598267 129.49798584]
[-59.46025085 115.63731384]
[-61.49861526 100.77645874]
[-59.70827103 85.88368988]
[-54.20586014 71.92935181]
[-45.34990311 59.82265854]
[-33.71741486 50.35243225]
[-20.06632042 44.13570786]
[-5.28356934 41.57743835]
[-16.08820534 31.17263794]
[-26.89283943 20.76783943]
[-37.69747543 10.36303902]
[-48.50210953 -0.04176068]
[-59.30674744 -10.44655991]
[-70.11138153 -20.85136032]
[-86.15042877 -24.26910782]
[-90.95202637 -39.94956589]
[-79.57670593 -51.76201630]
[-63.72641754 -47.55482864]
[-59.70658112 -31.65599442]
[-48.90194702 -21.25119591]
[-38.09731293 -10.84639645]
[-27.29267502 -0.44159648]
[-16.48804092 9.96320343]
[-5.68340492 20.36800194]
[5.12123060 30.77280235]
[19.13616371 25.42662430]
[20.26606750 10.46924019]
[21.39596939 -4.48814297]
[22.52587128 -19.44552612]
[23.65577316 -34.40290833]
[12.34221935 -45.19816589]
[10.66597939 -60.74564743]
[19.41852188 -73.70431519]
[34.46716309 -77.95547485]
[48.70639801 -71.49186707]
[55.41289139 -57.36540222]
[51.42004395 -42.24617004]
[38.61315536 -33.27300644]
[37.48325348 -18.31562424]
[36.35335159 -3.35824084]
[35.22344971 11.59914303]
[34.09354782 26.55652618]
[40.13714600 40.28514481]
[51.93147278 49.55303955]
[63.72579575 58.82093048]
[75.52012634 68.08882904]
[87.31445312 77.35671997]
[99.10877991 86.62461853]
[113.58950043 90.53723907]
[128.44642639 88.47038269]
[143.30334473 86.40352631]
[155.90576172 76.83850098]
[169.57775879 82.74830627]
[184.43467712 80.68144989]
[199.29159546 78.61459351]
[214.14851379 76.54774475]
[229.00544739 74.48088837]
[237.15673828 61.13584137]
[251.99542236 56.20152664]
[266.51513672 62.00778198]
[273.86007690 75.81306458]
[270.56219482 91.09894562]
[258.17868042 100.64789581]
[242.55662537 99.95119476]
[231.07229614 89.33780670]
[216.21537781 91.40466309]
[201.35844421 93.47151947]
[186.50152588 95.53836823]
[171.64460754 97.60522461]
[160.10485840 107.02241516]
[145.37019348 101.26045227]
[130.51327515 103.32730103]
[115.65635681 105.39415741]
[111.40184021 111.57065582]
[117.84560394 125.11605072]
[102.89280701 123.92364502]
[98.63829041 130.10014343]
[102.00234985 144.71803284]
[105.36640930 159.33593750]
[108.73046875 173.95384216]
[123.81015778 174.83688354]
[138.02976990 179.93389893]
[150.23657227 188.83168030]
[159.44102478 200.80892944]
[164.89697266 214.89471436]
[166.16210938 229.94715881]
[163.13388062 244.74603271]
[156.05778503 258.09164429]
[145.50743103 268.90213013]
[132.33810425 276.30114746]
[117.61736298 279.68887329]
[102.53857422 278.79067993]
[88.32409668 273.67941284]
[76.12623596 264.76934814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 110]
[7 109]
[8 108]
[9 107]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[79 103]
[80 102]
[81 101]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
