%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGACUCGACUCCUACUAAAUUUCAAUAGGGACAGACUUUACCAUAGAAAACACUCCUCCAGACUGAACGACUCCGAG\
) } def
/len { sequence length } bind def

/coor [
[98.81614685 203.43588257]
[85.72195435 212.28561401]
[70.22134399 209.20236206]
[61.51054001 196.01533508]
[64.75751495 180.54818726]
[78.03588867 171.97729492]
[80.96224976 157.26551819]
[83.88860321 142.55374146]
[86.81495667 127.84195709]
[78.14202118 121.70825958]
[72.06807709 112.99337006]
[69.31534576 102.73352051]
[54.50002289 100.38700104]
[39.68470001 98.04048157]
[24.86937332 95.69396973]
[10.05404854 93.34745026]
[0.95996201 105.65826416]
[-12.81862545 112.32228088]
[-28.11549759 111.80815125]
[-41.41554260 104.23402405]
[-49.66250610 91.34037781]
[-50.96130371 76.09008026]
[-45.01347351 61.98752975]
[-33.18578720 52.27339554]
[-18.19615746 49.17991257]
[-3.48909521 53.41794205]
[7.55582666 64.01361847]
[12.40056515 78.53212738]
[27.21589088 80.87863922]
[42.03121567 83.22515869]
[56.84653854 85.57167816]
[71.66186523 87.91819000]
[91.05744171 70.52033234]
[116.85000610 74.21051788]
[127.86484528 64.02851105]
[138.87968445 53.84649658]
[143.76136780 38.79725647]
[158.35937500 35.83964920]
[169.37422180 25.65763664]
[162.33935547 12.30949020]
[158.99989319 -2.40480304]
[159.58352661 -17.48199654]
[164.05047607 -31.89410400]
[172.09616089 -44.65848160]
[183.17201233 -54.90483475]
[196.52287292 -61.93454742]
[211.23846436 -65.26832581]
[226.31542969 -64.67886353]
[240.72581482 -60.20635986]
[253.48707581 -52.15574265]
[263.72915649 -41.07592773]
[270.75372314 -27.72235298]
[274.08181763 -13.00548553]
[273.48654175 2.07125306]
[269.00845337 16.47990608]
[260.95291138 29.23806763]
[249.86914062 39.47586441]
[236.51286316 46.49526596]
[221.79470825 49.81768036]
[206.71820068 49.21657562]
[192.31127930 44.73294067]
[179.55622864 36.67247391]
[168.54139709 46.85448456]
[164.44755554 61.17544174]
[149.06169128 64.86133575]
[138.04685974 75.04334259]
[127.03201294 85.22535706]
[129.64363098 91.61697388]
[130.76611328 98.42970276]
[130.34309387 105.32131958]
[128.39581299 111.94561768]
[125.02208710 117.96984100]
[120.39139557 123.09136200]
[114.73635864 127.05290985]
[108.34104919 129.65547180]
[101.52673340 130.76831055]
[98.60037994 145.48008728]
[95.67402649 160.19186401]
[92.74767303 174.90365601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[8 77]
[9 76]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[34 67]
[35 66]
[36 65]
[38 63]
[39 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
