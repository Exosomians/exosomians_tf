%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUUCCUUUCCAAUUUUUUUCAUUUUCCUUGAGCCGUUUAGAAUGGGGCGGACAAAUGGUUUUUGUAGUGGAGAUCGUA\
) } def
/len { sequence length } bind def

/coor [
[84.94831848 424.41827393]
[70.34326935 420.10406494]
[58.75984192 410.21749878]
[52.20494843 396.47146606]
[51.81425476 381.24755859]
[57.65545273 367.18341064]
[68.71652222 356.71572876]
[83.08106995 351.65808105]
[84.24345398 336.70318604]
[85.40583801 321.74829102]
[86.56822968 306.79339600]
[87.73061371 291.83850098]
[88.89299774 276.88360596]
[73.96837616 270.50918579]
[62.04463196 259.46292114]
[54.52690125 245.02343750]
[52.30888367 228.87055969]
[55.66662216 212.88986206]
[64.22428131 198.95262146]
[76.99610901 188.69665527]
[92.50000000 183.33389282]
[92.50000000 168.33389282]
[92.50000000 153.33389282]
[92.50000000 138.33389282]
[92.50000000 123.33388519]
[92.50000000 108.33388519]
[92.20912933 93.33670807]
[91.62750244 78.34799194]
[91.04586792 63.35927200]
[88.20421600 59.28888702]
[87.10784149 54.95370102]
[87.59833527 50.99683762]
[89.30519867 47.92534637]
[91.71764374 46.04752731]
[93.45903778 31.14895248]
[95.20043182 16.25037575]
[89.11754608 1.64527023]
[98.28008270 -10.09769917]
[87.41802979 -21.34714127]
[86.37979889 -36.95021820]
[95.65560150 -49.53963852]
[110.86569214 -53.17106247]
[124.82832336 -46.12983704]
[130.95077515 -31.74061966]
[126.34221649 -16.79755592]
[113.17865753 -8.35630512]
[119.38609314 5.18315554]
[110.09900665 17.99176979]
[108.35761261 32.89034653]
[106.61621857 47.78892136]
[106.03459167 62.77764130]
[106.61621857 77.76635742]
[107.19785309 92.75508118]
[110.70893860 100.26433563]
[107.50000000 108.33388519]
[107.50000000 123.33388519]
[107.50000000 138.33389282]
[107.50000000 153.33389282]
[107.50000000 168.33389282]
[107.50000000 183.33389282]
[120.74071503 187.51974487]
[132.21467590 195.31159973]
[140.96676636 206.04905701]
[146.27182007 218.82701111]
[147.69474792 232.57196045]
[145.12611389 246.13218689]
[138.79057312 258.37423706]
[129.22717285 268.27774048]
[117.24359894 275.02029419]
[103.84789276 278.04598999]
[102.68550873 293.00088501]
[101.52311707 307.95578003]
[100.36073303 322.91067505]
[99.19834900 337.86557007]
[98.03596497 352.82046509]
[111.44647980 360.03695679]
[120.75724792 372.08807373]
[124.35512543 386.88589478]
[121.61674500 401.86657715]
[113.01655579 414.43466187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 53]
[28 52]
[29 51]
[34 50]
[35 49]
[36 48]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
