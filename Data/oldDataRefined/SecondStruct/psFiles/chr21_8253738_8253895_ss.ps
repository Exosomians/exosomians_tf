%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGCAGCAGGAGGAGCGAACGCCCCGCGGCCCGGGCAGGAGCGCUCCGGGGGGCCGGCCGGCAGGCCGGCGCAGCCCCGGAGCGGCGCGAGAUGGAAUGGAUGGACCAACUAGGACGGUCAUCGUAUACGAACAGAGUUUCUAAUUCGGUACGU\
) } def
/len { sequence length } bind def

/coor [
[103.77179718 147.13261414]
[89.84001923 152.69189453]
[76.80720520 145.26586914]
[74.48712158 130.44639587]
[84.62794495 119.39211273]
[77.14586639 118.87387085]
[66.28056335 129.21530151]
[55.41526413 139.55673218]
[50.75337601 154.67550659]
[36.20001602 157.84552002]
[25.33471298 168.18695068]
[21.24682808 176.41648865]
[14.15109158 178.62272644]
[3.08359241 188.74746704]
[-1.16608727 196.89465332]
[-8.30402851 198.96026611]
[-19.56940269 208.86436462]
[-17.99645424 224.30151367]
[-25.82672310 237.69802856]
[-40.04930878 243.90267944]
[-55.19534302 240.52963257]
[-65.44085693 228.87593079]
[-66.84625244 213.42262268]
[-58.87111664 200.11184692]
[-44.58205795 194.06185913]
[-29.47351074 197.59899902]
[-18.20813560 187.69488525]
[-7.04115248 177.67997742]
[4.02634668 167.55522156]
[14.99328232 157.32164001]
[25.85858536 146.98020935]
[29.74331284 132.60112000]
[45.07383347 128.69142151]
[55.93913651 118.34999847]
[66.80443573 108.00856781]
[68.43130493 93.09704590]
[60.05160141 80.65596771]
[45.92481995 73.53244019]
[45.23213196 58.65394974]
[36.85242844 46.21286774]
[31.17715836 60.09779739]
[16.84133339 64.51187897]
[4.33891773 56.22396088]
[2.82179928 41.30088043]
[13.40052509 30.66647530]
[28.33139992 32.10525513]
[21.21964073 18.89832878]
[14.10788345 5.69140339]
[6.99612522 -7.51552248]
[-0.11563264 -20.72244835]
[-7.22739077 -33.92937469]
[-14.33914852 -47.13629913]
[-21.45090675 -60.34322739]
[-28.56266403 -73.55015564]
[-35.67442322 -86.75708008]
[-43.04572296 -99.82092285]
[-50.80091476 -112.66058350]
[-58.68256760 -125.42301178]
[-66.56422424 -138.18544006]
[-74.44587708 -150.94786072]
[-82.32752991 -163.71029663]
[-90.20918274 -176.47271729]
[-98.09084320 -189.23513794]
[-112.77833557 -196.52961731]
[-113.53469086 -212.91131592]
[-99.58183289 -221.52815247]
[-85.27326202 -213.51585388]
[-85.32841492 -197.11679077]
[-77.44676208 -184.35437012]
[-69.56510162 -171.59194946]
[-61.68344879 -158.82951355]
[-53.80179596 -146.06709290]
[-45.92014313 -133.30467224]
[-38.03848648 -120.54224396]
[-31.81503105 -116.48199463]
[-30.13006973 -107.44888306]
[-25.76074409 -105.40354919]
[-22.65569115 -100.56380463]
[-22.46749687 -93.86883545]
[-15.35573864 -80.66191101]
[-8.24398041 -67.45498657]
[-1.13222265 -54.24805832]
[5.97953558 -41.04113388]
[13.09129333 -27.83420753]
[20.20305061 -14.62728024]
[27.31480980 -1.42035460]
[34.42656708 11.78657150]
[41.53832626 24.99349785]
[49.29351425 37.83316422]
[57.67321777 50.27425003]
[71.20063019 56.50790405]
[72.49268341 72.27626038]
[80.87239075 84.71734619]
[79.48308563 69.78182220]
[73.11531830 56.20052719]
[73.37965393 41.20285797]
[80.22205353 27.85439110]
[92.24391174 18.88360405]
[106.98790741 16.12415504]
[121.44032288 20.14008904]
[132.64703369 30.11053276]
[138.31733704 43.99748993]
[137.29304504 58.95967865]
[125.89286041 68.70830536]
[140.57119751 65.61862183]
[155.24955750 62.52894592]
[167.16007996 52.11501694]
[181.20816040 57.06485748]
[193.11868286 46.65093231]
[207.16676331 51.60077286]
[221.84510803 48.51109314]
[231.77842712 35.91312790]
[247.82138062 35.96869659]
[257.66720581 48.63516998]
[253.76300049 64.19591522]
[239.10375977 70.71405792]
[224.93478394 63.18944168]
[210.25643921 66.27912140]
[199.39579773 76.47205353]
[184.29783630 71.74320221]
[173.43719482 81.93613434]
[158.33923340 77.20729065]
[143.66088867 80.29697418]
[128.98254395 83.38665009]
[126.44060516 90.44275665]
[121.35675049 104.55496216]
[118.81481934 111.61106873]
[128.15060425 123.35172272]
[137.48638916 135.09239197]
[146.82218933 146.83303833]
[156.15797424 158.57369995]
[163.99201965 163.37619019]
[165.55946350 170.63980103]
[174.66146851 182.56262207]
[183.76347351 194.48544312]
[192.86547852 206.40824890]
[210.00573730 213.07057190]
[211.63067627 230.52139282]
[220.96647644 242.26205444]
[230.30226135 254.00271606]
[244.89283752 262.63702393]
[240.63504028 279.04760742]
[223.68711853 279.49911499]
[218.56159973 263.33850098]
[209.22581482 251.59783936]
[199.89002991 239.85717773]
[187.87936401 238.16084290]
[180.00880432 228.40942383]
[180.94265747 215.51025391]
[171.84065247 203.58743286]
[162.73866272 191.66462708]
[153.63665771 179.74180603]
[144.41731262 167.90948486]
[135.08152771 156.16882324]
[125.74573517 144.42817688]
[116.40995026 132.68751526]
[107.07416534 120.94685364]
[99.59208679 120.42860413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[10 31]
[11 30]
[13 29]
[14 28]
[16 27]
[17 26]
[36 93]
[37 92]
[39 90]
[40 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 76]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[104 124]
[105 123]
[106 122]
[108 120]
[110 118]
[111 117]
[127 157]
[128 156]
[129 155]
[130 154]
[131 153]
[133 152]
[134 151]
[135 150]
[136 149]
[138 146]
[139 145]
[140 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
