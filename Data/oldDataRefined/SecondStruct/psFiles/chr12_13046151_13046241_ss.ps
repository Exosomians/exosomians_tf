%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAUGCCGGUAUGGUGGGACUUGCGCGGGCUAGAGCAGACUAGAGCCUUCGAUUCGUCCCAGCCCGGACCAAUCAUGAACCUACCCUCU\
) } def
/len { sequence length } bind def

/coor [
[144.20501709 240.11112976]
[155.15994263 229.57270813]
[149.65711975 215.61853027]
[143.91687012 201.76034546]
[137.94085693 188.00218201]
[131.96484375 174.24400330]
[125.52258301 160.69789124]
[118.39523315 147.49937439]
[111.04357910 134.42445374]
[103.69192505 121.34955597]
[96.34027100 108.27465057]
[92.57005310 106.67494202]
[89.59107208 103.32810974]
[88.20754242 98.66181946]
[88.98442841 93.46485138]
[76.38967896 83.88972473]
[78.41586304 69.13358307]
[72.43984222 55.37541199]
[66.46382904 41.61724091]
[60.48781204 27.85907173]
[54.51179504 14.10090256]
[48.53578186 0.34273332]
[32.06575012 -3.03698325]
[20.90789223 -15.39297104]
[19.25292015 -31.79319954]
[27.54965782 -45.84535980]
[21.10740471 -59.39147949]
[8.19309902 -68.53102112]
[9.71430683 -83.34774017]
[3.27205563 -96.89386749]
[-3.17019606 -110.43998718]
[-9.61244774 -123.98610687]
[-16.05469894 -137.53222656]
[-30.67478752 -142.90724182]
[-37.01517868 -156.73670959]
[-31.80082512 -170.64160156]
[-38.24307632 -184.18772888]
[-52.04708862 -193.04104614]
[-51.01171875 -209.40747070]
[-36.20206451 -216.45063782]
[-22.85302734 -206.92512512]
[-24.69695473 -190.62997437]
[-18.25470352 -177.08384705]
[-4.17780447 -172.35346985]
[2.54852462 -158.70755005]
[-2.50857830 -143.97447205]
[3.93367338 -130.42835999]
[10.37592506 -116.88224030]
[16.81817627 -103.33611298]
[23.26042747 -89.78999329]
[35.71393967 -81.61936188]
[34.65352631 -65.83373260]
[41.09577942 -52.28760910]
[54.50375748 -51.03331375]
[65.59910583 -43.21114349]
[71.37744904 -30.80656052]
[70.20840454 -17.06284714]
[62.29394913 -5.63328314]
[68.26996613 8.12488651]
[74.24597931 21.88305664]
[80.22200012 35.64122391]
[86.19801331 49.39939499]
[92.17403412 63.15756607]
[104.34133148 71.74861145]
[102.74259186 87.48883820]
[109.41518402 100.92299652]
[116.76683044 113.99790192]
[124.11848450 127.07280731]
[131.47013855 140.14772034]
[138.55317688 146.25199890]
[138.84086609 153.79690552]
[144.47470093 157.87626648]
[146.70109558 163.39547729]
[145.72300720 168.26799011]
[151.69902039 182.02615356]
[157.67503357 195.78433228]
[164.09669495 202.58094788]
[163.61129761 210.11572266]
[169.11410522 224.06990051]
[184.31338501 224.29443359]
[198.26777649 230.32298279]
[208.84934998 241.23623657]
[214.44447327 255.36997986]
[214.19993591 270.56893921]
[208.15304565 284.51541138]
[197.22589111 295.08261108]
[183.08477783 300.65911865]
[167.88615417 300.39459229]
[153.94766235 294.32937622]
[143.39485168 283.38830566]
[137.83692932 269.23989868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 76]
[5 75]
[6 74]
[7 71]
[8 69]
[9 68]
[10 67]
[11 66]
[15 65]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[26 53]
[27 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
