%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUGGAGCACCGCGUUGCCGUCGCGCAGACUGAGGUCUAGUCUUCCAACGCACAAGUUUAGUGCAGCCCCAGUUUGUACACUAGUAGGGAAAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[128.16448975 206.77403259]
[138.74382019 196.14024353]
[152.99427795 191.45787048]
[167.81813049 193.74414062]
[158.25675964 182.18644714]
[148.69540405 170.62873840]
[139.13404846 159.07104492]
[125.05968475 154.19645691]
[122.22481537 138.63130188]
[112.66345978 127.07360077]
[98.72535706 129.86164856]
[85.07553864 125.89601135]
[74.80112457 116.07357788]
[60.53527832 120.70883179]
[46.26943207 125.34408569]
[32.00358582 129.97933960]
[26.31379128 144.54505920]
[12.56777000 152.00032043]
[-2.74402857 148.82498169]
[-12.39184189 136.51832581]
[-11.82026672 120.89118958]
[-1.29918337 109.32222748]
[14.20367336 107.27395630]
[27.36833000 115.71349335]
[41.63417816 111.07823944]
[55.90002441 106.44298553]
[70.16587067 101.80773163]
[66.93865967 88.70961761]
[69.90565491 73.67539978]
[58.97112274 63.40719223]
[48.03659058 53.13898849]
[37.10206223 42.87078094]
[26.16753387 32.60257339]
[15.23300457 22.33436775]
[-0.78276414 21.39910316]
[-9.91914177 8.21175385]
[-5.16748190 -7.11147261]
[9.82714939 -12.81590939]
[23.56215286 -4.52560091]
[25.50121117 11.39983845]
[36.43574142 21.66804504]
[47.37026978 31.93625069]
[58.30479813 42.20445633]
[69.23932648 52.47266388]
[80.17385864 62.74087143]
[87.61471558 61.80087280]
[78.54581451 49.85285568]
[84.35874939 36.02499390]
[99.24051666 34.14532089]
[108.30915070 46.09353256]
[102.49643707 59.92087173]
[109.93730164 58.98087311]
[117.97470093 46.31595612]
[126.01210022 33.65103531]
[134.04949951 20.98611641]
[129.14901733 6.13622475]
[134.98835754 -8.37019634]
[148.81034851 -15.68365669]
[164.08866882 -12.35096455]
[173.60937500 0.05428493]
[172.87705994 15.67471218]
[162.23753357 27.13482857]
[146.71441650 29.02351952]
[138.67701721 41.68843842]
[130.63961792 54.35335541]
[122.60221863 67.01827240]
[134.42050171 94.02055359]
[124.22115326 117.51223755]
[133.78251648 129.06994629]
[148.54077148 134.77120972]
[150.69174194 149.50968933]
[160.25311279 161.06738281]
[169.81446838 172.62507629]
[179.37582397 184.18278503]
[190.78192139 193.92449951]
[203.69303894 201.56011963]
[216.60417175 209.19573975]
[232.42117310 209.56079102]
[239.43746948 222.69931030]
[252.34858704 230.33493042]
[265.25973511 237.97055054]
[281.65472412 237.60113525]
[289.93975830 251.75352478]
[281.59188843 265.86895752]
[265.19873047 265.42669678]
[257.62411499 250.88168335]
[244.71296692 243.24606323]
[231.80183411 235.61044312]
[216.90834045 235.79154968]
[208.96855164 222.10687256]
[196.05741882 214.47125244]
[183.14630127 206.83563232]
[187.72344971 221.12022400]
[185.32756042 235.92765808]
[176.47932434 248.03997803]
[163.10159302 254.82499695]
[148.10160828 254.80819702]
[134.73912048 247.99322510]
[125.91803741 235.86109924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[7 71]
[9 69]
[10 68]
[13 27]
[14 26]
[15 25]
[16 24]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[52 66]
[53 65]
[54 64]
[55 63]
[75 92]
[76 91]
[77 90]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
