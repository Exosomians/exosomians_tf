%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGCAAGCACCCCUUGGACCGCGAUUUGGUAAGCAUCUGCUGGACGAAGACCCAGCCCCAAAG\
) } def
/len { sequence length } bind def

/coor [
[86.48129272 113.49076843]
[72.55577087 119.06570435]
[58.63025284 124.64064026]
[44.84135056 130.54539490]
[35.50246429 143.31628418]
[20.71113777 141.56529236]
[7.06665802 147.79652405]
[-6.57782173 154.02774048]
[-20.22230148 160.25897217]
[-27.15342331 174.72752380]
[-42.81859970 178.18899536]
[-55.20084763 167.98803711]
[-54.80156708 151.94996643]
[-41.92705154 142.37779236]
[-26.45352745 146.61448669]
[-12.80904675 140.38327026]
[0.83543283 134.15203857]
[14.47991276 127.92081451]
[22.84285545 115.59561920]
[38.61012650 116.90091705]
[43.55893326 111.04958344]
[53.05531693 110.71512604]
[66.98083496 105.14018250]
[80.90635681 99.56524658]
[86.70648956 86.28726959]
[100.15809631 80.90206146]
[113.51870728 86.50923157]
[127.44422913 80.93429565]
[141.36975098 75.35935974]
[155.29525757 69.78442383]
[169.22077942 64.20948792]
[169.83221436 57.04816437]
[172.45191956 50.39098740]
[176.84381104 44.78591537]
[182.62681580 40.68844986]
[189.30789185 38.42462921]
[196.32398987 38.16515350]
[203.08953857 39.91263962]
[209.04534912 43.50300598]
[213.70472717 48.62066650]
[216.69334412 54.82619858]
[231.69334412 54.82619858]
[246.69334412 54.82619858]
[261.69335938 54.82619858]
[276.69335938 54.82619858]
[285.70477295 42.19393921]
[300.43084717 37.30294418]
[315.20913696 42.03390121]
[324.35705566 54.56766129]
[324.35705566 70.08473969]
[315.20913696 82.61849976]
[300.43084717 87.34945679]
[285.70477295 82.45845795]
[276.69335938 69.82620239]
[261.69335938 69.82620239]
[246.69334412 69.82620239]
[231.69334412 69.82620239]
[216.69334412 69.82620239]
[198.53480530 86.29840851]
[174.79571533 78.13500214]
[160.87020874 83.70993805]
[146.94468689 89.28487396]
[133.01916504 94.85981750]
[119.09364319 100.43475342]
[113.29351044 113.71273041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 20]
[6 18]
[7 17]
[8 16]
[9 15]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
