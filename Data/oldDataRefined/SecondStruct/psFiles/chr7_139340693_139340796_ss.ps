%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCUUCGGGGUCACCGGAUUACCUAUUCCGUAACCGGAGGAUUCGGUCCCUAACACCCAAGCUCAGGGUAGACCCCACCGGACACUGAAAACAGGAAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[147.50366211 248.05755615]
[162.36230469 246.00311279]
[176.56530762 250.82691956]
[169.26046753 237.72579956]
[161.95564270 224.62467957]
[154.65080261 211.52355957]
[138.35266113 207.68840027]
[129.63131714 193.00422668]
[134.23910522 176.21047974]
[126.54560852 163.33374023]
[118.85211945 150.45701599]
[111.15863037 137.58027649]
[103.46514130 124.70354462]
[95.77165222 111.82681274]
[84.18540192 102.30007935]
[70.06460571 97.24012756]
[55.94380569 92.18017578]
[41.82300949 87.12022400]
[27.70221138 82.06027985]
[13.58141518 77.00032806]
[-0.53938198 71.94037628]
[-14.66017914 66.88042450]
[-18.69452858 67.91212463]
[-22.50634766 67.73578644]
[-25.76912308 66.54713440]
[-28.24433708 64.62194061]
[-29.79884148 62.28358078]
[-30.41144180 59.86751556]
[-43.62037277 52.75948334]
[-56.82930756 45.65145493]
[-70.03823853 38.54342651]
[-83.24716949 31.43539429]
[-99.61386871 32.46656036]
[-108.46363831 18.66026878]
[-100.69259644 4.21925306]
[-84.29492188 3.99918985]
[-76.13914490 18.22646141]
[-62.93021011 25.33449173]
[-49.72127533 32.44252014]
[-36.51234436 39.55055237]
[-23.30341148 46.65858078]
[-9.60022926 52.75963211]
[4.52056789 57.81958008]
[18.64136505 62.87953186]
[32.76216125 67.93948364]
[46.88295746 72.99942780]
[61.00375748 78.05937958]
[75.12454987 83.11933136]
[89.24534607 88.17928314]
[76.58988190 80.12700653]
[71.51149750 66.01282501]
[76.13542175 51.74330139]
[88.52661133 43.28999329]
[103.49955750 44.19047546]
[114.78833008 54.06790924]
[117.66874695 68.78874969]
[110.93451691 82.19345093]
[120.46125031 70.60719299]
[129.98799133 59.02094269]
[139.51472473 47.43468857]
[136.46817017 32.09674454]
[144.03868103 18.41386032]
[158.65170288 12.84667683]
[173.40740967 18.02384567]
[181.33860779 31.50086594]
[178.70043945 46.91430283]
[166.73854065 56.98640060]
[151.10098267 56.96142578]
[141.57424927 68.54767609]
[132.04750061 80.13393402]
[122.52076721 91.72018433]
[116.77161407 100.78483582]
[108.64838409 104.13332367]
[116.34187317 117.01005554]
[124.03536224 129.88679504]
[131.72885132 142.76351929]
[139.42234802 155.64025879]
[147.11582947 168.51698303]
[160.56330872 170.31452942]
[170.34127808 179.43527222]
[172.98989868 192.34219360]
[167.75192261 204.21871948]
[175.05676270 217.31983948]
[182.36158752 230.42097473]
[189.66642761 243.52209473]
[198.45198059 248.91152954]
[200.69503784 257.78408813]
[211.53695679 268.15002441]
[222.37889099 278.51599121]
[238.43009949 281.87612915]
[243.28796387 297.53924561]
[231.95512390 309.39245605]
[216.08984375 305.24218750]
[212.01293945 289.35791016]
[201.17102051 278.99197388]
[190.32910156 268.62600708]
[191.42443848 283.58596802]
[185.69775391 297.44976807]
[174.36416626 307.27575684]
[159.82847595 310.97894287]
[145.17494202 307.77362061]
[133.51283264 298.33990479]
[127.31665802 284.67947388]
[127.90116882 269.69085693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[57 71]
[58 70]
[59 69]
[60 68]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
