%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACACCGUUGACACUACUUUCUAAACCAGACAUACAUUAUCUAAAAUAAUGAUUUACUCCUGUUGUCAGGGAGAUUUGACUAC\
) } def
/len { sequence length } bind def

/coor [
[52.23660278 179.65071106]
[43.50872040 191.85006714]
[34.78083801 204.04940796]
[33.04375076 219.77496338]
[19.34560776 225.62390137]
[10.61772346 237.82325745]
[9.56213474 254.18838501]
[-5.25620985 261.21325684]
[-18.59346771 251.67126465]
[-16.72941208 235.37840271]
[-1.58162260 229.09536743]
[7.14626122 216.89602661]
[8.25907040 202.04304504]
[22.58149147 195.32151794]
[31.30937386 183.12217712]
[40.03725815 170.92283630]
[32.02328110 163.28305054]
[24.97541618 154.74386597]
[18.99382973 145.42663574]
[14.16353607 135.46379089]
[10.55318260 124.99691010]
[8.21408367 114.17476654]
[7.17948151 103.15116882]
[7.46408129 92.08278656]
[9.06383801 81.12692261]
[11.95601463 70.43929291]
[16.09950829 60.17179489]
[21.43542671 50.47034836]
[27.88793755 41.47283554]
[35.36533356 33.30713272]
[43.76134109 26.08929825]
[52.95663452 19.92191124]
[62.82052994 14.89262390]
[73.21282959 11.07291698]
[83.98584747 8.51707649]
[94.98645782 7.26142693]
[106.05831909 7.32381487]
[108.24234009 -7.51633549]
[110.42635345 -22.35648537]
[112.61037445 -37.19663620]
[114.79439545 -52.03678894]
[116.97840881 -66.87693787]
[108.59931946 -80.55796051]
[114.20652771 -95.58922577]
[129.49865723 -100.44002533]
[142.74490356 -91.38924408]
[143.78387451 -75.37986755]
[131.81855774 -64.69291687]
[129.63453674 -49.85276794]
[127.45052338 -35.01261902]
[125.26651001 -20.17246819]
[123.08248901 -5.33231831]
[120.89847565 9.50783253]
[141.88766479 17.10848999]
[160.45692444 29.49794579]
[175.53346252 45.96043777]
[186.24630737 65.54489899]
[191.97653198 87.11989594]
[192.39309692 109.43900299]
[207.14358521 112.16355133]
[221.89405823 114.88810730]
[236.64454651 117.61266327]
[251.39503479 120.33721161]
[263.33935547 110.24427032]
[278.97692871 110.24197388]
[290.92419434 120.33140564]
[293.54000854 135.74865723]
[285.58929443 149.21415710]
[270.82608032 154.36991882]
[256.22113037 148.78153992]
[248.67048645 135.08769226]
[233.91999817 132.36314392]
[219.16950989 129.63859558]
[204.41902161 126.91403961]
[189.66854858 124.18948364]
[184.89852905 137.65393066]
[178.12019348 150.22763062]
[169.49385071 161.61315918]
[159.22360229 171.54119873]
[147.55236816 179.77688599]
[134.75625610 186.12538147]
[121.13795471 190.43652344]
[107.01962280 192.60833740]
[92.73523712 192.58943176]
[78.62270355 190.38024902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[5 12]
[6 11]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
