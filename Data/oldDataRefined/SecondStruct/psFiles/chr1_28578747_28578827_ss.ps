%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGACCAGAGUCAGGGUAUAGGCGUAAAGAGUAGGUACCUACAGGUGAGUUUAAUCCAAAGUAGGACCUGGUCAGUAAG\
) } def
/len { sequence length } bind def

/coor [
[17.94807625 170.05313110]
[5.67913628 178.68290710]
[-6.58980417 187.31269836]
[-9.42807388 202.62876892]
[-21.99345779 211.20581055]
[-36.57749939 208.40556335]
[-48.84643936 217.03533936]
[-61.11537933 225.66513062]
[-61.21850967 241.18185425]
[-70.44953156 253.65454102]
[-85.25893402 258.28717041]
[-99.95219421 253.29841614]
[-108.87945557 240.60655212]
[-108.60800171 225.09184265]
[-99.24221802 212.72003174]
[-84.38343811 208.24832153]
[-69.74516296 213.39617920]
[-57.47621918 204.76640320]
[-45.20727921 196.13662720]
[-42.91304779 181.46447754]
[-30.59353256 172.53787231]
[-15.21958351 175.04374695]
[-2.95064354 166.41397095]
[9.31829739 157.78419495]
[5.61754560 142.49732971]
[8.02093315 126.91495514]
[16.19524765 113.38820648]
[28.93432617 103.96924591]
[44.33695602 100.09993744]
[60.09059143 102.39120483]
[73.81855774 110.52675629]
[85.74795532 101.43337250]
[91.31645966 88.60826874]
[105.15866852 86.63722992]
[117.08805847 77.54385376]
[129.01745605 68.45046997]
[140.94683838 59.35709000]
[152.87623596 50.26370621]
[157.96907043 42.36596298]
[165.44122314 41.06095505]
[177.71015930 32.43117523]
[189.97911072 23.80139351]
[202.24804688 15.17161369]
[214.51698303 6.54183388]
[221.86157227 -12.04412365]
[240.98345947 -13.55259514]
[252.55578613 -23.09623146]
[249.93852234 -38.23048019]
[255.25407410 -52.64021301]
[267.07260132 -62.44928741]
[282.21499634 -65.01910400]
[296.60797119 -59.65840530]
[306.37997437 -47.80918884]
[308.90231323 -32.65882874]
[303.49652100 -18.28270340]
[291.61672974 -8.54791260]
[276.45852661 -6.07307005]
[262.09942627 -11.52389431]
[250.52708435 -1.98025763]
[250.42205811 8.54945087]
[244.29559326 17.38653183]
[234.05622864 21.33930016]
[223.14677429 18.81077385]
[210.87782288 27.44055367]
[198.60888672 36.07033539]
[186.33995056 44.70011520]
[174.07099915 53.32989502]
[161.96961975 62.19309998]
[150.04022217 71.28648376]
[138.11083984 80.37985992]
[126.18144226 89.47324371]
[114.25204468 98.56662750]
[108.68354034 111.39173126]
[94.84133148 113.36277008]
[82.91194153 122.45614624]
[86.97484589 136.24383545]
[86.04685211 150.55752563]
[80.26197815 163.65013123]
[70.34580994 173.93067932]
[57.52455902 180.15777588]
[43.37342072 181.58937073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[6 19]
[7 18]
[8 17]
[31 75]
[32 74]
[34 72]
[35 71]
[36 70]
[37 69]
[38 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[46 59]
[47 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
