%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:28 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUCGAGUCUUGAAGAAUCUCCUGUUUUUAUGUAAUAGUACAGUCUGCUAGUUACGUUAGUUUAAGUAGUAUCGAAUAUAA\
) } def
/len { sequence length } bind def

/coor [
[110.20706177 359.61001587]
[106.93230438 344.53421021]
[112.34939575 330.08920288]
[124.72975922 320.88430786]
[123.60881042 305.92623901]
[122.48786163 290.96817017]
[121.36690521 276.01013184]
[120.24595642 261.05206299]
[104.60473633 249.81196594]
[101.84780121 230.45132446]
[114.09349060 214.82763672]
[111.30481720 200.08914185]
[108.51614380 185.35064697]
[105.72747040 170.61215210]
[102.93879700 155.87365723]
[100.15012360 141.13516235]
[91.91510010 140.33308411]
[84.00717926 137.89924622]
[76.74628448 133.93211365]
[70.42617035 128.59217834]
[65.30253601 122.09546661]
[61.58266830 114.70483398]
[59.41706085 106.71929169]
[58.89333344 98.46189880]
[60.03267288 90.26673126]
[62.78898239 82.46534729]
[67.05075073 75.37337494]
[72.64556122 69.27772522]
[79.34705353 64.42501831]
[86.88411713 61.01157379]
[94.95180511 59.17550278]
[103.22373199 58.99108505]
[107.10601807 44.50219727]
[110.98830414 30.01330757]
[114.87059021 15.52442074]
[118.75287628 1.03553367]
[122.63516235 -13.45335388]
[126.51744843 -27.94224167]
[130.12812805 -42.50119019]
[133.46594238 -57.12510681]
[136.80375671 -71.74902344]
[140.14157104 -86.37294769]
[132.85798645 -100.66731262]
[139.62344360 -115.21406555]
[155.24807739 -118.85417938]
[167.74600220 -108.79528046]
[167.52987671 -92.75367737]
[154.76548767 -83.03513336]
[151.42767334 -68.41121674]
[148.08985901 -53.78729248]
[144.75204468 -39.16337585]
[146.37359619 -31.76129150]
[141.00633240 -24.05995560]
[137.12405396 -9.57106781]
[133.24176025 4.91781950]
[129.35948181 19.40670586]
[125.47719574 33.89559555]
[121.59490967 48.38448334]
[117.71262360 62.87336731]
[135.19470215 78.70549011]
[141.10665894 101.53810120]
[133.50495911 123.86506653]
[114.88861847 138.34648132]
[117.67729187 153.08497620]
[120.46596527 167.82347107]
[123.25463867 182.56198120]
[126.04331207 197.30047607]
[128.83198547 212.03897095]
[139.26240540 215.82672119]
[147.02413940 223.64208984]
[150.68495178 233.94357300]
[149.61186218 244.74087524]
[144.07940674 253.97938538]
[135.20401001 259.93112183]
[136.32496643 274.88916016]
[137.44592285 289.84722900]
[138.56686401 304.80529785]
[139.68782043 319.76333618]
[153.30181885 327.02023315]
[160.81132507 340.49655151]
[159.82008362 355.89202881]
[150.64437866 368.29403687]
[136.21217346 373.74514771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
