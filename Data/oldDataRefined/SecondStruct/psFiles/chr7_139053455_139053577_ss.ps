%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAUAAACAAAAGUACUCAAAGUACAUCCUUUGACAGUUUUAAUAAGCUUGUCUAUCUAAGGUGUAUCCGUGCCGAACAGCGUAUUUUAUCCUCAAAAGGAAGAAGGAAGUAGACGCUAAA\
) } def
/len { sequence length } bind def

/coor [
[189.98370361 141.30010986]
[189.04258728 127.28179932]
[175.25822449 121.36646271]
[161.47384644 115.45112610]
[147.68948364 109.53578949]
[133.90512085 103.62045288]
[144.97616577 113.74131775]
[150.46807861 127.69979095]
[149.26164246 142.65119934]
[141.60272217 155.54850769]
[129.05215454 163.76335144]
[114.16770172 165.62153625]
[99.98272705 160.74441528]
[89.38804626 150.12590027]
[84.54309845 135.93276978]
[71.42790222 143.21229553]
[58.31270218 150.49183655]
[45.19750214 157.77136230]
[32.08230591 165.05088806]
[21.16771317 178.02424622]
[5.67989826 171.12759399]
[8.01958275 154.33586121]
[24.80277443 151.93568420]
[37.91797256 144.65615845]
[51.03317261 137.37663269]
[64.14836884 130.09710693]
[77.26357269 122.81757355]
[78.02233124 115.35605621]
[63.02267075 115.45668030]
[48.12965012 117.24494171]
[40.99290466 104.05149841]
[50.63998032 92.56525421]
[64.86749268 97.31504059]
[79.53985596 100.43301392]
[80.29862213 92.97149658]
[68.91725159 83.20090485]
[57.53587723 73.43032074]
[46.15450668 63.65973282]
[34.65028000 54.03409958]
[23.02504539 44.55496979]
[11.39980984 35.07584000]
[-0.22542495 25.59671021]
[-16.49154854 23.51217842]
[-22.56886673 8.28068924]
[-12.20555592 -4.42890644]
[3.93749833 -1.54206705]
[9.25370598 13.97147465]
[20.87894058 23.45060539]
[32.50417328 32.92973709]
[44.12940979 42.40886688]
[51.38424301 44.21797180]
[55.92509460 52.27836227]
[67.30646515 62.04894638]
[78.68783569 71.81953430]
[90.06920624 81.59011841]
[97.22525024 79.34490204]
[91.92142487 65.31388092]
[83.84722137 52.67239761]
[92.98535919 40.77725601]
[107.28073120 45.32063675]
[107.87505341 60.30839920]
[111.53733826 74.85445404]
[118.69338989 72.60923004]
[122.45317078 58.08806992]
[115.58647156 43.58883286]
[122.77024078 29.24404144]
[138.49369812 26.05779457]
[150.69517517 36.47430801]
[150.01472473 52.50292206]
[136.97433472 61.84785843]
[133.21453857 76.36901855]
[139.82044983 89.83608246]
[153.60482788 95.75141907]
[167.38919067 101.66676331]
[181.17355347 107.58209991]
[194.95793152 113.49743652]
[208.04521179 103.48126984]
[224.30062866 101.41029358]
[239.30900574 107.75228882]
[249.04136658 120.70277405]
[250.93652344 136.69721985]
[264.86630249 142.26145935]
[278.79611206 147.82569885]
[292.72589111 153.38995361]
[306.65570068 158.95419312]
[316.75064087 148.97715759]
[329.85421753 143.63737488]
[343.96035767 143.71644592]
[356.92312622 149.16908264]
[366.78329468 159.13508606]
[372.06442261 172.07484436]
[371.99377441 186.00717163]
[385.77813721 191.92251587]
[399.56250000 197.83784485]
[413.34686279 203.75318909]
[427.20504761 209.49343872]
[440.25946045 201.10523987]
[455.74920654 202.02583313]
[467.71817017 211.90124512]
[471.56402588 226.93418884]
[465.80795288 241.34416199]
[452.66333008 249.59025574]
[437.18447876 248.50167847]
[425.32336426 238.49699402]
[421.64080811 223.42323303]
[414.17712402 223.86892700]
[407.43151855 217.53755188]
[393.64715576 211.62220764]
[379.86279297 205.70687866]
[366.07843018 199.79153442]
[354.28204346 210.49275208]
[338.95181274 215.02090454]
[323.11981201 212.42791748]
[309.94021606 203.17935181]
[302.06085205 189.07177734]
[301.09146118 172.88398743]
[287.16165161 167.31974792]
[273.23187256 161.75549316]
[259.30206299 156.19125366]
[245.37226868 150.62701416]
[235.17126465 159.79872131]
[221.94340515 163.67559814]
[208.27433777 161.44000244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[35 55]
[36 54]
[37 53]
[38 52]
[39 50]
[40 49]
[41 48]
[42 47]
[63 71]
[64 70]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[92 110]
[93 109]
[94 108]
[95 107]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
