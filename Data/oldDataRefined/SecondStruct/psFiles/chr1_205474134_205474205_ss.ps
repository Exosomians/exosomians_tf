%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCCACUCGGGCCUCUCGAGUCACCCAUCUCGUAGUCUGAAAAUUAGACUCCCAGGUCCCAAGUUCAGGA\
) } def
/len { sequence length } bind def

/coor [
[97.02791595 325.56298828]
[96.38258362 310.57687378]
[84.48574066 304.15463257]
[77.32530212 292.55831909]
[76.90574646 278.82659912]
[83.44808197 266.62216187]
[95.30180359 259.25479126]
[95.30180359 244.25479126]
[95.30180359 229.25479126]
[87.56449890 216.52751160]
[95.30180359 202.72734070]
[95.30180359 187.72734070]
[95.30180359 172.72734070]
[94.97905731 157.73081970]
[94.33372498 142.74470520]
[93.68839264 127.75859833]
[79.17720032 119.41100311]
[71.86727905 104.35039520]
[74.28665161 87.78526306]
[62.91206741 78.00678253]
[51.53747940 68.22829437]
[40.16289139 58.44981003]
[25.09452438 62.15439224]
[10.73920822 56.26333618]
[2.61685586 43.04187393]
[3.85067725 27.57393074]
[13.96624279 15.80724239]
[29.07391167 12.26634216]
[43.36447525 18.31277847]
[51.34292221 31.62157249]
[49.94137573 47.07522202]
[61.31596375 56.85370636]
[72.69055176 66.63219452]
[84.06513977 76.41067505]
[96.94316101 71.69749451]
[110.53056335 73.55225372]
[119.55492401 61.57056427]
[128.57928467 49.58887482]
[137.60365295 37.60718536]
[146.62800598 25.62549400]
[155.65237427 13.64380360]
[164.67672729 1.66211247]
[169.37625122 -14.62748337]
[186.33018494 -14.62103844]
[191.01731873 1.67212462]
[176.65841675 10.68647385]
[167.63406372 22.66816330]
[158.60969543 34.64985657]
[149.58534241 46.63154602]
[140.56097412 58.61323547]
[131.53662109 70.59492493]
[122.51226044 82.57661438]
[128.01376343 94.93988037]
[127.18513489 108.44655609]
[120.21360779 120.04460144]
[108.67450714 127.11325836]
[109.31983948 142.09938049]
[109.96517181 157.08547974]
[113.55118561 165.82940674]
[110.30180359 172.72734070]
[110.30180359 187.72734070]
[110.30180359 202.72734070]
[118.03910065 216.52751160]
[110.30180359 229.25479126]
[110.30180359 244.25479126]
[110.30180359 259.25479126]
[124.03437805 268.87316895]
[129.38316345 284.58966064]
[124.46698761 300.27474976]
[111.36869049 309.93151855]
[112.01403046 324.91763306]
[115.03134155 344.06301880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[7 66]
[8 65]
[9 64]
[11 62]
[12 61]
[13 60]
[14 58]
[15 57]
[16 56]
[19 34]
[20 33]
[21 32]
[22 31]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
