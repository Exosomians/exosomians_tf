%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUACUUGGUAGCCCAUUUACAACAGAGCCCUUUUCUUCGUGACUGGCAGGGACCCACCCGAGCUUGGUGGUUGGAAAGCCAAUUGUCGGCUUGCGCGAUUGGCUAACGCGGUGUCUCUGGGUCAA\
) } def
/len { sequence length } bind def

/coor [
[-87.16947937 279.99588013]
[-94.05397034 298.69595337]
[-105.15407562 315.23641968]
[-119.83956909 328.68435669]
[-137.27812195 338.28222656]
[-156.48246765 343.49050903]
[-176.36627197 344.01818848]
[-195.80563354 339.83883667]
[-213.70254517 331.19201660]
[-222.87016296 343.06448364]
[-232.03776550 354.93692017]
[-233.69033813 371.25259399]
[-248.75535583 377.73156738]
[-261.73522949 367.70883179]
[-259.27737427 351.49493408]
[-243.91021729 345.76931763]
[-234.74259949 333.89685059]
[-225.57499695 322.02441406]
[-233.16746521 314.01306152]
[-239.63935852 305.06982422]
[-244.87744141 295.35034180]
[-248.79002380 285.02383423]
[-251.30842590 274.27017212]
[-252.38832092 263.27664185]
[-252.01040649 252.23492432]
[-250.18080139 241.33747864]
[-246.93095398 230.77436829]
[-242.31704712 220.72987366]
[-236.41911316 211.37927246]
[-229.33955383 202.88584900]
[-221.20143127 195.39793396]
[-212.14630127 189.04643250]
[-202.33175659 183.94244385]
[-191.92866516 180.17533875]
[-181.11820984 177.81124878]
[-170.08877563 176.89183044]
[-159.03256226 177.43359375]
[-148.14236450 179.42753601]
[-137.60807800 182.83937073]
[-127.61351013 187.61007690]
[-118.33308411 193.65689087]
[-109.92884064 200.87480164]
[-102.54759216 209.13833618]
[-89.93777466 201.01477051]
[-77.32795715 192.89118958]
[-64.71813965 184.76760864]
[-52.10831833 176.64404297]
[-50.22815704 172.15115356]
[-45.44902039 168.84028625]
[-38.68084717 168.44937134]
[-25.69046593 160.94937134]
[-12.70008564 153.44937134]
[0.29029566 145.94937134]
[13.28067684 138.44937134]
[26.27105713 130.94937134]
[39.26144028 123.44937134]
[52.15953445 115.79174805]
[64.96343231 107.97764587]
[71.79666901 94.74298859]
[87.60707092 94.15843201]
[96.33495331 81.95908356]
[99.59641266 67.31794739]
[102.85786438 52.67680740]
[106.11931610 38.03566742]
[101.56769562 22.88332939]
[111.88718414 12.14286995]
[104.52909851 -2.11329150]
[111.21855164 -16.69515419]
[126.82397461 -20.41675949]
[139.37422180 -10.42321205]
[139.24180603 5.61929464]
[126.52832031 15.40432262]
[131.31321716 29.50942802]
[120.76045227 41.29711914]
[117.49900055 55.93825912]
[114.23754883 70.57939911]
[110.97609711 85.22053528]
[116.11552429 90.68279266]
[126.39437866 101.60731506]
[131.53379822 107.06958008]
[146.34625244 104.70502472]
[161.15872192 102.34046936]
[175.97117615 99.97591400]
[190.78363037 97.61135864]
[205.59608459 95.24680328]
[220.40853882 92.88224792]
[235.22099304 90.51769257]
[250.03346252 88.15313721]
[258.11242676 83.66810608]
[265.23501587 85.91593170]
[280.10064697 83.91277313]
[290.93249512 72.07847595]
[306.92803955 73.31230927]
[315.81686401 86.66777802]
[310.78021240 101.89971161]
[295.68179321 107.32347107]
[282.10382080 98.77841949]
[267.23815918 100.78157806]
[252.39801025 102.96559143]
[237.58555603 105.33014679]
[222.77310181 107.69470215]
[207.96064758 110.05925751]
[193.14817810 112.42381287]
[178.33572388 114.78836823]
[163.52326965 117.15292358]
[148.71081543 119.51747894]
[133.89836121 121.88203430]
[118.33603668 126.64427948]
[105.02442932 123.81605530]
[96.96426392 116.05212402]
[95.42118073 106.96232605]
[87.67211914 120.75589752]
[72.77753448 120.78153992]
[59.97364044 128.59564209]
[54.20397949 135.81343079]
[46.76144028 136.43975830]
[33.77105713 143.93975830]
[20.78067589 151.43975830]
[7.79029560 158.93975830]
[-5.20008516 166.43975830]
[-18.19046593 173.93975830]
[-31.18084717 181.43975830]
[-43.98474503 189.25386047]
[-56.59456253 197.37742615]
[-69.20438385 205.50100708]
[-81.81420135 213.62458801]
[-94.42401886 221.74815369]
[-87.35638428 240.40307617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 18]
[10 17]
[11 16]
[43 127]
[44 126]
[45 125]
[46 124]
[47 123]
[50 122]
[51 121]
[52 120]
[53 119]
[54 118]
[55 117]
[56 116]
[57 114]
[58 113]
[60 111]
[61 77]
[62 76]
[63 75]
[64 74]
[66 72]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
