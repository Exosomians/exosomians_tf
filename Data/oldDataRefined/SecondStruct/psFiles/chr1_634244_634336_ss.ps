%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUUGGAAGGGAGAUGUGAAUAGUAGAAGUGUUAAGAUUAAGAUGACUGAUAGGAUCUUUAGCGACAGCGGAAUUAGGUUCGGAUGCAAAA\
) } def
/len { sequence length } bind def

/coor [
[139.73893738 257.60031128]
[124.74449921 258.00872803]
[110.46971893 253.40106201]
[98.54377747 244.30316162]
[90.32777405 231.75337219]
[86.75940704 217.18399048]
[88.24593353 202.25782776]
[94.61769104 188.67840576]
[105.14747620 177.99554443]
[118.63352203 171.42846680]
[133.53666687 169.72666931]
[148.15837097 173.08537292]
[138.86212158 161.31338501]
[129.56587219 149.54139709]
[120.26961517 137.76940918]
[110.97337341 125.99741364]
[101.67712402 114.22542572]
[88.75857544 108.87726593]
[86.55088806 95.07082367]
[75.01148224 97.56755066]
[63.44253159 95.48791504]
[53.58274841 89.18474579]
[46.89862442 79.64259338]
[44.36631012 68.32410431]
[46.32924652 56.94590759]
[52.45215607 47.21822739]
[44.38092041 34.57484436]
[36.30968475 21.93145943]
[21.13621140 18.40960121]
[13.13094139 5.47243452]
[16.58200455 -8.97144890]
[8.51076889 -21.61483192]
[-5.43657160 -29.08358574]
[-5.76318121 -43.97460938]
[-13.83441639 -56.61799622]
[-21.90565109 -69.26137543]
[-36.70037079 -76.33586121]
[-37.70111465 -92.70444489]
[-23.87839890 -101.52853394]
[-9.45185280 -93.73066711]
[-9.26226807 -77.33261108]
[-1.19103241 -64.68923187]
[6.88020277 -52.04584503]
[20.25023460 -45.48143005]
[21.15415192 -29.68606758]
[29.22538757 -17.04268456]
[43.77997589 -14.09317875]
[52.14546585 -1.38596702]
[48.95306778 13.86022472]
[57.02430344 26.50360870]
[65.09554291 39.14699173]
[83.57407379 39.02859497]
[98.64971924 49.96554947]
[104.36093140 67.84678650]
[98.32287598 85.77457428]
[111.24142456 91.12273407]
[113.44911194 104.92917633]
[122.74536133 116.70116425]
[132.04161072 128.47315979]
[141.33786011 140.24514771]
[150.63410950 152.01713562]
[159.93035889 163.78912354]
[167.76107788 166.67134094]
[171.90272522 172.92298889]
[185.71247864 178.77883911]
[199.52223206 184.63467407]
[209.67980957 178.00613403]
[221.66122437 177.20932007]
[232.38838196 182.33004761]
[239.16354370 191.94903564]
[240.34751892 203.53306580]
[253.73530579 210.29821777]
[267.12307739 217.06336975]
[280.51086426 223.82852173]
[295.44509888 218.65702820]
[309.62530518 225.63539124]
[314.63861084 240.62345886]
[307.51071167 254.72909546]
[292.47045898 259.58364868]
[278.44097900 252.30702209]
[273.74572754 237.21629333]
[260.35794067 230.45114136]
[246.97015381 223.68598938]
[233.58236694 216.92083740]
[216.75672913 223.74324036]
[199.91618347 216.15798950]
[193.66638184 198.44441223]
[179.85664368 192.58857727]
[166.04689026 186.73274231]
[173.14843750 199.94515991]
[175.44529724 214.76826477]
[172.67535400 229.51029968]
[165.15470886 242.48873901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[19 55]
[26 51]
[27 50]
[28 49]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
[64 89]
[65 88]
[66 87]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
