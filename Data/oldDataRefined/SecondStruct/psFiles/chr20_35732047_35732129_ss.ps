%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAGAGACAGAGAUGAAGCGAAGGCAAGGAAUGAAAACGAAGAGAAAGCAAGUACUGAUGCUGAAGACGAGAACGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[111.35482788 251.51963806]
[97.24980927 251.91961670]
[83.16851807 251.00938416]
[69.23237610 248.79679871]
[55.56159210 245.30093384]
[42.27405930 240.55194092]
[29.48437309 234.59078979]
[17.30283928 227.46887207]
[5.83451509 219.24761963]
[-4.82169390 209.99792480]
[-14.57388401 199.79959106]
[-23.33794975 188.74053955]
[-31.03830528 176.91615295]
[-37.60853958 164.42842102]
[-42.99199295 151.38504028]
[-47.14223480 137.89849854]
[-50.02346802 124.08509827]
[-51.61084747 110.06398010]
[-51.89068222 95.95606995]
[-50.86055756 81.88303375]
[-48.52936172 67.96624756]
[-63.01824951 64.08396149]
[-78.70993805 68.84870911]
[-90.49564362 57.44567108]
[-86.25122833 41.60530853]
[-70.34299469 37.62283707]
[-59.13596344 49.59507751]
[-44.64707565 53.47735977]
[-38.80752182 38.19704819]
[-31.35913467 23.63305473]
[-22.38824844 9.95418358]
[-11.99883747 -2.68102527]
[-0.31131890 -14.12612247]
[12.53884506 -24.24845695]
[26.40271568 -32.93070602]
[41.11960602 -40.07223892]
[56.51894379 -45.59028244]
[72.42224121 -49.42087936]
[88.64517212 -51.51963806]
[104.99971008 -51.86222458]
[121.29630280 -50.44467545]
[137.34606934 -47.28341293]
[152.96296692 -42.41508484]
[167.96601868 -35.89611435]
[182.18130493 -27.80205536]
[195.44409180 -18.22672272]
[207.60064697 -7.28110170]
[218.51005554 4.90794802]
[228.04589844 18.19915009]
[236.09764099 32.43845367]
[249.84608459 26.44007301]
[263.59451294 20.44169235]
[277.34295654 14.44331169]
[280.55093384 -0.73853451]
[292.09243774 -11.11028290]
[307.52954102 -12.68378353]
[320.92633057 -4.85399485]
[327.13146973 9.36837101]
[323.75900269 24.51452255]
[312.10565186 34.76045609]
[296.65240479 36.16640472]
[283.34133911 28.19174576]
[269.59289551 34.19012451]
[255.84446716 40.18850708]
[242.09602356 46.18688583]
[246.47537231 59.60078812]
[249.59147644 73.36310577]
[251.41743469 87.35514832]
[251.93753052 101.45624542]
[251.14724731 115.54478455]
[249.05343628 129.49926758]
[245.67413330 143.19932556]
[241.03846741 156.52682495]
[235.18646240 169.36680603]
[228.16854858 181.60855103]
[220.04525757 193.14648438]
[210.88667297 203.88108826]
[200.77174377 213.71977234]
[189.78773499 222.57771301]
[178.02937317 230.37849426]
[165.59805298 237.05484009]
[152.60098267 242.54917908]
[139.15026855 246.81413269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 28]
[22 27]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
