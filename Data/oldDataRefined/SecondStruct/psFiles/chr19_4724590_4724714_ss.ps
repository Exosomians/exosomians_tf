%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAAGUUUAUCAUAAUGAGAGGCCAAUCCUUUUUGUCGACUGGACAAAGGCGGGCCCUAGCUUGGCCCCUGGAAAGCGCACACUCCGCUUACACUAUUGGCGAUGUGAUGCCUUUGGCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[137.52679443 137.57128906]
[131.96647644 142.40289307]
[125.79104614 146.41856384]
[119.11932373 149.54103088]
[112.07969666 151.71017456]
[104.80762482 152.88429260]
[97.44303894 153.04077148]
[90.12765503 152.17660522]
[83.00224304 150.30842590]
[76.20391083 147.47218323]
[69.86347961 143.72244263]
[64.10295105 139.13136292]
[59.03318405 133.78730774]
[54.75172424 127.79307556]
[51.34096146 121.26404572]
[48.86652374 114.32583618]
[47.37603378 107.11195374]
[46.89816666 99.76122284]
[47.44211960 92.41508484]
[48.99742508 85.21490479]
[35.32483673 79.04560089]
[26.10421371 78.34859467]
[21.39127159 72.54827118]
[7.87673807 66.04001617]
[-5.63779497 59.53175735]
[-19.15232849 53.02350235]
[-31.33348846 58.92308807]
[-44.49075699 56.72659683]
[-53.81778336 47.46519852]
[-56.03997421 34.70848083]
[-69.38805389 27.86532021]
[-82.73612976 21.02215958]
[-96.08420563 14.17899990]
[-102.87381744 14.12589359]
[-107.81665802 11.04948235]
[-109.91436768 6.64749432]
[-122.90475464 -0.85250574]
[-135.89512634 -8.35250568]
[-148.88551331 -15.85250568]
[-164.69169617 -13.10584545]
[-176.59802246 -23.85846901]
[-175.47097778 -39.86188507]
[-162.17514038 -48.83964157]
[-146.90992737 -43.90477371]
[-141.38551331 -28.84288597]
[-128.39512634 -21.34288597]
[-115.40475464 -13.84288692]
[-102.41436768 -6.34288692]
[-89.24105072 0.83092284]
[-75.89296722 7.67408276]
[-62.54489136 14.51724243]
[-49.19681549 21.36040306]
[-33.48212051 15.51068783]
[-18.07279778 22.93462944]
[-12.64407158 39.50896835]
[0.87046111 46.01722336]
[14.38499451 52.52547836]
[27.89952660 59.03373718]
[41.49414444 65.37300873]
[55.16673279 71.54232025]
[73.23143005 54.13819504]
[97.26938629 46.96788406]
[121.91666412 51.63140106]
[141.67335510 67.08810425]
[152.13087463 89.88892365]
[167.11222839 89.14123535]
[182.09358215 88.39354706]
[197.07493591 87.64585876]
[212.05628967 86.89817047]
[203.36299133 74.67415619]
[207.25398254 60.18760681]
[220.90211487 53.96436691]
[234.39071655 60.52620697]
[237.91903687 75.10533142]
[228.92376709 87.10845947]
[243.88182068 88.22940826]
[258.83987427 89.35036469]
[273.79794312 90.47131348]
[282.70086670 87.97264862]
[289.11343384 91.81124878]
[304.03887939 93.30476379]
[318.96435547 94.79827881]
[333.90725708 96.10561371]
[348.86532593 97.22657013]
[363.82336426 98.34751892]
[375.73953247 88.31540680]
[390.89315796 89.66529846]
[400.38378906 101.08734131]
[415.34185791 102.20829773]
[430.29992676 103.32924652]
[445.25796509 104.45020294]
[454.46286011 92.06983185]
[468.90789795 86.65274048]
[483.98367310 89.92749786]
[494.87960815 100.84913635]
[498.11883545 115.93260193]
[492.66772461 130.36482239]
[480.26568604 139.54051208]
[464.87020874 140.53176880]
[451.39392090 133.02226257]
[444.13702393 119.40825653]
[429.17895508 118.28730774]
[414.22091675 117.16635132]
[399.26284790 116.04540253]
[388.17584229 125.92536926]
[372.99026489 125.00164795]
[362.70242310 113.30558014]
[347.74435425 112.18462372]
[332.78631592 111.06367493]
[325.80462646 113.73043060]
[317.47082520 109.72373962]
[302.54534912 108.23022461]
[287.61990356 106.73670959]
[272.67697144 105.42937469]
[257.71893311 104.30841827]
[242.76086426 103.18746948]
[227.80281067 102.06652069]
[212.80397034 101.87952423]
[197.82261658 102.62721252]
[182.84126282 103.37490082]
[167.85990906 104.12258911]
[152.87855530 104.87027740]
[151.69583130 112.14095306]
[149.51834106 119.17800903]
[146.38798523 125.84602356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 60]
[21 59]
[23 58]
[24 57]
[25 56]
[26 55]
[30 52]
[31 51]
[32 50]
[33 49]
[36 48]
[37 47]
[38 46]
[39 45]
[65 122]
[66 121]
[67 120]
[68 119]
[69 118]
[75 117]
[76 116]
[77 115]
[78 114]
[80 113]
[81 112]
[82 111]
[83 109]
[84 108]
[85 107]
[88 104]
[89 103]
[90 102]
[91 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
