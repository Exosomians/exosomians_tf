%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAGGAGUUCCUCGAAGUCAGAUCAUCCCCUACUCUGUAUGAUCUGACACUCGAGGAGCUCCCGUCCUUUUCACAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[211.97105408 324.76345825]
[204.88446045 311.54302979]
[197.79786682 298.32257080]
[190.71127319 285.10211182]
[177.87904358 277.54019165]
[178.17866516 261.72183228]
[171.09207153 248.50137329]
[164.00547791 235.28092957]
[156.91888428 222.06048584]
[149.83229065 208.84002686]
[142.74569702 195.61958313]
[135.65910339 182.39913940]
[128.57250977 169.17869568]
[121.48591614 155.95825195]
[114.39932251 142.73780823]
[107.31272888 129.51736450]
[100.22613525 116.29691315]
[85.78340912 107.97051239]
[86.21452332 91.30511475]
[78.63272095 78.36230469]
[71.05091858 65.41949463]
[63.46912384 52.47668839]
[55.88732529 39.53387833]
[48.30552292 26.59106827]
[40.72372437 13.64825916]
[33.14192581 0.70544934]
[25.56012726 -12.23736000]
[17.97832870 -25.18017006]
[4.32682610 -33.17686081]
[4.56994534 -48.06948090]
[-10.88470078 -49.46000290]
[-22.54826546 -59.69430161]
[-25.93587303 -74.83708191]
[-19.74491692 -89.06562805]
[-6.35594654 -96.90879059]
[9.08270550 -95.35069275]
[20.63456154 -84.99047089]
[23.85770035 -69.81183624]
[17.51275444 -55.65127945]
[30.62195587 -48.58034515]
[30.92113876 -32.76197052]
[38.50293732 -19.81915855]
[46.08473587 -6.87634945]
[53.66653442 6.06646013]
[61.24833298 19.00926971]
[68.83013153 31.95207977]
[76.41193390 44.89488983]
[83.99372864 57.83769989]
[91.57553101 70.78050995]
[99.15732574 83.72332001]
[110.36579895 87.42261505]
[116.13794708 97.71809387]
[113.44657898 109.21031952]
[120.53317261 122.43076324]
[127.61976624 135.65121460]
[134.70635986 148.87165833]
[141.79295349 162.09210205]
[148.87954712 175.31254578]
[155.96614075 188.53298950]
[163.05273438 201.75343323]
[170.13932800 214.97389221]
[177.22592163 228.19433594]
[184.31251526 241.41477966]
[191.39910889 254.63522339]
[204.73822021 263.14279175]
[203.93171692 278.01553345]
[211.01831055 291.23599243]
[218.10490417 304.45642090]
[225.19149780 317.67687988]
[240.31396484 316.13421631]
[254.87420654 320.50088501]
[266.65188599 330.11099243]
[273.85104370 343.49908447]
[275.37380981 358.62353516]
[270.98797607 373.17803955]
[261.36239624 384.94308472]
[247.96484375 392.12460327]
[232.83839417 393.62747192]
[218.28968811 389.22250366]
[206.53730774 379.58145142]
[199.37341309 366.17446899]
[197.89044189 351.04605103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
