%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCCGGGACUUUUCCCGGUAACCUUCUUUUGACUGCUUUUCUAAUUGGCGGCUUCGGCAUGUCUCACGCAGGAACUGCGAACUCGCGCAUUUGGUGUAGGUACCGUCACUGUCAGAACGCGAACCGCACG\
) } def
/len { sequence length } bind def

/coor [
[82.19273376 179.00944519]
[84.00044250 164.11814880]
[85.98967743 149.25064087]
[87.97891235 134.38311768]
[80.54117584 133.41870117]
[71.66759491 145.51248169]
[62.79401016 157.60626221]
[53.92042542 169.70004272]
[45.04684448 181.79382324]
[36.17325974 193.88760376]
[27.29967690 205.98138428]
[26.04787064 222.33268738]
[11.14633083 229.17930603]
[-2.07551527 219.47802734]
[-0.01616547 203.20869446]
[15.20589733 197.10780334]
[24.07948112 185.01402283]
[32.95306396 172.92024231]
[41.82664871 160.82646179]
[50.70022964 148.73268127]
[59.57381439 136.63890076]
[68.44739532 124.54512024]
[64.06032562 113.88409424]
[63.02636719 102.82225037]
[65.19614410 92.35272980]
[70.14278412 83.34771729]
[77.21878815 76.48576355]
[85.63032532 72.20154572]
[94.52102661 70.66146088]
[103.05680847 71.76632690]
[108.55250549 57.80934906]
[114.04821014 43.85237122]
[119.54390717 29.89539146]
[125.03961182 15.93841267]
[130.53530884 1.98143303]
[136.03100586 -11.97554684]
[140.19561768 -26.38582420]
[142.99250793 -41.12276077]
[145.78941345 -55.85969925]
[148.58631897 -70.59664154]
[151.38320923 -85.33358002]
[141.27832031 -99.55835724]
[144.47848511 -116.36852264]
[158.53915405 -125.51818085]
[160.98982239 -140.31663513]
[163.44047546 -155.11509705]
[165.89114380 -169.91354370]
[160.51243591 -184.79240417]
[170.22512817 -196.08456421]
[172.67578125 -210.88301086]
[174.95280457 -225.70918274]
[177.05587769 -240.56101990]
[179.15895081 -255.41285706]
[181.26202393 -270.26467896]
[175.53601074 -285.01336670]
[184.98130798 -296.53012085]
[187.08438110 -311.38195801]
[189.18745422 -326.23379517]
[191.29052734 -341.08563232]
[189.38504028 -350.11703491]
[193.62092590 -356.25936890]
[196.07159424 -371.05783081]
[187.14231873 -383.82128906]
[189.83845520 -398.79412842]
[202.06147766 -407.22814941]
[204.51214600 -422.02661133]
[206.96279907 -436.82507324]
[197.56079102 -449.52853394]
[199.97785950 -465.14688110]
[212.78001404 -474.41406250]
[228.37194824 -471.83200073]
[237.50325012 -458.93258667]
[234.75648499 -443.36883545]
[221.76126099 -434.37442017]
[219.31059265 -419.57595825]
[216.85993958 -404.77749634]
[225.71162415 -392.85342407]
[223.43711853 -377.81079102]
[210.87004089 -368.60717773]
[208.41938782 -353.80871582]
[206.14236450 -338.98254395]
[204.03929138 -324.13070679]
[201.93621826 -309.27886963]
[199.83314514 -294.42703247]
[205.70959473 -280.74066162]
[196.11386108 -268.16162109]
[194.01078796 -253.30978394]
[191.90771484 -238.45794678]
[189.80464172 -223.60610962]
[192.00209045 -216.47572327]
[187.47424316 -208.43235779]
[185.02357483 -193.63389587]
[190.57757568 -179.81353760]
[180.68959045 -167.46289062]
[178.23893738 -152.66442871]
[175.78826904 -137.86598206]
[173.33761597 -123.06752777]
[182.25802612 -113.69444275]
[184.15051270 -100.69691467]
[178.09617615 -88.82143402]
[166.12014771 -82.53667450]
[163.32325745 -67.79973602]
[160.52635193 -53.06280136]
[157.72944641 -38.32586288]
[154.93255615 -23.58892250]
[167.20170593 -32.21839523]
[182.20162964 -32.16886139]
[194.41352844 -23.45854950]
[199.34439087 -9.29216099]
[195.18005371 5.11819458]
[183.45266724 14.47064781]
[168.47697449 15.32423782]
[155.76284790 7.36491156]
[149.98799133 -6.47984600]
[144.49229431 7.47713375]
[138.99658203 21.43411255]
[133.50088501 35.39109421]
[128.00518799 49.34807205]
[122.50949097 63.30504990]
[117.01378632 77.26203156]
[134.18664551 99.83940887]
[124.24909210 131.78067017]
[129.74479675 145.73765564]
[135.24049377 159.69462585]
[146.66954041 172.21713257]
[137.80030823 186.66610718]
[121.46074677 182.14335632]
[121.28351593 165.19033813]
[115.78781891 151.23335266]
[110.29211426 137.27636719]
[102.85437775 136.31195068]
[100.98597717 151.19514465]
[99.11757660 166.07832336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[36 114]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[44 97]
[45 96]
[46 95]
[47 94]
[49 92]
[50 91]
[51 89]
[52 88]
[53 87]
[54 86]
[56 84]
[57 83]
[58 82]
[59 81]
[61 80]
[62 79]
[65 76]
[66 75]
[67 74]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
