%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACACCGGAAACGUCGACUACUAUGUCGAAGAAAGGGGUAGUCUAGCUGGGACAACUAGAGAUGUGAUAACCGGUCAAAACAGACUACGUAACC\
) } def
/len { sequence length } bind def

/coor [
[102.69430542 169.19900513]
[89.87045288 161.41769409]
[81.53633881 148.94602966]
[79.25347137 134.12075806]
[83.44958496 119.71962738]
[93.33708191 108.44190979]
[78.46540833 110.39980316]
[75.14626312 124.35314178]
[67.25315857 136.29258728]
[55.76363373 144.77688599]
[42.08784103 148.79037476]
[27.89549255 147.86454773]
[14.91198730 142.13262939]
[4.70865726 132.31088257]
[-1.48739421 119.60917664]
[-16.41516495 121.07942963]
[-31.34293556 122.54969025]
[-46.27070618 124.01994324]
[-61.19847870 125.49020386]
[-71.02960968 137.86454773]
[-86.74053955 139.57983398]
[-99.01025391 129.61842346]
[-100.55934143 113.89024353]
[-90.46876526 101.72653198]
[-74.72508240 100.34381866]
[-62.66873550 110.56243134]
[-47.74096298 109.09217072]
[-32.81319427 107.62191772]
[-17.88542175 106.15165710]
[-2.95765138 104.68140411]
[1.36263776 89.52833557]
[11.15981197 77.13869476]
[24.97543335 69.40390778]
[40.73483658 67.51895142]
[56.05865479 71.79782104]
[68.62207794 81.62166595]
[76.50751495 95.52812958]
[91.37918854 93.57023621]
[105.58313751 88.74864197]
[118.57351685 81.24864197]
[131.56390381 73.74864197]
[144.55427551 66.24864197]
[157.54466248 58.74864197]
[170.53504944 51.24864197]
[183.52542114 43.74864197]
[192.82087708 22.56675148]
[215.23754883 21.94065857]
[226.83271790 12.42475891]
[238.42787170 2.90885997]
[250.02302551 -6.60703945]
[261.61819458 -16.12293816]
[258.74230957 -32.31111526]
[264.33685303 -47.67250824]
[276.80657959 -58.10023117]
[292.73184204 -60.85637665]
[307.80587769 -55.29042435]
[319.08346558 -65.18061066]
[318.56146240 -80.80947876]
[328.24826050 -93.08546448]
[343.57006836 -96.21222687]
[357.29235840 -88.71339417]
[362.93591309 -74.12969208]
[357.83602905 -59.34710312]
[344.40066528 -51.34550858]
[328.97366333 -53.90301514]
[317.69604492 -44.01282883]
[321.24591064 -30.71788216]
[318.66769409 -17.13311386]
[310.41467285 -5.95610809]
[298.07269287 0.56824774]
[284.05578613 1.09853935]
[271.13409424 -4.52778196]
[259.53890991 4.98811769]
[247.94377136 14.50401688]
[236.34861755 24.01991653]
[224.75344849 33.53581619]
[225.92756653 41.05458832]
[224.29289246 48.55773926]
[220.02111816 55.02225876]
[213.64692688 59.54838181]
[206.00135803 61.48467636]
[198.10366821 60.52144623]
[191.02542114 56.73902512]
[178.03504944 64.23902130]
[165.04466248 71.73902130]
[152.05427551 79.23902130]
[139.06390381 86.73902130]
[126.07351685 94.23902130]
[113.08313751 101.73902130]
[127.79443359 104.66780853]
[139.88984680 113.53916168]
[147.10311890 126.69091797]
[148.08274841 141.65888977]
[142.64517212 155.63862610]
[131.80921936 166.01080322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 38]
[7 37]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
