%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCAACCAGGGUACCACAUUACCAAUCGUGAGACCUGAAACUUAGGUCGUUAGGCUCAAGCUUAGAGCCACCCUGGAAAGUUUCCACUUGCAAAAUGUCAAGGACCGAACCGGAGACUUAC\
) } def
/len { sequence length } bind def

/coor [
[201.94160461 189.23294067]
[186.94206238 189.34927368]
[173.73583984 182.23619080]
[165.57934570 169.64764404]
[164.48377991 154.68769836]
[170.71931458 141.04519653]
[182.74836731 132.08406067]
[197.60363770 130.01382446]
[185.29217529 121.44480133]
[172.98072815 112.87577820]
[160.66928101 104.30675507]
[148.35781860 95.73773193]
[136.04637146 87.16870880]
[123.73491669 78.59968567]
[126.90373993 109.17530823]
[104.44993591 124.49151611]
[83.50112152 113.56552124]
[69.30738068 118.41709137]
[55.11363983 123.26866150]
[52.22784805 138.35400391]
[42.17386627 149.96490479]
[27.65616798 154.97808838]
[12.57993698 152.04502869]
[1.00060666 141.95469666]
[-3.96704268 127.42136383]
[-0.98673773 112.35440063]
[9.13983440 100.80675507]
[23.68867683 95.88468170]
[38.74622345 98.91220093]
[50.26206970 109.07492065]
[64.45581055 104.22335052]
[78.64955139 99.37178040]
[75.24141693 90.11520386]
[76.19202423 78.68099213]
[63.46236038 70.74653625]
[50.73269653 62.81207275]
[38.00303268 54.87761307]
[25.27336693 46.94315338]
[12.54370308 39.00869370]
[-0.18596050 31.07423401]
[-16.82604599 27.82709312]
[-18.31223869 10.93841171]
[-2.49499297 4.83504725]
[7.74849987 18.34457016]
[20.47816277 26.27902985]
[33.20782852 34.21348953]
[45.93749237 42.14794922]
[58.66715622 50.08240891]
[71.39682007 58.01686859]
[84.12648010 65.95133209]
[90.77418518 62.47885513]
[83.82945251 49.18333817]
[97.12508392 42.23883057]
[104.06958008 55.53390503]
[110.71728516 52.06143188]
[111.47702026 37.08068466]
[112.23675537 22.09993553]
[112.99649811 7.11918831]
[113.75623322 -7.86155939]
[102.17922974 -18.37378883]
[100.11909485 -33.87507248]
[108.54856110 -47.04618454]
[123.48748779 -51.66812134]
[137.88218689 -45.55854797]
[144.93589783 -31.60222244]
[141.31809998 -16.38888931]
[128.73698425 -7.10182190]
[127.97724152 7.87892580]
[127.21750641 22.85967255]
[126.45777130 37.84041977]
[125.69802856 52.82116699]
[132.30393982 66.28823853]
[144.61540222 74.85726166]
[156.92684937 83.42628479]
[169.23829651 91.99530792]
[181.54974365 100.56433105]
[193.86120605 109.13335419]
[206.17265320 117.70237732]
[217.13951111 118.89517975]
[222.97741699 126.75325012]
[236.90721130 132.31748962]
[250.83700562 137.88172913]
[264.76678467 143.44598389]
[278.69659424 149.01022339]
[292.62637329 154.57446289]
[306.55618286 160.13871765]
[320.48599243 165.70295715]
[331.70361328 164.40168762]
[339.19992065 171.05769348]
[353.96463013 173.70397949]
[368.72937012 176.35028076]
[383.49407959 178.99658203]
[398.29113770 181.45562744]
[413.11816406 183.72705078]
[429.69024658 180.14891052]
[437.71612549 195.08280945]
[425.58764648 206.92916870]
[410.84674072 198.55407715]
[396.01971436 196.28265381]
[388.84997559 198.40396118]
[380.84777832 193.76130676]
[366.08306885 191.11500549]
[351.31832886 188.46870422]
[336.55361938 185.82241821]
[345.07022095 198.17016602]
[345.94897461 213.14440918]
[338.93502808 226.40354919]
[326.06204224 234.10327148]
[311.06231689 234.01115417]
[298.28485107 226.15390015]
[291.43429565 212.80961609]
[292.49688721 197.84729004]
[301.16452026 185.60507202]
[314.92172241 179.63275146]
[300.99194336 174.06851196]
[287.06213379 168.50425720]
[273.13235474 162.94001770]
[259.20254517 157.37577820]
[245.27276611 151.81152344]
[231.34297180 146.24728394]
[217.41316223 140.68304443]
[223.85955811 154.22720337]
[222.99617004 169.20233154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[17 32]
[18 31]
[19 30]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[80 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[89 104]
[90 103]
[91 102]
[92 101]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
