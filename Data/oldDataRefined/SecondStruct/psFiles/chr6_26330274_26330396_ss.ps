%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUUGUUUAGGUGUUUUGCGAGGGAUCGUCUCCUACCAAAGCUAGGUAGCUGGAGACCCAAUACCCGGGUCGUGCGAAGGCGACGCGGUGAGACGAUGCGCUCAGUGUCCAGGGUCUCAA\
) } def
/len { sequence length } bind def

/coor [
[98.69567108 123.48369598]
[93.13143158 137.41349792]
[87.56718445 151.34329224]
[95.95539093 164.39770508]
[95.03479004 179.88743591]
[85.15937042 191.85638428]
[70.12644196 195.70223999]
[55.71646118 189.94619751]
[47.47036743 176.80155945]
[48.55894852 161.32270813]
[58.56362152 149.46159363]
[73.63739014 145.77903748]
[79.20162964 131.84924316]
[84.76587677 117.91944885]
[73.41793060 105.68844604]
[72.15085602 86.73278046]
[57.15566635 87.11277008]
[42.16048050 87.49275970]
[27.16529465 87.87274933]
[12.17010784 88.25273895]
[-2.82507825 88.63272858]
[-13.67864132 99.80582428]
[-28.89130592 99.97757721]
[-39.47625351 89.56150055]
[-54.47143936 89.94149780]
[-69.46662140 90.32148743]
[-84.46180725 90.70147705]
[-95.16741943 102.32754517]
[-110.96151733 102.89492798]
[-122.47375488 92.06700134]
[-122.87411499 76.26778412]
[-111.92508698 64.87067413]
[-96.12252045 64.63736725]
[-84.84180450 75.70629120]
[-69.84661102 75.32630157]
[-54.85142899 74.94631195]
[-39.85624313 74.56631470]
[-29.81244659 63.62749863]
[-14.61060905 63.02852249]
[-3.20506907 73.63754272]
[11.79011726 73.25755310]
[26.78530312 72.87756348]
[41.78049088 72.49757385]
[56.77567673 72.11758423]
[71.77085876 71.73759460]
[78.71581268 58.44219208]
[70.46141815 45.91761398]
[62.20703125 33.39303589]
[47.31091309 26.53462601]
[46.07205200 10.18234062]
[59.76487732 1.15800929]
[74.30339050 8.74509144]
[74.73160553 25.13864708]
[82.98600006 37.66322327]
[91.24038696 50.18780136]
[105.17018127 55.75204468]
[119.78192902 52.36132431]
[134.39366150 48.97060394]
[149.00541687 45.57988358]
[163.61715698 42.18915939]
[178.22889709 38.79843903]
[192.84063721 35.40771866]
[206.79699707 20.96704674]
[225.06080627 27.10906410]
[239.48205566 22.98262215]
[253.90330505 18.85618019]
[268.32455444 14.72973919]
[280.17233276 -11.05272007]
[291.79757690 -20.53185081]
[303.42279053 -30.01098061]
[309.22863770 -44.72842026]
[323.98199463 -46.77478790]
[335.60720825 -56.25391769]
[347.23245239 -65.73304749]
[358.85769653 -75.21218109]
[370.48294067 -84.69130707]
[371.83227539 -100.43788910]
[383.97457886 -110.55422974]
[399.70599365 -109.03847504]
[409.69338989 -96.78990173]
[408.01141357 -81.07537079]
[395.65792847 -71.21803284]
[379.96206665 -73.06607819]
[368.33682251 -63.58694458]
[356.71157837 -54.10781479]
[345.08636475 -44.62868500]
[333.46112061 -35.14955139]
[328.48681641 -21.11012650]
[312.90194702 -18.38574600]
[301.27670288 -8.90661526]
[289.65145874 0.57251519]
[292.29776001 15.33724022]
[306.49151611 20.18881035]
[320.68524170 25.04038048]
[334.87899780 29.89195061]
[344.12875366 29.71612549]
[349.36813354 35.05038834]
[363.43441772 40.25996399]
[380.38751221 40.09101105]
[385.24295044 56.33481216]
[370.97808838 65.49723053]
[358.22485352 54.32624817]
[344.15856934 49.11666870]
[330.02740479 44.08568954]
[315.83367920 39.23411942]
[301.63992310 34.38254929]
[287.44619751 29.53098106]
[272.45101929 29.15098953]
[258.02975464 33.27743149]
[243.60850525 37.40387344]
[229.18725586 41.53031540]
[224.97773743 50.99386978]
[216.03436279 56.64383698]
[205.23825073 56.37001419]
[196.23135376 50.01946259]
[181.61961365 53.41018295]
[167.00787354 56.80090332]
[152.39613342 60.19162369]
[137.78439331 63.58234406]
[123.17264557 66.97306824]
[108.56090546 70.36378479]
[124.57434082 84.57194519]
[126.79960632 104.55477142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[24 37]
[25 36]
[26 35]
[27 34]
[46 55]
[47 54]
[48 53]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[64 111]
[65 110]
[66 109]
[67 108]
[68 91]
[69 90]
[70 89]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[92 107]
[93 106]
[94 105]
[95 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
