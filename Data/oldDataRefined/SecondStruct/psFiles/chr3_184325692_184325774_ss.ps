%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAGGAGACUACUGAAGGACAAUCACGGUGCACAGACCCGGUGACUCUGUGGUACUACCUUGACUCCUAGACUCCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[87.22234344 327.12380981]
[75.03939819 317.51361084]
[70.86432648 302.56878662]
[76.30252838 288.03585815]
[89.26290131 279.50308228]
[89.82376862 264.51358032]
[90.38463593 249.52406311]
[90.94550323 234.53454590]
[91.50637054 219.54504395]
[92.06723785 204.55552673]
[84.81124115 191.54785156]
[93.05913544 178.04663086]
[93.62000275 163.05712891]
[94.18087006 148.06761169]
[82.70957184 131.08398438]
[93.43293762 112.72985077]
[85.71611023 101.07042694]
[91.60900116 88.39109802]
[90.48805237 73.43304443]
[89.36710358 58.47498703]
[88.24614716 43.51692963]
[73.81374359 34.92565155]
[67.32601166 19.61189842]
[71.11853790 3.58786511]
[83.53163147 -6.97970295]
[81.85216522 -21.88538551]
[80.17269897 -36.79106903]
[78.49322510 -51.69675446]
[76.81375885 -66.60243225]
[75.13429260 -81.50811768]
[73.45482635 -96.41380310]
[64.22104645 -109.26090240]
[70.48469543 -122.77444458]
[68.52680206 -137.64611816]
[66.29116821 -152.47857666]
[64.05553436 -167.31105042]
[50.61867523 -175.31010437]
[45.51597595 -190.09172058]
[51.15677261 -204.67649841]
[64.87765503 -212.17791748]
[80.20004272 -209.05406189]
[89.88916779 -196.77990723]
[89.37013245 -181.15093994]
[78.88800049 -169.54667664]
[81.12363434 -154.71421814]
[83.35926819 -139.88175964]
[87.57300568 -133.58377075]
[85.39038086 -124.45391083]
[94.50402832 -112.67297363]
[88.36051178 -98.09326935]
[90.03997803 -83.18758392]
[91.71944427 -68.28190613]
[93.39891052 -53.37622070]
[95.07837677 -38.47053528]
[96.75784302 -23.56485367]
[98.43730927 -8.65917015]
[110.72187042 -3.09489107]
[118.66555786 7.93790817]
[120.06864929 21.56998253]
[114.45011902 34.18882370]
[103.20420837 42.39597702]
[104.32515717 57.35403442]
[105.44610596 72.31208801]
[106.56706238 87.27014923]
[114.28388977 98.92957306]
[108.39099884 111.60890198]
[116.65573883 116.99987030]
[121.30938721 125.54196930]
[121.35579681 135.12928772]
[116.91656494 143.46873474]
[109.17037964 148.62847900]
[108.60951233 163.61799622]
[108.04864502 178.60749817]
[115.26452637 192.68733215]
[107.05674744 205.11639404]
[106.49588013 220.10591125]
[105.93501282 235.09541321]
[105.37414551 250.08493042]
[104.81327820 265.07443237]
[104.25241089 280.06393433]
[116.53888702 289.54141235]
[120.87583923 304.44006348]
[115.59561157 319.03112793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[12 73]
[13 72]
[14 71]
[16 66]
[18 64]
[19 63]
[20 62]
[21 61]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[33 48]
[34 46]
[35 45]
[36 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
