%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACGUCGGUACAGACGUUAUCGUGAAGUUAAAAUGAAAAAAAAGGGGAUCGUACAGGAAUUCGUAAAAGAGGGGUCGAAAAGUGUUAGAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[64.53705597 130.75387573]
[55.02115250 142.34902954]
[45.50525284 153.94418335]
[35.98935318 165.53933716]
[26.47345543 177.13449097]
[16.95755577 188.72966003]
[7.44165707 200.32481384]
[9.23997974 216.02645874]
[-0.65643078 228.34864807]
[-16.37620926 229.98086548]
[-28.59309006 219.95472717]
[-30.05901337 204.21858215]
[-19.90427589 192.10838318]
[-4.15350008 190.80891418]
[5.36239958 179.21376038]
[14.87829876 167.61859131]
[24.39419746 156.02343750]
[33.91009903 144.42828369]
[43.42599487 132.83312988]
[52.94189453 121.23796844]
[48.82306671 106.81454468]
[34.61911392 101.99295044]
[20.41516304 97.17135620]
[6.21121073 92.34976959]
[-5.79424763 102.03855133]
[-21.13447571 103.67591095]
[-34.91446304 96.73937988]
[-42.73706436 83.44236755]
[-42.10611725 68.02791595]
[-33.22295380 55.41470718]
[-18.92216110 49.62757874]
[-3.76706791 52.51317978]
[7.40638971 63.15072632]
[11.03280258 78.14581299]
[25.23675537 82.96740723]
[39.44070816 87.78900146]
[53.64465714 92.61058807]
[56.44891357 83.41413879]
[61.04202652 75.04683685]
[67.20479584 67.84906006]
[74.65491486 62.10688019]
[83.05983734 58.04080200]
[92.05154419 55.79732895]
[101.24268341 55.44386292]
[110.24323273 56.96701431]
[118.67700958 60.27434540]
[126.19746399 65.19947052]
[132.50184631 71.51021576]
[137.34341431 78.91941833]
[140.54096985 87.09796143]
[155.41264343 85.14006805]
[165.02848816 72.88555908]
[180.13838196 71.11183167]
[191.76191711 80.35459900]
[206.63359070 78.39670563]
[221.50526428 76.43881226]
[227.22584534 63.77761078]
[238.39714050 55.70177078]
[251.99696350 54.26246262]
[264.41192627 59.73321152]
[272.39752197 70.56596375]
[287.32528687 69.09570312]
[302.25305176 67.62545013]
[317.18081665 66.15518951]
[322.37503052 51.80308914]
[333.28802490 41.13212204]
[347.75299072 36.26100922]
[362.89788818 38.15692520]
[375.71572876 46.44342422]
[383.66146851 59.47522354]
[385.15753174 74.66484070]
[379.90682983 88.99637604]
[368.95190430 99.62429047]
[354.46786499 104.43840027]
[339.33053589 102.48286438]
[326.54544067 94.14595032]
[318.65106201 81.08296204]
[303.72329712 82.55321503]
[288.79553223 84.02347565]
[273.86776733 85.49373627]
[266.10446167 99.85571289]
[251.19120789 106.89439392]
[234.84556580 103.69509888]
[223.46316528 91.31048584]
[208.59149170 93.26837921]
[193.71981812 95.22627258]
[184.88453674 107.16249084]
[169.83044434 109.35992432]
[157.37052917 100.01174164]
[142.49885559 101.96963501]
[139.98884583 116.27134705]
[132.73921204 129.09689331]
[121.46013641 138.90188599]
[107.35538483 144.45211792]
[91.99449921 144.97769165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[21 37]
[22 36]
[23 35]
[24 34]
[50 90]
[51 89]
[54 86]
[55 85]
[56 84]
[61 80]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
