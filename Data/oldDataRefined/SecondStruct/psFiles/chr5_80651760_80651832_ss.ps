%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUAGAUUUUGUGAGAAAUGCGGCCAAAGAUAACUGAACCCAAUUAGCACACUGGCGCCACCGACCGUGCU\
) } def
/len { sequence length } bind def

/coor [
[155.86499023 263.75299072]
[148.06459045 263.63555908]
[140.49864197 261.67071533]
[133.59922791 257.96298218]
[127.76219177 252.71672058]
[123.32440186 246.22470093]
[120.54433441 238.85194397]
[119.58699799 231.01506042]
[120.51419067 223.15879822]
[123.28053284 215.73078918]
[127.73567200 209.15597534]
[133.63238525 203.81239319]
[128.03953552 189.89405823]
[122.44669342 175.97572327]
[116.85385132 162.05738831]
[103.09616852 156.46615601]
[97.22595215 142.43066406]
[103.18383026 128.03825378]
[97.59098816 114.11991882]
[86.70896912 105.34077454]
[88.49067688 91.47293091]
[82.89783478 77.55459595]
[76.61167145 70.50648499]
[77.37683868 62.92493439]
[72.37974548 48.78177261]
[58.75210953 45.78560638]
[48.51875305 36.46191025]
[44.33707047 23.37934303]
[47.21913528 10.06225014]
[56.28929520 0.04135124]
[51.89695358 -14.30114937]
[39.53580475 -25.07769775]
[42.95309830 -41.11684036]
[58.63341522 -45.91888428]
[70.44618988 -34.54389954]
[66.23945618 -18.69349098]
[70.63179779 -4.35099030]
[86.20416260 0.38372290]
[96.07136536 13.53395748]
[96.26753998 30.13758087]
[86.52290344 43.78467560]
[91.52000427 57.92783737]
[96.81616974 71.96174622]
[102.40901184 85.88008118]
[113.29103088 94.65922546]
[111.50932312 108.52706909]
[117.10216522 122.44540405]
[131.36216736 128.71360779]
[136.83583069 142.90844727]
[130.77218628 156.46453857]
[136.36503601 170.38287354]
[141.95787048 184.30120850]
[147.55072021 198.21954346]
[171.34982300 203.83033752]
[184.76626587 224.02198792]
[180.78715515 247.72393799]
[191.61650085 258.10302734]
[202.44583130 268.48211670]
[213.27517700 278.86120605]
[224.10452271 289.24026489]
[239.35112000 286.35568237]
[253.36697388 293.01416016]
[260.76272583 306.65536499]
[258.69451904 322.03399658]
[247.95765686 333.23663330]
[232.68066406 335.95565796]
[218.73785400 329.14553833]
[211.49053955 315.42489624]
[213.72543335 300.06961060]
[202.89608765 289.69052124]
[192.06675720 279.31146240]
[181.23741150 268.93237305]
[170.40806580 258.55328369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 53]
[13 52]
[14 51]
[15 50]
[18 47]
[19 46]
[21 44]
[22 43]
[24 42]
[25 41]
[30 37]
[31 36]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
