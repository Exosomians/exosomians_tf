%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGACAGUCGUCAAACUCACAGUCGUAACACUGUUCUGUGAAUCGGCUACCUAGUGAGGCAUGAAAGUAGGAGGUUGUGUGU\
) } def
/len { sequence length } bind def

/coor [
[129.12399292 303.99307251]
[127.44451904 289.08737183]
[125.76505280 274.18170166]
[124.08558655 259.27600098]
[122.40612030 244.37033081]
[120.72665405 229.46464539]
[103.40367889 224.42636108]
[89.82191467 212.47775269]
[82.57846069 195.84841919]
[83.08183289 177.66812134]
[91.27822113 161.37782288]
[105.65387726 150.07833862]
[101.77159882 135.58946228]
[97.88931274 121.10057068]
[83.47582245 113.29061890]
[78.93753815 97.53790283]
[86.98664856 83.25659180]
[82.56532288 68.92299652]
[78.14398956 54.58940506]
[73.72266388 40.25581360]
[69.30133820 25.92222214]
[63.56108475 12.06402969]
[56.55205536 -1.19770122]
[49.54302597 -14.45943165]
[42.53399658 -27.72116280]
[35.52496719 -40.98289490]
[20.29470825 -43.29490280]
[9.47268295 -54.00644684]
[7.06163168 -68.86076355]
[13.77931881 -82.12767029]
[6.77028942 -95.38939667]
[-0.23873994 -108.65113068]
[-15.41286469 -113.06944275]
[-22.94503021 -126.96340179]
[-18.36653519 -142.08996582]
[-4.39371920 -149.47480774]
[10.68359280 -144.73664856]
[17.92029953 -130.68653870]
[13.02299118 -115.66015625]
[20.03202057 -102.39842987]
[27.04104996 -89.13669586]
[41.78688812 -87.21360016]
[52.70190811 -76.85375977]
[55.45593643 -61.87815475]
[48.78669739 -47.99192429]
[55.79572678 -34.73019409]
[62.80475616 -21.46846199]
[69.81378937 -8.20673084]
[76.82281494 5.05500031]
[79.32937622 5.63862038]
[81.76330566 7.24413538]
[83.74354553 9.84883595]
[84.90390015 13.29694557]
[84.93714905 17.30827713]
[83.63492584 21.50089455]
[88.05625916 35.83448792]
[92.47758484 50.16807938]
[96.89891052 64.50167084]
[101.32023621 78.83526611]
[113.27296448 83.46163940]
[120.37709045 94.12946320]
[120.03748322 106.94178772]
[112.37819672 117.21828461]
[116.26048279 131.70716858]
[120.14276886 146.19606018]
[132.39292908 147.04583740]
[143.85716248 151.39067078]
[153.56225586 158.84957886]
[160.68788147 168.77777100]
[164.63586426 180.32232666]
[165.08041382 192.49548340]
[161.99499512 204.25921631]
[155.65361023 214.61363220]
[146.60647583 222.68203735]
[135.63233948 227.78517151]
[137.31179810 242.69085693]
[138.99127197 257.59652710]
[140.67073059 272.50222778]
[142.35020447 287.40789795]
[144.02967834 302.31359863]
[154.19787598 315.17980957]
[147.88887024 330.31680298]
[131.59284973 332.15292358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[12 65]
[13 64]
[14 63]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
