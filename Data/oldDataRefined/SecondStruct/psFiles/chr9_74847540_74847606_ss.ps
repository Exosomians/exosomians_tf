%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGUAAUCACAGUGAUUUCAACCAUAUGUUGGGGGGUGACGAUUUAAACUGACCGAAAUUAUAUA\
) } def
/len { sequence length } bind def

/coor [
[93.71886444 110.47645569]
[83.64562225 122.67647552]
[68.98276520 120.05928040]
[54.99567795 125.47790527]
[41.00859451 130.89653015]
[30.93535233 143.09654236]
[16.27248955 140.47933960]
[2.28540635 145.89796448]
[-11.70167732 151.31658936]
[-25.68876076 156.73521423]
[-39.67584229 162.15383911]
[-52.26120377 173.51364136]
[-66.66103363 164.56483459]
[-62.04821014 148.25047302]
[-45.09446716 148.16676331]
[-31.10738564 142.74813843]
[-17.12030220 137.32951355]
[-3.13321877 131.91088867]
[10.85386467 126.49226379]
[19.92665672 114.67982483]
[35.58996964 116.90944672]
[49.57705307 111.49082184]
[63.56413651 106.07219696]
[72.63693237 94.25975800]
[88.30023956 96.48937225]
[102.02214813 90.43055725]
[115.44960022 83.74448395]
[128.87704468 77.05841064]
[142.30450439 70.37233734]
[155.73194885 63.68626022]
[168.66419983 56.08645630]
[181.03915405 47.60940933]
[193.41412354 39.13236237]
[205.78907776 30.65531731]
[208.81697083 15.37560463]
[221.48770142 6.95496082]
[236.03591919 9.93575573]
[248.41087341 1.45870972]
[260.78582764 -7.01833677]
[259.52438354 -22.32533836]
[266.09994507 -36.20545197]
[278.74374390 -44.92499542]
[294.05459595 -46.13845825]
[307.91403198 -39.51942062]
[316.59390259 -26.84837341]
[317.75936890 -11.53376389]
[311.09692383 2.30485463]
[298.39874268 10.94496346]
[283.08053589 12.06241703]
[269.26287842 5.35662556]
[256.88790894 13.83367157]
[244.51295471 22.31071854]
[242.03704834 36.95330811]
[229.60783386 45.72652435]
[214.26612854 43.03028107]
[201.89115906 51.50732803]
[189.51620483 59.98437119]
[177.14123535 68.46141815]
[176.20448303 72.20419312]
[173.18835449 75.58604431]
[168.33576965 77.52351379]
[162.41802979 77.11370850]
[148.99057007 83.79978180]
[135.56312561 90.48586273]
[122.13567352 97.17193604]
[108.70822144 103.85800934]
[105.79061890 108.66455841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[3 23]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 58]
[32 57]
[33 56]
[34 55]
[37 52]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
