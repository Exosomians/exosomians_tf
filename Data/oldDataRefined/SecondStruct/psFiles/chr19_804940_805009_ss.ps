%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCACCCCGAGGGCCCUGCCGCGGGCGGGACCGGGACCGGGCCGCUGCAGAGUGCCAGGGAGAGGGGA\
) } def
/len { sequence length } bind def

/coor [
[91.43413544 267.27557373]
[92.90660858 251.70747375]
[104.07780457 240.76496887]
[102.75210571 225.82365417]
[101.42639923 210.88235474]
[92.59454346 198.88871765]
[99.08190155 184.45872498]
[97.75620270 169.51742554]
[96.43050385 154.57611084]
[87.59864044 142.58247375]
[94.08600616 128.15248108]
[90.23429871 121.56003571]
[93.04714203 112.52330780]
[85.69007874 100.63359833]
[91.96753693 88.14019775]
[91.30403900 73.15487671]
[82.96388245 59.71045685]
[90.13063812 46.65339661]
[89.46714020 31.66807938]
[88.80364227 16.68276024]
[88.14014435 1.69744170]
[79.79998779 -11.74697685]
[86.96674347 -24.80403900]
[86.30324554 -39.78935623]
[85.63973999 -54.77467346]
[84.97624207 -69.75999451]
[76.63608551 -83.20441437]
[83.80284119 -96.26147461]
[75.46269226 -109.70589447]
[82.62944794 -122.76295471]
[81.96595001 -137.74827576]
[69.44474792 -147.11595154]
[65.92472839 -162.35221863]
[73.06794739 -176.26293945]
[87.50157928 -182.27993774]
[102.41051483 -177.56213379]
[110.75521088 -164.33715820]
[108.59555054 -148.84942627]
[96.95126343 -138.41177368]
[97.61476898 -123.42645264]
[105.90746307 -111.05388641]
[98.78816223 -96.92497253]
[107.08086395 -84.55240631]
[99.96156311 -70.42349243]
[100.62506104 -55.43817520]
[101.28855896 -40.45285797]
[101.95206451 -25.46753883]
[110.24475861 -13.09497070]
[103.12545776 1.03394151]
[103.78895569 16.01926041]
[104.45246124 31.00457764]
[105.11595917 45.98989487]
[113.40865326 58.36246490]
[106.28936005 72.49137878]
[106.95285797 87.47669220]
[114.30992126 99.36640167]
[108.03246307 111.85980225]
[109.02730560 126.82677460]
[117.95398712 139.88912964]
[111.37180328 153.25041199]
[112.69750214 168.19171143]
[114.02320862 183.13302612]
[122.94989014 196.19537354]
[116.36770630 209.55665588]
[117.69340515 224.49795532]
[119.01911163 239.43927002]
[131.94241333 248.24392700]
[136.13293457 263.30957031]
[129.61203003 277.52264404]
[115.45867920 284.17221069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[7 62]
[8 61]
[9 60]
[11 58]
[13 57]
[15 55]
[16 54]
[18 52]
[19 51]
[20 50]
[21 49]
[23 47]
[24 46]
[25 45]
[26 44]
[28 42]
[30 40]
[31 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
