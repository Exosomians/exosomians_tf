%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCAGUCUUAAAGGUGUUUAUAGUACACAAAGUCUUUGUGCCUGGUUAAUUCACCUUAGAGUAGUAAAACUGUCAAUU\
) } def
/len { sequence length } bind def

/coor [
[99.10927582 252.19047546]
[92.61544037 238.33085632]
[93.31790924 223.04148865]
[101.05524445 209.83572388]
[114.04946899 201.74815369]
[112.88708496 186.79325867]
[111.72469330 171.83836365]
[110.56230927 156.88346863]
[107.38674927 142.22346497]
[102.25644684 128.12808228]
[97.12614441 114.03269196]
[86.53989410 104.89907837]
[88.77846527 91.09761047]
[83.64816284 77.00222015]
[78.51786041 62.90683365]
[73.38755798 48.81144333]
[68.25725555 34.71605682]
[63.12695312 20.62066650]
[45.13227463 18.23193550]
[30.75583839 7.28426266]
[23.73231888 -9.27581120]
[25.83528519 -27.05752754]
[36.43015289 -41.39001846]
[29.69816399 -54.79450607]
[22.96617699 -68.19899750]
[10.84605408 -73.08585358]
[5.57506847 -84.60063934]
[9.53656483 -96.20247650]
[3.32940388 -109.85792542]
[-2.87775707 -123.51336670]
[-9.08491802 -137.16880798]
[-15.29207897 -150.82424927]
[-21.49923897 -164.47970581]
[-33.55800629 -176.39701843]
[-25.44462013 -191.28356934]
[-8.89383507 -187.60826111]
[-7.84379530 -170.68685913]
[-1.63663471 -157.03141785]
[4.57052612 -143.37597656]
[10.77768707 -129.72053528]
[16.98484802 -116.06508636]
[23.19200897 -102.40963745]
[37.96823502 -93.15298462]
[36.37066650 -74.93098450]
[43.10265350 -61.52649307]
[49.83464050 -48.12200546]
[61.99857712 -49.08170319]
[73.77696991 -45.76311493]
[83.70771027 -38.55285263]
[90.54927826 -28.32217789]
[93.43595886 -16.32177925]
[91.98731995 -4.02888870]
[86.35815430 7.03456354]
[77.22234344 15.49036407]
[82.35264587 29.58575249]
[87.48294830 43.68114090]
[92.61325073 57.77653122]
[97.74355316 71.87191772]
[102.87385559 85.96730804]
[113.46010590 95.10092163]
[111.22153473 108.90238953]
[116.35183716 122.99777985]
[121.48213959 137.09317017]
[129.45349121 124.38657379]
[143.62484741 119.46997070]
[157.75299072 124.50936127]
[165.61378479 137.28465271]
[163.74414062 152.16767883]
[152.96774292 162.60171509]
[138.03213501 163.99006653]
[125.51720428 155.72108459]
[126.67958832 170.67597961]
[127.84197998 185.63087463]
[129.00436401 200.58576965]
[143.09220886 206.56834412]
[152.77716064 218.41995239]
[155.83367920 233.41716003]
[151.55940247 248.11372375]
[140.93653870 259.13250732]
[126.40613556 263.94143677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 74]
[6 73]
[7 72]
[8 71]
[9 63]
[10 62]
[11 61]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[23 46]
[24 45]
[25 44]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
