%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACACUCCAAGGUACCACAUUACCACUCGUGAAACCUGAGACUUAUGUCACUAGUCUCAAGUUCAGAGUGACCCUGGAAAGACAUAU\
) } def
/len { sequence length } bind def

/coor [
[64.32673645 366.54437256]
[53.32352448 356.14205933]
[46.29633713 342.72949219]
[44.00742340 327.76153564]
[46.70507050 312.86181641]
[54.09665680 299.64657593]
[65.38040161 289.54925537]
[79.33232117 283.66516113]
[78.28597260 268.70169067]
[77.23963165 253.73823547]
[76.19328308 238.77476501]
[67.58702087 226.61822510]
[74.34281921 212.31193542]
[73.29647064 197.34848022]
[72.25012970 182.38502502]
[62.53520203 193.81393433]
[48.48585129 199.06901550]
[33.65522766 196.82119751]
[21.79408073 187.63897705]
[15.90215397 173.84457397]
[17.46954536 158.92669678]
[26.09985542 146.65812683]
[39.61043167 140.14166260]
[54.58438110 141.02536011]
[67.23471069 149.08570862]
[74.36258698 162.28628540]
[78.49714661 147.86735535]
[82.63170624 133.44844055]
[86.76626587 119.02951050]
[90.90083313 104.61058044]
[89.91466522 96.41759491]
[95.43948364 89.76531982]
[100.07473755 75.49947357]
[104.70999146 61.23362350]
[109.34524536 46.96777344]
[109.03634644 37.61383820]
[114.39923096 32.28994751]
[111.84848022 16.67571640]
[123.47214508 7.36230516]
[128.60244751 -6.73308420]
[133.73275757 -20.82847404]
[138.86305237 -34.92386246]
[143.99336243 -49.01925278]
[149.12365723 -63.11464310]
[154.25396729 -77.21002960]
[144.82937622 -89.42398834]
[143.52705383 -104.79628754]
[150.76254272 -118.42167664]
[164.22703552 -125.95233917]
[179.62406921 -124.98528290]
[192.04048157 -115.82907867]
[197.51426697 -101.40544128]
[194.29873657 -86.31690216]
[183.41998291 -75.37815857]
[168.34934998 -72.07972717]
[163.21905518 -57.98434067]
[158.08874512 -43.88895035]
[152.95845032 -29.79356003]
[147.82814026 -15.69817162]
[142.69784546 -1.60278201]
[137.56753540 12.49260712]
[140.48524475 27.09864426]
[128.49461365 37.42024994]
[123.61109924 51.60303116]
[118.97583771 65.86887360]
[114.34058380 80.13472748]
[109.70532990 94.40057373]
[105.31975555 108.74514771]
[101.18519592 123.16407013]
[97.05063629 137.58299255]
[92.91607666 152.00192261]
[88.78151703 166.42085266]
[87.21358490 181.33866882]
[88.25993347 196.30213928]
[89.30628204 211.26559448]
[97.98738861 224.49243164]
[91.15674591 237.72842407]
[92.20308685 252.69187927]
[93.24943542 267.65533447]
[94.29578400 282.61880493]
[108.93083191 286.50390625]
[121.51004028 294.93255615]
[130.66889954 306.99050903]
[135.41394043 321.36978149]
[135.23043823 336.51062012]
[130.13830566 350.77066040]
[120.68989563 362.60308838]
[107.91011810 370.72439575]
[93.18520355 374.25369263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 80]
[9 79]
[10 78]
[11 77]
[13 75]
[14 74]
[15 73]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[32 67]
[33 66]
[34 65]
[35 64]
[37 63]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
