%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUACACUUCGUUUACUACUAUUUGACCUAGACUGACUGACACGACUCAGACAAGUUAGGUUGGGACUCGAA\
) } def
/len { sequence length } bind def

/coor [
[54.39313507 174.91908264]
[52.63122559 189.89102173]
[47.33683395 204.00601196]
[38.81777191 216.44342041]
[27.56932259 226.48014832]
[14.24545956 233.53266907]
[-0.37918660 237.19096375]
[-15.45435810 237.24235535]
[-30.10360336 233.68383789]
[-43.47523880 226.72230530]
[-54.79184723 216.76249695]
[-63.39550400 204.38346863]
[-68.78599548 190.30490112]
[-70.64993286 175.34532166]
[-68.87894440 160.37443542]
[-63.57600021 146.26266479]
[-55.04940033 133.83042908]
[-43.79486847 123.80052948]
[-30.46673203 116.75608063]
[-15.83986950 113.10665131]
[-0.76467001 113.06439972]
[13.88241577 116.63179779]
[27.24982643 123.60143280]
[38.56039429 133.56809998]
[50.87763214 125.00739288]
[63.19487381 116.44668579]
[75.51210785 107.88598633]
[87.82934570 99.32527924]
[99.77729797 90.25629425]
[111.33499908 80.69493866]
[122.89269257 71.13357544]
[134.45039368 61.57221603]
[136.08416748 46.08129883]
[147.94151306 36.54936218]
[162.69967651 38.20237732]
[174.25737000 28.64101982]
[185.81506348 19.07965851]
[197.37277222 9.51829910]
[208.93046570 -0.04306059]
[220.48815918 -9.60442066]
[215.66358948 -23.99496841]
[216.36717224 -39.15641403]
[222.50376892 -53.03829193]
[233.24343872 -63.76320267]
[247.13375854 -69.88068390]
[262.29617310 -70.56339264]
[276.68005371 -65.71900177]
[288.34014893 -56.00267792]
[295.69946289 -42.72846985]
[297.76278687 -27.69161034]
[294.25100708 -12.92570591]
[285.63909912 -0.42772663]
[273.09176636 8.11207962]
[258.30587769 11.53877354]
[243.28114319 9.38892365]
[230.04953003 1.95327818]
[218.49182129 11.51463795]
[206.93412781 21.07599831]
[195.37643433 30.63735771]
[183.81872559 40.19871902]
[172.26103210 49.76007843]
[171.11936951 64.56656647]
[159.53442383 74.42778778]
[144.01174927 73.12991333]
[132.45405579 82.69127655]
[120.89635468 92.25263214]
[109.33865356 101.81399536]
[107.60115814 107.10574341]
[102.89560699 110.91990662]
[96.39005280 111.64251709]
[84.07281494 120.20322418]
[71.75557709 128.76393127]
[59.43833923 137.32463074]
[47.12109756 145.88533020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 67]
[30 66]
[31 65]
[32 64]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
