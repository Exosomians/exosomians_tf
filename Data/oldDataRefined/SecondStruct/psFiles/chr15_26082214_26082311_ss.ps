%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUUCUUUCCAGGUCAGUAAGGGUGUGGCCCUCAGCUUGGGCCCGGCGGACCCACUUUUGGUCCUUAGGAUUGGCGAUCUGGUACACCCUCUACUG\
) } def
/len { sequence length } bind def

/coor [
[0.14124481 288.17364502]
[-5.87271309 301.91528320]
[2.08685374 315.23538208]
[0.66339517 330.68701172]
[-9.59573936 342.32873535]
[-24.74570465 345.68405151]
[-38.96102905 339.46279907]
[-46.77563095 326.05712891]
[-45.18463516 310.62185669]
[-34.79981232 299.09210205]
[-19.61433983 295.90130615]
[-13.60038185 282.15969849]
[-18.28322220 274.24151611]
[-18.69432640 264.91189575]
[-14.60592461 256.36090088]
[-6.86192131 250.65757751]
[2.79297042 249.24978638]
[10.08592129 236.14204407]
[17.37887192 223.03430176]
[24.67182350 209.92655945]
[31.96477509 196.81883240]
[39.04883957 183.59703064]
[45.92223740 170.26449585]
[52.79563522 156.93196106]
[59.66903305 143.59942627]
[66.54243469 130.26689148]
[73.41583252 116.93436432]
[80.28923035 103.60183716]
[77.91920471 88.79025269]
[67.22879791 78.26812744]
[56.53837967 67.74600220]
[45.84796906 57.22388077]
[35.15755463 46.70175934]
[19.60902214 48.36821747]
[6.65586472 39.60752487]
[2.41417003 24.55621147]
[8.88673592 10.32104778]
[23.01741409 3.62344170]
[38.13413239 7.62579918]
[47.09923553 20.43832970]
[45.67967987 36.01134491]
[56.37009048 46.53347015]
[67.06050110 57.05559158]
[77.75091553 67.57771301]
[88.44132996 78.09983826]
[95.88098907 77.15039825]
[93.98233795 62.27104568]
[108.86171722 60.37261581]
[110.76031494 75.25151062]
[118.19997406 74.30206299]
[125.90513611 61.43231583]
[133.61029053 48.56256485]
[141.31546021 35.69281387]
[149.02061462 22.82306099]
[143.73542786 8.10569763]
[149.19534302 -6.54774141]
[162.82237244 -14.21835136]
[178.18223572 -11.28430367]
[188.02247620 0.86903298]
[187.69683838 16.50322533]
[177.35908508 28.23628616]
[161.89036560 30.52822113]
[154.18521118 43.39797211]
[146.48004150 56.26772308]
[138.77488708 69.13747406]
[131.06973267 82.00722504]
[134.40022278 88.72718048]
[149.37002563 89.67850494]
[141.06121826 102.16708374]
[144.39172363 108.88703918]
[159.29930115 110.54961395]
[174.20687866 112.21218872]
[189.11445618 113.87475586]
[204.02203369 115.53733063]
[220.43373108 111.28382874]
[229.06422424 125.87667084]
[217.43083191 138.20957947]
[202.35945129 130.44491577]
[187.45188904 128.78233337]
[172.54431152 127.11976624]
[157.63673401 125.45719147]
[142.72915649 123.79461670]
[124.37850189 131.39268494]
[107.80044556 129.57458496]
[96.91433716 121.20176697]
[93.62175751 110.47523499]
[86.74835968 123.80776215]
[79.87496185 137.14028931]
[73.00156403 150.47282410]
[66.12816620 163.80535889]
[59.25476837 177.13789368]
[52.38137054 190.47042847]
[51.18724823 199.71696472]
[45.07251358 204.11177063]
[37.77956390 217.21951294]
[30.48661232 230.32725525]
[23.19366264 243.43499756]
[15.90071106 256.54275513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
