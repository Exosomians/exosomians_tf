%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACACUCCAAGGUACCACAUUACCACUCGUGAAACCUGAGACUUAUGUCACUAGUCUCAAGUUCAGAGUGACCUUG\
) } def
/len { sequence length } bind def

/coor [
[37.78716660 263.82553101]
[32.45189667 278.22799683]
[20.61995888 288.02087402]
[5.47407913 290.56997681]
[-8.91157341 285.18960571]
[-18.66733170 273.32702637]
[-21.16894722 258.17321777]
[-15.74349403 243.80450439]
[-3.85039520 234.08598328]
[11.31116676 231.63188171]
[16.56583023 217.58238220]
[21.82049179 203.53286743]
[27.07515526 189.48336792]
[32.32981873 175.43386841]
[37.58448029 161.38436890]
[23.79189110 167.28050232]
[8.87035751 165.74824524]
[-3.43608975 157.17202759]
[-10.03958416 143.70378113]
[-9.28321266 128.72285461]
[-1.35676038 115.98820496]
[11.75091076 108.69512939]
[26.75089455 108.67356873]
[39.87947845 115.92893219]
[47.84251022 128.64074707]
[48.64209366 143.61869812]
[58.92768097 132.70051575]
[69.21326447 121.78232574]
[79.49885559 110.86414337]
[89.78443909 99.94596100]
[92.68550873 92.17049408]
[100.70262146 88.80850220]
[111.41414642 78.30786896]
[122.12567139 67.80724335]
[132.83718872 57.30661011]
[136.92147827 48.82495499]
[144.18952942 46.61202240]
[149.22805786 31.61455917]
[163.85614014 28.80949593]
[174.97666931 18.74301910]
[186.09718323 8.67654324]
[197.21771240 -1.38993335]
[208.33822632 -11.45640945]
[219.45875549 -21.52288628]
[230.57928467 -31.58936310]
[227.95166016 -46.79130936]
[233.98100281 -60.99168015]
[246.74336243 -69.65919495]
[262.16632080 -70.02806854]
[275.32846069 -61.98060608]
[282.02978516 -48.08472061]
[280.13195801 -32.77453613]
[270.24053955 -20.93547821]
[255.51184082 -16.34534836]
[240.64575195 -20.46883774]
[229.52523804 -10.40236187]
[218.40470886 -0.33588582]
[207.28417969 9.73059082]
[196.16366577 19.79706764]
[185.04313660 29.86354256]
[173.92260742 39.93001938]
[169.67950439 54.20746231]
[154.25601196 57.73254776]
[143.33782959 68.01813507]
[132.62629700 78.51876068]
[121.91477966 89.01939392]
[111.20325470 99.52002716]
[100.70262146 110.23155212]
[90.41703796 121.14973450]
[80.13144684 132.06791687]
[69.84586334 142.98609924]
[59.56027603 153.90428162]
[51.63398361 166.63902283]
[46.37931824 180.68853760]
[41.12465668 194.73803711]
[35.86999512 208.78753662]
[30.61533165 222.83703613]
[25.36066818 236.88653564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[32 67]
[33 66]
[34 65]
[35 64]
[37 63]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
