%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCAGGCAGCAGGAGGAGCGAACGCCCCGCGGCCCGGGCAGGAGCGCUCCGGGGGGCCGGCCGGCAGGCCGGCGCAGCCCCGGAGCGGCGCGAGAUGGAAUGGAUGGACCAACUAGGACGGUCAUCGUAUACGAACAGAGUUUCUAAUUCGGUACGUAC\
) } def
/len { sequence length } bind def

/coor [
[103.93910217 149.82324219]
[94.10262299 161.14770508]
[79.18786621 159.55081177]
[71.97184753 146.40057373]
[78.63623047 132.96241760]
[83.55189514 118.79074860]
[76.09451294 117.99232483]
[64.98635101 128.07244873]
[53.87819290 138.15255737]
[48.85808563 153.15618896]
[34.23345184 155.97921753]
[23.12529182 166.05932617]
[18.84513855 174.18589783]
[11.70261955 176.22463989]
[0.40108079 186.08746338]
[-4.03585291 194.12951660]
[-11.21656418 196.02937317]
[-22.70722961 205.67118835]
[-21.49051666 221.14048767]
[-29.62748718 234.35295105]
[-43.98931122 240.22813416]
[-59.05356979 236.50688171]
[-69.02775574 224.62011719]
[-70.07658386 209.13851929]
[-61.79676437 196.01510620]
[-47.37205124 190.29606628]
[-32.34904480 194.18051147]
[-20.85837746 184.53869629]
[-9.46173954 174.78593445]
[1.83979869 164.92311096]
[13.04517460 154.95117188]
[24.15333557 144.87104797]
[28.37891388 130.58840942]
[43.79807663 127.04440308]
[54.90623474 116.96427917]
[66.01439667 106.88416290]
[67.75579071 91.98558807]
[59.27168655 79.61546326]
[45.08545685 72.61107635]
[44.26758194 57.73894501]
[35.78347778 45.36882019]
[30.24657822 59.30950546]
[15.95420074 63.86230087]
[3.37413716 55.69272232]
[1.72007227 40.78419876]
[12.20344925 30.05578995]
[27.14558029 31.36465454]
[19.89889145 18.23128128]
[12.65220261 5.09790707]
[5.40551376 -8.03546619]
[-1.84117508 -21.16884041]
[-9.08786392 -34.30221176]
[-16.33455276 -47.43558502]
[-23.58124161 -60.56895828]
[-30.82793045 -73.70233154]
[-38.07461929 -86.83570862]
[-45.57461929 -99.82608795]
[-53.44926834 -112.59283447]
[-61.44733429 -125.28263092]
[-69.44540405 -137.97242737]
[-77.44346619 -150.66223145]
[-85.44153595 -163.35202026]
[-93.43959808 -176.04182434]
[-101.43766785 -188.73161316]
[-116.19127655 -195.89143372]
[-117.09745026 -212.26553345]
[-103.22399139 -221.00962830]
[-88.84272766 -213.12855530]
[-88.74787140 -196.72969055]
[-80.74980164 -184.03988647]
[-72.75173950 -171.35009766]
[-64.75366974 -158.66029358]
[-56.75560379 -145.97050476]
[-48.75753784 -133.28070068]
[-40.75947189 -120.59090424]
[-34.50173187 -116.58930969]
[-32.73211670 -107.57657623]
[-28.34727669 -105.57349396]
[-25.19779396 -100.76860046]
[-24.94124603 -94.08239746]
[-17.69455719 -80.94902039]
[-10.44786835 -67.81565094]
[-3.20117950 -54.68227386]
[4.04550934 -41.54890060]
[11.29219818 -28.41552925]
[18.53888702 -15.28215504]
[25.78557587 -2.14878178]
[33.03226471 10.98459148]
[40.27895355 24.11796570]
[48.15360260 36.88471603]
[56.63770676 49.25484085]
[70.21709442 55.37443161]
[71.64180756 71.13136292]
[80.12591553 83.50148773]
[78.61096954 68.57818604]
[73.07955170 54.63531876]
[74.19748688 39.67703629]
[81.73995972 26.71126938]
[94.19026947 18.34528160]
[109.04480743 16.26137352]
[123.31650543 20.87859535]
[134.13548279 31.26847839]
[139.32618713 45.34173965]
[137.84393311 60.27099991]
[126.31281281 69.86439514]
[141.03164673 66.97370911]
[155.75047302 64.08303070]
[170.46929932 61.19234467]
[178.33282471 56.44619370]
[185.50143433 58.39122391]
[200.27354431 55.78650284]
[215.04566956 53.18177795]
[220.91098022 38.91287231]
[233.57260132 30.09887505]
[248.99028015 29.55230331]
[262.24429321 37.44756317]
[269.10528564 51.26530838]
[267.38400269 66.59634399]
[257.62966919 78.54859161]
[242.95483398 83.30814362]
[228.04222107 79.35622406]
[217.65039062 67.95389557]
[202.87826538 70.55861664]
[188.10615540 73.16333771]
[173.35998535 75.91117096]
[158.64115906 78.80185699]
[143.92233276 81.69254303]
[129.20349121 84.58322144]
[126.43445587 91.55332947]
[135.73800659 103.31954956]
[120.89636230 105.49354553]
[118.12731171 112.46365356]
[126.84969330 124.66693115]
[135.57208252 136.87020874]
[144.29446411 149.07348633]
[158.61384583 155.80146790]
[159.71995544 170.65495300]
[168.44233704 182.85823059]
[182.76171875 189.58621216]
[183.86782837 204.43968201]
[192.59020996 216.64297485]
[201.31259155 228.84625244]
[210.03497314 241.04953003]
[218.75735474 253.25280762]
[232.88670349 262.62286377]
[227.79421997 278.79391479]
[210.84539795 278.37704468]
[206.55407715 261.97518921]
[197.83169556 249.77191162]
[189.10931396 237.56863403]
[180.38693237 225.36535645]
[171.66455078 213.16206360]
[157.96905518 207.30694580]
[156.23905945 191.58061218]
[147.51667786 179.37733459]
[133.82116699 173.52221680]
[132.09117126 157.79586792]
[123.36879730 145.59259033]
[114.64641571 133.38931274]
[105.92403412 121.18602753]
[98.46665192 120.38760376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 36]
[8 35]
[9 34]
[11 32]
[12 31]
[14 30]
[15 29]
[17 28]
[18 27]
[37 94]
[38 93]
[40 91]
[41 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 77]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[105 128]
[106 127]
[107 126]
[108 125]
[110 124]
[111 123]
[112 122]
[132 160]
[133 159]
[134 158]
[135 157]
[137 155]
[138 154]
[140 152]
[141 151]
[142 150]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
