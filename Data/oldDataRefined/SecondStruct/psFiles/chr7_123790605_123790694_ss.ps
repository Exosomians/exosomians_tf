%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:22 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUAUACCUUGCGAAGUGCUUAAACGCACAGUAGGAACGCGUCCCCGGUACGAUUAGAAGAGACAUAGCAAGGUUAAAAUCAUAUACA\
) } def
/len { sequence length } bind def

/coor [
[132.51237488 318.99426270]
[143.64468384 308.41278076]
[140.05494690 293.84866333]
[136.46520996 279.28451538]
[132.87547302 264.72039795]
[120.03578186 257.25863647]
[116.18781281 242.53967285]
[124.10145569 229.12281799]
[120.51172638 214.55868530]
[116.92198944 199.99456787]
[113.33225250 185.43043518]
[109.74251556 170.86631775]
[106.15278625 156.30218506]
[102.56304932 141.73805237]
[79.16036987 136.25389099]
[62.64325714 118.79117584]
[58.46907806 95.11972809]
[68.01701355 73.06075287]
[58.46363449 61.49645615]
[48.91025543 49.93215942]
[39.35688019 38.36785889]
[29.80350304 26.80356216]
[13.04383278 28.11924171]
[-1.09973383 19.34072113]
[-7.23587418 4.04397726]
[-3.16205645 -11.75604534]
[-13.10889626 -22.98370552]
[-23.05573654 -34.21136856]
[-33.00257492 -45.43902969]
[-47.84794235 -41.71428299]
[-62.72109985 -45.32644272]
[-74.20431519 -55.44545746]
[-79.65882111 -69.74604797]
[-77.83121490 -84.94204712]
[-69.14146423 -97.54152679]
[-55.58641815 -104.64921570]
[-40.28092194 -104.63182068]
[-26.74206352 -97.49333954]
[-18.08097649 -84.87414551]
[-16.28791809 -69.67402649]
[-21.77491570 -55.38586807]
[-11.82807541 -44.15820694]
[-1.88123524 -32.93054581]
[8.06560421 -21.70288467]
[21.29767990 -24.21681595]
[34.12898636 -19.77697945]
[43.12085724 -9.45848560]
[45.80669022 4.07317019]
[41.36780167 17.25018501]
[50.92117691 28.81448364]
[60.47455597 40.37878036]
[70.02793121 51.94307709]
[79.58130646 63.50737762]
[86.84008789 60.30804443]
[94.57243347 58.53705215]
[102.50009918 58.25812531]
[110.33779144 59.48130417]
[117.80347443 62.16257095]
[124.62848663 66.20544434]
[130.56723022 71.46442413]
[135.40599060 77.75028229]
[138.97065735 84.83679962]
[141.13293457 92.46897888]
[141.81501770 100.37216949]
[140.99237061 108.26196289]
[138.69459534 115.85444641]
[135.00436401 122.87639618]
[130.05447388 129.07511902]
[124.02307129 134.22756958]
[117.12717438 138.14831543]
[120.71691132 152.71244812]
[124.30664825 167.27658081]
[127.89637756 181.84069824]
[131.48611450 196.40483093]
[135.07585144 210.96896362]
[138.66558838 225.53308105]
[151.90789795 233.73545837]
[155.34092712 248.55670166]
[147.43960571 261.13067627]
[151.02934265 275.69479370]
[154.61906433 290.25891113]
[158.20880127 304.82305908]
[172.98342896 309.01904297]
[183.66909790 320.05133057]
[187.39144897 334.95233154]
[183.14916992 349.71371460]
[172.08343506 360.36477661]
[157.17083740 364.04040527]
[142.42282104 359.75186157]
[131.80650330 348.65280151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[26 44]
[27 43]
[28 42]
[29 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
