%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCCAUCGACGUCGGCCUCUGGCGCACCGGAUUACCUAUUCCGCAGACUGAAGCCUAGUCUUCUAACUCCCAAGCUCAGGGAAGCACCAGCCUUGCAAAAUUAGGGACGUUGAUAUUAGAAGGGAGGGAACAAAA\
) } def
/len { sequence length } bind def

/coor [
[199.57708740 468.57995605]
[206.53538513 454.94763184]
[219.03862000 446.11993408]
[217.01072693 431.25765991]
[214.98281860 416.39535522]
[212.95492554 401.53308105]
[210.92703247 386.67077637]
[207.56561279 372.05227661]
[202.89813232 357.79693604]
[198.23063660 343.54159546]
[193.56315613 329.28625488]
[188.89567566 315.03094482]
[184.22817993 300.77560425]
[179.56069946 286.52026367]
[174.89321899 272.26492310]
[170.22572327 258.00958252]
[166.37199402 255.06025696]
[164.37986755 249.62420654]
[165.68524170 243.00349426]
[161.66668701 228.55180359]
[157.64813232 214.10011292]
[151.71270752 200.32438660]
[143.96937561 187.47756958]
[136.22605896 174.63073730]
[128.48272705 161.78390503]
[115.28599548 154.87773132]
[114.78869629 139.06434631]
[107.04537201 126.21752167]
[91.67229462 125.83882904]
[78.97127533 117.16940308]
[73.01760101 102.99094391]
[58.23258972 100.46044922]
[43.44757843 97.92994690]
[28.66256523 95.39945221]
[17.64924431 106.33043671]
[2.30910349 108.66703796]
[-11.45925903 101.51079559]
[-18.36162758 87.61342621]
[-15.74389935 72.31874847]
[-4.61264658 61.50788498]
[10.75193882 59.33782578]
[24.44185829 66.64301300]
[31.19306183 80.61444092]
[45.97807312 83.14493561]
[60.76308441 85.67543030]
[75.54809570 88.20593262]
[71.77427673 82.63462830]
[68.93481445 76.20366669]
[60.33888626 63.91098785]
[51.74295425 51.61830902]
[43.14702225 39.32562637]
[34.55109406 27.03294754]
[25.95516205 14.74026775]
[10.47174072 10.53988457]
[4.23447800 -4.24105263]
[12.02806759 -18.26387405]
[27.87393570 -20.77147102]
[39.61648560 -9.84022903]
[38.24784088 6.14433718]
[46.84377289 18.43701744]
[55.43970490 30.72969627]
[64.03563690 43.02237701]
[72.63156128 55.31505585]
[81.22749329 67.60773468]
[88.67965698 66.76198578]
[86.98815918 51.85766602]
[85.29690552 36.95331192]
[100.20128632 35.26231003]
[101.89247894 50.16616440]
[103.58397675 65.07048798]
[111.03614044 64.22473907]
[116.65872955 50.31839371]
[122.28132629 36.41204834]
[127.90391541 22.50570107]
[120.40670013 8.78251648]
[123.53525543 -6.53891039]
[135.81237793 -16.22427177]
[151.44119263 -15.70043564]
[163.04223633 -5.21474218]
[165.13786316 10.28178596]
[156.73857117 23.47216034]
[141.81025696 28.12829208]
[136.18766785 42.03463745]
[130.56507874 55.94098282]
[124.94248962 69.84732819]
[133.06849670 97.82710266]
[119.89220428 118.47419739]
[127.63552094 131.32102966]
[141.38612366 139.14608765]
[141.32955933 154.04058838]
[149.07287598 166.88742065]
[156.81620789 179.73423767]
[164.55952454 192.58106995]
[165.97048950 177.64758301]
[173.60908508 164.73820496]
[186.01954651 156.31321716]
[200.83670044 153.97827148]
[215.23667908 158.17832947]
[226.47514343 168.11297607]
[232.41026306 181.88883972]
[231.91090393 196.88052368]
[225.07226562 210.23091125]
[213.19763184 219.39569092]
[198.55009460 222.62823486]
[183.92115784 219.31246948]
[172.09982300 210.08155823]
[176.11837769 224.53324890]
[180.13693237 238.98492432]
[184.48106384 253.34210205]
[189.14854431 267.59744263]
[193.81604004 281.85278320]
[198.48352051 296.10812378]
[203.15100098 310.36343384]
[207.81849670 324.61877441]
[212.48597717 338.87411499]
[217.15345764 353.12945557]
[221.82095337 367.38479614]
[228.32885742 353.87008667]
[241.45416260 346.60879517]
[256.36120605 348.27612305]
[267.55789185 358.25784302]
[270.91909790 372.87637329]
[265.20651245 386.74600220]
[252.52473450 394.75677490]
[237.54605103 393.95739746]
[225.78932190 384.64288330]
[227.81721497 399.50518799]
[229.84510803 414.36746216]
[231.87301636 429.22976685]
[233.90090942 444.09204102]
[248.31205750 449.24737549]
[258.66815186 460.51724243]
[262.58944702 475.31188965]
[259.17486572 490.23165894]
[249.20903015 501.84805298]
[234.98202515 507.49172974]
[219.76312256 505.86581421]
[207.04951477 497.34393311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 130]
[4 129]
[5 128]
[6 127]
[7 126]
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[13 112]
[14 111]
[15 110]
[16 109]
[19 108]
[20 107]
[21 106]
[22 93]
[23 92]
[24 91]
[25 90]
[27 88]
[28 87]
[31 46]
[32 45]
[33 44]
[34 43]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
