%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGGCGGCGCCCCGGGGCCGCCGCCCCCGUGCCAGGGGGCGCUCCCCCCGGGCCCGUGGGCCCCCCGGCCGCCGCCGCCGCUGAGACCUGCGCUCGGCCCGGGAAGGGCACCUAGCGGGGUCGACGCCGCCCGCAGCGCCGGCGGGGGCCCCUCGGG\
) } def
/len { sequence length } bind def

/coor [
[-30.96252441 159.39588928]
[-35.56317902 157.94796753]
[-49.91728592 162.30223083]
[-64.27139282 166.65649414]
[-75.23130798 178.06661987]
[-89.65657043 174.35700989]
[-104.01067352 178.71128845]
[-118.36478424 183.06555176]
[-132.71888733 187.41981506]
[-140.06834412 192.93310547]
[-147.39770508 191.71568298]
[-161.83453369 195.78729248]
[-176.27136230 199.85890198]
[-190.70819092 203.93051147]
[-201.89002991 215.12322998]
[-216.23966980 211.13113403]
[-230.67649841 215.20272827]
[-245.11332703 219.27433777]
[-259.55017090 223.34594727]
[-267.30807495 236.85345459]
[-282.00708008 240.77697754]
[-294.83660889 233.29776001]
[-309.27343750 237.36935425]
[-316.72970581 242.73728943]
[-324.03375244 241.37620544]
[-338.54776001 245.16357422]
[-353.06173706 248.95094299]
[-367.57571411 252.73831177]
[-382.08972168 256.52569580]
[-396.60369873 260.31307983]
[-404.37802124 274.07299805]
[-419.62719727 278.22488403]
[-433.30413818 270.30554199]
[-437.29458618 255.01332092]
[-429.23107910 241.42085266]
[-413.89752197 237.59230042]
[-400.39108276 245.79907227]
[-385.87707520 242.01170349]
[-371.36309814 238.22433472]
[-356.84912109 234.43696594]
[-342.33511353 230.64958191]
[-327.82113647 226.86221313]
[-313.34503174 222.93252563]
[-298.90820312 218.86093140]
[-291.87710571 205.78042603]
[-277.29412842 201.44558716]
[-263.62176514 208.90911865]
[-249.18493652 204.83750916]
[-234.74810791 200.76589966]
[-220.31127930 196.69430542]
[-210.16206360 185.79280090]
[-194.77980042 189.49368286]
[-180.34297180 185.42207336]
[-165.90614319 181.35046387]
[-151.46931458 177.27885437]
[-137.07315063 173.06571960]
[-122.71904755 168.71144104]
[-108.36494446 164.35717773]
[-94.01084137 160.00289917]
[-84.07762146 148.90423584]
[-68.62565613 152.30239868]
[-54.27155304 147.94812012]
[-39.91744995 143.59385681]
[-25.65160179 138.95860291]
[-11.47951126 134.04414368]
[2.69257951 129.12969971]
[9.62882137 112.22916412]
[26.99411392 105.60306549]
[43.99771881 113.86487579]
[57.96594238 108.39781952]
[71.93416595 102.93076324]
[85.90238953 97.46370697]
[94.77934265 86.66133118]
[108.63055420 88.56806946]
[122.59877777 83.10101318]
[136.56700134 77.63395691]
[150.53521729 72.16690063]
[164.50344849 66.69984436]
[178.47167969 61.23278427]
[188.50257874 48.99794006]
[203.17442322 51.56431580]
[217.14265442 46.09725571]
[231.11087036 40.63019943]
[245.07910156 35.16314316]
[259.04733276 29.69608498]
[269.07821655 17.46123886]
[283.75006104 20.02761269]
[290.14666748 5.82474709]
[304.39031982 0.47935605]
[317.89114380 6.66505337]
[327.92205811 -5.56979179]
[342.59390259 -3.00341749]
[356.56213379 -8.47047520]
[370.53036499 -13.93753242]
[377.42459106 -20.01045609]
[384.82687378 -19.37184143]
[398.89974976 -24.56359863]
[412.97262573 -29.75535393]
[427.04547119 -34.94710922]
[441.11834717 -40.13886642]
[455.19122314 -45.33061981]
[469.26409912 -50.52237701]
[479.53329468 -62.55791855]
[494.15191650 -59.70397949]
[500.82611084 -73.77851868]
[515.17199707 -78.84322357]
[528.54876709 -72.39364624]
[542.62164307 -77.58540344]
[556.69451904 -82.77716064]
[569.46191406 -93.93197632]
[583.71514893 -84.75149536]
[578.83911133 -68.51386261]
[561.88629150 -68.70428467]
[547.81341553 -63.51253128]
[533.74053955 -58.32077789]
[527.75738525 -44.72895050]
[513.55944824 -39.26329803]
[499.34365845 -45.63110733]
[490.08105469 -33.96691513]
[474.45584106 -36.44950867]
[460.38299561 -31.25775146]
[446.31011963 -26.06599617]
[432.23724365 -20.87423897]
[418.16436768 -15.68248367]
[404.09149170 -10.49072742]
[390.01861572 -5.29897213]
[375.99740601 0.03069154]
[362.02917480 5.49774885]
[348.06097412 10.96480656]
[339.02914429 22.80861092]
[323.35821533 20.63327789]
[317.64309692 34.33995438]
[303.55520630 40.08331299]
[289.21713257 33.99583817]
[280.18533325 45.83964157]
[264.51437378 43.66430664]
[250.54615784 49.13136673]
[236.57792664 54.59842300]
[222.60971069 60.06547928]
[208.64147949 65.53253937]
[199.60968018 77.37634277]
[183.93873596 75.20101166]
[169.97050476 80.66806793]
[156.00228882 86.13512421]
[142.03405762 91.60218048]
[128.06582642 97.06923676]
[114.09761047 102.53629303]
[105.22065735 113.33866882]
[91.36944580 111.43193054]
[77.40122223 116.89898682]
[63.43299866 122.36604309]
[49.46477509 127.83309937]
[46.89235687 139.50321960]
[39.06734467 148.37564087]
[28.03660965 152.30552673]
[16.60160446 150.41842651]
[7.60703230 143.30178833]
[-6.56505823 148.21623230]
[-20.73714828 153.13069153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[6 59]
[7 58]
[8 57]
[9 56]
[11 55]
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[18 48]
[19 47]
[22 44]
[23 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[64 159]
[65 158]
[66 157]
[69 152]
[70 151]
[71 150]
[72 149]
[74 147]
[75 146]
[76 145]
[77 144]
[78 143]
[79 142]
[81 140]
[82 139]
[83 138]
[84 137]
[85 136]
[87 134]
[90 131]
[92 129]
[93 128]
[94 127]
[96 126]
[97 125]
[98 124]
[99 123]
[100 122]
[101 121]
[102 120]
[104 118]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
