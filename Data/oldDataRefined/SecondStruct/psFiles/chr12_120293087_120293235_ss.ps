%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUAAGUCAGAGGCAUCUCUGACAGUUUUUAACGGUCACGGCUGAUAUAACGUUCAGCAGUGCCGCCCCAUAACCCUUUUCAAAAGUUAAUCGUUAUUAGCGCGGAGCCUAUCUGGAGUAACCGAUGCUAUGACGGUGACGCGUUUC\
) } def
/len { sequence length } bind def

/coor [
[130.70104980 215.17309570]
[115.87126160 218.13339233]
[100.78601837 219.19218445]
[85.68812561 218.33242798]
[70.82059479 215.56797791]
[56.42274475 210.94331360]
[42.72632599 204.53286743]
[29.95179558 196.43984985]
[20.39043427 207.99754333]
[10.82907486 219.55523682]
[1.26771522 231.11294556]
[-8.29364491 242.67063904]
[-17.85500526 254.22833252]
[-27.41636467 265.78604126]
[-29.61623192 282.03695679]
[-44.89044952 288.00607300]
[-57.52621078 277.55285645]
[-54.52492523 261.43069458]
[-38.97406387 256.22467041]
[-29.41270256 244.66697693]
[-19.85134315 233.10928345]
[-10.28998375 221.55157471]
[-0.72862357 209.99388123]
[8.83273602 198.43618774]
[18.39409637 186.87847900]
[7.67532253 175.38931274]
[-1.43905199 162.59004211]
[-8.79063988 148.70309448]
[-14.25168610 133.96978760]
[-17.72728920 118.64617157]
[-19.15705299 102.99851990]
[-18.51613045 87.29876709]
[-15.81565762 71.81972504]
[-11.10256481 56.83039856]
[-4.45875454 42.59126282]
[-17.12367249 34.55385971]
[-29.78859138 26.51645851]
[-38.77582932 24.53908539]
[-42.63212204 18.17577362]
[-55.12594223 9.87489986]
[-67.61975861 1.57402706]
[-83.39597321 0.38169011]
[-89.71503448 -13.10603619]
[-102.20884705 -21.40690994]
[-114.70266724 -29.70778275]
[-127.19648743 -38.00865555]
[-139.69030762 -46.30952835]
[-154.18669128 -40.77469635]
[-169.15899658 -44.85017776]
[-178.85008240 -56.96886826]
[-179.53350830 -72.47088623]
[-170.94648743 -85.39538574]
[-156.39089966 -90.77263641]
[-141.46368408 -86.53497314]
[-131.90464783 -74.31186676]
[-131.38943481 -58.80334854]
[-118.89561462 -50.50247574]
[-106.40179443 -42.20160294]
[-93.90797424 -33.90072632]
[-81.41415405 -25.59985542]
[-66.53158569 -25.00125122]
[-59.31888580 -10.91979122]
[-46.82506561 -2.61891818]
[-34.33124924 5.68195486]
[-21.75119019 13.85154057]
[-9.08627129 21.88894272]
[3.57864738 29.92634392]
[12.79563522 18.74242783]
[23.30179596 8.75976849]
[34.94181061 0.12594649]
[47.54360580 -7.03140259]
[60.92088318 -12.60646915]
[74.87587738 -16.51683617]
[89.20229340 -18.70469284]
[103.68833160 -19.13769531]
[118.11985016 -17.80944633]
[132.28349304 -14.73957825]
[145.96987915 -9.97347450]
[158.97666931 -3.58159494]
[171.11158752 4.34156752]
[182.19525146 13.67888165]
[192.06378174 24.29231262]
[200.57130432 36.02495575]
[207.59205627 48.70336151]
[213.02221680 62.14010620]
[216.78155518 76.13655090]
[218.81445312 90.48577118]
[219.09088135 104.97564697]
[234.00871277 106.54357147]
[248.92652893 108.11149597]
[263.84436035 109.67942810]
[272.77355957 107.45454407]
[279.05703735 111.43959045]
[293.93875122 113.31958771]
[308.82046509 115.19958496]
[323.70217896 117.07958221]
[338.58392334 118.95958710]
[353.46563721 120.83958435]
[368.34735107 122.71958160]
[377.32116699 120.68218231]
[383.51980591 124.79795074]
[398.35888672 126.98919678]
[413.19799805 129.18043518]
[428.03707886 131.37168884]
[442.89828491 133.40742493]
[457.77999878 135.28741455]
[472.66174316 137.16741943]
[487.76797485 124.01483917]
[507.38745117 126.07349396]
[519.07055664 141.59201050]
[534.04095459 142.53387451]
[546.97747803 133.04566956]
[562.42309570 137.38294983]
[568.52929688 152.21852112]
[560.61187744 166.17179871]
[544.74444580 168.53903198]
[533.09912109 157.50427246]
[518.12872314 156.56240845]
[512.47277832 165.26434326]
[503.62771606 170.84724426]
[493.17813110 172.23072815]
[483.02996826 169.09403992]
[475.06274414 161.94714355]
[470.78173828 152.04913330]
[455.90002441 150.16914368]
[441.01828003 148.28913879]
[433.94116211 150.58634949]
[425.84582520 146.21076965]
[411.00674438 144.01953125]
[396.16766357 141.82827759]
[381.32858276 139.63703918]
[366.46734619 137.60130310]
[351.58563232 135.72129822]
[336.70391846 133.84130859]
[321.82220459 131.96130371]
[306.94046021 130.08131409]
[292.05874634 128.20130920]
[277.17703247 126.32131195]
[262.27642822 124.59725189]
[247.35861206 123.02932739]
[232.44078064 121.46139526]
[217.52294922 119.89347076]
[214.05828857 134.61358643]
[208.75772095 148.77655029]
[201.70655823 162.15440369]
[193.01831055 174.53179932]
[182.83280945 185.70950317]
[171.31401062 195.50761414]
[158.64733887 203.76841736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[35 67]
[36 66]
[37 65]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[88 142]
[89 141]
[90 140]
[91 139]
[93 138]
[94 137]
[95 136]
[96 135]
[97 134]
[98 133]
[99 132]
[101 131]
[102 130]
[103 129]
[104 128]
[105 126]
[106 125]
[107 124]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
