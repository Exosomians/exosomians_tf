%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAAGCAUCAAACUCAAACGAUCCGUCUUAUCAUUACUCCUACAUUCAGGCACCCGCUGAUACUCUUACUGACGCGGCCACUUCGAAGUCCCCCAAACCUACUC\
) } def
/len { sequence length } bind def

/coor [
[16.98820496 371.78826904]
[3.51130033 378.40570068]
[-10.58349800 383.57818604]
[-25.14175797 387.24896240]
[-40.00397491 389.37786865]
[-55.00730515 389.94158936]
[-69.98736572 388.93389893]
[-84.78002930 386.36587524]
[-99.22322083 382.26562500]
[-113.15868378 376.67810059]
[-126.43374634 369.66448975]
[-138.90295410 361.30166626]
[-150.42967224 351.68127441]
[-160.88763428 340.90869141]
[-170.16224670 329.10192871]
[-178.15188599 316.39038086]
[-184.76901245 302.91333008]
[-189.94113159 288.81838989]
[-193.61157227 274.26004028]
[-195.74012756 259.39776611]
[-196.30346680 244.39442444]
[-195.29541016 229.41439819]
[-192.72702026 214.62179565]
[-188.62641907 200.17869568]
[-183.03855896 186.24336243]
[-176.02464294 172.96847534]
[-167.66152954 160.49948120]
[-158.04083252 148.97299194]
[-147.26799011 138.51528931]
[-135.46101379 129.24096680]
[-122.74926758 121.25164032]
[-109.27204132 114.63483429]
[-95.17699432 109.46305847]
[-80.61855316 105.79296875]
[-65.75624084 103.66477966]
[-50.75288010 103.10180664]
[-35.77286530 104.11022186]
[-20.98032570 106.67897034]
[-6.53733587 110.77991486]
[7.39785910 116.36812592]
[20.67257690 123.38236237]
[33.14137650 131.74578857]
[44.66763687 141.36676025]
[55.43024445 130.91848755]
[58.07963181 123.88838196]
[66.67002106 120.32596588]
[77.73751831 110.20121765]
[88.80501556 100.07646942]
[99.72126770 89.78884125]
[110.48387909 79.34057617]
[121.24648285 68.89230347]
[119.19258881 53.62509537]
[126.43765259 40.23247147]
[140.01890564 33.75068665]
[154.63768005 36.47636414]
[165.40029907 26.02809715]
[176.16290283 15.57983208]
[186.92550659 5.13156652]
[180.70094299 -8.68981361]
[179.58204651 -23.80681992]
[183.70393372 -38.39400101]
[192.56887817 -50.68988037]
[205.10636902 -59.20967865]
[219.80247498 -62.92457962]
[234.88253784 -61.38599396]
[248.52560425 -54.77971649]
[259.08416748 -43.90348434]
[265.28326416 -30.07065773]
[266.37429810 -14.95161629]
[262.22552490 -0.37205631]
[253.33793640 11.90746784]
[240.78475952 20.40414238]
[226.08184814 24.09195518]
[211.00463867 22.52558517]
[197.37377930 15.89417553]
[186.61117554 26.34244156]
[175.84855652 36.79070663]
[165.08595276 47.23897171]
[167.37722778 61.93210220]
[160.49583435 75.31531525]
[146.89439392 82.16032410]
[131.69474792 79.65491486]
[120.93214417 90.10317993]
[110.16953278 100.55144501]
[106.97158051 108.10371399]
[98.92976379 111.14397430]
[87.86225891 121.26871490]
[76.79476166 131.39346313]
[65.87850952 141.68109131]
[55.11590195 152.12936401]
[64.39108276 163.93566895]
[72.38134003 176.64682007]
[78.99912262 190.12356567]
[84.17192841 204.21823120]
[87.84307861 218.77641296]
[89.97235107 233.63856506]
[90.53641510 248.64189148]
[89.52909088 263.62197876]
[86.96141815 278.41470337]
[82.86152649 292.85800171]
[77.27433777 306.79357910]
[70.26106262 320.06881714]
[61.89855194 332.53823853]
[52.27842331 344.06518555]
[41.50608063 354.52340698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[43 90]
[44 89]
[46 88]
[47 87]
[48 86]
[49 84]
[50 83]
[51 82]
[55 78]
[56 77]
[57 76]
[58 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
