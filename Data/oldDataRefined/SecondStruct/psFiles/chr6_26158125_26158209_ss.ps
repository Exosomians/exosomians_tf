%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAGAGUCCACAAACGUUGUCACAAGAUUGAUAAUUGCGAUGCUACGGACUUGGAUGGUUCAGACGAGGACGGGGUUUCUUCC\
) } def
/len { sequence length } bind def

/coor [
[5.27377367 170.12936401]
[-0.71589637 174.91888428]
[-7.36469650 178.73350525]
[-14.51542473 181.48435974]
[-21.99921417 183.10772705]
[-29.63952446 183.56649780]
[-37.25629807 182.85101318]
[-44.67021179 180.97926331]
[-51.70689774 177.99647522]
[-58.20103836 173.97395325]
[-64.00025940 169.00746155]
[-68.96868896 163.21487427]
[-72.99015808 156.73338318]
[-75.97092438 149.71627808]
[-77.84181213 142.32933044]
[-78.55987549 134.74684143]
[-78.10934448 127.14753723]
[-76.50198364 119.71036530]
[-90.08370209 113.34351349]
[-103.66542816 106.97666168]
[-117.24715424 100.60980988]
[-130.82887268 94.24295807]
[-144.41059875 87.87611389]
[-157.99232483 81.50926208]
[-172.76731873 87.11950684]
[-187.14741516 80.56294250]
[-192.60113525 65.72945404]
[-185.89289856 51.41948700]
[-171.00257874 46.12289429]
[-156.76434326 52.98204803]
[-151.62547302 67.92753601]
[-138.04374695 74.29438782]
[-124.46202087 80.66123962]
[-110.88030243 87.02809143]
[-97.29857635 93.39493561]
[-83.71685028 99.76178741]
[-70.13513184 106.12863922]
[-50.31715012 88.83370972]
[-24.37063980 84.08145142]
[0.43075472 93.28175354]
[17.09467697 113.92222595]
[31.60693169 110.12821960]
[41.96333694 99.42335510]
[57.27180099 103.41854858]
[71.78405762 99.62454224]
[86.29631042 95.83054352]
[96.37699890 86.14181519]
[109.90968323 89.65720367]
[124.42194366 85.86319733]
[132.43746948 72.50695801]
[147.20899963 68.86603546]
[159.89273071 76.58992004]
[174.40499878 72.79591370]
[188.91725159 69.00191498]
[203.42950439 65.20791626]
[211.44502258 51.85167313]
[226.21656799 48.21075058]
[238.90029907 55.93463516]
[253.41255188 52.14063263]
[267.20733643 42.28465271]
[280.49691772 52.81192398]
[274.05996704 68.49637604]
[257.20654297 66.65288544]
[242.69430542 70.44689178]
[235.41366577 83.39014435]
[220.75021362 87.44453430]
[207.22351074 79.72016907]
[192.71124268 83.51417542]
[178.19898987 87.30817413]
[163.68673706 91.10217285]
[156.40609741 104.04543304]
[141.74266052 108.09981537]
[128.21594238 100.37545776]
[113.70368958 104.16945648]
[103.62300110 113.85818481]
[90.09031677 110.34279633]
[75.57805634 114.13680267]
[61.06580353 117.93080139]
[49.67138290 128.90704346]
[35.40093231 124.64048004]
[20.88867760 128.43447876]
[21.08502007 136.12370300]
[20.10283852 143.74865723]
[17.96641350 151.12988281]
[14.72718048 158.09381104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[41 81]
[42 80]
[44 78]
[45 77]
[46 76]
[48 74]
[49 73]
[52 70]
[53 69]
[54 68]
[55 67]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
