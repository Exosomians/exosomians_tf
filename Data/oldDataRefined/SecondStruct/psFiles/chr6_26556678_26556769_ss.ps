%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUUUCGAGUAGGGAGACCUUCUUCCCUUAACACACUAGUAGCACUGGUAAAAUCGGAAUGACUGAACUGACUGCGUAAGGUCGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[188.42997742 240.34091187]
[182.46667480 227.91786194]
[180.29316711 214.29298401]
[182.09974670 200.59745789]
[187.74583435 187.97119141]
[176.53109741 178.00976562]
[165.31637573 168.04835510]
[154.10165405 158.08692932]
[142.88691711 148.12551880]
[131.67219543 138.16409302]
[120.45745850 128.20268250]
[99.44188690 134.83657837]
[78.64960480 127.53287506]
[66.39929962 109.21367645]
[51.41855240 109.97341156]
[36.43780518 110.73314667]
[21.45705795 111.49288940]
[6.47631073 112.25262451]
[-8.50443649 113.01235962]
[-18.91208649 124.90590668]
[-34.68674469 125.87321472]
[-46.46958923 115.34039307]
[-47.27006149 99.55638885]
[-36.61326218 87.88556671]
[-20.82167625 87.25201416]
[-9.26417446 98.03161621]
[5.71657324 97.27187347]
[20.69732094 96.51213837]
[35.67807007 95.75240326]
[50.65881729 94.99266052]
[65.63956451 94.23292542]
[66.94370270 88.99181366]
[69.04219055 84.01523590]
[71.88459015 79.42276764]
[75.40260315 75.32477570]
[79.51169586 71.81972504]
[84.11312103 68.99184418]
[89.09630585 66.90909576]
[87.57878113 51.98605347]
[86.06125641 37.06301117]
[84.54373169 22.13997269]
[83.02620697 7.21693325]
[81.50868225 -7.70610666]
[73.89094543 -22.85227585]
[86.33639526 -34.36518478]
[100.84461975 -25.59319687]
[96.43172455 -9.22363186]
[97.94924927 5.69940853]
[99.46677399 20.62244797]
[100.98429871 35.54548645]
[102.50182343 50.46852875]
[104.01934814 65.39157104]
[116.96356201 69.56751251]
[127.32263184 78.38119507]
[133.51788330 90.48946381]
[134.60519409 104.04708099]
[130.41888428 116.98794556]
[141.63360596 126.94936371]
[152.84834290 136.91078186]
[164.06306458 146.87220764]
[175.27780151 156.83361816]
[186.49252319 166.79504395]
[197.70724487 176.75646973]
[212.06161499 168.71189880]
[228.26528931 165.99673462]
[244.40815735 168.91369629]
[258.59313965 177.10264587]
[269.15905762 189.58485413]
[274.87533569 204.88003540]
[275.08508301 221.18183899]
[269.78070068 236.57122803]
[281.64233398 245.75282288]
[293.50396729 254.93440247]
[305.36563110 264.11599731]
[317.22726440 273.29757690]
[329.08889771 282.47918701]
[344.73291016 280.23410034]
[357.33212280 289.77532959]
[359.41168213 305.44223022]
[349.73776245 317.93988037]
[334.04977417 319.85363770]
[321.65512085 310.04815674]
[319.90728760 294.34082031]
[308.04565430 285.15921021]
[296.18402100 275.97763062]
[284.32238770 266.79605103]
[272.46075439 257.61444092]
[260.59912109 248.43286133]
[249.40986633 256.30007935]
[236.42492676 260.65310669]
[222.72074890 261.12081909]
[209.43632507 257.65469360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
