%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGACUAGCAGAAGCUUGGAGACUGAAAGCAAGAACUAAUUACUUUUGUAAGAACCGUUUACGAAAGCGAGACC\
) } def
/len { sequence length } bind def

/coor [
[123.82167816 187.79151917]
[111.09226227 190.28724670]
[98.13728333 190.94699097]
[85.22018433 189.75733948]
[72.60363007 186.74250793]
[60.54417801 181.96379089]
[49.28704834 175.51834106]
[39.06115341 167.53726196]
[30.07443810 158.18281555]
[22.50964355 147.64523315]
[16.52059555 136.13880920]
[12.22908497 123.89749146]
[9.72237492 111.17023468]
[9.05144024 98.21583557]
[10.22992325 85.29771423]
[13.23386097 72.67856598]
[-0.65342689 67.00906372]
[-14.54071426 61.33956146]
[-28.42800331 55.67005920]
[-40.99596786 64.61711884]
[-56.40702057 65.32627869]
[-69.74356079 57.57125854]
[-76.74993134 43.82664871]
[-75.19043732 28.47831154]
[-65.56270599 16.42383957]
[-50.93890762 11.50977325]
[-35.98544312 15.30417442]
[-25.47391129 26.59626198]
[-22.75850296 41.78277206]
[-8.87121391 47.45227432]
[5.01607370 53.12177277]
[18.90336227 58.79127502]
[28.39373016 43.89860916]
[40.58277130 31.12027168]
[55.01110840 20.93785095]
[71.13497162 13.73509502]
[88.34668732 9.78345966]
[105.99758911 9.23187351]
[123.42245483 12.10112381]
[139.96458435 18.28307533]
[155.00054932 27.54474640]
[167.96366882 39.53708267]
[178.36538696 53.80812454]
[185.81370544 69.82003021]
[190.02792358 86.96934509]
[204.99983215 86.05192566]
[219.97175598 85.13449860]
[234.94366455 84.21707153]
[249.91558838 83.29965210]
[264.88751221 82.38222504]
[279.85943604 81.46479797]
[294.83132935 80.54737091]
[309.80325317 79.62995148]
[324.77517700 78.71252441]
[336.43850708 67.69678497]
[352.30206299 70.08990479]
[360.19668579 84.05609131]
[354.06631470 98.88167572]
[338.61361694 103.19374084]
[325.69259644 93.68444061]
[310.72067261 94.60186768]
[295.74877930 95.51929474]
[280.77685547 96.43671417]
[265.80493164 97.35414124]
[250.83300781 98.27156830]
[235.86109924 99.18898773]
[220.88917542 100.10641479]
[205.91726685 101.02384186]
[190.94534302 101.94126892]
[189.74455261 114.85733032]
[186.71881104 127.47127533]
[181.92967224 139.52659607]
[175.47451782 150.77815247]
[167.48460388 160.99716187]
[158.12239075 169.97578430]
[147.57829285 177.53147888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 32]
[17 31]
[18 30]
[19 29]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
