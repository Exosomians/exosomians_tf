%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUUCGAUUCGUCCCAGCCCGGACCAAUCAUGAACCUACCCUCUGGUGGACCCUUAUGGCCCACGACAUCCGAAACCGGC\
) } def
/len { sequence length } bind def

/coor [
[88.72089386 183.67422485]
[74.00061035 180.32823181]
[60.11145401 174.41436768]
[47.49743271 166.12165833]
[36.56178284 155.71522522]
[27.65408325 143.52770996]
[21.05909348 129.94874573]
[16.98763847 115.41238403]
[2.05474424 116.82965851]
[-12.87814999 118.24694061]
[-27.81104469 119.66421509]
[-40.81841660 128.67080688]
[-54.21981049 122.17066193]
[-69.15270233 123.58794403]
[-84.08560181 125.00521851]
[-99.01849365 126.42249298]
[-108.89347076 138.76187134]
[-124.61038971 140.42140198]
[-136.84468079 130.41651917]
[-138.33795166 114.68293762]
[-128.20426941 102.55510712]
[-112.45578003 101.22827148]
[-100.43576813 111.48960114]
[-85.50287628 110.07232666]
[-70.56998444 108.65504456]
[-55.63708878 107.23777008]
[-43.69781494 98.33255005]
[-29.22832108 104.73132324]
[-14.29542637 103.31404114]
[0.63746727 101.89676666]
[15.57036114 100.47949219]
[16.52774811 87.31232452]
[19.52599335 74.45537567]
[24.49178886 62.22297287]
[31.30372620 50.91419983]
[39.79525375 40.80555344]
[49.75875854 32.14418411]
[60.95064163 25.14185905]
[73.09725952 19.96977806]
[85.90164185 16.75440025]
[99.05071259 15.57433701]
[112.22299957 16.45844078]
[125.09644318 19.38509750]
[137.35627747 24.28275108]
[148.70278931 31.03165627]
[158.85852051 39.46680450]
[167.57519531 49.38195801]
[174.63969421 60.53470230]
[188.47058105 54.72895050]
[202.30145264 48.92319489]
[216.13233948 43.11743927]
[225.86218262 30.64183426]
[240.59219360 32.84998322]
[254.42306519 27.04422951]
[261.79885864 12.79722500]
[277.56372070 9.82246208]
[289.62417603 20.40192604]
[288.72848511 36.41995621]
[275.56375122 45.58889008]
[260.22882080 40.87511063]
[246.39794922 46.68086243]
[237.65737915 58.74120331]
[221.93807983 56.94831848]
[208.10720825 62.75407410]
[194.27632141 68.55982971]
[180.44544983 74.36558533]
[184.07313538 92.23456573]
[183.77984619 110.46570587]
[179.57926941 128.20875549]
[171.66731262 144.63619995]
[160.41294861 158.98193359]
[146.34107971 170.57688904]
[153.42767334 183.79733276]
[160.51426697 197.01779175]
[174.72828674 205.19664001]
[174.48162842 221.59393311]
[160.02803040 229.34153748]
[146.23611450 220.46937561]
[147.29382324 204.10438538]
[140.20722961 190.88392639]
[133.12063599 177.66348267]
[118.76106262 182.32020569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 31]
[9 30]
[10 29]
[11 28]
[13 26]
[14 25]
[15 24]
[16 23]
[48 66]
[49 65]
[50 64]
[51 63]
[53 61]
[54 60]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
