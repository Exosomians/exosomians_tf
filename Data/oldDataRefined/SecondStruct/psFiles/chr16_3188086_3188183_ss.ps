%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCCGCCGAGCAACCAGAUCCCCAUACUAAGAGCGAAACCCACGCUCUCCAGGGCCCAAGUUUAGGGCCUGCUCGGGGGAAAAGGAAGAGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[164.76524353 303.54052734]
[159.63494873 289.44515991]
[154.50465393 275.34976196]
[140.93905640 269.30737305]
[135.53540039 255.08573914]
[141.96517944 240.89785767]
[136.83488464 226.80247498]
[125.21121216 217.48905945]
[127.76196289 201.87483215]
[122.63166046 187.77943420]
[117.50135803 173.68405151]
[112.37105560 159.58866882]
[107.24075317 145.49327087]
[102.11045074 131.39788818]
[96.98014832 117.30249786]
[100.00152588 131.99505615]
[98.58895874 146.92839050]
[92.86624908 160.79383850]
[83.33489990 172.37629700]
[70.83017731 180.66075134]
[56.44794464 184.92117310]
[41.44857025 184.78422546]
[27.14651871 180.26190186]
[14.79515076 171.75051880]
[5.47686911 159.99595642]
[0.00827815 146.02833557]
[-1.13138402 131.07170105]
[2.15775609 116.43675232]
[9.58745670 103.40603638]
[20.50661850 93.12149048]
[33.95834351 86.48439026]
[48.76379776 84.07638550]
[63.62195587 86.10745239]
[56.74855804 72.77491760]
[49.87516022 59.44239044]
[43.00176239 46.10985565]
[36.12836456 32.77732468]
[29.25496483 19.44479370]
[13.96276093 16.17638588]
[4.38996935 3.81128669]
[5.05657053 -11.81208229]
[15.64781570 -23.31684303]
[31.16284370 -25.27080154]
[44.27593231 -16.75135612]
[48.79547882 -1.78112864]
[42.58749771 12.57139587]
[49.46089554 25.90392876]
[56.33429337 39.23645782]
[63.20769119 52.56899261]
[70.08108521 65.90151978]
[76.95448303 79.23405457]
[84.27021027 80.88638306]
[87.57511139 66.25498962]
[102.20644379 69.56013489]
[98.90165710 84.19104004]
[106.21737671 85.84336853]
[118.15380859 76.75922394]
[130.09024048 67.67507935]
[142.02665710 58.59093475]
[153.96308899 49.50679016]
[154.52638245 33.87935638]
[165.04132080 22.30481911]
[180.54309082 20.24832344]
[193.71221924 28.68088341]
[198.33065796 43.62089920]
[192.21769714 58.01415634]
[178.25971985 65.06459808]
[163.04724121 61.44321823]
[151.11080933 70.52735901]
[139.17437744 79.61151123]
[127.23795319 88.69565582]
[115.30152130 97.77980042]
[111.07553864 112.17219543]
[116.20584106 126.26758575]
[121.33614349 140.36297607]
[126.46644592 154.45835876]
[131.59674072 168.55375671]
[136.72705078 182.64913940]
[141.85734558 196.74452209]
[153.84797668 207.06613159]
[150.93026733 221.67216492]
[156.06057739 235.76756287]
[170.10585022 242.50311279]
[175.10791016 256.87094116]
[168.60003662 270.21945190]
[173.73033142 284.31484985]
[178.86064148 298.41024780]
[194.05294800 299.87869263]
[207.09916687 307.80075073]
[215.40895081 320.60348511]
[217.33238220 335.74493408]
[212.48756409 350.21871948]
[201.83644104 361.15106201]
[187.49380493 366.37136841]
[172.30738831 364.84310913]
[159.29246521 356.86972046]
[151.03317261 344.03436279]
[149.16938782 328.88546753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[6 82]
[7 81]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
