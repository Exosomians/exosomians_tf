%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACAGGAGUAGGUGUAUGUAAUUAGUGUUGUUUAGUACUACACUUGUCGUCACCUUUUUUAAAUUAGUAACCUGU\
) } def
/len { sequence length } bind def

/coor [
[131.09017944 330.69732666]
[114.81060028 328.72061157]
[108.63248444 313.52972412]
[118.91134644 300.75173950]
[120.71939850 285.86111450]
[122.52745056 270.97048950]
[124.33549500 256.07986450]
[126.14354706 241.18920898]
[106.42431641 228.19419861]
[96.89744568 206.48117065]
[100.71790314 182.98353577]
[116.76042175 165.26612854]
[111.44134521 151.24089050]
[106.12227631 137.21563721]
[100.80319977 123.19039917]
[95.48413086 109.16515350]
[89.75795746 103.15126038]
[90.24575806 94.46659088]
[85.49573517 80.23854065]
[80.74571991 66.01049805]
[68.12968445 63.75885391]
[57.79402542 56.30657196]
[51.74232483 45.17652130]
[51.11370468 32.59655380]
[55.96890259 21.05367279]
[65.29080200 12.80235291]
[61.70106506 -1.76177394]
[58.11132812 -16.32590103]
[54.52159500 -30.89002800]
[50.93185806 -45.45415497]
[40.11679459 -57.00166321]
[44.58342743 -71.21076202]
[40.99369049 -85.77488708]
[28.06346512 -95.27166748]
[27.57048225 -111.30714417]
[39.89291382 -121.58027649]
[55.57804871 -118.21038818]
[62.59358978 -103.78257751]
[55.55781937 -89.36462402]
[59.14755249 -74.80049896]
[69.70585632 -64.29471588]
[65.49598694 -49.04389191]
[69.08572388 -34.47976303]
[72.67545319 -19.91563606]
[76.26519012 -5.35150909]
[79.85492706 9.21261883]
[96.33493042 14.90396023]
[106.35916901 29.35655785]
[105.90782166 47.09316635]
[94.97376251 61.26047897]
[99.72378540 75.48852539]
[104.47380829 89.71656799]
[109.50936890 103.84608459]
[114.82844543 117.87132263]
[120.14752197 131.89656067]
[125.46659088 145.92181396]
[130.78565979 159.94705200]
[139.36402893 159.28373718]
[147.89035034 160.37161255]
[156.01118469 163.16209412]
[163.39062500 167.53610229]
[169.72418213 173.30911255]
[174.75131226 180.23899841]
[178.26618958 188.03608704]
[180.12611389 196.37538147]
[180.25724792 204.91000366]
[178.65760803 213.28572083]
[175.39700317 221.15554810]
[170.61395264 228.19419861]
[164.50981140 234.11151123]
[157.34033203 238.66436768]
[149.40493774 241.66673279]
[141.03417969 242.99726868]
[139.22613525 257.88790894]
[137.41807556 272.77853394]
[135.61003113 287.66915894]
[133.80198669 302.55978394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[18 52]
[19 51]
[20 50]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
