%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACACCUAAAUCGGCGUUUUAGUGCGACAAAGUUAACUUAUUUCCGUGGCGACCCUAAGCUUGGGUCCUAGAGGACAAAUGAUCUGUCCGCGAAAUUGGUUGAUUCGGUGCCGCGGCUUCGACG\
) } def
/len { sequence length } bind def

/coor [
[-14.80700874 495.58502197]
[-4.96122456 506.90139771]
[-3.45923924 521.82604980]
[-10.85270405 534.87731934]
[-24.42613792 541.26184082]
[-39.19427109 538.63464355]
[-49.73304749 527.96063232]
[-52.17176437 513.16015625]
[-60.80888367 525.42395020]
[-57.86035156 540.95074463]
[-66.82347107 553.96759033]
[-82.38057709 556.75183105]
[-95.30192566 547.65155029]
[-97.92150116 532.06585693]
[-88.68515778 519.24145508]
[-73.07265472 516.78680420]
[-64.43553162 504.52304077]
[-57.04206085 491.47174072]
[-50.96344376 477.75860596]
[-44.88482285 464.04544067]
[-38.80620193 450.33230591]
[-44.38961029 436.57144165]
[-38.42037201 422.57778931]
[-23.94886589 416.81469727]
[-17.87024498 403.10153198]
[-11.79162598 389.38839722]
[-5.88174486 375.60168457]
[-0.14149348 361.74349976]
[5.59875822 347.88531494]
[10.99718380 333.89041138]
[16.05053139 319.76724243]
[9.46994114 306.45443726]
[14.39356518 292.05953979]
[28.40190315 285.24746704]
[33.45524979 271.12432861]
[38.50859833 257.00115967]
[43.56194687 242.87799072]
[48.61529541 228.75483704]
[53.66864395 214.63166809]
[58.72198868 200.50851440]
[63.77533722 186.38534546]
[60.77801895 171.79544067]
[72.71216583 161.40859985]
[77.76551056 147.28543091]
[82.81886292 133.16227722]
[87.87220764 119.03910828]
[92.92556000 104.91594696]
[85.16768646 102.37339783]
[79.46715546 93.87393188]
[79.41892242 81.26177216]
[77.58276367 66.37458038]
[75.74660492 51.48738861]
[71.55101776 43.25197983]
[74.05269623 36.21287918]
[72.58243561 21.28511047]
[71.11218262 6.35733891]
[69.64192200 -8.57043171]
[68.17166138 -23.49820328]
[55.16373825 -32.17736435]
[50.82759476 -47.20174026]
[57.21062469 -61.47727966]
[71.29895782 -68.26350403]
[86.44051361 -64.35617065]
[95.48591614 -51.60020065]
[94.16419983 -36.01857758]
[83.09943390 -24.96846008]
[84.56969452 -10.04068851]
[86.03994751 4.88708210]
[87.51020813 19.81485367]
[88.98046112 34.74262238]
[90.63379669 49.65122986]
[92.46995544 64.53842163]
[94.30611420 79.42561340]
[107.94363403 85.67205811]
[115.11944580 71.57176208]
[130.00039673 70.93419647]
[142.47244263 62.60064697]
[154.94448853 54.26709366]
[167.41653442 45.93354034]
[179.88858032 37.59998703]
[181.41102600 22.03668976]
[192.61729431 11.13010883]
[208.21612549 10.02999687]
[220.84223938 19.25579453]
[224.53396606 34.45135880]
[217.54817200 48.44181061]
[203.18334961 54.62128830]
[188.22213745 50.07202911]
[175.75009155 58.40558243]
[163.27804565 66.73913574]
[150.80599976 75.07269287]
[138.33395386 83.40624237]
[132.05023193 96.91046906]
[116.27719116 98.14410400]
[107.04871368 109.96929932]
[101.99536896 124.09246063]
[96.94202423 138.21562195]
[91.88867188 152.33877563]
[86.83532715 166.46194458]
[89.47119904 182.06202698]
[77.89849854 191.43870544]
[72.84515381 205.56185913]
[67.79180145 219.68502808]
[62.73845673 233.80818176]
[57.68510818 247.93135071]
[52.63175964 262.05450439]
[47.57841110 276.17767334]
[42.52506638 290.30081177]
[49.03213120 304.45343018]
[43.70612717 318.70431519]
[30.17369270 324.82058716]
[25.12034416 338.94375610]
[25.94778633 345.67596436]
[23.54358482 350.97244263]
[19.45695114 353.62554932]
[13.71669960 367.48376465]
[7.97644806 381.34194946]
[7.56775284 390.57546997]
[1.92152071 395.46701050]
[-4.15709877 409.18017578]
[-10.23571873 422.89331055]
[-4.78741407 437.48623657]
[-11.14734745 451.30673218]
[-25.09305573 456.41091919]
[-31.17167664 470.12408447]
[-37.25029755 483.83721924]
[-43.32891464 497.55035400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 17]
[9 16]
[18 127]
[19 126]
[20 125]
[21 124]
[24 121]
[25 120]
[26 119]
[27 117]
[28 116]
[29 115]
[30 112]
[31 111]
[34 108]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[50 73]
[51 72]
[52 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[74 94]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
