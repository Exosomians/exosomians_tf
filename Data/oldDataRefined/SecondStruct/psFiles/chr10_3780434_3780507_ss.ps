%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGUGUCGAAGUCGGUUCGGGUACCACGACAGUAGUUUCAAUUGCACCUUCUUGCUGGUGCUGAGUCUGGUC\
) } def
/len { sequence length } bind def

/coor [
[42.49373627 157.97323608]
[32.54627609 154.37649536]
[19.55589485 161.87649536]
[6.56551313 169.37649536]
[-6.42486763 176.87649536]
[-10.61915970 191.87800598]
[-23.90009499 199.29902649]
[-38.17590332 195.20796204]
[-51.16628647 202.70796204]
[-64.15666962 210.20796204]
[-71.88318634 224.67285156]
[-88.28009796 224.94342041]
[-96.47967529 210.74134827]
[-88.04688263 196.67649841]
[-71.65666962 197.21757507]
[-58.66628647 189.71757507]
[-45.67590332 182.21757507]
[-42.08096695 167.80883789]
[-29.01371384 160.01771545]
[-13.92486763 163.88610840]
[-0.93448669 156.38610840]
[12.05589390 148.88610840]
[25.04627609 141.38610840]
[33.10438156 124.00703430]
[53.05533218 123.52866364]
[65.37256622 114.96796417]
[77.68980408 106.40725708]
[90.00704193 97.84655762]
[94.46295166 90.82088470]
[103.02416229 89.19800568]
[115.68908691 81.16059875]
[128.35400391 73.12319946]
[114.31887054 67.83028412]
[106.66761017 54.92841339]
[108.75487518 40.07434464]
[119.66552734 29.78076744]
[134.61582947 28.56084061]
[147.05091858 36.94943619]
[151.51869202 51.26861954]
[146.06079102 65.23963165]
[160.50822449 61.20582962]
[174.95567322 57.17203522]
[179.00770569 52.98009872]
[183.82032776 51.16957092]
[188.26628113 51.59828568]
[191.47042847 53.66171265]
[206.30952454 51.47046661]
[221.14860535 49.27922058]
[235.98768616 47.08797455]
[250.82676697 44.89673233]
[257.89614868 31.08357048]
[271.74978638 24.09381294]
[287.06063843 26.61516190]
[297.94140625 37.67810440]
[300.20819092 53.02872086]
[292.98934937 66.76437378]
[279.06072998 73.60343933]
[263.77813721 70.91614532]
[253.01802063 59.73581696]
[238.17893982 61.92705917]
[223.33984375 64.11830902]
[208.50076294 66.30955505]
[193.66168213 68.50080109]
[178.98945618 71.61947632]
[164.54202271 75.65326691]
[150.09458923 79.68706512]
[136.39140320 85.78811646]
[123.72648621 93.82551575]
[111.06156921 101.86292267]
[98.56774902 110.16379547]
[86.25051117 118.72449493]
[73.93327332 127.28520203]
[61.61603546 135.84590149]
[60.23526764 147.00845337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[8 17]
[9 16]
[10 15]
[25 73]
[26 72]
[27 71]
[28 70]
[30 69]
[31 68]
[32 67]
[40 66]
[41 65]
[42 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
