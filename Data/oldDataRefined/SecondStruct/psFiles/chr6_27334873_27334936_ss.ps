%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCUAUUGAGAAGUGGAUCGGGAGACAAGAGUUUAGAAACGAUGACCGAUUCCAGUUUGAG\
) } def
/len { sequence length } bind def

/coor [
[95.01547241 208.02474976]
[82.61551666 216.74349976]
[67.98056030 220.69242859]
[52.87786102 219.39465332]
[39.13113403 213.00691223]
[28.40036774 202.30053711]
[21.98135376 188.56837463]
[20.64921761 173.46867371]
[24.56482506 158.82476807]
[33.25534439 146.40499878]
[45.67135239 137.70910645]
[60.31355667 133.78715515]
[75.41384125 135.11276245]
[81.73485565 121.50965118]
[88.05587769 107.90653229]
[87.00997925 93.96387482]
[98.34101105 85.77245331]
[104.66202545 72.16933441]
[110.98304749 58.56621933]
[117.30406189 44.96310425]
[123.29453278 31.21122169]
[128.95095825 17.31860161]
[134.60737610 3.42598248]
[140.26379395 -10.46663761]
[128.06269836 -19.32082558]
[118.33562469 -30.83809471]
[111.64809418 -44.34884644]
[108.38891602 -59.06758118]
[108.74756622 -74.13857269]
[112.70320129 -88.68561554]
[120.02584076 -101.86296082]
[130.28976440 -112.90449524]
[142.89822388 -121.16827393]
[157.11819458 -126.17385864]
[172.12294006 -127.63023376]
[187.04010010 -125.45272064]
[201.00242615 -119.76791382]
[213.19815063 -110.90633392]
[222.91824341 -99.38317108]
[229.59757996 -85.86836243]
[232.84783936 -71.14765930]
[232.48004150 -56.07688522]
[228.51559448 -41.53224564]
[221.18496704 -28.35934258]
[210.91435242 -17.32403374]
[198.30088806 -9.06789684]
[184.07788086 -4.07093191]
[169.07226562 -2.62365723]
[154.15641785 -4.81021452]
[148.50000000 9.08240509]
[142.84356689 22.97502518]
[137.18714905 36.86764526]
[137.59909058 44.52623749]
[130.90718079 51.28412247]
[124.58615875 64.88723755]
[118.26514435 78.49034882]
[111.94412231 92.09346771]
[112.99002075 106.03612518]
[101.65898895 114.22754669]
[95.33797455 127.83066559]
[89.01695251 141.43377686]
[99.76743317 152.12036133]
[106.21174622 165.84066772]
[107.57170105 180.93789673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 61]
[14 60]
[15 59]
[17 57]
[18 56]
[19 55]
[20 54]
[21 52]
[22 51]
[23 50]
[24 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
