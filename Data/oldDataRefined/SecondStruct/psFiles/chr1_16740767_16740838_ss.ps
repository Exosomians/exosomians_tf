%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCGGACCCCUUAUUCUUCAUUGUACACCGGACGUGCGGUAUCCUCUUUUUCGCUCGUAGUCGGCAUAGC\
) } def
/len { sequence length } bind def

/coor [
[72.96006775 146.15725708]
[74.80813599 131.27153015]
[81.46332550 117.82875061]
[92.18119049 107.33346558]
[77.18466187 107.01072693]
[62.18813324 106.68798065]
[47.19160461 106.36524200]
[42.98399353 120.85518646]
[35.16865158 133.76188660]
[24.27843666 144.20533752]
[11.05586720 151.47348022]
[-3.59752250 155.07078552]
[-18.68264008 154.75196838]
[-33.17095566 150.53875732]
[-46.07463455 142.71842957]
[-56.51388168 131.82418823]
[-63.77692795 118.59881592]
[-67.36856842 103.94403839]
[-67.04392242 88.85904694]
[-62.82512665 74.37235260]
[-54.99981689 61.47169876]
[-44.10154343 51.03665924]
[-30.87336540 43.77872086]
[-16.21720123 40.19273376]
[-1.13233495 40.52320480]
[13.35272408 44.74759674]
[26.25035858 52.57788467]
[36.68118668 63.48019028]
[43.93402100 76.71116638]
[47.51434708 91.36871338]
[62.51087570 91.69145966]
[77.50740051 92.01419830]
[92.50392914 92.33693695]
[106.72935486 87.57907104]
[118.51409912 78.29899597]
[130.29884338 69.01892853]
[136.35411072 54.40234756]
[151.14013672 52.60715866]
[162.92488098 43.32708740]
[174.70962524 34.04701614]
[186.49436951 24.76694489]
[183.63542175 9.73082066]
[188.10267639 -4.90824413]
[198.86959839 -15.78630066]
[213.46202087 -20.40365219]
[228.52670288 -17.69926262]
[240.60191345 -8.29458332]
[246.91284180 5.64926004]
[246.00927734 20.92807388]
[238.09887695 34.03089905]
[224.99937439 41.94680405]
[209.72093201 42.85676956]
[195.77444458 36.55169296]
[183.98970032 45.83176422]
[172.20495605 55.11183548]
[160.42019653 64.39190674]
[155.20787048 78.34471130]
[139.57891846 80.80367279]
[127.79417419 90.08374786]
[116.00942230 99.36381531]
[130.88407898 101.29887390]
[144.28773499 108.03253174]
[154.71972656 118.81091309]
[161.01213074 132.42729187]
[162.46044922 147.35720825]
[158.90254211 161.92913818]
[150.73675537 174.51165771]
[138.87727356 183.69604492]
[124.65189362 188.45404053]
[109.65324402 188.25294495]
[95.56053925 183.11528015]
[83.95156097 173.61625671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[7 30]
[34 60]
[35 59]
[36 58]
[38 56]
[39 55]
[40 54]
[41 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
