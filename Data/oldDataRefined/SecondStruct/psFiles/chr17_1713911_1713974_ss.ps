%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGUCAAGAAGUUGACCGUCGAAAUCGACCCAGUCCUGUAUUUCGAACGGUGACUUCUUGAU\
) } def
/len { sequence length } bind def

/coor [
[60.28126144 358.82867432]
[44.77725601 362.95242310]
[31.97288322 353.28662109]
[31.69056320 337.24606323]
[44.14686584 327.13565063]
[47.02876663 312.41510010]
[49.91066742 297.69454956]
[52.79256821 282.97399902]
[55.67446899 268.25344849]
[58.55636978 253.53289795]
[61.43827057 238.81234741]
[64.32017517 224.09179688]
[67.20207214 209.37124634]
[70.08397675 194.65069580]
[72.96587372 179.93014526]
[71.09018707 172.49337769]
[76.35906219 164.57569885]
[79.94879913 150.01156616]
[83.53853607 135.44743347]
[87.12826538 120.88330841]
[90.71800232 106.31918335]
[93.95476532 91.67256927]
[96.83666992 76.95201111]
[99.71856689 62.23146057]
[102.60047150 47.51091003]
[105.48236847 32.79035950]
[108.36427307 18.06980705]
[110.88962555 3.28391552]
[112.33733368 -11.64605904]
[113.06203461 -26.62854195]
[113.78673553 -41.61102676]
[108.51269531 -57.72378159]
[122.53575897 -67.25215912]
[135.57374573 -56.41484070]
[128.76922607 -40.88632584]
[128.04452515 -25.90384102]
[127.31981659 -10.92135811]
[130.07182312 -6.60813332]
[129.87277222 -0.45742774]
[125.73222351 5.45125151]
[127.96501160 12.78871632]
[123.08482361 20.95170784]
[120.20291901 35.67226028]
[117.32102203 50.39281082]
[114.43911743 65.11336517]
[111.55722046 79.83391571]
[108.67531586 94.55446625]
[110.37430573 102.76258850]
[105.28212738 109.90892029]
[101.69239807 124.47304535]
[98.10266113 139.03717041]
[94.51292419 153.60130310]
[90.92318726 168.16542053]
[87.68642426 182.81204224]
[84.80452728 197.53259277]
[81.92262268 212.25314331]
[79.04072571 226.97369385]
[76.15882111 241.69424438]
[73.27692413 256.41479492]
[70.39501953 271.13534546]
[67.51312256 285.85589600]
[64.63121796 300.57644653]
[61.74932098 315.29699707]
[58.86742020 330.01754761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 40]
[29 37]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
