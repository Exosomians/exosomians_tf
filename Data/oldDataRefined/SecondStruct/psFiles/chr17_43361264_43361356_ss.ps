%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGAGGGCGAAGCUUUUGAUGUGGAGCCUUAGGAAGGUCGCUAGUUCCCGGUCGUUGUGGUGUUCGGAAGGUGACAUAGUUGUGGCAAAAG\
) } def
/len { sequence length } bind def

/coor [
[190.85012817 211.62924194]
[180.78836060 200.50445557]
[170.72659302 189.37968445]
[160.66482544 178.25489807]
[150.60304260 167.13011169]
[140.54127502 156.00534058]
[130.47950745 144.88055420]
[116.20385742 140.63140869]
[112.68530273 125.20642090]
[102.62352753 114.08163452]
[89.37661743 109.60828400]
[86.25168610 95.98013306]
[74.90481567 99.24203491]
[63.22279358 97.93975830]
[52.96402359 92.30922699]
[45.65747833 83.23483276]
[42.37482834 72.11076355]
[43.57340240 60.62686539]
[49.03290176 50.51194000]
[40.13520432 38.43589020]
[31.23750877 26.35984039]
[22.33981323 14.28378963]
[6.96499062 11.78327274]
[-1.88651073 -0.59031147]
[0.59210002 -15.23244476]
[-8.30559635 -27.30849648]
[-17.20329285 -39.38454819]
[-26.10098839 -51.46059799]
[-34.99868393 -63.53664780]
[-41.18909073 -66.67945862]
[-44.25013351 -71.77127075]
[-44.05522537 -76.72973633]
[-52.12646103 -89.37311554]
[-60.19769669 -102.01650238]
[-75.69421387 -102.81495667]
[-87.74064636 -112.59571075]
[-91.70489502 -127.59785461]
[-86.06262207 -142.05276489]
[-72.98339844 -150.40223694]
[-57.49645233 -149.43571472]
[-45.55683136 -139.52485657]
[-41.75556183 -124.48058319]
[-47.55430984 -110.08773804]
[-39.48307419 -97.44435120]
[-31.41184044 -84.80096436]
[-22.92263412 -72.43434143]
[-14.02493763 -60.35829544]
[-5.12724161 -48.28224182]
[3.77045465 -36.20619202]
[12.66815090 -24.13014221]
[27.38724136 -22.15936279]
[36.58279800 -10.03927994]
[34.41586304 5.38609314]
[43.31356049 17.46214485]
[52.21125793 29.53819466]
[61.10895157 41.61424637]
[79.53831482 40.26188278]
[95.31079865 50.16747284]
[102.20359039 67.62731171]
[97.37647247 85.91836548]
[110.62338257 90.39171600]
[113.74831390 104.01986694]
[123.81008148 115.14464569]
[138.80541992 120.18951416]
[141.60429382 134.81878662]
[151.66606140 145.94355774]
[161.72782898 157.06834412]
[171.78959656 168.19313049]
[181.85136414 179.31790161]
[191.91314697 190.44268799]
[201.97491455 201.56747437]
[224.63832092 206.18138123]
[230.01185608 227.95144653]
[241.78384399 237.24769592]
[257.40939331 239.72811890]
[262.60256958 253.68806458]
[274.37454224 262.98431396]
[286.14654541 272.28057861]
[302.44326782 274.11056519]
[308.75793457 289.24520874]
[298.59457397 302.11523438]
[282.40835571 299.48110962]
[276.85028076 284.05255127]
[265.07830811 274.75631714]
[253.30632019 265.46005249]
[238.52276611 263.64456177]
[232.48759460 249.01968384]
[220.71560669 239.72343445]
[213.60220337 242.48301697]
[205.90296936 242.48336792]
[198.66006470 239.67434692]
[192.87199402 234.38946533]
[189.35595703 227.30703735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[9 63]
[10 62]
[12 60]
[19 56]
[20 55]
[21 54]
[22 53]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[32 45]
[33 44]
[34 43]
[73 88]
[74 87]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
