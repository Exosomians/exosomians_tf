%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUUAGGAAAAAAGGCUGGGUACACCUGGUCCGACCGGAGCUUGAGCACGGGACCUUGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[72.29354095 115.97861481]
[61.20840836 126.08405304]
[50.12327576 136.18948364]
[39.03814316 146.29492188]
[27.95300865 156.40036011]
[16.86787415 166.50579834]
[5.78274107 176.61122131]
[-1.84912610 191.75027466]
[-18.50925064 188.60757446]
[-20.10134697 171.72854614]
[-4.32269335 165.52609253]
[6.76244020 155.42065430]
[17.84757423 145.31521606]
[28.93270874 135.20979309]
[40.01784134 125.10435486]
[51.10297394 114.99891663]
[62.18811035 104.89348602]
[63.22677612 89.92948914]
[53.64407349 78.38948059]
[44.06137085 66.84947205]
[34.47866821 55.30945969]
[24.89596748 43.76945114]
[15.31326485 32.22944260]
[5.73056221 20.68943214]
[-9.82989502 15.51215553]
[-12.86096764 -0.60443980]
[-0.24454595 -11.08098316]
[15.04067516 -5.14010429]
[17.27057266 11.10672951]
[26.85327339 22.64673805]
[36.43597794 34.18674850]
[46.01867676 45.72675705]
[55.60137939 57.26676941]
[65.18408203 68.80677795]
[74.76678467 80.34678650]
[89.52303314 71.22686768]
[106.11859131 71.38824463]
[119.43051147 79.98382568]
[125.77069855 93.68344116]
[140.75469971 94.37619019]
[154.89747620 87.28448486]
[167.25382996 95.60131836]
[182.23782349 96.29407501]
[197.22181702 96.98682404]
[212.22181702 96.98682404]
[227.20581055 96.29407501]
[242.18980408 95.60131836]
[257.17379761 94.90856934]
[270.68261719 85.61106110]
[285.37057495 92.90463257]
[286.12796021 109.28628540]
[272.17562866 117.90397644]
[257.86654663 109.89256287]
[242.88256836 110.58531952]
[227.89857483 111.27806854]
[212.91458130 111.97081757]
[208.89398193 115.09888458]
[202.78321838 115.48888397]
[196.52906799 111.97081757]
[181.54507446 111.27806854]
[166.56108093 110.58531952]
[153.49005127 117.72657013]
[140.06193542 109.36018372]
[125.07794952 108.66743469]
[119.44451904 119.62071991]
[109.13439941 127.22196960]
[96.03612518 129.53892517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[39 64]
[40 63]
[42 61]
[43 60]
[44 59]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
