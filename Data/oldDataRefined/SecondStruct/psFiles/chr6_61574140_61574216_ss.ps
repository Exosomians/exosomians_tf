%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUUUCCAAUUUUUUUCAUUUUCCUUGAGCCGUUUAGAAUGGGGCGGACAAAUGGUUUUUGUAGUGGAGAUCGU\
) } def
/len { sequence length } bind def

/coor [
[90.38137054 409.31158447]
[77.40876770 401.08920288]
[70.29956818 387.47470093]
[70.96611023 372.13027954]
[79.22909546 359.18350220]
[92.86582184 352.11703491]
[93.46981049 337.12918091]
[94.07379913 322.14135742]
[94.67778778 307.15353394]
[95.28177643 292.16567993]
[95.88576508 277.17785645]
[80.74633026 271.37277222]
[68.42404938 260.79547119]
[60.36710739 246.66676331]
[57.52988052 230.62606812]
[60.25994110 214.54125977]
[68.25557709 200.29116821]
[80.59901428 189.54606628]
[95.86174774 183.57189941]
[95.25775909 168.58407593]
[94.65377045 153.59623718]
[94.04977417 138.60839844]
[93.44578552 123.62056732]
[92.84179688 108.63272858]
[91.93611908 93.66009521]
[90.72912598 78.70874023]
[89.52212524 63.75737762]
[86.48510742 59.77888489]
[85.20605469 55.45790863]
[85.54998016 51.45716858]
[87.15859985 48.30812454]
[89.52212524 46.34337997]
[90.72912598 31.39201927]
[91.93611908 16.44066048]
[85.33436584 2.06264400]
[94.07069397 -10.00076294]
[82.81294250 -20.85420036]
[81.21688080 -36.41011810]
[90.03611755 -49.32349014]
[105.10647583 -53.49701309]
[119.31219482 -46.96007919]
[125.94577026 -32.79922867]
[121.87503052 -17.70078278]
[109.02205658 -8.79376507]
[115.71014404 4.51483059]
[106.88748169 17.64765930]
[105.68048096 32.59901810]
[104.47348785 47.55037689]
[104.47348785 62.55037689]
[105.68048096 77.50173950]
[106.88748169 92.45309448]
[110.71440125 99.82266998]
[107.82963562 108.02873993]
[108.43362427 123.01657867]
[109.03761292 138.00440979]
[109.64160156 152.99224854]
[110.24559021 167.98008728]
[110.84957886 182.96791077]
[124.26355743 186.62318420]
[136.05282593 193.96041870]
[145.23348999 204.35577393]
[151.04270935 216.93066406]
[153.00199890 230.62606812]
[150.95668030 244.29161072]
[145.08799744 256.78231812]
[135.89717102 267.05447388]
[124.16251373 274.25283813]
[110.87360382 277.78182983]
[110.26961517 292.76968384]
[109.66562653 307.75750732]
[109.06163788 322.74533081]
[108.45764923 337.73318481]
[107.85365295 352.72100830]
[120.87754822 360.86187744]
[128.07196045 374.43154907]
[127.50162506 389.77987671]
[119.31996155 402.77816772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 51]
[26 50]
[27 49]
[32 48]
[33 47]
[34 46]
[36 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
