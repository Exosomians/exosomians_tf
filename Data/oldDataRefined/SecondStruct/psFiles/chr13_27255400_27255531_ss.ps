%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGGGGGAAAAGUGAAACGGUCAACCUGAAUACAGAAAUAACCAGUAAGUUCACCCCGUUUCCUUUAUAGGAAAAUUUUGAGUCCGUUUGACCCACAAACAGACAUAGGACAGUCUCCUUUGUUUAACUUU\
) } def
/len { sequence length } bind def

/coor [
[71.43147278 113.98966980]
[84.68594360 106.96824646]
[69.77059937 108.55966187]
[54.85525894 110.15107727]
[39.93991852 111.74250031]
[25.02457619 113.33391571]
[10.10923576 114.92533112]
[-4.78627014 116.69278717]
[-19.65986252 118.63604736]
[-34.53345490 120.57929993]
[-36.91832352 133.25329590]
[-42.79145050 144.71452332]
[-51.66145706 154.02647400]
[-62.79256439 160.43151855]
[-75.26561737 163.41258240]
[-88.05399323 162.73477173]
[-100.10807037 158.46398926]
[-110.44143677 150.96054077]
[-118.21154022 140.84889221]
[-122.78842163 128.96557617]
[-137.76228333 129.85086060]
[-152.73612976 130.73612976]
[-159.95755005 145.55996704]
[-173.57571411 154.69036865]
[-189.84471130 155.72914124]
[-204.34606934 148.48841858]
[-213.18873596 135.01620483]
[-228.13751221 136.25489807]
[-243.08627319 137.49359131]
[-256.24707031 147.27752686]
[-271.19122314 140.52439880]
[-272.54544067 124.18126678]
[-258.91665649 115.06053162]
[-244.32496643 122.54482269]
[-229.37619019 121.30612946]
[-214.42742920 120.06744385]
[-209.39842224 107.31530762]
[-199.30332947 97.94404602]
[-186.08621216 93.83656311]
[-172.32638550 95.85449982]
[-160.73510742 103.65818787]
[-153.62139893 115.76227570]
[-138.64755249 114.87699890]
[-123.67369843 113.99172974]
[-118.56264496 97.51628113]
[-107.54220581 84.20023346]
[-92.25151825 76.06582642]
[-74.98079681 74.36146545]
[-58.32829285 79.37023926]
[-44.80939865 90.36328125]
[-36.47671127 105.70570374]
[-21.60311699 103.76245117]
[-6.72952509 101.81919861]
[-0.44473317 97.79496765]
[8.51781940 100.00998688]
[23.43316078 98.41857147]
[38.34849930 96.82715607]
[53.26384354 95.23574066]
[68.17918396 93.64432526]
[83.09452057 92.05290985]
[93.38337708 81.13780212]
[94.09174347 66.15453339]
[94.80010986 51.17127228]
[95.50847626 36.18800735]
[96.21684265 21.20474243]
[88.22034454 6.88733482]
[96.85256958 -7.05600452]
[113.23342133 -6.28156424]
[120.51168823 8.41397762]
[111.20010376 21.91310883]
[110.49173737 36.89637375]
[109.78337097 51.87963867]
[109.07500458 66.86289978]
[108.36663818 81.84616852]
[114.23037720 86.52233887]
[122.03538513 73.71289825]
[129.84039307 60.90345383]
[137.64540100 48.09401321]
[143.91410828 34.46670914]
[158.50799561 30.99995613]
[170.23547363 40.35229874]
[170.10308838 55.35171509]
[158.21235657 64.49561310]
[147.46086121 74.95530701]
[136.70935059 85.41499329]
[125.95784760 95.87468719]
[131.82157898 100.55085754]
[146.27156067 96.52616119]
[160.72154236 92.50146484]
[175.17150879 88.47676849]
[189.62149048 84.45207214]
[198.72640991 71.24298859]
[214.73989868 70.26954651]
[225.37779236 82.27848816]
[222.47959900 98.05759430]
[208.26856995 105.50247192]
[193.64617920 98.90205383]
[179.19621277 102.92675018]
[164.74623108 106.95144653]
[150.29624939 110.97614288]
[135.84628296 115.00083923]
[132.85479736 129.69950867]
[144.58227539 139.05186462]
[156.30973816 148.40420532]
[168.03721619 157.75654602]
[179.76467896 167.10890198]
[195.37821960 169.66389465]
[200.50466919 183.64848328]
[212.23214722 193.00083923]
[223.95962524 202.35317993]
[235.68708801 211.70553589]
[251.72610474 211.34533691]
[261.89685059 223.75241089]
[258.39721680 239.40910339]
[243.91180420 246.30494690]
[229.55259705 239.15002441]
[226.33474731 223.43299866]
[214.60726929 214.08065796]
[202.87980652 204.72830200]
[191.15232849 195.37596130]
[176.37762451 193.48989868]
[170.41233826 178.83636475]
[158.68486023 169.48402405]
[146.95739746 160.13168335]
[135.22991943 150.77932739]
[123.50244904 141.42698669]
[118.10111237 155.42074585]
[106.82722473 165.31517029]
[92.25080109 168.85466003]
[77.69474030 165.23236084]
[66.47727203 155.27403259]
[61.15556717 141.24978638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[6 56]
[7 55]
[8 53]
[9 52]
[10 51]
[20 44]
[21 43]
[22 42]
[27 36]
[28 35]
[29 34]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
