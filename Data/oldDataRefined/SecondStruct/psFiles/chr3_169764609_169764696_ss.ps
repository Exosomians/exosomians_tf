%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUACACACUCGGCUCAGGACCCACGUGCAGGGUGUCGAGUCCCUUAGCGCGGCGCGCGCCCCUGAGCGAGGCAAGGAGAAGGACGC\
) } def
/len { sequence length } bind def

/coor [
[108.21911621 354.57803345]
[98.56355286 343.01440430]
[91.72368622 329.59188843]
[88.04260254 314.98376465]
[87.70495605 299.92276001]
[90.72766876 285.16433716]
[96.95912170 271.44876099]
[106.08676147 259.46401978]
[117.65274048 249.81126404]
[131.07691956 242.97465515]
[127.40814209 228.43023682]
[123.73937225 213.88581848]
[120.07059479 199.34140015]
[115.27537537 193.49676514]
[116.53866577 184.21891785]
[113.38546753 169.55407715]
[110.23227692 154.88925171]
[107.07908630 140.22441101]
[103.92588806 125.55957794]
[100.77269745 110.89474487]
[96.49420929 112.32925415]
[91.39243317 111.93348694]
[86.27339172 109.35224915]
[82.07074738 104.58267975]
[79.69555664 98.01197052]
[79.87834167 90.39304352]
[83.02812195 82.75843811]
[77.84258270 68.68328094]
[72.65703583 54.60811996]
[67.47148895 40.53295898]
[61.79243851 26.64957428]
[55.62696457 12.97525787]
[49.46148682 -0.69905752]
[43.29600906 -14.37337303]
[28.07619858 -17.39611244]
[17.56457329 -28.81037331]
[15.80307007 -44.22714233]
[23.46902275 -57.71835327]
[37.61471558 -64.09636688]
[52.80083847 -60.90869522]
[63.18802261 -49.38107681]
[64.78218079 -33.94610596]
[56.97032547 -20.53884888]
[63.13580322 -6.86453342]
[69.30127716 6.80978203]
[75.46675110 20.48409843]
[79.74284363 23.03952789]
[82.33366394 28.41542053]
[81.54664612 35.34741211]
[86.73219299 49.42257309]
[91.91773987 63.49773407]
[97.10328674 77.57289124]
[111.50916290 81.75267029]
[123.42288208 72.63876343]
[135.33659363 63.52485657]
[141.13154602 48.18371201]
[157.35638428 45.79907990]
[167.32040405 58.82406616]
[160.77346802 73.85968018]
[144.45051575 75.43857574]
[132.53678894 84.55248260]
[120.62307739 93.66638947]
[115.43753052 107.74155426]
[118.59072113 122.40638733]
[121.74391937 137.07121277]
[124.89710999 151.73605347]
[128.05030823 166.40089417]
[131.20350647 181.06571960]
[134.61502075 195.67262268]
[138.28378296 210.21704102]
[141.95256042 224.76145935]
[145.62133789 239.30587769]
[160.68208313 238.95727539]
[175.44270325 241.96926880]
[189.16278076 248.19075012]
[201.15415955 257.30966187]
[210.81532288 268.86862183]
[217.66169739 282.28784180]
[221.34985352 296.89416504]
[221.69480896 311.95501709]
[218.67924500 326.71490479]
[212.45443726 340.43347168]
[203.33259583 352.42263794]
[191.77130127 362.08099365]
[178.35044861 368.92413330]
[163.74320984 372.60873413]
[148.68229675 372.95004272]
[133.92314148 369.93090820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 72]
[11 71]
[12 70]
[13 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[27 52]
[28 51]
[29 50]
[30 49]
[31 46]
[32 45]
[33 44]
[34 43]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
