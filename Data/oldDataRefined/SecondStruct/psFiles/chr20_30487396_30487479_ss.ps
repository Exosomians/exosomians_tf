%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAUUUCACCUGAGUAAGGUUAAUGUCCCGGAGCUUUCUCAGGACAUAACAAUAAAAAGCAGUGAUGGAGGGGCACAGUCCU\
) } def
/len { sequence length } bind def

/coor [
[139.86001587 258.61843872]
[129.56349182 253.22174072]
[121.46633148 244.84259033]
[116.40161133 234.31854248]
[114.89810944 222.70904541]
[117.12514496 211.18875122]
[122.87370300 200.92871094]
[131.57592773 192.97735596]
[126.15729523 178.99026489]
[120.73867035 165.00318909]
[115.32004547 151.01609802]
[109.38828278 137.23880005]
[102.95146942 123.69009399]
[88.51969910 120.93165588]
[78.43656158 110.24449921]
[76.52146149 95.67681885]
[83.49982452 82.74671936]
[77.06301117 69.19800568]
[62.44508362 63.81712341]
[56.11025238 49.98511124]
[61.33018875 36.08230972]
[54.89337921 22.53360367]
[48.45657349 8.98489571]
[42.01976395 -4.56381273]
[35.35224152 -11.16450977]
[35.60581970 -18.73419380]
[29.67405319 -32.51149750]
[23.74228477 -46.28880310]
[17.81051636 -60.06610870]
[11.87874889 -73.84341431]
[0.07761972 -79.42678070]
[-4.51255131 -91.21588898]
[0.10250241 -102.56020355]
[-5.31612253 -116.54728699]
[-10.73474789 -130.53437805]
[-23.84326744 -140.38824463]
[-21.59549522 -156.63261414]
[-6.30374527 -162.55667114]
[6.30114031 -152.06625366]
[3.25233579 -135.95300293]
[8.67096043 -121.96591187]
[14.08958626 -107.97882843]
[28.31583786 -97.88223267]
[25.65605354 -79.77517700]
[31.58782196 -65.99787903]
[37.51958847 -52.22056961]
[43.45135880 -38.44326782]
[49.38312531 -24.66596222]
[55.56847000 -11.00062180]
[62.00527954 2.54808617]
[68.44208527 16.09679413]
[74.87889862 29.64550209]
[88.95389557 34.38153839]
[95.67474365 48.03015900]
[90.61171722 62.76119995]
[97.04853058 76.30990601]
[111.48030090 79.06834412]
[121.56343842 89.75550079]
[123.47853851 104.32318115]
[116.50017548 117.25328064]
[122.93698883 130.80198669]
[128.46699524 135.10464478]
[130.49494934 140.74215698]
[129.30712891 145.59747314]
[134.72575378 159.58456421]
[140.14437866 173.57164001]
[145.56300354 187.55873108]
[164.35847473 189.44802856]
[179.70619202 200.32618713]
[187.64804077 217.29304504]
[186.18276978 235.89068604]
[175.76959229 251.27476501]
[183.18943787 264.31109619]
[190.60926819 277.34744263]
[198.02911377 290.38375854]
[205.44894409 303.42010498]
[218.53868103 314.19485474]
[211.80859375 329.75579834]
[194.99272156 327.59640503]
[192.41261292 310.83993530]
[184.99278259 297.80361938]
[177.57293701 284.76727295]
[170.15310669 271.73092651]
[162.73326111 258.69461060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 67]
[9 66]
[10 65]
[11 64]
[12 61]
[13 60]
[17 56]
[18 55]
[21 52]
[22 51]
[23 50]
[24 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[33 42]
[34 41]
[35 40]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
