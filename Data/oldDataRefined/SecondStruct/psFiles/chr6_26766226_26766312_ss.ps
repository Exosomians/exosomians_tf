%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAGCAGCGGGAGAAUCGCGUCGCCCGUCGCGCAGUCAGAGUAUUAGACUUCCAGGACUCAAGCUCGGAGUCUCUCCCGUCGAAAA\
) } def
/len { sequence length } bind def

/coor [
[124.35396576 295.78149414]
[110.52878571 289.46224976]
[100.17791748 278.32995605]
[94.87979126 264.08221436]
[95.44232941 248.89169312]
[101.77975464 235.07482910]
[112.92565155 224.73861694]
[127.18035889 219.45924377]
[127.71574402 204.46879578]
[128.25112915 189.47834778]
[128.78651428 174.48791504]
[129.32189941 159.49746704]
[129.85728455 144.50701904]
[130.39266968 129.51658630]
[130.92805481 114.52613831]
[107.65535736 130.28489685]
[83.17526245 122.76239777]
[74.65848541 101.27239990]
[60.12442398 97.56280518]
[45.59036255 93.85321045]
[31.05630302 90.14360809]
[15.77131653 94.22769928]
[5.35287285 83.58319855]
[-10.28100967 88.53433990]
[-22.20156670 77.27234650]
[-18.14595032 61.38260269]
[-2.28623176 57.21110916]
[9.06247044 69.04914093]
[23.30788422 64.69972229]
[34.76589966 75.60955048]
[49.29996109 79.31914520]
[63.83401871 83.02874756]
[78.36808014 86.73834229]
[92.94184875 71.07730103]
[117.62973022 70.72978210]
[116.55964661 55.76799774]
[115.48955536 40.80621719]
[114.41947174 25.84443665]
[100.83021545 18.54130173]
[93.36656952 5.03954029]
[94.41015625 -10.35248566]
[103.62796783 -22.72323799]
[118.07863617 -28.12525177]
[133.15100098 -24.83476639]
[144.03553772 -13.90176296]
[147.25901794 1.18507683]
[141.79284668 15.61159706]
[129.38125610 24.77434731]
[130.45133972 39.73612976]
[131.52142334 54.69791031]
[132.59150696 69.65969086]
[138.25962830 74.57115173]
[144.09886169 60.75436783]
[159.04380798 62.03836441]
[162.44070435 76.64867401]
[149.59588623 84.39405823]
[155.26400757 89.30551910]
[170.22578430 88.23542786]
[185.18756104 87.16533661]
[200.14935303 86.09525299]
[215.11112976 85.02516174]
[224.13542175 72.25425720]
[239.27050781 68.32189178]
[253.37004089 75.08481598]
[259.77667236 89.34977722]
[255.46536255 104.38130188]
[242.47180176 113.08196259]
[226.93115234 111.34357452]
[216.18121338 99.98694611]
[201.21943665 101.05703735]
[186.25765991 102.12712097]
[171.29586792 103.19721222]
[156.33409119 104.26729584]
[145.91848755 115.06152344]
[145.38310242 130.05197144]
[144.84771729 145.04240417]
[144.31233215 160.03285217]
[143.77694702 175.02330017]
[143.24156189 190.01373291]
[142.70617676 205.00418091]
[142.17079163 219.99462891]
[156.01255798 226.27746582]
[166.39268494 237.38249207]
[171.72827148 251.61625671]
[171.20570374 266.80819702]
[164.90464783 280.64169312]
[153.78598022 291.00720215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[18 33]
[19 32]
[20 31]
[21 30]
[23 28]
[35 51]
[36 50]
[37 49]
[38 48]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
