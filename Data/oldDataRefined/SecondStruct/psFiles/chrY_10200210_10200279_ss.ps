%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUUAAUUACACUUAACGUCCUGUGUAACUAGUAGCUGUGAAGCUUGCGUGAACGCCGGGCCCAAGGA\
) } def
/len { sequence length } bind def

/coor [
[18.07689667 333.67379761]
[8.77779007 345.64468384]
[-4.05645275 353.71054077]
[-18.87603378 356.89736938]
[-33.89141464 354.82031250]
[-47.28942108 347.73025513]
[-57.45217133 336.48327637]
[-63.15246964 322.43756104]
[-63.70197296 307.28915405]
[-59.03432846 292.86734009]
[-49.71318054 280.91360474]
[-36.86409378 272.87139893]
[-22.03866577 269.71188354]
[-7.02713585 271.81658936]
[-0.01112146 258.55856323]
[7.00489283 245.30052185]
[1.48976970 233.45072937]
[3.94230247 220.41247559]
[13.67004395 211.10462952]
[27.19290924 209.17370605]
[34.78850555 196.23899841]
[42.38409805 183.30427551]
[49.97969437 170.36955261]
[49.75245285 155.47668457]
[63.41247177 147.49455261]
[71.00806427 134.55982971]
[78.60366058 121.62511444]
[86.19925690 108.69039917]
[83.95861816 97.05764008]
[90.18192291 86.97737122]
[101.58556366 83.76825714]
[98.50089264 68.49990082]
[106.95589447 55.85207748]
[121.53094482 53.00540924]
[129.69125366 40.41933060]
[137.85156250 27.83325005]
[145.73144531 15.06972790]
[153.32702637 2.13500953]
[160.92262268 -10.79970932]
[160.50242615 -27.19347191]
[174.62908936 -35.52230835]
[188.77030945 -27.21822166]
[188.37881470 -10.82374859]
[173.85734558 -3.20411468]
[166.26174927 9.73060417]
[158.66615295 22.66532326]
[157.97457886 30.26911163]
[150.43763733 35.99355698]
[142.27732849 48.57963562]
[134.11703491 61.16571808]
[137.46601868 75.63360596]
[129.36959839 88.51393127]
[114.17163849 91.92855835]
[113.87734985 108.56752777]
[99.13397217 116.28598785]
[91.53838348 129.22070312]
[83.94278717 142.15542603]
[76.34719086 155.09014893]
[76.03114319 170.90820312]
[62.91440964 177.96514893]
[55.31881714 190.89987183]
[47.72322083 203.83457947]
[40.12762833 216.76930237]
[44.88354874 233.44226074]
[36.41473770 248.18791199]
[20.26292992 252.31654358]
[13.24691582 265.57458496]
[6.23090124 278.83261108]
[16.41436195 290.06082153]
[22.14053535 304.09603882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 68]
[15 67]
[16 66]
[20 63]
[21 62]
[22 61]
[23 60]
[25 58]
[26 57]
[27 56]
[28 55]
[31 53]
[34 50]
[35 49]
[36 48]
[37 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
