%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCGGGCAAAGACAUCGCGCUAGCCAAUCGCGGAAGCCGACAAUUUGCUUUCCAACCACCAAGCAAGGGUGGGGCCCUGUCUUC\
) } def
/len { sequence length } bind def

/coor [
[146.41093445 137.92900085]
[133.69978333 129.96490479]
[120.98863983 122.00081635]
[108.27749634 114.03672028]
[91.59873962 113.96299744]
[83.72113800 99.26165009]
[70.73075867 91.76165009]
[57.74037552 84.26165009]
[44.74999619 76.76165009]
[31.75961494 69.26165009]
[18.76923370 61.76165009]
[5.77885199 54.26165009]
[-6.48731184 60.83045959]
[-20.28659058 60.42281342]
[-31.95779991 53.25544357]
[-38.45843124 41.32415009]
[-38.15752792 27.84924507]
[-50.86867142 19.88514900]
[-63.57981873 11.92105484]
[-72.74121857 9.94261456]
[-76.59881592 3.43295956]
[-89.01415253 -4.98484659]
[-101.42948914 -13.40265274]
[-114.37431335 -11.75500202]
[-124.58703613 -19.21180153]
[-126.81187439 -31.24927521]
[-138.91520691 -40.10981750]
[-154.49346924 -37.44648361]
[-167.34376526 -46.64677429]
[-169.84225464 -62.25231934]
[-160.50662231 -75.00463104]
[-144.87553406 -77.33798218]
[-132.22262573 -67.86804199]
[-130.05467224 -52.21315765]
[-117.95133209 -43.35261536]
[-100.52255249 -42.51192856]
[-93.01168060 -25.81798744]
[-80.59634399 -17.40018082]
[-68.18100739 -8.98237514]
[-55.61572266 -0.79008985]
[-42.90457916 7.17400503]
[-30.19343376 15.13809967]
[-15.28783703 8.52023792]
[0.80414641 12.04452324]
[11.79692173 24.53393173]
[13.27885246 41.27126694]
[26.26923370 48.77126694]
[39.25961304 56.27126694]
[52.24999619 63.77126694]
[65.24037933 71.27127075]
[78.23075867 78.77127075]
[91.22113800 86.27127075]
[102.78039551 83.94335175]
[112.88388062 90.02242279]
[116.24159241 101.32557678]
[128.95274353 109.28967285]
[141.66387939 117.25376892]
[154.37503052 125.21785736]
[165.48551941 120.26660919]
[177.47512817 121.39356232]
[187.26895142 128.19010925]
[192.41404724 138.80903625]
[191.69319153 150.46513367]
[203.79653931 159.32566833]
[215.89987183 168.18620300]
[231.31851196 165.97187805]
[243.46679688 175.13014221]
[245.48280334 189.84310913]
[257.58615112 198.70365906]
[269.68948364 207.56419373]
[281.79281616 216.42474365]
[293.89614868 225.28527832]
[310.24816895 229.76277161]
[310.47235107 246.71524048]
[294.24444580 251.62356567]
[285.03561401 237.38861084]
[272.93228149 228.52807617]
[260.82894897 219.66752625]
[248.72560120 210.80699158]
[236.62226868 201.94644165]
[221.98780823 204.47004700]
[209.58708191 195.65661621]
[207.03933716 180.28955078]
[194.93598938 171.42900085]
[182.83265686 162.56846619]
[165.14500427 166.56591797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[17 42]
[18 41]
[19 40]
[21 39]
[22 38]
[23 37]
[26 35]
[27 34]
[63 85]
[64 84]
[65 83]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
