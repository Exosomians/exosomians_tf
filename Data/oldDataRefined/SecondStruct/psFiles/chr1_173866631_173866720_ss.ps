%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGGAGUCAAUUCUAUUACCACCAAUUCUAGGAGUAGUAAGAUCGUGAGUUCUCAUCGUUUAUUUGACAGUAGUAACACCGUGUAGG\
) } def
/len { sequence length } bind def

/coor [
[122.19177246 297.57620239]
[123.96673584 282.03967285]
[135.34863281 271.31649780]
[134.31376648 256.35223389]
[133.27890015 241.38798523]
[132.24403381 226.42372131]
[131.20916748 211.45947266]
[118.64847565 197.99658203]
[123.67435455 179.54791260]
[118.11398315 165.61657715]
[112.55361938 151.68522644]
[106.99325562 137.75389099]
[101.43289185 123.82254791]
[87.59217072 122.06957245]
[76.33341980 112.51349640]
[71.88007355 97.57930756]
[76.52149200 81.84878540]
[63.12131119 75.10823059]
[49.72113037 68.36767578]
[36.32094574 61.62712097]
[22.92076302 54.88656616]
[9.52058029 48.14600754]
[-3.09071827 51.45426178]
[-14.17738438 45.39533615]
[-17.95332146 33.76224518]
[-31.11286163 26.56318092]
[-45.61365509 32.41647339]
[-60.46825790 27.53029060]
[-68.66278076 14.21174049]
[-66.32802582 -1.25056612]
[-54.56638336 -11.55580044]
[-38.93135071 -11.83814526]
[-26.80530548 -1.96428668]
[-23.91379929 13.40364075]
[-10.75425911 20.60270309]
[6.64272499 19.16097641]
[16.26113701 34.74582672]
[29.66131973 41.48638153]
[43.06150436 48.22693634]
[56.46168518 54.96749496]
[69.86186981 61.70804977]
[83.26205444 68.44860840]
[97.69359589 64.35831451]
[105.56416321 51.58904648]
[113.43473053 38.81977844]
[121.30529785 26.05051231]
[121.95967102 10.24284458]
[135.22436523 3.46811223]
[143.09494019 -9.30115414]
[150.96549988 -22.07042122]
[158.83607483 -34.83968735]
[158.76667786 -51.23868942]
[173.06828308 -59.26340485]
[187.02862549 -50.65869904]
[186.28649902 -34.27635193]
[171.60533142 -26.96912003]
[163.73477173 -14.19985390]
[155.86419678 -1.43058717]
[147.99363708 11.33867931]
[147.90222168 26.23300362]
[134.07456970 33.92108154]
[126.20399475 46.69034576]
[118.33342743 59.45961380]
[110.46286011 72.22888184]
[124.12059784 86.30014801]
[125.39761353 104.55378723]
[115.36423492 118.26217651]
[120.92459869 132.19352722]
[126.48496246 146.12486267]
[132.04533386 160.05621338]
[137.60569763 173.98754883]
[152.19273376 181.48435974]
[155.86134338 196.84571838]
[168.49285889 204.93553162]
[184.89060974 205.14920044]
[192.66728210 219.58718872]
[183.82289124 233.39692688]
[167.45579529 232.37213135]
[160.40306091 217.56703186]
[147.77154541 209.47723389]
[146.98434448 209.97093201]
[146.17343140 210.42460632]
[147.20829773 225.38885498]
[148.24316406 240.35311890]
[149.27803040 255.31738281]
[150.31289673 270.28164673]
[163.06253052 279.33596802]
[166.95924377 294.48025513]
[160.16316223 308.56384277]
[145.88314819 314.93685913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[25 35]
[26 34]
[43 64]
[44 63]
[45 62]
[46 61]
[48 59]
[49 58]
[50 57]
[51 56]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
