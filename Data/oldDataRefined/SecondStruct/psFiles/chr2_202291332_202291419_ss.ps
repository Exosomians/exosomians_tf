%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACCGUUACUACUAAAAAUGUGAAUAACAACAAGUGGACUAUUGUAUUUAUACUCCCACAAGUCAGUGAUGGAGUAGACUACGGUA\
) } def
/len { sequence length } bind def

/coor [
[90.39912415 235.76841736]
[77.60565186 224.64350891]
[84.75420380 209.27033997]
[85.81229401 194.30769348]
[86.87037659 179.34506226]
[87.92845917 164.38243103]
[88.98654175 149.41978455]
[90.04463196 134.45715332]
[72.37107849 125.36347198]
[61.60352707 107.61608887]
[61.70374680 85.97521973]
[46.98554611 83.08132935]
[32.26734924 80.18743896]
[17.54914856 77.29354095]
[2.83094954 74.39965057]
[-1.14558733 76.10214996]
[-5.08198166 76.49205017]
[-8.59108257 75.72994232]
[-11.37184525 74.08044434]
[-13.23465919 71.87731934]
[-14.11418438 69.48312378]
[-28.09563446 64.04998016]
[-42.07708359 58.61683655]
[-55.05212402 67.12730408]
[-70.54982758 66.35224915]
[-82.61102295 56.58970261]
[-86.59792328 41.59356308]
[-80.97749329 27.13014984]
[-67.91089630 18.76093864]
[-52.42250443 19.70406532]
[-40.46792984 29.59687614]
[-36.64393997 44.63538742]
[-22.66249084 50.06852722]
[-8.68104076 55.50167084]
[5.72484064 59.68145370]
[20.44304085 62.57534409]
[35.16123962 65.46923828]
[49.87944031 68.36312866]
[64.59764099 71.25701904]
[75.83879089 61.32543182]
[74.78070831 46.36279678]
[65.15641785 33.08480453]
[72.08950043 18.22329712]
[88.44779968 17.06651878]
[97.40329742 30.80446243]
[89.74334717 45.30471039]
[90.80142975 60.26734543]
[100.89490509 60.04598618]
[110.52754974 62.29768372]
[119.11576843 66.78262329]
[126.16510773 73.12900543]
[131.29853821 80.86196899]
[134.27609253 89.43806458]
[149.21772766 88.11607361]
[164.15936279 86.79409027]
[179.10098267 85.47209930]
[194.04261780 84.15011597]
[208.98425293 82.82812500]
[223.86991882 80.97965240]
[238.68107605 78.60698700]
[253.49223328 76.23432922]
[262.55499268 63.28666306]
[278.13302612 60.62193298]
[290.98413086 69.82107544]
[293.48400879 85.42639923]
[284.14953613 98.17954254]
[268.51864624 100.51429749]
[255.86489868 91.04548645]
[241.05374146 93.41815186]
[226.24258423 95.79080963]
[222.65730286 99.24927521]
[216.79078674 100.34317017]
[210.30624390 97.76976013]
[195.36460876 99.09174347]
[180.42297363 100.41373444]
[165.48133850 101.73571777]
[150.53971863 103.05770874]
[135.59808350 104.37969208]
[133.25338745 113.43937683]
[128.64489746 121.58413696]
[122.08631897 128.25950623]
[114.02415466 133.01103210]
[105.00726318 135.51524353]
[103.94918060 150.47787476]
[102.89109802 165.44050598]
[101.83301544 180.40315247]
[100.77492523 195.36578369]
[99.71684265 210.32841492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[21 34]
[22 33]
[23 32]
[40 47]
[41 46]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
