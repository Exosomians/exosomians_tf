%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUACCUCCAUGGUCCCUAACUUGGUCCCUGGAGCAUGUACGCUUCGUACGCGAGAUGGUGACUAGAUGUGGGGGACUGAGA\
) } def
/len { sequence length } bind def

/coor [
[55.70196152 318.17431641]
[44.93076324 329.12313843]
[30.12394714 333.20404053]
[15.26446915 329.31927490]
[4.34945631 318.51379395]
[0.31499186 303.69427490]
[4.24632645 288.84704590]
[15.08595085 277.96594238]
[29.91806030 273.97796631]
[33.71206284 259.46569824]
[37.50606155 244.95344543]
[35.85531235 241.58277893]
[35.90733719 237.19609070]
[38.14287567 232.67907715]
[42.59118652 229.10629272]
[47.94964981 215.09605408]
[53.30811310 201.08581543]
[58.66657639 187.07556152]
[64.02503967 173.06532288]
[69.38350677 159.05508423]
[74.74196625 145.04484558]
[72.06177521 130.39335632]
[84.21839142 120.26778412]
[89.57685089 106.25753784]
[94.42005920 92.06094360]
[98.74154663 77.69693756]
[103.06303406 63.33292770]
[107.38452148 48.96891785]
[111.70600891 34.60490799]
[116.02748871 20.24090004]
[120.08591461 5.80035877]
[123.87991333 -8.71189690]
[113.35066986 -18.11364555]
[107.97314453 -31.09298325]
[108.76047516 -45.05339813]
[115.49874115 -57.22918320]
[126.80081940 -65.23336029]
[140.39157104 -67.52555084]
[136.95814514 -82.96971893]
[148.03410339 -92.92825317]
[152.35559082 -107.29225922]
[156.67707825 -121.65626526]
[160.99855042 -136.02027893]
[165.32003784 -150.38429260]
[169.64152527 -164.74829102]
[168.41479492 -181.65780640]
[184.32386780 -187.51762390]
[194.35876465 -173.85243225]
[184.00553894 -160.42680359]
[179.68405151 -146.06280518]
[175.36256409 -131.69879150]
[171.04107666 -117.33477783]
[166.71958923 -102.97077179]
[162.39810181 -88.60676575]
[166.14064026 -74.19001007]
[154.75556946 -63.20406723]
[166.06382751 -51.81523895]
[170.17486572 -36.20507431]
[165.89399719 -20.54411507]
[154.28157043 -9.06485558]
[138.39216614 -4.91789627]
[134.59817505 9.59435940]
[135.98565674 17.03645325]
[130.39149475 24.56238556]
[126.07001495 38.92639542]
[121.74852753 53.29040527]
[117.42704010 67.65441132]
[113.10555267 82.01842499]
[108.78406525 96.38243103]
[110.24743652 101.68861389]
[108.49398804 107.40929413]
[103.58709717 111.61600494]
[98.22863007 125.62624359]
[100.52554321 141.27983093]
[88.75221252 150.40330505]
[83.39374542 164.41354370]
[78.03528595 178.42378235]
[72.67681885 192.43403625]
[67.31835938 206.44427490]
[61.95989227 220.45451355]
[56.60142899 234.46475220]
[52.01831818 248.74743652]
[48.22431564 263.25970459]
[44.43031693 277.77194214]
[55.41285324 288.50878906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 84]
[10 83]
[11 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[23 73]
[24 72]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 62]
[32 61]
[38 56]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
