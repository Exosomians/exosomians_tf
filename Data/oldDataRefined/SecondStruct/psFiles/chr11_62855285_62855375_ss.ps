%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUCACGAUGAGUCUUAAAAGACAAAAGAGGUGAUUAGGUAGUCUUUCUCUCUCAAGUCAAGCAUUUUAGUAGGGGCAUCGUUGAAGGU\
) } def
/len { sequence length } bind def

/coor [
[98.16539001 407.74795532]
[88.08854675 396.06631470]
[85.94956207 380.78796387]
[92.43098450 366.78814697]
[105.46461487 358.53417969]
[105.46461487 343.53417969]
[105.46461487 328.53417969]
[105.20851898 313.53634644]
[104.69640350 298.54510498]
[104.18428802 283.55383301]
[103.67217255 268.56259155]
[103.16004944 253.57133484]
[92.13314819 243.62432861]
[91.40023804 228.42835999]
[101.90834045 216.92976379]
[101.39622498 201.93850708]
[100.88410950 186.94726562]
[99.86046600 171.98222351]
[98.32650757 157.06086731]
[96.79254150 142.13951111]
[95.25858307 127.21814728]
[93.72461700 112.29679108]
[90.92396545 97.56056213]
[86.87701416 83.11680603]
[82.83006287 68.67304993]
[68.43282318 63.19347000]
[60.11992645 50.43615723]
[60.90371704 35.40785980]
[70.27431488 23.86100578]
[66.22736359 9.41724682]
[62.18041229 -5.02651215]
[58.13346100 -19.47027206]
[54.08650970 -33.91403198]
[48.65013885 -41.52176285]
[50.15700150 -48.92026520]
[46.60553360 -63.49377060]
[42.09773254 -68.79103088]
[41.24139404 -74.68044281]
[43.34530640 -79.18283844]
[40.79664993 -93.96473694]
[38.24799728 -108.74662781]
[27.34446907 -120.99591827]
[32.75705719 -136.47610474]
[48.91775131 -139.26248169]
[59.20181656 -126.48867798]
[53.02988815 -111.29528046]
[55.57854462 -96.51338959]
[58.12720108 -81.73149872]
[61.17903900 -67.04523468]
[64.73050690 -52.47172928]
[68.53026581 -37.96098328]
[72.57722473 -23.51722336]
[76.62417603 -9.07346344]
[80.67112732 5.37029552]
[84.71807861 19.81405449]
[98.72406006 24.81109619]
[107.20220184 37.24431992]
[106.72799683 52.46366501]
[97.27381897 64.62609863]
[101.32077026 79.06985474]
[105.36772156 93.51361084]
[107.77338409 94.86367035]
[109.79312134 97.09558105]
[111.11212921 100.08082581]
[111.46350098 103.58203888]
[110.66456604 107.27174377]
[108.64598083 110.76282501]
[110.17993927 125.68418884]
[111.71390533 140.60554504]
[113.24786377 155.52690125]
[114.78182983 170.44825745]
[118.52633667 176.30999756]
[118.57275391 182.26116943]
[115.87535858 186.43513489]
[116.38747406 201.42639160]
[116.89959717 216.41764832]
[128.16789246 227.17233276]
[128.47369385 242.38288879]
[118.15130615 253.05921936]
[118.66342163 268.05047607]
[119.17554474 283.04171753]
[119.68766022 298.03298950]
[120.19977570 313.02423096]
[123.68033600 321.70278931]
[120.46461487 328.53417969]
[120.46461487 343.53417969]
[120.46461487 358.53417969]
[133.49824524 366.78814697]
[139.97966003 380.78796387]
[137.84068298 396.06631470]
[127.76383972 407.74795532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 87]
[6 86]
[7 85]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[15 76]
[16 75]
[17 74]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[23 61]
[24 60]
[25 59]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[35 50]
[36 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
