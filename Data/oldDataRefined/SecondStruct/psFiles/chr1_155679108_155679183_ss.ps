%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACACCGACCGGUGUAACUCAGGAUGUAUGGAGAGGUCGUGGUGAGUGGGCCUCUUCACCUAUACCUACGGUCG\
) } def
/len { sequence length } bind def

/coor [
[87.02938080 267.05926514]
[78.32653809 279.90606689]
[63.72321701 285.15225220]
[48.83469391 280.78060913]
[39.38590622 268.47204590]
[39.01011276 252.95953369]
[47.85180664 240.20790100]
[62.51118088 235.12043762]
[66.73716736 220.72804260]
[70.96315765 206.33564758]
[75.18914795 191.94325256]
[79.41513062 177.55085754]
[82.75294495 162.92692566]
[85.19008636 148.12625122]
[87.62722778 133.32556152]
[90.06436920 118.52487183]
[92.50151825 103.72418213]
[90.80606842 101.44178009]
[89.87458038 98.47106171]
[89.96414185 95.08652496]
[91.22956848 91.65233612]
[93.69397736 88.58396912]
[97.23368073 86.30068207]
[102.61872101 72.30063629]
[108.00376129 58.30058670]
[106.95280457 53.92873764]
[107.27859497 49.83841705]
[108.73210907 46.41878891]
[110.96566772 43.94131470]
[113.57881165 42.53822327]
[116.16758728 42.19705200]
[124.27719879 29.57824898]
[132.38681030 16.95944786]
[140.49641418 4.34064388]
[148.60603333 -8.27815914]
[156.71565247 -20.89696121]
[164.82525635 -33.51576614]
[172.93487549 -46.13456726]
[181.04447937 -58.75337219]
[189.15409851 -71.37217712]
[182.04501343 -84.98674774]
[182.71170044 -100.33116150]
[190.97480774 -113.27785492]
[204.61160278 -120.34421539]
[219.95384216 -119.62944031]
[232.87457275 -111.32579803]
[239.89814758 -97.66692352]
[239.13528442 -82.32698822]
[230.79118347 -69.43235779]
[217.11036682 -62.45161819]
[201.77290344 -63.26256180]
[193.66328430 -50.64375687]
[185.55366516 -38.02495575]
[177.44406128 -25.40615273]
[169.33444214 -12.78734970]
[161.22483826 -0.16854680]
[153.11521912 12.45025635]
[145.00561523 25.06905937]
[136.89599609 37.68786240]
[128.78639221 50.30666351]
[122.00380707 63.68562698]
[116.61876678 77.68567657]
[111.23372650 91.68572235]
[107.30220032 106.16132355]
[104.86505890 120.96201324]
[102.42791748 135.76269531]
[99.99077606 150.56338501]
[97.55363464 165.36407471]
[99.63448334 170.78302002]
[99.25444794 175.88999939]
[97.01020050 179.73300171]
[93.80752563 181.77684021]
[89.58153534 196.16923523]
[85.35555267 210.56163025]
[81.12956238 224.95402527]
[76.90357208 239.34642029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[23 63]
[24 62]
[25 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
