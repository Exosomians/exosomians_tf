%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUAGUCUUGCACUGUUAGUCGUGUGUCAAAGACAGGCGGGCAGUUAUUCAAGUAGUAGACACCAAAGACGCU\
) } def
/len { sequence length } bind def

/coor [
[157.88233948 260.89169312]
[167.97052002 249.52081299]
[161.38256836 236.04493713]
[154.79463196 222.56907654]
[148.20668030 209.09321594]
[141.61872864 195.61734009]
[129.07783508 187.58148193]
[129.96795654 171.78532410]
[123.10292053 158.44850159]
[115.96370697 145.25639343]
[108.82449341 132.06428528]
[101.68528748 118.87217712]
[83.92718506 110.03314209]
[83.78557587 90.19735718]
[75.06942749 77.98963165]
[66.35327148 65.78189850]
[57.63711929 53.57416534]
[48.92096710 41.36643600]
[43.61111832 38.99021149]
[40.27295303 35.09309769]
[39.15616226 30.77689934]
[39.99364853 27.06512451]
[32.85443497 13.87301731]
[25.71522522 0.68091106]
[18.57601357 -12.51119518]
[5.20310545 -20.96553612]
[5.95034647 -35.84138489]
[-1.18886459 -49.03349304]
[-8.32807541 -62.22559738]
[-15.46728611 -75.41770172]
[-28.32347679 -86.47006989]
[-21.26199341 -101.88343048]
[-4.49617672 -99.36475372]
[-2.27518010 -82.55691528]
[4.86403084 -69.36480713]
[12.00324154 -56.17270279]
[19.14245224 -42.98059845]
[32.00471878 -35.46984482]
[31.76811981 -19.65040588]
[38.90732956 -6.45829964]
[46.04654312 6.73380661]
[53.18575287 19.92591286]
[61.12870026 32.65028381]
[69.84484863 44.85801315]
[78.56100464 57.06574631]
[87.27715302 69.27347565]
[95.99330902 81.48120880]
[105.18619537 81.77631378]
[113.15698242 86.36573792]
[118.02739716 94.16800690]
[118.64974976 103.34455109]
[114.87738800 111.73296356]
[122.01660156 124.92507172]
[129.15580750 138.11717224]
[136.29502869 151.30928040]
[143.33329773 157.58752441]
[143.44383240 165.19738770]
[156.45593262 174.19714355]
[155.09458923 189.02940369]
[161.68254089 202.50526428]
[168.27049255 215.98112488]
[174.85844421 229.45698547]
[181.44638062 242.93286133]
[196.61590576 241.95600891]
[211.00291443 246.86335754]
[222.41352844 256.90658569]
[229.10768127 270.55416870]
[230.06457520 285.72497559]
[225.13830566 300.10552979]
[215.08006287 311.50289917]
[201.42369080 318.17910767]
[186.25164795 319.11605835]
[171.87759399 314.17086792]
[160.49345398 304.09762573]
[153.83522034 290.43249512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[8 57]
[9 55]
[10 54]
[11 53]
[12 52]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[22 42]
[23 41]
[24 40]
[25 39]
[27 37]
[28 36]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
