%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCGGUAGUCAGUACCCACUAUCUAUUCUCAGCAGGAACGUGACUCCACGAGGACAAAGUUUAUUUGUAGUAAACCGAGGUUU\
) } def
/len { sequence length } bind def

/coor [
[92.88869476 239.83151245]
[102.24407959 226.79861450]
[101.14915466 211.83863831]
[100.05422211 196.87864685]
[98.95928955 181.91867065]
[97.86436462 166.95867920]
[96.76943207 151.99870300]
[95.67450714 137.03871155]
[82.17050171 98.93529510]
[68.83036804 92.07666016]
[55.49023819 85.21802521]
[42.15010452 78.35939026]
[28.80997467 71.50075531]
[15.34679985 64.88690948]
[1.76507664 58.52005768]
[-14.01441383 59.66820526]
[-22.25415039 47.26030731]
[-35.83587265 40.89345551]
[-50.54060745 46.03237915]
[-64.22370911 39.38201141]
[-69.03226471 25.33162498]
[-82.61399078 18.96477509]
[-95.16705322 27.81442261]
[-110.46458435 29.18592834]
[-124.39163208 22.71036720]
[-133.20188904 10.12963009]
[-134.52543640 -5.17212820]
[-128.00625610 -19.07880974]
[-115.39796448 -27.84958839]
[-100.09213257 -29.12516785]
[-86.20595551 -22.56242561]
[-77.47473907 -9.92670345]
[-76.24713898 5.38305092]
[-62.66541672 11.74990177]
[-48.78972244 6.45833349]
[-34.92522812 12.72174835]
[-29.46902466 27.31173134]
[-15.88730049 33.67858124]
[-1.07926559 32.07503128]
[8.13192749 44.93833160]
[21.71365166 51.30518341]
[29.28396988 51.29253769]
[35.66860962 58.16062164]
[49.00873947 65.01925659]
[62.34887314 71.87789154]
[75.68900299 78.73652649]
[89.02913666 85.59516144]
[103.60826874 82.06684875]
[112.33615112 69.86750031]
[113.39173889 53.50236130]
[128.21008301 46.47749710]
[141.54734802 56.01948929]
[139.68328857 72.31234741]
[124.53549957 78.59538269]
[115.80760956 90.79473114]
[123.38656616 103.73920441]
[138.29658508 102.09864044]
[153.20658875 100.45806885]
[168.11660767 98.81750488]
[183.02662659 97.17693329]
[194.14343262 85.60991669]
[210.10418701 87.23288727]
[218.66514587 100.80084229]
[213.25907898 115.90561676]
[198.03306580 120.96010590]
[184.66719055 112.08695221]
[169.75717163 113.72751617]
[154.84715271 115.36808777]
[139.93714905 117.00865173]
[125.02713013 118.64922333]
[139.76138306 121.46024323]
[147.62385559 134.23449707]
[143.49565125 148.65524292]
[130.06446838 155.33378601]
[116.07471466 149.92204285]
[110.63449097 135.94378662]
[111.72941589 150.90376282]
[112.82434845 165.86375427]
[113.91928101 180.82373047]
[115.01420593 195.78372192]
[116.10913849 210.74369812]
[117.20406342 225.70368958]
[128.35736084 237.23553467]
[126.15254974 253.12635803]
[112.28098297 261.18609619]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 41]
[15 40]
[17 38]
[18 37]
[21 34]
[22 33]
[48 55]
[49 54]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
