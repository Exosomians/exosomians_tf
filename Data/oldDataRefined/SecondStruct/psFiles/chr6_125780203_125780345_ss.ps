%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAUUUAACGUACUUCCUAUGCUUACAGUUCUUUUUGUUCUGAAGGGACUGGCCCUUAGCUUGGGCCCGGCGCCGCCACUCUCGCGGCUUAGGAUUGGUGAUCUGGUGGUCCCUUGAACGUGUUGCGAAGAAGGAUUUAUA\
) } def
/len { sequence length } bind def

/coor [
[102.51169586 277.35055542]
[97.70104218 291.79968262]
[87.42450714 303.03857422]
[73.46256256 309.12002563]
[58.23419952 308.99035645]
[44.37781906 302.67208862]
[34.29413223 291.25985718]
[29.73019028 276.73089600]
[31.47672653 261.60247803]
[39.23114395 248.49563599]
[51.64994431 239.68125916]
[66.58148956 236.68646240]
[69.82808685 222.04202271]
[73.07467651 207.39758301]
[64.88014221 195.01271057]
[67.96403503 180.11491394]
[81.00999451 171.60369873]
[84.25658417 156.95925903]
[87.50318146 142.31481934]
[90.74977112 127.67038727]
[86.65126801 121.38928223]
[81.94063568 135.63041687]
[67.86949158 140.82684326]
[55.03346634 133.06562805]
[53.09814453 118.19100952]
[63.52083588 107.40362549]
[78.45425415 108.82707977]
[74.35575104 102.54597473]
[59.64397049 99.61962128]
[44.93219376 96.69326782]
[30.22041321 93.76691437]
[15.50863361 90.84055328]
[0.79685467 87.91419983]
[-13.91492462 84.98784637]
[-28.62670326 82.06149292]
[-43.33848190 79.13513947]
[-58.05026245 76.20877838]
[-71.05014801 85.19646454]
[-86.58249664 82.27725220]
[-95.43223572 69.18306732]
[-92.34896851 53.68245316]
[-79.16194916 44.97165298]
[-63.69480133 48.21862411]
[-55.12390900 61.49700165]
[-40.41212845 64.42335510]
[-25.70034981 67.34970856]
[-10.98856926 70.27606964]
[3.72320962 73.20242310]
[18.43498802 76.12877655]
[33.14676666 79.05513000]
[47.85854721 81.98148346]
[62.57032776 84.90784454]
[77.28210449 87.83419800]
[86.28317261 75.83499908]
[79.35694122 62.52983475]
[72.43071747 49.22467422]
[65.50448608 35.91950989]
[50.19943619 32.71178818]
[40.57767487 20.38475609]
[41.18229675 4.75886631]
[51.72782516 -6.78781652]
[67.23497772 -8.80330086]
[80.38175964 -0.33593741]
[84.96064758 14.61624432]
[78.80964661 28.99328041]
[85.73587799 42.29844284]
[92.66210938 55.60360718]
[99.58833313 68.90876770]
[106.97439575 67.60640717]
[121.74651337 65.00168610]
[129.13256836 63.69932175]
[131.09046936 48.82765198]
[133.04835510 33.95597839]
[129.12117004 17.46314430]
[143.88229370 9.12376022]
[155.98205566 20.99944878]
[147.92002869 35.91387177]
[145.96212769 50.78554153]
[144.00424194 65.65721893]
[140.97906494 86.44374847]
[130.49830627 100.72438812]
[116.66214752 106.40464783]
[131.65858459 106.07743073]
[146.65501404 105.75020599]
[161.64697266 105.25941467]
[176.63270569 104.60512543]
[191.61842346 103.95083618]
[206.60414124 103.29654694]
[221.58987427 102.64225769]
[236.57559204 101.98796082]
[240.65870667 87.43510437]
[249.02870178 74.87383270]
[260.85540771 65.52732849]
[274.97283936 60.30105209]
[289.99398804 59.69503403]
[304.44732666 63.75604248]
[316.92080688 72.07425690]
[326.19979858 83.82458496]
[331.38549805 97.84847260]
[346.37121582 97.19418335]
[354.88290405 93.67111206]
[361.69027710 96.69268799]
[376.68670654 96.36546326]
[391.68313599 96.03824615]
[406.67956543 95.71102142]
[420.41104126 86.74563599]
[434.91680908 94.39514160]
[435.27456665 110.79038239]
[421.11627197 119.06534576]
[407.00677490 110.70745087]
[392.01034546 111.03467560]
[377.01391602 111.36189270]
[362.01748657 111.68911743]
[347.02551270 112.17990875]
[332.03979492 112.83419800]
[328.09609985 127.25668335]
[319.87649536 139.77101135]
[308.17547607 149.14471436]
[294.13107300 154.44996643]
[279.11425781 155.15542603]
[264.59506226 151.17945862]
[251.99876404 142.89927673]
[242.56582642 131.11529541]
[237.22988892 116.97368622]
[222.24415588 117.62797546]
[207.25843811 118.28227234]
[192.27272034 118.93656158]
[177.28698730 119.59085083]
[162.30126953 120.24514008]
[155.70610046 123.70547485]
[146.98223877 120.74663544]
[131.98579407 121.07386017]
[116.98937225 121.40107727]
[105.39421082 130.91697693]
[102.14762115 145.56141663]
[98.90102386 160.20585632]
[95.65443420 174.85029602]
[103.88108826 188.07754517]
[100.37996674 202.88282776]
[87.71911621 210.64418030]
[84.47252655 225.28862000]
[81.22592926 239.93305969]
[93.49285126 248.95761108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[17 137]
[18 136]
[19 135]
[20 134]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[54 68]
[55 67]
[56 66]
[57 65]
[71 79]
[72 78]
[73 77]
[82 133]
[83 132]
[84 131]
[85 129]
[86 128]
[87 127]
[88 126]
[89 125]
[90 124]
[99 115]
[100 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
