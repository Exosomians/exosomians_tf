%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAGUUUACCUUAGUAGCAUACCUGAGGUUGCCUUAGUAGUAGCUGACCUUAUCUUAUCUUCGUAGCUUACUUUAGUUUACCUUAAUAGUAG\
) } def
/len { sequence length } bind def

/coor [
[106.12238312 313.85977173]
[105.23776245 298.72726440]
[109.58509827 284.20565796]
[118.63941956 272.04855347]
[131.30737305 263.72396851]
[127.83007050 249.13259888]
[115.04830933 241.57202148]
[111.31397247 226.82382202]
[119.33086395 213.46841431]
[115.85356140 198.87702942]
[102.05435944 193.33447266]
[94.07041168 180.57826233]
[95.14120483 165.38923645]
[105.06516266 153.60699463]
[101.58786011 139.01560974]
[98.11055756 124.42423248]
[94.63325500 109.83285522]
[90.91262054 95.30161285]
[86.94969177 80.83457947]
[81.56165314 73.20254517]
[83.10471344 65.81771088]
[79.62741089 51.22632980]
[76.15010834 36.63494873]
[59.36643600 21.96028709]
[65.26851654 1.22344792]
[59.87739563 -12.77426147]
[54.48627853 -26.77197075]
[49.09516144 -40.76968002]
[43.70404816 -54.76738739]
[38.31293106 -68.76509857]
[23.21953964 -71.24236298]
[11.47020721 -80.87823486]
[6.15685892 -95.00744629]
[8.61273575 -109.80017090]
[18.07949257 -121.30000305]
[12.68837547 -135.29771423]
[7.29725838 -149.29542542]
[1.90614188 -163.29312134]
[-3.48497462 -177.29083252]
[-16.57409668 -187.17045593]
[-14.29439259 -203.41038513]
[1.00897336 -209.30435181]
[13.59321117 -198.78918457]
[10.51273441 -182.68196106]
[15.90385151 -168.68424988]
[21.29496765 -154.68653870]
[26.68608475 -140.68882751]
[32.07720184 -126.69111633]
[46.81215286 -124.51239777]
[58.55628967 -115.18870544]
[64.09329224 -101.14563751]
[61.84297180 -86.11789703]
[52.31063843 -74.15621185]
[57.70175552 -60.15850449]
[63.09287262 -46.16079712]
[68.48398590 -32.16308594]
[73.87510681 -18.16537857]
[79.26622009 -4.16766882]
[87.41619873 -2.47911978]
[94.24135590 2.44935036]
[98.50344849 9.81987190]
[99.39024353 18.38371468]
[96.66916656 26.65266800]
[90.74148560 33.15764618]
[94.21878815 47.74902725]
[97.69609070 62.34040833]
[101.41672516 76.87164307]
[105.37965393 91.33868408]
[110.47317505 97.81307220]
[109.22463226 106.35555267]
[112.70193481 120.94692993]
[116.17923737 135.53831482]
[119.65653992 150.12968445]
[133.82777405 156.16975403]
[141.63388062 169.24331665]
[140.26123047 184.22930908]
[130.44494629 195.39971924]
[133.92224121 209.99110413]
[147.10089111 218.29537964]
[150.41950989 233.14263916]
[142.42144775 245.65530396]
[145.89875793 260.24667358]
[160.95960999 261.96313477]
[174.52374268 268.73001099]
[184.95320129 279.73010254]
[190.98858643 293.63513184]
[191.90109253 308.76599121]
[187.58052063 323.29556274]
[178.54861450 335.46932983]
[165.89602661 343.81726074]
[151.15060425 347.33126831]
[136.09292603 345.58703613]
[122.54129791 338.79519653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 82]
[6 81]
[9 78]
[10 77]
[14 73]
[15 72]
[16 71]
[17 70]
[18 68]
[19 67]
[21 66]
[22 65]
[23 64]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
