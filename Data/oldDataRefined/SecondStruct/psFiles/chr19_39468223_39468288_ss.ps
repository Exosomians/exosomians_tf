%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGUACACUACACUGGAAGGACUCGGACGUAAGGGAGUGGACCUUUACUACUCGUCAAUGACUAC\
) } def
/len { sequence length } bind def

/coor [
[71.68503571 123.79193115]
[66.15876770 114.91858673]
[51.49144363 118.06019592]
[36.82412338 121.20179749]
[32.02275085 135.72398376]
[20.67204857 145.82638550]
[5.88696241 148.87065125]
[-8.34157944 144.13731384]
[-18.22390556 132.99256897]
[-32.89122772 136.13417053]
[-39.05708313 150.37362671]
[-52.43220139 158.24038696]
[-67.87357330 156.70951843]
[-79.44368744 146.36968994]
[-82.69358826 131.19674683]
[-76.37362671 117.02503204]
[-62.91395187 109.30383301]
[-47.49009323 111.00211334]
[-36.03283310 121.46685791]
[-21.36551094 118.32524872]
[-16.91494179 104.11054230]
[-5.87340879 93.96457672]
[8.86148071 90.68595123]
[23.35422325 95.25291443]
[33.68251801 106.53447723]
[48.34984207 103.39286804]
[63.01716232 100.25126648]
[70.30371094 77.95631409]
[89.53481293 64.52785492]
[112.97525024 65.36711884]
[120.97698975 52.67964172]
[128.97872925 39.99216080]
[136.98046875 27.30467987]
[144.98220825 14.61719894]
[152.98394775 1.92971790]
[160.98568726 -10.75776291]
[157.25070190 -26.11437225]
[165.53968811 -39.57053375]
[180.93492126 -43.14294815]
[194.30270386 -34.71216202]
[197.71214294 -19.28001213]
[189.14050293 -6.00212049]
[173.67317200 -2.75602388]
[165.67143250 9.93145657]
[157.66969299 22.61893845]
[149.66795349 35.30641937]
[141.66621399 47.99390030]
[133.66447449 60.68138123]
[125.66273499 73.36885834]
[131.19230652 80.12959290]
[134.98225403 87.99851990]
[136.82118225 96.53678894]
[136.60655212 105.26821136]
[134.35031128 113.70581055]
[130.17831421 121.37902069]
[140.40544128 132.35198975]
[150.63255310 143.32496643]
[165.85488892 150.78933716]
[162.89617920 167.48312378]
[146.03573608 169.26133728]
[139.65957642 153.55207825]
[129.43246460 142.57910156]
[119.20534515 131.60614014]
[109.59429932 135.71754456]
[99.21674347 136.97540283]
[88.90176392 135.27920532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[9 20]
[10 19]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
