%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGGAAUUUCACUUUACUACCGUUAGUAGAAAGCCCUGACUGGACUUUACUUCUCUUAUGAGUAACGACUAGUGAACUAAUAAACCCGU\
) } def
/len { sequence length } bind def

/coor [
[75.21800995 133.56213379]
[81.69300079 120.03163147]
[91.79354095 108.93680573]
[76.97418976 111.25774384]
[62.15483475 113.57868195]
[52.84149170 126.06465149]
[37.77949905 128.20730591]
[25.93342972 119.25151825]
[11.11407661 121.57245636]
[-3.70527697 123.89339447]
[-18.52462959 126.21433258]
[-33.30171585 128.79072571]
[-48.03212738 131.62178040]
[-62.76254272 134.45285034]
[-70.73899841 144.76622009]
[-83.22026825 146.72644043]
[-93.30766296 139.81044006]
[-108.12701416 142.13137817]
[-120.54260254 152.84516907]
[-135.93768311 147.19505310]
[-138.47511292 130.99340820]
[-125.54460144 120.90708160]
[-110.44795227 127.31201935]
[-95.62860107 124.99108124]
[-82.72120667 113.23809052]
[-65.59360504 119.72243500]
[-50.86319351 116.89137268]
[-36.13277817 114.06031036]
[-30.02863121 109.61112976]
[-20.84556961 111.39498138]
[-6.02621698 109.07404327]
[8.79313660 106.75310516]
[23.61248970 104.43215942]
[32.15327072 92.28347015]
[47.14913940 89.71860504]
[59.83389282 98.75933075]
[74.65324402 96.43839264]
[89.47260284 94.11744690]
[94.53300476 89.31145477]
[101.37915039 88.12821960]
[112.07689667 77.61355591]
[122.77465057 67.09889221]
[133.47239685 56.58422470]
[144.17015076 46.06956100]
[148.58851624 30.87783623]
[163.08906555 27.47441483]
[167.50744629 12.28269005]
[182.00799561 8.87926960]
[192.70574951 -1.63539505]
[203.40350342 -12.15005970]
[214.10124207 -22.66472435]
[224.79899597 -33.17938995]
[235.49674988 -43.69405365]
[234.08804321 -59.26805878]
[243.06208801 -72.07433319]
[258.18157959 -76.06614685]
[272.30758667 -69.35868835]
[278.77023315 -55.11901093]
[274.51803589 -40.07065964]
[261.55877686 -31.31900406]
[246.01141357 -32.99630737]
[235.31365967 -22.48164177]
[224.61590576 -11.96697617]
[213.91816711 -1.45231152]
[203.22041321 9.06235313]
[192.52265930 19.57701874]
[188.86946106 34.01666260]
[173.60374451 38.17216492]
[169.95053101 52.61180878]
[154.68481445 56.76731110]
[143.98706055 67.28197479]
[133.28930664 77.79663849]
[122.59156036 88.31130219]
[111.89381409 98.82596588]
[126.81905365 97.33019257]
[141.54267883 100.19636536]
[154.81695557 107.18160248]
[165.51696777 117.69395447]
[172.73599243 130.84255981]
[175.86222839 145.51316833]
[174.63076782 160.46252441]
[169.14596558 174.42379761]
[159.87261963 186.21383667]
[147.59657288 194.83351135]
[133.35816956 199.55238342]
[118.36399841 199.97053528]
[103.88472748 196.05255127]
[91.14736938 188.13043213]
[81.23134613 176.87554932]
[74.97696686 163.24166870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[5 36]
[8 33]
[9 32]
[10 31]
[11 30]
[12 28]
[13 27]
[14 26]
[17 24]
[18 23]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[46 68]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
