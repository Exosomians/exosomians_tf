%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUGGAAGAGGGGAGGACGGCACUGAGCCUAAGCUUGGCUCCAACGACGCCGGUGUUGCGUCUCAUGAUUGGUGAUAUGCUAGUGCCGUUCGA\
) } def
/len { sequence length } bind def

/coor [
[50.60659409 283.20831299]
[45.53400040 297.43667603]
[36.65718079 309.65872192]
[24.69574165 318.88372803]
[10.61934090 324.36383057]
[-4.43091011 325.65481567]
[-19.23495483 322.65197754]
[-32.59269714 315.59881592]
[-43.42128372 305.06701660]
[-50.84288788 291.91040039]
[-54.25587463 277.19552612]
[-53.38356781 262.11520386]
[-48.29668427 247.89196777]
[-39.40759277 235.67883301]
[-27.43689156 226.46585083]
[-13.35499191 220.99989319]
[1.69654870 219.72402954]
[16.49757004 222.74172974]
[23.50148582 209.47729492]
[30.50540161 196.21286011]
[37.50931549 182.94842529]
[44.51323318 169.68399048]
[51.51714706 156.41955566]
[58.52106476 143.15513611]
[65.52497864 129.89070129]
[72.52889252 116.62626648]
[79.53281403 103.36183167]
[77.11434937 88.55808258]
[66.25325775 78.21222687]
[55.39216995 67.86637115]
[44.53108215 57.52051163]
[33.66999054 47.17465591]
[18.15079498 49.09521484]
[5.05607510 40.54756165]
[0.56875920 25.56764221]
[6.80762005 11.22851276]
[20.82685852 4.30067301]
[36.00701904 8.05523682]
[45.18049240 20.71941376]
[44.01585007 36.31356812]
[54.87693787 46.65942383]
[65.73802948 57.00527954]
[76.59911346 67.35113525]
[87.46020508 77.69699097]
[94.89735413 76.72808075]
[92.95977783 61.85374832]
[107.83414459 59.91641998]
[109.77165222 74.79026031]
[117.20880890 73.82135010]
[125.05664062 61.03809738]
[132.90446472 48.25484467]
[140.75230408 35.47159195]
[148.60012817 22.68833923]
[143.47897339 7.91310120]
[149.10153198 -6.67870235]
[162.81303406 -14.19726753]
[178.13931274 -11.09255791]
[187.84376526 1.16947830]
[187.34425354 16.79908180]
[176.87663269 28.41643143]
[161.38339233 30.53617096]
[153.53555298 43.31942368]
[145.68772888 56.10267639]
[137.83988953 68.88592529]
[129.99206543 81.66918182]
[137.63186646 94.57783508]
[152.61416626 93.84940338]
[167.59646606 93.12097168]
[182.57876587 92.39253998]
[194.38015747 81.52484131]
[210.21226501 84.11794281]
[217.93003845 98.18263245]
[211.61306763 112.92968750]
[196.10720825 117.04642487]
[183.30720520 107.37483978]
[168.32490540 108.10327148]
[153.34259033 108.83170319]
[138.36029053 109.56014252]
[130.96281433 117.74886322]
[122.26024628 122.77211761]
[113.36927795 124.60243225]
[105.30715179 123.56565094]
[98.88853455 120.28099060]
[94.64827728 115.57306671]
[92.79724121 110.36574554]
[85.79332733 123.63018036]
[78.78941345 136.89460754]
[71.78549957 150.15904236]
[64.78157806 163.42347717]
[57.77766418 176.68791199]
[50.77375031 189.95234680]
[43.76983261 203.21678162]
[36.76591873 216.48120117]
[29.76200294 229.74563599]
[40.60116196 240.26654053]
[48.03598022 253.41567993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
