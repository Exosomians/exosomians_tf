%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGAUUACCUUAUUAUCUUACUUGAGCUUACCUUUGUAGCUUACCUCAACUUACCUUAGUAGUAGCUUACUCUA\
) } def
/len { sequence length } bind def

/coor [
[96.54258728 155.68861389]
[77.33563995 150.98532104]
[60.97542953 139.87805176]
[49.13832474 149.09124756]
[37.30121613 158.30442810]
[25.46410751 167.51762390]
[26.95598412 182.87268066]
[19.88913918 196.58630371]
[6.51857567 204.28250122]
[-8.88920689 203.50546265]
[-21.41764069 194.50314331]
[-27.06895065 180.14813232]
[-24.03981972 165.02107239]
[-13.29683685 153.94895935]
[1.73195302 150.46484375]
[16.25091743 155.68051147]
[28.08802605 146.46733093]
[39.92513275 137.25413513]
[51.76224136 128.04093933]
[45.31850815 111.09552002]
[44.64769745 92.97870636]
[49.82062531 75.60314941]
[60.29116440 60.80326080]
[74.95391083 50.14150620]
[70.08341217 35.95425034]
[65.21292114 21.76699066]
[60.34243011 7.57973194]
[55.47193909 -6.60752678]
[50.60144806 -20.79478455]
[44.69252396 -28.14585304]
[45.83604813 -35.67012024]
[41.55600357 -50.04653168]
[29.27950859 -60.91941833]
[32.82213211 -76.93135071]
[48.53952408 -81.61061859]
[60.26298141 -70.14360046]
[55.93241882 -54.32657623]
[60.21245956 -39.95016479]
[64.78870392 -25.66527748]
[69.65919495 -11.47801876]
[74.52969360 2.70923996]
[79.40018463 16.89649773]
[84.27067566 31.08375740]
[89.14116669 45.27101517]
[98.70523071 44.21918106]
[108.30779266 44.82612610]
[117.66330719 47.07379150]
[126.49356079 50.89534378]
[134.53596497 56.17714310]
[141.55136108 62.76211548]
[147.33113098 70.45444489]
[151.70339966 79.02538300]
[154.53814697 88.22004700]
[155.75106812 97.76501465]
[155.30609131 107.37644958]
[153.21646118 116.76853180]
[149.54432678 125.66195679]
[144.39886475 133.79226685]
[155.00546265 144.39886475]
[165.61206055 155.00546265]
[174.14915466 159.01441956]
[176.42645264 166.27638245]
[186.58567810 177.31224060]
[196.74490356 188.34809875]
[206.90412903 199.38395691]
[222.08010864 206.94210815]
[219.01846313 223.61732483]
[202.14738464 225.29148865]
[195.86827087 209.54318237]
[185.70904541 198.50732422]
[175.54981995 187.47146606]
[165.39059448 176.43560791]
[155.00546265 165.61206055]
[144.39886475 155.00546265]
[133.79226685 144.39886475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[5 17]
[6 16]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[31 38]
[32 37]
[58 75]
[59 74]
[60 73]
[62 72]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
