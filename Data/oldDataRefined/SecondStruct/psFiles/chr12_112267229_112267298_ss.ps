%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGGGGCUAUCUCCUCCUGGCCAGAAGCCAGUUCCCAUAUGCUCAUCGACGCGAGGGGACGAUCUUGG\
) } def
/len { sequence length } bind def

/coor [
[94.38121033 123.43484497]
[82.77290344 132.93470764]
[77.91548157 141.05751038]
[70.43450928 142.58428955]
[58.41735840 151.56137085]
[46.40020752 160.53845215]
[34.38305283 169.51553345]
[22.36590195 178.49263000]
[16.39592361 193.76651001]
[0.14487278 195.96545410]
[-9.66956329 182.82739258]
[-2.95113349 167.86761475]
[13.38881683 166.47547913]
[25.40596962 157.49838257]
[37.42312241 148.52130127]
[49.44027328 139.54421997]
[61.45742798 130.56713867]
[73.27304840 121.32640076]
[84.88134766 111.82654572]
[85.21318054 96.83021545]
[74.03645325 86.82617950]
[62.85971832 76.82215118]
[51.68298721 66.81811523]
[35.64944458 66.26576233]
[26.20060921 53.30045700]
[30.58481789 37.86808014]
[45.43888092 31.80702782]
[59.36803055 39.76681900]
[61.68701935 55.64138412]
[72.86375427 65.64541626]
[84.04048157 75.64945221]
[95.21721649 85.65348816]
[110.12553406 87.30939484]
[123.22511292 80.00180054]
[136.32470703 72.69420624]
[149.42428589 65.38661957]
[162.52386475 58.07902527]
[175.62344360 50.77143097]
[178.10552979 39.76797485]
[186.19982910 32.23643494]
[196.91114807 30.61939812]
[206.46516418 35.23168564]
[220.15933228 29.11043167]
[233.85350037 22.98917770]
[236.92541504 7.77921247]
[248.37358093 -2.69547129]
[263.79595947 -4.40714502]
[277.26232910 3.30236435]
[283.59460449 17.46859360]
[280.35787964 32.64434052]
[268.79675293 42.99421692]
[253.35670471 44.53848648]
[239.97476196 36.68334579]
[226.28059387 42.80459976]
[212.58642578 48.92585373]
[202.81187439 65.38142395]
[182.93104553 63.87101364]
[169.83146667 71.17860413]
[156.73187256 78.48619843]
[143.63229370 85.79379272]
[130.53271484 93.10138702]
[117.43312836 100.40898132]
[132.41180420 101.20834351]
[145.07914734 109.24194336]
[152.18797302 122.45044708]
[151.91603088 137.44798279]
[144.33302307 150.39007568]
[131.38276672 157.95916748]
[116.38494873 158.21498108]
[103.18410492 151.09194946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[20 32]
[21 31]
[22 30]
[23 29]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
