%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUUCGCUCGAAAACGGGAAGACGAGGUGCCCUCCAAAGACAGGAGGGACUCGAGCGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[103.41289520 286.56576538]
[91.33573914 276.82296753]
[87.32429504 261.83337402]
[92.92105103 247.36079407]
[105.97393036 238.97019958]
[106.69863129 223.98771667]
[107.42333221 209.00523376]
[108.14803314 194.02275085]
[108.87273407 179.04026794]
[109.59742737 164.05778503]
[110.32212830 149.07530212]
[111.04682922 134.09281921]
[111.77153015 119.11033630]
[99.98510742 121.43968964]
[89.25870514 117.38368225]
[82.62973022 108.70458221]
[81.64763641 98.37643433]
[68.53811646 91.08668518]
[53.41089249 95.66300201]
[39.51801682 88.12884521]
[35.10188293 72.95408630]
[42.78250504 59.14164352]
[58.00310898 54.88619232]
[71.73357391 62.71242142]
[75.82786560 77.97716522]
[88.93738556 85.26691437]
[100.56398773 80.24372101]
[113.61429596 83.87374878]
[122.01049805 95.60548401]
[132.48817444 84.87149811]
[136.43391418 76.21807098]
[143.74090576 73.88746643]
[154.72492981 63.67222977]
[165.70896912 53.45699310]
[176.69299316 43.24175644]
[187.67701721 33.02651596]
[198.66105652 22.81127930]
[197.68296814 7.20431376]
[207.00723267 -5.34925938]
[222.23120117 -8.92202663]
[236.16659546 -1.82703745]
[242.23353577 12.58567238]
[237.56741333 27.51086044]
[224.37141418 35.90130997]
[208.87629700 33.79531097]
[197.89225769 44.01054764]
[186.90823364 54.22578430]
[175.92419434 64.44102478]
[164.94017029 74.65625763]
[153.95614624 84.87149811]
[143.22215271 95.34916687]
[132.74449158 106.08315277]
[126.75401306 119.83503723]
[126.02931213 134.81752014]
[125.30461884 149.80000305]
[124.57991791 164.78248596]
[123.85521698 179.76496887]
[123.13051605 194.74745178]
[122.40581512 209.72993469]
[121.68111420 224.71241760]
[120.95641327 239.69490051]
[133.13854980 249.30610657]
[137.31236267 264.25131226]
[131.87294006 278.78375244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[17 26]
[18 25]
[29 52]
[30 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
