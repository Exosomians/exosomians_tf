%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCACCGAGACUUUUCUCGGAAACCCAAAAUUCUGACUACUUUUUCACUGAAAUGUAAAUGCGAGAAAGAGGCGCUUAC\
) } def
/len { sequence length } bind def

/coor [
[10.04402924 226.59701538]
[-5.21799707 226.33068848]
[-20.17374992 223.29608154]
[-34.32546616 217.59561157]
[-47.20240402 209.42041016]
[-58.37649155 199.04388428]
[-67.47657776 186.81260681]
[-80.91905975 193.46839905]
[-94.36154175 200.12420654]
[-107.80402374 206.77999878]
[-121.24650574 213.43579102]
[-134.68899536 220.09159851]
[-143.32276917 234.03396606]
[-159.70353699 233.25770569]
[-166.98016357 218.56135559]
[-157.66708374 205.06326294]
[-141.34478760 206.64910889]
[-127.90230560 199.99331665]
[-114.45982361 193.33750916]
[-101.01734161 186.68171692]
[-87.57485962 180.02592468]
[-74.13237000 173.37011719]
[-78.24330139 159.22987366]
[-79.80795288 144.58403015]
[-78.77649689 129.88749695]
[-75.17977142 115.59702301]
[-69.12832642 102.15689087]
[-60.80907440 89.98521423]
[-50.47948837 79.46085358]
[-38.45964432 70.91165924]
[-25.12229538 64.60427094]
[-10.88131714 60.73575974]
[3.82113814 59.42750549]
[18.52836418 60.72137451]
[32.78329086 64.57838440]
[46.14269257 70.87987518]
[58.19095993 79.43116760]
[68.55303955 89.96755981]
[76.90610504 102.16254425]
[90.59365845 96.02651215]
[96.24541473 89.96857452]
[104.92501068 89.92881012]
[118.83754730 84.32155609]
[132.75009155 78.71429443]
[146.66262817 73.10704041]
[160.57516479 67.49978638]
[174.48770142 61.89252853]
[188.40023804 56.28527451]
[198.30758667 43.95016861]
[213.00450134 46.36886215]
[213.95481873 31.13535690]
[221.42808533 17.82697296]
[233.94046021 9.08609676]
[249.00762939 6.64823723]
[263.63800049 10.99743271]
[274.92666626 21.27014732]
[280.63226318 35.42672729]
[279.62197876 50.65637207]
[272.09637451 63.93522263]
[259.54965210 72.62675476]
[244.47300720 75.00526428]
[229.85989380 70.59848785]
[218.61175537 60.28139877]
[209.69952393 72.21543121]
[194.00749207 70.19780731]
[180.09495544 75.80506897]
[166.18241882 81.41232300]
[152.26988220 87.01957703]
[138.35734558 92.62683105]
[124.44480896 98.23409271]
[110.53226471 103.84134674]
[96.72969055 109.71406555]
[83.04213715 115.85009766]
[86.66699219 130.71725464]
[87.52956390 145.99176025]
[85.60250092 161.16488647]
[80.95137024 175.73152161]
[73.73238373 189.20701599]
[64.18716431 201.14329529]
[52.63466644 211.14370728]
[39.46051025 218.87631226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[39 73]
[40 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[50 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
