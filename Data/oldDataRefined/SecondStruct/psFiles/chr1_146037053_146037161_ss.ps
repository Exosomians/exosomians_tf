%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUCUACGCAACCACCAUAUCACCACUCGUAUCGACGGAAGGUUCGUCAACUGGGCCCAAGCUAAGGGCCGGUUGCGUCACAGUCAAAAAGAGAAGUCGAAAAAUCU\
) } def
/len { sequence length } bind def

/coor [
[133.92874146 296.72482300]
[131.16108704 281.94860840]
[130.79968262 266.91979980]
[132.85388184 252.02761841]
[137.27049255 237.65786743]
[143.93508911 224.18273926]
[152.67506409 211.95126343]
[163.26402283 201.28027344]
[154.44725037 189.14501953]
[145.63046265 177.00976562]
[136.81369019 164.87451172]
[127.99691010 152.73924255]
[119.18013000 140.60398865]
[110.36335754 128.46873474]
[101.54657745 116.33348846]
[110.08567047 128.66571045]
[115.17855835 142.77465820]
[116.48497009 157.71766663]
[113.91761017 172.49632263]
[107.64801788 186.12321472]
[98.09509277 197.68788147]
[85.89709473 206.41764832]
[71.86901855 211.72924805]
[56.94813156 213.26779175]
[42.13135147 210.93048096]
[28.40864182 204.87347412]
[16.69687080 195.50148010]
[7.77854013 183.44065857]
[2.24951863 169.49684143]
[0.47922021 154.60166931]
[2.58592486 139.75035095]
[8.42887592 125.93514252]
[17.61768341 114.07909393]
[29.53841209 104.97435760]
[43.39459229 99.22924805]
[58.26222992 97.22761536]
[48.76704407 85.61548615]
[39.27185822 74.00336456]
[29.77667046 62.39123917]
[20.28148460 50.77911758]
[10.78629684 39.16699219]
[-3.92079377 30.73266792]
[0.11258470 14.26548290]
[17.05277634 13.58266544]
[22.39842224 29.67180443]
[31.89360809 41.28392792]
[41.38879395 52.89605331]
[50.88398361 64.50817871]
[60.37916946 76.12030029]
[69.87435913 87.73242950]
[77.34683990 87.09061432]
[71.50796509 73.27368927]
[82.84445190 63.45105743]
[95.68939972 71.19750214]
[92.29181671 85.80699158]
[99.76430511 85.16517639]
[107.14030457 72.10398102]
[114.51629639 59.04279327]
[121.89228821 45.98160172]
[129.26828003 32.92041016]
[123.61121368 18.34194946]
[128.69741821 3.55463696]
[142.12533569 -4.45940781]
[157.55471802 -1.91619885]
[167.70030212 9.98343849]
[167.77162170 25.62085915]
[157.73501587 37.61255264]
[142.32946777 40.29640579]
[134.95347595 53.35759735]
[127.57748413 66.41878510]
[120.20149231 79.47998047]
[112.82550049 92.54116821]
[113.68183136 107.51670837]
[122.49861145 119.65196228]
[131.31538391 131.78721619]
[140.13217163 143.92247009]
[148.94894409 156.05772400]
[157.76573181 168.19297791]
[166.58250427 180.32823181]
[175.39927673 192.46348572]
[188.82017517 185.69030762]
[203.15379333 181.15783691]
[218.02888489 178.98345947]
[233.06013489 179.22352600]
[247.85820007 181.87178040]
[262.03979492 186.85966492]
[275.23754883 194.05795288]
[287.10961914 203.28021240]
[297.34851074 214.28755188]
[305.68896484 226.79484558]
[311.91500854 240.47814941]
[315.86532593 254.98301697]
[317.43762207 269.93374634]
[316.59112549 284.94305420]
[313.34780884 299.62219238]
[307.79165649 313.59091187]
[300.06661987 326.48742676]
[290.37274170 337.97766113]
[278.96118164 347.76397705]
[266.12747192 355.59289551]
[252.20404053 361.26162720]
[237.55155945 364.62335205]
[222.54957581 365.59097290]
[207.58663940 364.13946533]
[193.05035400 360.30636597]
[179.31723022 354.19100952]
[166.74299622 345.95178223]
[155.65336609 335.80209351]
[146.33555603 324.00488281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
