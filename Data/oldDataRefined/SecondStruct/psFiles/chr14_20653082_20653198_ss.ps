%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUCUUAUGCCGUCGAGGAAGCUCGGCCUUAGCUUGGUCGCUGGAUUCCUACAGGUGUUUACAAAGAUGUCCGAUGUCAGGAGGCGAGAUGGUCGACUCGAUAGCUUCCCGCGUG\
) } def
/len { sequence length } bind def

/coor [
[56.04512405 473.10839844]
[48.20872879 486.10668945]
[36.20359039 495.39328003]
[21.65331078 499.71228027]
[6.52569199 498.47958374]
[-7.13337851 491.86184692]
[-17.47662354 480.75411987]
[-23.10520363 466.65859985]
[-23.25790024 451.48159790]
[-17.91406250 437.27569580]
[-7.79640055 425.96209717]
[5.72675562 419.07089233]
[20.82650948 417.53405762]
[24.77304840 403.06256104]
[23.48058701 395.68725586]
[29.02206039 388.26101685]
[33.35243988 373.89968872]
[32.25677109 366.49258423]
[37.99397278 359.21649170]
[42.70512390 344.97552490]
[47.41627502 330.73455811]
[52.12742233 316.49359131]
[56.83857346 302.25262451]
[61.54972458 288.01165771]
[64.91534424 273.39413452]
[66.90622711 258.52682495]
[68.89710999 243.65954590]
[70.88799286 228.79225159]
[72.87887573 213.92495728]
[74.86975861 199.05766296]
[66.04312134 191.59550476]
[61.92750549 180.66574097]
[63.67572021 168.99633789]
[70.96106720 159.56138611]
[82.03070831 154.82330322]
[84.81003571 140.08303833]
[87.58937073 125.34278107]
[90.36869812 110.60251617]
[85.92408752 97.34593201]
[94.89103699 86.61814880]
[86.24797821 73.65916443]
[89.27659607 58.75003815]
[101.68427277 50.59006119]
[104.46360016 35.84980011]
[107.24292755 21.10953712]
[110.02226257 6.36927509]
[101.37919617 -6.58970737]
[104.40781403 -21.49883652]
[116.81549072 -29.65881348]
[119.59481812 -44.39907455]
[110.95175934 -57.35805893]
[113.98037720 -72.26718903]
[126.38805389 -80.42716217]
[129.16738892 -95.16742706]
[131.94671631 -109.90768433]
[123.30364990 -122.86666870]
[126.33226776 -137.77580261]
[138.73994446 -145.93577576]
[127.99613953 -157.13177490]
[125.91841125 -172.50910950]
[133.30569458 -186.15490723]
[147.31742859 -192.82205200]
[162.56581116 -189.94691467]
[173.18753052 -178.63504028]
[175.09832764 -163.23605347]
[167.56344604 -149.67120361]
[153.48020935 -143.15644836]
[162.06437683 -131.03837585]
[159.45571899 -116.05006409]
[146.68698120 -107.12835693]
[143.90763855 -92.38809204]
[141.12831116 -77.64783478]
[149.71249390 -65.52976227]
[147.10383606 -50.54145050]
[134.33508301 -41.61974335]
[131.55575562 -26.87948227]
[140.13992310 -14.76141548]
[137.53126526 0.22689900]
[124.76251984 9.14860630]
[121.98319244 23.88886833]
[119.20386505 38.62913132]
[116.42453003 53.36939240]
[125.00870514 65.48745728]
[122.40004730 80.47577667]
[109.63130188 89.39748383]
[114.07591248 102.65406799]
[105.10896301 113.38185120]
[102.32962799 128.12211609]
[99.55030060 142.86238098]
[96.77096558 157.60263062]
[108.04904938 172.69885254]
[104.89752960 190.95686340]
[89.73705292 201.04855347]
[87.74617004 215.91583252]
[85.75528717 230.78312683]
[83.76440430 245.65042114]
[81.77352142 260.51773071]
[79.78263855 275.38500977]
[92.21120453 266.98675537]
[107.15185547 268.31982422]
[117.89727020 278.78579712]
[119.62351990 293.68612671]
[111.55564117 306.33163452]
[97.31553650 311.04541016]
[83.29602051 305.71124268]
[75.79068756 292.72280884]
[71.07953644 306.96377563]
[66.36838531 321.20474243]
[61.65723801 335.44570923]
[56.94608688 349.68667603]
[52.23493576 363.92764282]
[47.71377182 378.23007202]
[43.38339233 392.59140015]
[39.24456406 407.00909424]
[35.29802704 421.48062134]
[47.52708054 430.47030640]
[55.67958450 443.27270508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 115]
[14 114]
[16 113]
[17 112]
[19 111]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[35 90]
[36 89]
[37 88]
[38 87]
[40 85]
[43 82]
[44 81]
[45 80]
[46 79]
[49 76]
[50 75]
[53 72]
[54 71]
[55 70]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
