%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUACGCUACUACUCACUUCAUCUCGGACUGGACCAUAACGGUAACGAAGUGACAACCGAAACUGGUCCCAUACUAGAGAAUUAGAAGAGAGACUCGACU\
) } def
/len { sequence length } bind def

/coor [
[86.66264343 327.15786743]
[71.56732941 327.34219360]
[56.98235703 323.44589233]
[43.99002838 315.75811768]
[33.55446625 304.84933472]
[26.45005417 291.52905273]
[23.20398712 276.78573608]
[24.05714607 261.71340942]
[28.94622231 247.43057251]
[37.50841141 234.99708557]
[49.10834122 225.33560181]
[62.88522339 219.16307068]
[77.81671906 216.93754578]
[79.67819977 202.05349731]
[81.53968048 187.16944885]
[75.44162750 173.58036804]
[84.83170319 160.84706116]
[86.69318390 145.96301270]
[88.55466461 131.07896423]
[90.41614532 116.19491577]
[81.23864746 98.53813171]
[93.04038239 82.51602936]
[93.50688171 67.52328491]
[93.97338104 52.53054047]
[94.43987274 37.53779602]
[79.17722321 30.01208496]
[68.70288086 16.66974258]
[65.03929901 0.16341564]
[68.86074066 -16.25102997]
[79.36981964 -29.35673141]
[94.46331024 -36.60624695]
[93.99681091 -51.59899139]
[93.53031921 -66.59173584]
[93.06381989 -81.58448029]
[92.59732056 -96.57722473]
[92.13082123 -111.56996918]
[78.06723785 -120.81343079]
[72.27985382 -136.44044495]
[76.83901978 -152.29722595]
[89.78110504 -162.26248169]
[88.84855652 -177.23345947]
[87.91601562 -192.20443726]
[86.98346710 -207.17543030]
[72.82742310 -212.88235474]
[62.55575180 -224.17198181]
[58.20791245 -238.80273438]
[60.64717102 -253.86967468]
[69.38920593 -266.38125610]
[82.69828033 -273.85327148]
[97.93187714 -274.80218506]
[112.06534576 -269.03955078]
[122.29247284 -257.70956421]
[126.58266449 -243.06181335]
[124.08409119 -228.00459290]
[115.29285431 -215.52752686]
[101.95445251 -208.10797119]
[102.88700104 -193.13699341]
[103.81954193 -178.16600037]
[104.75209045 -163.19502258]
[116.71338654 -157.04815674]
[124.09678650 -145.67797852]
[124.85848236 -132.03326416]
[118.68898773 -119.71734619]
[107.12356567 -112.03646851]
[107.59006500 -97.04372406]
[108.05656433 -82.05097961]
[108.52306366 -67.05823517]
[108.98955536 -52.06549072]
[109.45605469 -37.07274628]
[121.88912964 -32.70663071]
[132.08854675 -24.31218910]
[138.79713440 -12.89542389]
[141.17813110 0.16341564]
[138.91954041 13.27669525]
[132.27479553 24.84240723]
[122.03455353 33.43988419]
[109.43261719 38.00429535]
[108.96612549 52.99703979]
[108.49962616 67.98978424]
[108.03312683 82.98252869]
[115.01782990 88.66023254]
[118.56651306 96.93242645]
[117.86726379 105.90647125]
[113.08006287 113.52913666]
[105.30019379 118.05639648]
[103.43871307 132.94044495]
[101.57723236 147.82449341]
[99.71575165 162.70854187]
[105.68065643 177.36222839]
[96.42372894 189.03092957]
[94.56224823 203.91497803]
[92.70076752 218.79902649]
[106.62425232 224.63331604]
[118.45662689 234.00868225]
[127.31985474 246.22940063]
[132.55621338 260.38861084]
[133.77713013 275.43560791]
[130.89202881 290.25378418]
[124.11496735 303.74356079]
[113.94887543 314.90390015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 92]
[14 91]
[15 90]
[17 88]
[18 87]
[19 86]
[20 85]
[22 80]
[23 79]
[24 78]
[25 77]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[40 59]
[41 58]
[42 57]
[43 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
