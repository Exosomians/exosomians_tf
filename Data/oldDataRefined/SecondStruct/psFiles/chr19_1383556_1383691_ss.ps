%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACAGCAGAGACACCGCGUUAGCCAAUCGCGCAAGCCGACAAUUGGCUUUCCAACCACCAAGCUCGGGUGGGUCCCUGCGCACCACUGAAAACGGGAGGACCUUAUUGUUCUUUUACUCACAGCGGAGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[239.67559814 185.36367798]
[238.30163574 170.42672729]
[236.92768860 155.48979187]
[225.31184387 151.36663818]
[216.19517517 142.93609619]
[211.10324097 131.51084900]
[210.92655945 118.91220856]
[197.40138245 112.42609406]
[183.87620544 105.93997955]
[170.35102844 99.45387268]
[155.52946472 100.92706299]
[146.43180847 87.98320770]
[132.90663147 81.49710083]
[119.38146210 75.01098633]
[127.58273315 104.88668823]
[107.42013550 123.24469757]
[85.41753387 114.81574249]
[71.74719238 120.99002838]
[58.07685089 127.16430664]
[44.40650940 133.33859253]
[42.24908829 148.61436462]
[32.15815353 160.28382874]
[17.35367966 164.62332153]
[2.55972624 160.24810791]
[-7.50301266 148.55430603]
[-9.62355328 133.27337646]
[-3.12523794 119.28140259]
[9.91834354 111.04316711]
[25.34503174 111.18746185]
[38.23222733 119.66825104]
[51.90256882 113.49396515]
[65.57291412 107.31968689]
[79.24324799 101.14540100]
[74.50904846 93.91886139]
[72.61094666 84.19077301]
[58.80263138 78.33156586]
[44.99431229 72.47235107]
[31.18599129 66.61314392]
[17.37767220 60.75394058]
[3.56935263 54.89472961]
[-10.23896694 49.03552246]
[-27.18153763 48.41452408]
[-31.27497864 31.96216583]
[-16.59876060 23.47423363]
[-4.37975883 35.22720337]
[9.42856026 41.08641052]
[23.23687935 46.94562149]
[37.04520035 52.80482864]
[50.85351944 58.66403580]
[64.66183472 64.52324677]
[78.47015381 70.38245392]
[84.37199402 65.75445557]
[71.92150116 57.38873672]
[76.03038788 42.96247101]
[91.02029419 42.41231537]
[96.17566681 56.49846649]
[102.07749939 51.87047195]
[99.68003845 37.06330490]
[97.28257751 22.25613976]
[94.88510895 7.44897413]
[92.48764801 -7.35819197]
[78.96424866 -15.21004581]
[73.70043945 -29.93507195]
[79.18164825 -44.58056259]
[92.81980133 -52.23136902]
[108.17538452 -49.27500916]
[117.99796295 -37.10738754]
[117.64961243 -21.47368431]
[107.29481506 -9.75565529]
[109.69227600 5.05151081]
[112.08973694 19.85867691]
[114.48720551 34.66584396]
[116.88466644 49.47301102]
[125.86756897 61.48580933]
[139.39274597 67.97192383]
[152.91792297 74.45803070]
[168.70690918 73.44877625]
[176.83714294 85.92869568]
[190.36231995 92.41481018]
[203.88749695 98.90091705]
[217.41267395 105.38703156]
[232.81407166 95.43525696]
[251.01411438 95.81199646]
[265.77334595 106.23920441]
[272.11526489 123.01879883]
[286.89395142 125.58587646]
[301.81469727 120.32446289]
[313.03005981 130.12574768]
[327.80874634 132.69281006]
[342.58746338 135.25988770]
[351.50891113 122.92420959]
[364.84719849 115.71469116]
[379.93127441 115.01418304]
[393.76681519 120.90811920]
[403.63064575 132.17819214]
[407.60656738 146.55378723]
[422.38528442 149.12084961]
[437.16400146 151.68792725]
[451.94268799 154.25500488]
[466.72140503 156.82208252]
[481.50009155 159.38916016]
[496.27880859 161.95623779]
[511.05752563 164.52331543]
[523.83459473 155.22158813]
[539.43341064 157.76153564]
[548.59954834 170.63623047]
[545.89483643 186.20736694]
[532.92395020 195.23684692]
[517.38226318 192.36764526]
[508.49044800 179.30201721]
[493.71173096 176.73493958]
[478.93301392 174.16786194]
[464.15432739 171.60078430]
[449.37561035 169.03370667]
[434.59692383 166.46664429]
[419.81820679 163.89956665]
[405.03948975 161.33248901]
[396.44860840 173.52519226]
[383.36203003 180.80876160]
[368.34930420 181.69172668]
[354.38504028 175.94549561]
[344.25930786 164.66024780]
[340.02038574 150.03860474]
[325.24166870 147.47152710]
[310.46298218 144.90444946]
[296.59930420 150.34947205]
[284.32690430 140.36457825]
[269.54818726 137.79750061]
[262.38262939 147.77311707]
[251.86463928 154.11582947]
[253.23858643 169.05278015]
[254.61253357 183.98971558]
[265.97912598 195.31140137]
[264.07128906 211.24060059]
[250.35255432 219.55781555]
[235.34677124 213.88278198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[7 81]
[8 80]
[9 79]
[10 78]
[12 76]
[13 75]
[14 74]
[17 33]
[18 32]
[19 31]
[20 30]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[85 128]
[86 127]
[88 125]
[89 124]
[90 123]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
