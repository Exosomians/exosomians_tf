%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCCGGGGAGUCUGGGGGUCCACAGUUUCCAGGACCCCACGUGACACAGGAGUCCCCACUAGUCUCGGGUCACGACCUGUAGUACCCUCGGGGUCG\
) } def
/len { sequence length } bind def

/coor [
[84.62371826 268.96157837]
[90.67005920 253.12245178]
[90.67005920 238.12245178]
[90.67005920 223.12245178]
[90.67005920 208.12245178]
[90.67005920 193.12245178]
[90.67005920 178.12245178]
[90.67005920 163.12245178]
[90.67005920 148.12245178]
[90.67005920 133.12245178]
[90.67005920 118.12244415]
[86.90839386 109.19723511]
[88.48163605 101.49985504]
[74.36842346 96.41878510]
[60.25521088 91.33771515]
[46.06393051 86.47895813]
[31.79808235 81.84369659]
[17.46118546 77.43309784]
[3.05678105 73.24822998]
[-11.34762383 69.06336212]
[-25.75202942 64.87849426]
[-40.15643311 60.69363022]
[-54.56084061 56.50876236]
[-68.96524811 52.32389450]
[-79.99499512 63.01221466]
[-94.89510345 66.73812866]
[-109.65750885 62.49938583]
[-120.31120300 51.43618774]
[-123.99039459 36.52447891]
[-119.70539856 21.77543068]
[-108.60886383 11.15646648]
[-93.68569183 7.52403355]
[-78.95014954 11.85523796]
[-68.36602020 22.98500633]
[-64.78038025 37.91949081]
[-50.37597275 42.10435486]
[-35.97156906 46.28922272]
[-21.56716347 50.47409058]
[-7.16275787 54.65895462]
[7.24164772 58.84382248]
[21.64605331 63.02869034]
[29.08090401 61.85076141]
[36.43333817 67.57785034]
[50.69918442 72.21310425]
[58.16736603 71.26929474]
[65.33628082 77.22450256]
[79.44949341 82.30557251]
[93.56269836 87.38664246]
[108.47211456 85.74062347]
[121.13703156 77.70322418]
[133.80195618 69.66582489]
[146.46687317 61.62842178]
[159.13179016 53.59101868]
[167.17568970 37.12031937]
[184.64524841 36.86619186]
[197.05145264 28.43494034]
[204.57403564 11.71970367]
[222.02699280 10.91696835]
[234.16224670 2.10018992]
[246.29750061 -6.71658897]
[245.31413269 -22.11257935]
[252.83052063 -35.58504105]
[266.44824219 -42.83496475]
[281.82189941 -41.54892349]
[294.04583740 -32.13728714]
[299.21945190 -17.60327530]
[295.69180298 -2.58463931]
[284.58862305 8.12622833]
[269.45285034 11.11153030]
[255.11427307 5.41866589]
[242.97901917 14.23544502]
[230.84376526 23.05222321]
[228.59034729 35.05188370]
[218.39535522 42.47759628]
[205.48271179 40.84114838]
[193.07650757 49.27239990]
[190.44728088 61.19535446]
[180.02406311 68.29717255]
[167.16918945 66.25593567]
[154.50427246 74.29334259]
[141.83935547 82.33074188]
[129.17443848 90.36814117]
[116.50952148 98.40554810]
[131.50946045 98.36201477]
[141.65864563 109.40710449]
[140.34939575 124.34986115]
[128.43412781 133.46173096]
[113.67030334 130.81039429]
[105.67005920 118.12244415]
[105.67005920 133.12245178]
[105.67005920 148.12245178]
[105.67005920 163.12245178]
[105.67005920 178.12245178]
[105.67005920 193.12245178]
[105.67005920 208.12245178]
[105.67005920 223.12245178]
[105.67005920 238.12245178]
[105.67005920 253.12245178]
[111.71640015 268.96157837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[11 89]
[13 48]
[14 47]
[15 46]
[16 44]
[17 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[55 76]
[56 75]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
