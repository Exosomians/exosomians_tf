%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAAAAUUAGUUACAACUGGUCCAACCGGAGCUUGCACAUCGGAGCGGAGGAGCUCACGGUCCCGUUGGCGGGACUCGGUGGCGCUGA\
) } def
/len { sequence length } bind def

/coor [
[24.67771530 206.19819641]
[29.93653488 220.24613953]
[31.33398819 235.18090820]
[28.77258492 249.96060181]
[22.43101692 263.55413818]
[12.75168705 275.01321411]
[0.40985146 283.53842163]
[-13.73349190 288.53500366]
[-28.69166565 289.65438843]
[-43.42115021 286.81851196]
[-56.89437485 280.22515869]
[-68.17141724 270.33435059]
[-76.46555328 257.83605957]
[-81.19817352 243.60220337]
[-82.03910828 228.62579346]
[-78.92970276 213.95161438]
[-72.08686066 200.60336304]
[-61.98797226 189.51226807]
[-49.33679581 181.45172119]
[-64.15615082 179.13078308]
[-78.97550201 176.80982971]
[-93.79485321 174.48889160]
[-108.61421204 172.16795349]
[-125.19813538 175.69070435]
[-133.17410278 160.73007202]
[-121.00610352 148.92430115]
[-106.29326630 157.34860229]
[-91.47391510 159.66954041]
[-76.65456390 161.99047852]
[-61.83520889 164.31141663]
[-47.01585388 166.63237000]
[-32.33650208 163.54747009]
[-19.70498848 155.45765686]
[-7.07347584 147.36785889]
[-5.16847134 142.77362061]
[-0.23782516 139.43139648]
[6.72047758 139.19084167]
[19.88001823 131.99179077]
[24.33162880 125.88940430]
[33.62036514 124.78029633]
[47.02054596 118.03974152]
[60.42073059 111.29918671]
[73.82091522 104.55862427]
[87.22109985 97.81806946]
[97.54954529 86.94042969]
[103.58745575 73.20930481]
[109.62535858 59.47818756]
[115.66326904 45.74706650]
[109.69881439 31.11146545]
[115.90715790 16.57764244]
[130.60499573 10.76825619]
[145.07237244 17.12991333]
[150.72604370 31.88835335]
[144.21177673 46.28765869]
[129.39439392 51.78497314]
[123.35648346 65.51609802]
[117.31857300 79.24721527]
[111.28066254 92.97833252]
[115.10516357 99.42993927]
[122.75415039 112.33316040]
[126.57864380 118.78476715]
[141.52281189 120.07777405]
[156.46697998 121.37078094]
[171.41114807 122.66378021]
[186.35531616 123.95678711]
[201.29948425 125.24979401]
[216.24365234 126.54280090]
[230.86244202 119.11157990]
[244.45800781 128.28178406]
[243.04438782 144.61988831]
[228.07580566 151.31866455]
[214.95063782 141.48696899]
[200.00646973 140.19395447]
[185.06230164 138.90095520]
[170.11813354 137.60795593]
[155.17396545 136.31494141]
[140.22981262 135.02194214]
[125.28563690 133.72892761]
[93.96165466 111.21825409]
[80.56147003 117.95880890]
[67.16128540 124.69936371]
[53.76110458 131.43992615]
[40.36091995 138.18048096]
[27.07908058 145.15132141]
[13.91954041 152.35038757]
[1.01632464 159.99937439]
[-11.61518860 168.08917236]
[-24.24670219 176.17898560]
[-9.42192173 178.46499634]
[4.28724098 184.55259705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[32 88]
[33 87]
[34 86]
[37 85]
[38 84]
[40 83]
[41 82]
[42 81]
[43 80]
[44 79]
[45 58]
[46 57]
[47 56]
[48 55]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
