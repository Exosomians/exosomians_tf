%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGUUGACCGGCCAAUCGAGUCAACCAAUCUCGCACCACGAUUAUUGCGGUUCCAGCGCCCAAGCUAGGGGCAUGCCCGGUCCUAACUUUGAAAAGCUUUCAUGCUAAUGACGUGAGGCAAAAUCU\
) } def
/len { sequence length } bind def

/coor [
[-31.73447609 335.41897583]
[-44.29544449 335.68499756]
[-56.53328323 332.89147949]
[-67.71473694 327.21139526]
[-77.78811646 338.32565308]
[-87.86150360 349.43991089]
[-97.93488312 360.55419922]
[-108.00827026 371.66845703]
[-118.08165741 382.78271484]
[-128.01789856 394.01977539]
[-137.81549072 405.37789917]
[-136.40304565 421.11895752]
[-146.59887695 433.19458008]
[-162.35397339 434.44052124]
[-174.32112122 424.11758423]
[-175.40042114 408.35018921]
[-164.95153809 396.49285889]
[-149.17361450 395.58032227]
[-139.37602234 384.22216797]
[-137.36817932 377.02664185]
[-129.19592285 372.70935059]
[-119.12253571 361.59506226]
[-109.04915619 350.48080444]
[-98.97576904 339.36654663]
[-88.90238190 328.25225830]
[-78.82900238 317.13800049]
[-87.52399445 301.92745972]
[-90.58634186 284.65301514]
[-87.64198303 267.33438110]
[-79.02009583 252.00172424]
[-65.71634674 240.45788574]
[-49.27794266 234.06625366]
[-31.62368774 233.58981323]
[-14.82003880 239.10011292]
[-5.88454866 227.05200195]
[-8.31727028 212.40217590]
[0.57295686 200.05638123]
[15.95553875 197.60404968]
[24.89102745 185.55593872]
[33.82651901 173.50782776]
[42.76200867 161.45971680]
[44.23506927 154.13595581]
[52.06758881 149.22917175]
[61.29606247 137.40397644]
[70.52453613 125.57878113]
[79.75301361 113.75358582]
[88.98148346 101.92839050]
[98.06414795 89.99083710]
[106.99964142 77.94272614]
[115.93512726 65.89460754]
[109.69584656 53.31135178]
[109.51084900 39.33377075]
[115.35913086 26.71025085]
[126.03899384 17.89811707]
[139.41453552 14.58534718]
[152.84266663 17.36744308]
[162.07113647 5.54224777]
[171.29962158 -6.28294897]
[168.21020508 -24.89024353]
[179.42324829 -39.66198730]
[197.54675293 -41.62091446]
[199.16709900 -57.35892868]
[212.82147217 -63.30935287]
[221.45858765 -75.57312775]
[230.09571838 -87.83689880]
[231.71606445 -103.57490540]
[245.37043762 -109.52532959]
[254.00755310 -121.78910065]
[262.64468384 -134.05287170]
[271.28179932 -146.31665039]
[279.91891479 -158.58041382]
[281.53927612 -174.31843567]
[295.19363403 -180.26885986]
[292.24511719 -195.79565430]
[301.20822144 -208.81250000]
[316.76535034 -211.59671021]
[329.68667603 -202.49647522]
[332.30627441 -186.91079712]
[323.06991577 -174.08638000]
[307.45742798 -171.63172913]
[306.45483398 -156.77090454]
[292.18270874 -149.94329834]
[283.54556274 -137.67951965]
[274.90844727 -125.41575623]
[266.27133179 -113.15197754]
[257.63421631 -100.88820648]
[256.63162231 -86.02738190]
[242.35948181 -79.19977570]
[233.72236633 -66.93600464]
[225.08523560 -54.67222977]
[224.08267212 -39.81140518]
[209.81051636 -32.98379517]
[214.18215942 -22.31268120]
[212.79736328 -10.74285412]
[205.88941956 -1.20961237]
[195.10763550 3.81116867]
[183.12481689 2.94552493]
[173.89633179 14.77072144]
[164.66786194 26.59591866]
[171.09045410 41.37066650]
[169.20498657 57.46445465]
[159.42912292 70.50428772]
[144.33728027 76.89947510]
[127.98324585 74.83010101]
[119.04775238 86.87821198]
[110.11226654 98.92633057]
[108.19121552 106.84938049]
[100.80667877 111.15686798]
[91.57820892 122.98206329]
[82.34973145 134.80725098]
[73.12126160 146.63246155]
[63.89278412 158.45765686]
[54.81011963 170.39520264]
[45.87462997 182.44331360]
[36.93914032 194.49142456]
[28.00365257 206.53953552]
[30.12224388 221.97163391]
[20.88875771 234.06283569]
[6.16356421 235.98748779]
[-2.77192545 248.03559875]
[5.00034666 258.03433228]
[10.10383129 269.61254883]
[12.23720360 282.07315063]
[11.27777767 294.66738892]
[7.28854513 306.63986206]
[0.51407212 317.27374268]
[-8.63448811 325.93371582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 19]
[11 18]
[34 120]
[35 119]
[38 116]
[39 115]
[40 114]
[41 113]
[43 112]
[44 111]
[45 110]
[46 109]
[47 108]
[48 106]
[49 105]
[50 104]
[56 99]
[57 98]
[58 97]
[61 92]
[63 90]
[64 89]
[65 88]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
