%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGCCUAGAAAGGGCGGGGGGCAAGGAGGGCUGGGGAGGUGGGCGGGAGGGAAGGGGGCGGCGGGGAGGAGGAGGA\
) } def
/len { sequence length } bind def

/coor [
[150.03886414 272.63345337]
[156.48025513 258.92993164]
[167.02397156 248.06213379]
[160.21411133 234.69703674]
[153.40426636 221.33192444]
[146.59440613 207.96682739]
[139.78454590 194.60173035]
[132.97468567 181.23663330]
[126.16483307 167.87153625]
[109.33580780 172.13867188]
[91.97493744 172.29621887]
[75.07124329 168.33522034]
[59.58768082 160.48130798]
[46.40631866 149.18193054]
[36.27806473 135.08074951]
[29.77990532 118.98111725]
[27.28202629 101.80016327]
[12.32826614 100.62327576]
[-0.75569433 109.90711212]
[-16.13129425 105.32775116]
[-22.00368881 90.39810181]
[-13.86808109 76.57089996]
[2.03458881 74.45320129]
[13.50515175 85.66951752]
[28.45891190 86.84640503]
[31.48561096 75.56799316]
[36.27806473 64.91924286]
[42.71276093 55.17459869]
[50.62386322 46.58519363]
[59.80748749 39.37239838]
[70.02695465 33.72209549]
[81.01888275 29.77990532]
[92.50000000 27.64743042]
[92.50000000 12.64743042]
[92.50000000 -2.35256982]
[84.76270294 -16.15274239]
[92.50000000 -28.88001442]
[82.21823120 -41.19524002]
[85.57711029 -56.88273239]
[100.00000000 -63.90839386]
[114.42288971 -56.88273239]
[117.78176880 -41.19524002]
[107.50000000 -28.88001442]
[115.23729706 -16.15274239]
[107.50000000 -2.35256982]
[107.50000000 12.64743042]
[107.50000000 27.64743042]
[122.09336090 30.69611931]
[135.75866699 36.65599823]
[147.92187500 45.27671432]
[158.07208252 56.19614410]
[165.78289795 68.95560455]
[170.73043823 83.01912689]
[172.70684814 97.79594421]
[171.62913513 112.66534424]
[167.54255676 127.00273132]
[160.61877441 140.20582581]
[151.14863586 151.72003174]
[139.52992249 161.06167603]
[146.33978271 174.42678833]
[153.14964294 187.79188538]
[159.95950317 201.15698242]
[166.76936340 214.52207947]
[173.57920837 227.88717651]
[180.38906860 241.25227356]
[195.37873840 239.11015320]
[210.25129700 241.95368958]
[223.39349365 249.47442627]
[233.37974548 260.85659790]
[239.12683105 274.86550903]
[240.01133728 289.98159790]
[235.93733215 304.56518555]
[227.34674072 317.03436279]
[215.17137146 326.03656006]
[200.73196411 330.59527588]
[185.59475708 330.21600342]
[171.40174866 324.93994141]
[159.69247437 315.33932495]
[151.73706055 302.45559692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[17 25]
[18 24]
[33 47]
[34 46]
[35 45]
[37 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
