%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAGUCGAAGGGACCACCAGAUCACCAAUCCUAAGCCGCGAGAGUGGCGGCGCCGGGCCCAAGCUAAGGGCCAGUCCCUUACUCCAAAAAGACAAAAU\
) } def
/len { sequence length } bind def

/coor [
[154.72892761 277.23434448]
[149.20706177 263.28771973]
[137.32788086 254.30247498]
[139.44165039 238.62310791]
[133.91978455 224.67646790]
[128.39791870 210.72981262]
[124.28474426 207.99050903]
[121.95310974 202.55682373]
[122.99765015 195.72999573]
[118.36238861 181.46414185]
[113.72713470 167.19830322]
[109.09188080 152.93244934]
[104.45662689 138.66659546]
[99.82137299 124.40074921]
[95.18611908 110.13490295]
[95.12213135 125.13476562]
[90.92715454 139.53622437]
[82.92602539 152.22410583]
[71.73832703 162.21586609]
[58.23039246 168.73780823]
[43.44822693 171.28488159]
[28.53651047 169.65986633]
[14.64995003 163.98858643]
[2.86387062 154.71020508]
[-5.90905619 142.54321289]
[-10.98948669 128.42977905]
[-11.98401070 113.46277618]
[-8.81561565 98.80122375]
[-1.72965074 85.58043671]
[8.72517204 74.82419586]
[21.73927116 67.36542511]
[36.30487823 63.78170776]
[51.29409027 64.35054779]
[65.54618835 69.02789307]
[77.95755768 77.45155334]
[87.56451416 88.96508789]
[82.04264832 75.01844025]
[76.52077484 61.07179260]
[70.99890900 47.12514496]
[65.47704315 33.17849731]
[50.58279419 28.41452217]
[42.27912521 15.16374493]
[44.48677444 -0.31722140]
[56.16334915 -10.71873760]
[71.79553986 -11.12952614]
[84.00229645 -1.35562527]
[87.01995850 13.98802853]
[79.42369080 27.65662956]
[84.94555664 41.60327911]
[90.46742249 55.54992294]
[95.98929596 69.49657440]
[101.51116180 83.44322205]
[108.71336365 85.53565216]
[112.89845276 71.13130951]
[127.30272675 75.31661987]
[123.11776733 89.72052002]
[130.31997681 91.81295013]
[142.45523071 82.99617004]
[154.59048462 74.17939758]
[166.72573853 65.36261749]
[178.86099243 56.54583740]
[179.77125549 40.93476868]
[190.54069519 29.59664154]
[206.08432007 27.88496971]
[219.06289673 36.60795593]
[223.34834290 51.64686966]
[216.91720581 65.90079498]
[202.80606079 72.63947296]
[187.67776489 68.68109131]
[175.54251099 77.49787140]
[163.40725708 86.31465149]
[151.27200317 95.13143158]
[139.13674927 103.94820404]
[123.90837860 107.75763702]
[109.45196533 105.49964905]
[114.08721924 119.76549530]
[118.72247314 134.03134155]
[123.35772705 148.29719543]
[127.99298859 162.56303406]
[132.62823486 176.82888794]
[137.26348877 191.09474182]
[142.34455872 205.20794678]
[147.86642456 219.15460205]
[153.38830566 233.10124207]
[165.66244507 243.08403015]
[163.15370178 257.76583862]
[168.67556763 271.71249390]
[183.89283752 272.30804443]
[197.54939270 279.04736328]
[207.27915955 290.76278687]
[211.39640808 305.42459106]
[209.18777466 320.49249268]
[201.03593445 333.35589600]
[188.35325623 341.78616333]
[173.33705139 344.32266235]
[158.58900452 340.52597046]
[146.66429138 331.05383301]
[139.62895203 317.54739380]
[138.70187378 302.34674072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[4 84]
[5 83]
[6 82]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
