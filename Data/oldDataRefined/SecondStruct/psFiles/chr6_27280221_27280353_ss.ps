%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUGCACGUGACUCUUUAAGUCGAUUCCUAAGGAGUUUUUAUGUCCAACGAAGACGGGCCAAAGCUUGGCCCCUGGAAAGCGCACACUCCGCUUGCACUAUUGGUGAUGUGAUGUCUUCGGGACUGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[-47.24874878 319.74722290]
[-54.87462997 305.22903442]
[-45.88689804 291.51217651]
[-45.53525925 276.51629639]
[-45.18362045 261.52041626]
[-44.83198547 246.52453613]
[-44.48034668 231.52865601]
[-44.12870789 216.53277588]
[-50.27794647 212.23895264]
[-63.86416245 218.59622192]
[-62.57641983 203.65132141]
[-68.72566223 199.35751343]
[-82.68264008 204.85321045]
[-96.63961792 210.34890747]
[-110.59659576 215.84460449]
[-124.55357361 221.34030151]
[-138.51055908 226.83601379]
[-152.46752930 232.33171082]
[-166.42451477 237.82740784]
[-180.38150024 243.32310486]
[-190.38728333 255.57850647]
[-205.06436157 253.04223633]
[-211.13757324 267.63305664]
[-225.78086853 273.57858276]
[-240.30665588 267.35144043]
[-246.09703064 252.64610291]
[-239.71667480 238.18696594]
[-224.95092773 232.55238342]
[-210.56005859 239.08525085]
[-201.55256653 227.22294617]
[-185.87719727 229.36613464]
[-171.92021179 223.87043762]
[-157.96324158 218.37472534]
[-144.00625610 212.87902832]
[-130.04927063 207.38333130]
[-116.09230042 201.88763428]
[-102.13531494 196.39192200]
[-88.17833710 190.89622498]
[-74.22135925 185.40052795]
[-65.57529449 181.25914001]
[-56.83890152 179.62620544]
[-48.66974640 180.29612732]
[-41.62103271 182.90368652]
[-36.10550690 186.96200562]
[-32.37142181 191.90788269]
[-20.93114281 182.20632935]
[-9.49086571 172.50479126]
[1.94941187 162.80323792]
[3.22648335 158.11268616]
[7.52006388 154.21138000]
[14.16086960 152.93038940]
[26.04330635 143.77572632]
[37.92574310 134.62107849]
[49.80818176 125.46642303]
[61.69061661 116.31176758]
[73.57305145 107.15711212]
[85.45549011 98.00246429]
[91.75933075 84.39138031]
[91.05624390 69.40785980]
[90.35316467 54.42435074]
[89.65007782 39.44083786]
[88.94699860 24.45732307]
[88.24391174 9.47381020]
[87.54082489 -5.50970364]
[80.75872040 -21.04802132]
[93.81231689 -31.86651802]
[107.82161713 -22.31791687]
[102.52433777 -6.21278763]
[103.22742462 8.77072620]
[103.93051147 23.75424004]
[104.63359070 38.73775101]
[105.33667755 53.72126770]
[106.03975677 68.70478058]
[106.74284363 83.68829346]
[113.43335724 87.07754517]
[115.74531555 72.25679016]
[130.55516052 69.87591553]
[137.39582825 83.22526550]
[126.81438446 93.85604858]
[133.50489807 97.24530029]
[146.00131226 88.94833374]
[158.49772644 80.65136719]
[170.99414062 72.35440063]
[183.49055481 64.05743408]
[185.05859375 48.49866486]
[196.29678345 37.62497330]
[211.89877319 36.57057953]
[224.49780273 45.83333969]
[228.14497375 61.03965759]
[221.11820984 75.00957489]
[206.73535156 81.14693451]
[191.78752136 76.55384827]
[179.29110718 84.85081482]
[166.79469299 93.14778137]
[154.29827881 101.44474792]
[141.80186462 109.74171448]
[143.54415894 117.03653717]
[148.77102661 138.92100525]
[163.66809082 140.67533875]
[178.56513977 142.42965698]
[193.46220398 144.18399048]
[209.89978027 140.03161621]
[218.44026184 154.67732239]
[206.73115540 166.93836975]
[191.70787048 159.08105469]
[176.81080627 157.32672119]
[161.91375732 155.57238770]
[147.01669312 153.81805420]
[136.86209106 164.85816956]
[122.99697113 170.58164978]
[108.01160431 169.91925049]
[94.70556641 162.99468994]
[85.56470490 151.10165405]
[82.29670715 136.46197510]
[85.51210785 121.81064606]
[94.61014557 109.88489532]
[82.72770691 119.03955078]
[70.84526825 128.19419861]
[58.96283340 137.34886169]
[47.08039856 146.50350952]
[35.19795990 155.65817261]
[23.31552315 164.81282043]
[11.65096092 174.24351501]
[0.21068288 183.94506836]
[-11.22959518 193.64660645]
[-22.66987228 203.34815979]
[-29.13282776 216.88441467]
[-29.48446655 231.88029480]
[-29.83610535 246.87617493]
[-30.18774414 261.87203979]
[-30.53938293 276.86791992]
[-30.89102173 291.86380005]
[-22.55611038 305.98687744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 132]
[4 131]
[5 130]
[6 129]
[7 128]
[8 127]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[22 29]
[45 126]
[46 125]
[47 124]
[48 123]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
