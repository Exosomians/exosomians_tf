%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCACGUUCAAAGGCAUCACAUCACCAAUAGUGCAAGCGGAUUGUGCGCUUUCCAGGGGCCAAGCUUUGGCCCGCCUUUGUCUUAGAAU\
) } def
/len { sequence length } bind def

/coor [
[198.95112610 126.65484619]
[184.22070312 123.82378387]
[169.49029541 120.99272156]
[154.75988770 118.16165924]
[140.02946472 115.33059692]
[125.29905701 112.49952698]
[110.56864166 109.66846466]
[97.29653168 114.06650543]
[86.60029602 105.06195068]
[71.86988068 102.23088074]
[61.27024078 114.78734589]
[45.89381790 120.31275940]
[29.90967369 117.40817261]
[17.60216522 106.94696808]
[12.22258377 91.81517029]
[-2.59676933 89.49422455]
[-17.41612244 87.17328644]
[-32.23547745 84.85234833]
[-40.47221756 97.66156006]
[-53.21038818 106.00775146]
[-68.24302673 108.44487762]
[-82.96564484 104.55070496]
[-94.82744598 94.99992371]
[-101.77330780 81.44725037]
[-102.59981537 66.24077606]
[-97.16378021 52.01512146]
[-86.40702057 41.23495483]
[-72.19320679 35.76801300]
[-56.98497772 36.56147003]
[-43.41724396 43.47786331]
[-33.84069824 55.31888199]
[-29.91453552 70.03299713]
[-15.09518242 72.35393524]
[-0.27582929 74.67487335]
[14.54352379 76.99581146]
[22.48350716 65.74415588]
[34.57718658 59.01923370]
[48.45751572 58.20340347]
[61.37891769 63.51591110]
[70.76037598 73.95807648]
[74.70094299 87.50047302]
[89.43135834 90.33153534]
[102.70346832 85.93349457]
[113.39970398 94.93804932]
[128.13011169 97.76911926]
[142.86053467 100.60018158]
[157.59094238 103.43124390]
[172.32136536 106.26230621]
[187.05177307 109.09336853]
[201.78218079 111.92443848]
[210.81402588 94.26788330]
[224.91921997 80.35176086]
[242.66381836 71.57495880]
[262.24880981 68.81469727]
[281.69259644 72.33885193]
[299.03140259 81.78002930]
[312.51770020 96.17382050]
[320.79620361 114.05728149]
[335.61557007 111.73633575]
[350.43490601 109.41539764]
[365.25427246 107.09445953]
[380.07360840 104.77352142]
[394.89297485 102.45257568]
[409.71234131 100.13163757]
[424.42517090 91.70733643]
[436.59317017 103.51310730]
[428.61718750 118.47373962]
[412.03326416 114.95098877]
[397.21392822 117.27193451]
[382.39456177 119.59287262]
[367.57519531 121.91381073]
[352.75585938 124.23474884]
[337.93649292 126.55569458]
[323.11715698 128.87663269]
[322.51611328 140.01571655]
[319.92651367 150.87091064]
[315.43069458 161.08999634]
[309.17288208 170.34111023]
[301.35455322 178.32348633]
[292.22799683 184.77728271]
[282.08804321 189.49195862]
[271.26269531 192.31326294]
[260.10241699 193.14816284]
[248.96879578 191.96800232]
[238.22286987 188.80938721]
[228.21339417 183.77316284]
[219.26553345 177.02108765]
[211.67028809 168.77075195]
[205.67501831 159.28845215]
[201.47540283 148.88064575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[9 42]
[10 41]
[15 35]
[16 34]
[17 33]
[18 32]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
