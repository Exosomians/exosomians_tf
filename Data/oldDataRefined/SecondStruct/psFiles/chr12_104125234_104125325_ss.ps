%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGAUGCCGGUAUGGUGGGACUUGCGCGGGCUAGAGCAGACUAGAGCCUUCGAUUCGUCCCAGCCCGGACCAAUCAUGAACCUACCCUCU\
) } def
/len { sequence length } bind def

/coor [
[143.97518921 256.18215942]
[155.07731628 245.75801086]
[150.10604858 231.60575867]
[145.13478088 217.45349121]
[139.92520142 203.38720703]
[134.47879028 189.41091919]
[129.03239441 175.43463135]
[123.11705017 161.65026855]
[116.51113892 148.18319702]
[109.67871857 134.82962036]
[102.84629822 121.47604370]
[96.01387024 108.12246704]
[92.31407928 106.37687683]
[89.47162628 102.92047119]
[88.27078247 98.21043396]
[89.24385834 93.05396271]
[77.02384949 83.00498199]
[79.61190796 68.33694458]
[74.16549683 54.36065674]
[68.71908569 40.38436890]
[63.27268219 26.40807915]
[57.82627106 12.43179131]
[52.37986374 -1.54449701]
[36.04917526 -5.55178690]
[25.37169266 -18.32768250]
[24.34764481 -34.78125763]
[33.18014145 -48.50521851]
[27.26480293 -62.28958511]
[14.71237087 -71.92011261]
[16.80354881 -86.66718292]
[10.88821220 -100.45155334]
[4.97287416 -114.23592377]
[-0.94246387 -128.02029419]
[-6.85780191 -141.80465698]
[-21.25984955 -147.73919678]
[-27.06247902 -161.80276489]
[-21.31604576 -175.49635315]
[-27.23138428 -189.28071594]
[-40.68389511 -198.65951538]
[-39.01845932 -214.97387695]
[-23.94833374 -221.44097900]
[-10.97637367 -211.40802002]
[-13.44701672 -195.19606018]
[-7.53167915 -181.41168213]
[6.35242987 -176.14224243]
[12.54778767 -162.24719238]
[6.92656565 -147.71998596]
[12.84190369 -133.93562317]
[18.75724030 -120.15126038]
[24.67257881 -106.36688995]
[30.58791733 -92.58252716]
[42.71724319 -83.93795013]
[41.04917145 -68.20492554]
[46.96450806 -54.42055511]
[60.31206131 -52.65113831]
[71.09681702 -44.40965271]
[76.39421844 -31.79459953]
[74.70016479 -18.10793686]
[66.35615540 -6.99090481]
[71.80255890 6.98538351]
[77.24897003 20.96167183]
[82.69537354 34.93796158]
[88.14178467 48.91424942]
[93.58819580 62.89053726]
[105.41864014 71.93984222]
[103.22014618 87.60755157]
[109.36744690 101.29004669]
[116.19987488 114.64362335]
[123.03229523 127.99720001]
[129.86471558 141.35076904]
[136.69979858 147.72541809]
[136.69377136 155.27275085]
[142.15934753 159.56414795]
[144.17015076 165.16000366]
[143.00868225 169.98822021]
[148.45507812 183.96450806]
[153.90148926 197.94079590]
[160.05659485 204.97424316]
[159.28704834 212.48222351]
[164.25831604 226.63449097]
[169.22956848 240.78675842]
[184.41181946 241.97799683]
[197.79388428 249.24713135]
[207.05723572 261.33474731]
[210.59692383 276.14657593]
[207.79969788 291.11639404]
[199.15019226 303.65057373]
[186.14697266 311.57751465]
[171.04293823 313.52380371]
[156.45495605 309.15225220]
[144.91047668 299.22024536]
[138.40963745 285.44857788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 77]
[6 76]
[7 75]
[8 72]
[9 70]
[10 69]
[11 68]
[12 67]
[16 66]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[27 54]
[28 53]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
