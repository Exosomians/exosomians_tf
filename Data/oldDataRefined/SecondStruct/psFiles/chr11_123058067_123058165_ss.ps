%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAGAACCCAGUGAGUCUGUAGGUUCCUUCCAUCAACGGUUGUGGAACUUAAGACCACCUUUGGCGCUUACAAAACCUGGUAAGUAGUAACACUGGGA\
) } def
/len { sequence length } bind def

/coor [
[94.63713837 260.86950684]
[82.54986572 270.45599365]
[67.19628906 271.96307373]
[53.47568512 264.90982056]
[45.76625061 251.54687500]
[46.52803421 236.13832092]
[55.51795578 223.60098267]
[69.86736298 217.93547058]
[72.67808533 203.20117188]
[75.48880005 188.46685791]
[78.29952240 173.73254395]
[81.11024475 158.99824524]
[83.92095947 144.26393127]
[86.73168182 129.52961731]
[69.54034424 110.96614838]
[70.95369720 85.70458221]
[59.39599609 76.14321899]
[47.83829880 66.58185577]
[36.28060150 57.02050018]
[27.50542641 53.88136673]
[24.51619148 46.97274780]
[13.26452637 37.05307007]
[2.01286006 27.13339043]
[-9.23880577 17.21371269]
[-20.49047279 7.29403400]
[-31.74213791 -2.62564373]
[-42.99380493 -12.54532146]
[-54.24547195 -22.46500015]
[-72.93908691 -20.45271492]
[-87.05027771 -32.39638519]
[-88.11739349 -50.53783798]
[-99.96971893 -59.73144531]
[-115.61600494 -57.50223541]
[-128.20555115 -67.05622101]
[-130.26922607 -82.72520447]
[-120.58265686 -95.21304321]
[-104.89273834 -97.11092377]
[-92.50801086 -87.29287720]
[-90.77611542 -71.58377075]
[-78.92378998 -62.39016342]
[-67.97621918 -66.28268433]
[-56.40404510 -64.30459595]
[-47.18280029 -56.84449005]
[-42.74203110 -45.71570587]
[-44.32579041 -33.71666718]
[-33.07412720 -23.79698753]
[-21.82246017 -13.87730980]
[-10.57079411 -3.95763183]
[0.68087202 5.96204615]
[11.93253803 15.88172436]
[23.18420410 25.80140305]
[34.43587112 35.72108078]
[45.84196091 45.46279907]
[57.39965820 55.02416229]
[68.95735931 64.58551788]
[80.51505280 74.14688110]
[87.04895020 70.32985687]
[94.29045105 68.13390350]
[101.84389496 67.67900085]
[109.29659271 68.98999786]
[116.24136353 71.99526978]
[122.29875946 76.53061676]
[127.13784027 82.34824371]
[130.49420166 89.13029480]
[132.18447876 96.50623322]
[147.06619263 98.38623047]
[161.97561646 100.03224945]
[176.90904236 101.44387054]
[191.84246826 102.85549927]
[206.77589417 104.26712036]
[221.70933533 105.67874908]
[236.64276123 107.09037018]
[246.80297852 95.36222076]
[261.92401123 91.87878418]
[276.19146729 97.97950745]
[284.11926270 111.31853485]
[282.65899658 126.76674652]
[272.37213135 138.38398743]
[257.21420288 141.70318604]
[243.01376343 135.44804382]
[235.23114014 122.02380371]
[220.29769897 120.61217499]
[205.36427307 119.20055389]
[190.43084717 117.78892517]
[175.49742126 116.37730408]
[160.56398010 114.96567535]
[153.48155212 117.51589203]
[145.18620300 113.26795197]
[130.30447388 111.38795471]
[123.72841644 122.02292633]
[113.61256409 129.37252808]
[101.46598816 132.34034729]
[98.65527344 147.07464600]
[95.84455109 161.80895996]
[93.03382874 176.54327393]
[90.22311401 191.27757263]
[87.41239166 206.01188660]
[84.60166931 220.74620056]
[95.85780334 231.29621887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 98]
[9 97]
[10 96]
[11 95]
[12 94]
[13 93]
[14 92]
[16 56]
[17 55]
[18 54]
[19 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[31 40]
[32 39]
[65 89]
[66 88]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
