%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCCCCGCGCCACACCUCCUCCCCGGCACGGGGGCCCGGCGGCGAGACUGGGCGCGGGGACGGGGCGCGGGGGCGG\
) } def
/len { sequence length } bind def

/coor [
[85.31433868 402.12530518]
[77.56279755 388.54415894]
[80.40541840 373.16711426]
[92.50000000 363.25473022]
[92.50000000 348.25473022]
[92.50000000 333.25473022]
[92.50000000 318.25473022]
[92.50000000 303.25473022]
[92.50000000 288.25473022]
[92.50000000 273.25473022]
[92.50000000 258.25473022]
[92.50000000 243.25473022]
[92.50000000 228.25473022]
[84.76270294 215.52746582]
[92.50000000 201.72729492]
[81.81912994 191.40960693]
[81.60544586 176.19747925]
[92.50000000 165.06434631]
[92.50000000 150.06434631]
[92.50000000 135.06434631]
[92.50000000 120.06435394]
[75.81359100 106.91304016]
[77.11164856 82.37230682]
[65.99111938 72.30582428]
[54.87059784 62.23934937]
[43.75007629 52.17287445]
[32.62955093 42.10639954]
[16.82923126 35.95934677]
[18.36209106 19.07483482]
[35.01108551 15.87369251]
[42.69602585 30.98587418]
[53.81655121 41.05234909]
[64.93707275 51.11882782]
[76.05760193 61.18530273]
[87.17812347 71.25177765]
[101.93858337 68.58181000]
[108.82804871 55.25757217]
[115.71750641 41.93333435]
[122.60696411 28.60909271]
[129.49642944 15.28485489]
[136.38587952 1.96061528]
[143.00906372 -11.49796772]
[138.91238403 -27.00915146]
[148.60052490 -39.79663086]
[164.64155579 -40.05094528]
[174.73019409 -27.57700729]
[171.12727356 -11.94375515]
[156.59666443 -5.14368057]
[156.61715698 2.45376801]
[149.71012878 8.85007477]
[142.82066345 22.17431450]
[135.93119812 35.49855423]
[129.04174805 48.82279205]
[122.15228271 62.14702988]
[115.26282501 75.47126770]
[125.43097687 92.91352081]
[121.31031036 110.84260559]
[107.50000000 120.06435394]
[107.50000000 135.06434631]
[107.50000000 150.06434631]
[107.50000000 165.06434631]
[118.39455414 176.19747925]
[118.18087006 191.40960693]
[107.50000000 201.72729492]
[115.23729706 215.52746582]
[107.50000000 228.25473022]
[107.50000000 243.25473022]
[107.50000000 258.25473022]
[107.50000000 273.25473022]
[107.50000000 288.25473022]
[107.50000000 303.25473022]
[107.50000000 318.25473022]
[107.50000000 333.25473022]
[107.50000000 348.25473022]
[107.50000000 363.25473022]
[119.59458160 373.16711426]
[122.43720245 388.54415894]
[114.68566132 402.12530518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[15 64]
[18 61]
[19 60]
[20 59]
[21 58]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
