%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUACAUGGAACAAAAAUUUUCUCGUCAAGUCAACUCUCGACUUCUCGGGGUCAAUAUUGUUCAGCAAUACGAGAUCGUGACAACGAA\
) } def
/len { sequence length } bind def

/coor [
[171.03813171 320.34548950]
[157.10118103 314.81256104]
[144.73905945 306.31280518]
[134.57357788 295.26980591]
[127.11690521 282.23522949]
[122.74583435 267.86120605]
[121.68264008 252.86766052]
[123.98386383 238.00637817]
[129.53726196 224.02314758]
[138.06732178 211.62046814]
[149.14888000 201.42218018]
[141.72375488 188.38885498]
[134.29861450 175.35554504]
[126.87348175 162.32221985]
[119.44834900 149.28889465]
[112.02322388 136.25558472]
[97.24757385 138.09788513]
[82.89018250 134.15083313]
[71.13281250 125.01420593]
[63.76210022 112.07640839]
[61.89811325 97.30348206]
[65.82409668 82.94032288]
[74.94345856 71.16954803]
[67.51832581 58.13623047]
[60.09319687 45.10290909]
[52.66806412 32.06959152]
[45.24293137 19.03627205]
[30.26579285 14.75573349]
[22.92131805 1.43231988]
[27.09445572 -12.81971550]
[19.66932487 -25.85303497]
[12.24419212 -38.88635254]
[4.81906033 -51.91967392]
[-2.60607123 -64.95299530]
[-18.02161980 -67.57881165]
[-28.10330963 -79.53261566]
[-28.09087753 -95.17019653]
[-17.99019241 -107.10795593]
[-2.57048893 -109.70925903]
[10.88751984 -101.74584198]
[16.02937508 -86.97779083]
[10.42724800 -72.37812805]
[17.85238075 -59.34480667]
[25.27751160 -46.31148529]
[32.70264435 -33.27816772]
[40.12777710 -20.24484634]
[54.51559830 -16.56706238]
[62.23140335 -3.45519757]
[58.27625275 11.61114025]
[65.70138550 24.64445877]
[73.12651825 37.67778015]
[80.55165100 50.71109772]
[87.97677612 63.74441910]
[102.75242615 61.90211105]
[117.10981750 65.84916687]
[128.86718750 74.98579407]
[136.23789978 87.92359161]
[138.10188293 102.69651794]
[134.17590332 117.05967712]
[125.05654144 128.83044434]
[132.48167419 141.86376953]
[139.90679932 154.89709473]
[147.33193970 167.93040466]
[154.75706482 180.96372986]
[162.18220520 193.99705505]
[176.60575867 189.66497803]
[191.62448120 188.65182495]
[206.48490906 191.00521851]
[220.44227600 196.60392761]
[232.79776001 205.16418457]
[242.93356323 216.25402832]
[250.34368896 229.31512451]
[254.65933228 243.69081116]
[255.66709900 258.65921021]
[253.31968689 273.46936035]
[247.73797607 287.37905884]
[239.20491028 299.69186401]
[228.15106201 309.79208374]
[235.57620239 322.82537842]
[243.00132751 335.85870361]
[250.42645264 348.89202881]
[264.84664917 356.70166016]
[265.02288818 373.09985352]
[250.77386475 381.21755981]
[236.75775146 372.70401001]
[237.39314270 356.31716919]
[229.96800232 343.28384399]
[222.54287720 330.25051880]
[215.11775208 317.21719360]
[200.79267883 321.57543945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
