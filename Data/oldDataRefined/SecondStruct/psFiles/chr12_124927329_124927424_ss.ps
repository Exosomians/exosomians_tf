%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUGCAUGAACCGGAGGGGCAGCCCCUUAGCUUGGGGCCAGAGGGCGCACUGUCCGCCCCUAUGAGUGGUGAUAUGAUUGCUCCUGGCGGGUA\
) } def
/len { sequence length } bind def

/coor [
[155.20208740 189.89060974]
[150.00177002 203.96032715]
[140.62385559 215.66735840]
[128.02839661 223.81317139]
[113.50487518 227.56384277]
[98.54017639 226.53538513]
[84.66632843 220.83306885]
[73.30368805 211.04071045]
[65.61552429 198.16079712]
[62.38893127 183.51193237]
[63.95423508 168.59382629]
[70.15118408 154.93374634]
[80.34535217 143.93016052]
[93.49309540 136.70957947]
[108.24839783 134.01123047]
[123.09651184 136.11006165]
[112.92787933 125.08287048]
[102.75925446 114.05567169]
[89.46980286 109.71031952]
[86.21354675 96.11295319]
[76.04492188 85.08576202]
[65.69906616 74.22467041]
[55.17869186 63.53253555]
[46.76077652 59.50756836]
[44.49777222 52.31969833]
[34.32914734 41.29250336]
[24.16052055 30.26530647]
[13.99189377 19.23811150]
[3.64603758 8.37702179]
[-6.87433720 -2.31511164]
[-19.86468697 -3.23433495]
[-28.41312027 -12.51733112]
[-28.26919937 -24.73250961]
[-38.43782425 -35.75970459]
[-48.60645294 -46.78689957]
[-63.78887558 -54.33211899]
[-60.74144363 -71.00993347]
[-43.87179184 -72.69847107]
[-37.57925415 -56.95552826]
[-27.41062927 -45.92832947]
[-17.24200439 -34.90113449]
[-0.28939798 -30.69426346]
[3.81779647 -12.83548641]
[14.33817101 -2.14335251]
[21.40766335 0.46604046]
[25.01909065 9.06948471]
[35.18771744 20.09668159]
[45.35634232 31.12387657]
[55.52496719 42.15107346]
[65.87082672 53.01216125]
[76.39119720 63.70429611]
[83.46069336 66.31369019]
[87.07212067 74.91712952]
[97.24074554 85.94432831]
[110.53019714 90.28968048]
[113.78645325 103.88704681]
[123.95507812 114.91423798]
[134.12370300 125.94143677]
[146.90695190 133.78927612]
[161.34213257 137.86671448]
[175.77731323 141.94416809]
[190.21249390 146.02162170]
[204.71180725 149.86479187]
[219.27145386 153.47265625]
[233.83110046 157.08053589]
[249.08714294 152.88966370]
[259.57977295 163.46104431]
[274.13940430 167.06892395]
[288.69906616 170.67680359]
[303.25869751 174.28466797]
[317.81835938 177.89254761]
[332.37799072 181.50042725]
[346.93765259 185.10829163]
[360.34173584 176.73536682]
[375.72137451 180.37429810]
[383.95211792 193.86616516]
[380.15078735 209.20648193]
[366.57266235 217.29412842]
[351.27337646 213.33082581]
[343.32977295 199.66793823]
[328.77011108 196.06005859]
[314.21047974 192.45219421]
[299.65081787 188.84431458]
[285.09118652 185.23645020]
[270.53155518 181.62857056]
[255.97189331 178.02069092]
[241.75724792 182.46961975]
[230.22322083 171.64018250]
[215.66357422 168.03230286]
[201.10392761 164.42443848]
[193.71398926 165.89933777]
[186.13504028 160.45680237]
[171.69985962 156.37934875]
[157.26467896 152.30189514]
[142.82949829 148.22444153]
[151.42247009 160.51919556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 58]
[17 57]
[18 56]
[20 54]
[21 53]
[22 51]
[23 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 44]
[30 43]
[33 41]
[34 40]
[35 39]
[59 95]
[60 94]
[61 93]
[62 92]
[63 90]
[64 89]
[65 88]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
