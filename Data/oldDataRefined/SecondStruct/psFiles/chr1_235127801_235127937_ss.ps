%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUACAGCGUCCAUACUUUAUUCUGACUCGGUGCCCUCUUCGCGUCGGGAAACCUGAGGGGACGUUAAAGAUAUCGUAAGUGAGUAUAGAACCUUCGUGAAUCUUGCUUCGAUGGUUCUCCCAAAUUCUUACGUC\
) } def
/len { sequence length } bind def

/coor [
[158.74945068 135.74978638]
[149.94436646 126.84032440]
[145.77157593 114.95260620]
[130.96162415 112.57236481]
[116.15167999 110.19213104]
[104.34886169 118.59687042]
[90.04293060 116.29763794]
[81.46807861 104.61782074]
[66.65813446 102.23757935]
[51.84819031 99.85733795]
[37.03824615 97.47710419]
[22.22830200 95.09686279]
[7.41835690 92.71662903]
[-7.39158821 90.33638763]
[-12.42701149 92.26805878]
[-17.20604897 92.03855896]
[-20.93037415 90.12445831]
[-23.11675262 87.25495148]
[-37.72974014 83.86959839]
[-52.34272385 80.48423767]
[-66.95571136 77.09888458]
[-81.56869507 73.71353149]
[-96.32062531 70.99678802]
[-111.18091583 68.95428467]
[-126.04119873 66.91178894]
[-140.90148926 64.86928558]
[-155.76177979 62.82678604]
[-170.62207031 60.78428650]
[-185.48236084 58.74178696]
[-200.20755005 64.52790070]
[-211.76272583 55.12963486]
[-226.62301636 53.08713531]
[-241.48330688 51.04463577]
[-252.13087463 62.33218002]
[-267.38580322 65.17241669]
[-281.38223267 58.47321701]
[-288.73828125 44.81055450]
[-286.62536621 29.43800735]
[-275.85598755 18.26663017]
[-260.57113647 15.59204578]
[-246.64819336 22.44268799]
[-239.44079590 36.18434525]
[-224.58052063 38.22684479]
[-209.72023010 40.26934433]
[-196.05793762 34.33713913]
[-183.43986511 43.88149643]
[-168.57957458 45.92399597]
[-153.71928406 47.96649551]
[-138.85899353 50.00899506]
[-123.99870300 52.05149460]
[-109.13841248 54.09399796]
[-94.27812195 56.13649750]
[-91.92687225 54.46400833]
[-88.74354553 53.66386795]
[-85.07288361 54.06862259]
[-81.37722778 55.87392044]
[-78.18334198 59.10054016]
[-63.57035446 62.48589706]
[-48.95737076 65.87125397]
[-34.34438324 69.25660706]
[-19.73139763 72.64196777]
[-5.01135015 75.52644348]
[9.79859447 77.90668488]
[24.60853958 80.28691864]
[39.41848373 82.66716003]
[54.22842789 85.04739380]
[69.03837585 87.42763519]
[83.84832001 89.80786896]
[95.65113831 81.40312958]
[109.95706940 83.70236206]
[118.53192139 95.38217926]
[133.34185791 97.76242065]
[148.15180969 100.14266205]
[160.53607178 86.99754333]
[178.16630554 83.87914276]
[194.02915955 91.83859253]
[201.92720032 107.55757141]
[216.83013916 109.26127625]
[231.73306274 110.96497345]
[246.63600159 112.66867828]
[261.53894043 114.37238312]
[276.44186401 116.07608795]
[283.45596313 101.81542969]
[294.89913940 90.82600403]
[309.38284302 84.41600800]
[325.15814209 83.33946991]
[340.32696533 87.70760345]
[353.07043457 96.97761536]
[361.86706543 110.02010345]
[365.67425537 125.25661469]
[380.61209106 126.62063599]
[395.54995728 127.98465729]
[410.48779297 129.34867859]
[425.42565918 130.71270752]
[440.36352539 132.07672119]
[454.81008911 125.62640381]
[466.78103638 134.48899841]
[481.71890259 135.85302734]
[496.65673828 137.21704102]
[504.45800781 124.09822845]
[517.18347168 115.67057037]
[532.30651855 113.60739136]
[546.82440186 118.31834412]
[557.85467529 128.86805725]
[563.20715332 143.16186523]
[561.81921387 158.36175537]
[553.96636963 171.44973755]
[541.20782471 179.82722473]
[526.07678223 181.83082581]
[511.57754517 177.06274414]
[500.58892822 166.46968079]
[495.29272461 152.15489197]
[480.35488892 150.79087830]
[465.41702271 149.42684937]
[452.03887939 155.97474670]
[438.99948120 147.01458740]
[424.06164551 145.65055847]
[409.12377930 144.28652954]
[394.18594360 142.92251587]
[379.24807739 141.55848694]
[364.31021118 140.19447327]
[358.64721680 153.21618652]
[349.21582031 163.86019897]
[336.93328857 171.07115173]
[323.00048828 174.12864685]
[308.78436279 172.71903992]
[295.68389893 166.96768188]
[284.99243164 157.42782593]
[277.76998901 145.02745056]
[274.73815918 130.97901917]
[259.83523560 129.27531433]
[244.93229675 127.57160950]
[230.02937317 125.86791229]
[215.12643433 124.16420746]
[200.22349548 122.46050262]
[193.37126160 132.59822083]
[182.77920532 138.86833191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[77 135]
[78 134]
[79 133]
[80 132]
[81 131]
[82 130]
[90 121]
[91 120]
[92 119]
[93 118]
[94 117]
[95 116]
[97 114]
[98 113]
[99 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
