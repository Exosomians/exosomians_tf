%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:40 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGGUCGCGGUAGGUAAAAGUCCCGAUCAACUAAGCCGUCCACUCAACAAUGUGUGAGGAAUCGCCUAAG\
) } def
/len { sequence length } bind def

/coor [
[92.25896454 179.46348572]
[89.05615234 164.80940247]
[85.85333252 150.15531921]
[82.65052032 135.50125122]
[70.66883087 126.47689056]
[55.70007324 127.44451141]
[40.73131561 128.41213989]
[25.76255798 129.37976074]
[10.79380131 130.34739685]
[2.12906003 134.12071228]
[-4.83719540 131.02049255]
[-19.83372307 131.34324646]
[-26.59614754 145.07379150]
[-38.97171021 154.07957458]
[-54.11660385 156.29110718]
[-68.55063629 151.20019531]
[-78.95697021 139.97671509]
[-82.94431305 125.19971466]
[-79.59640503 110.26484680]
[-69.68256378 98.60404968]
[-55.48091507 92.89687347]
[-40.25490189 94.45478821]
[-27.50334740 102.91979980]
[-20.15646362 116.34671021]
[-5.15993690 116.02397156]
[9.82617474 115.37863922]
[24.79493141 114.41101074]
[39.76369095 113.44338226]
[54.73244858 112.47575378]
[69.70120239 111.50813293]
[68.18320465 101.58584595]
[69.77761841 91.85047913]
[74.22336578 83.23780823]
[80.99063873 76.54229736]
[89.34188843 72.34403992]
[98.41127014 70.95922852]
[107.29409790 72.41840363]
[115.13702393 76.47360229]
[121.22000122 82.63279724]
[130.80690002 70.04701996]
[145.56114197 72.08700562]
[159.32490540 66.12386322]
[172.95716858 59.86595917]
[186.45162964 53.31618881]
[199.94609070 46.76642227]
[202.53715515 31.46720505]
[213.64953613 20.63694954]
[229.01031494 18.44010735]
[242.71295166 25.72141266]
[249.48851013 39.68105316]
[246.73162842 54.95125961]
[235.50241089 65.66033173]
[220.11869812 67.69040680]
[206.49586487 60.26088333]
[193.00140381 66.81065369]
[179.50694275 73.36042023]
[174.72018433 79.29566193]
[165.28804016 79.88761902]
[151.52429199 85.85076141]
[142.92185974 98.01001740]
[127.18314362 96.39655304]
[126.01574707 113.00274658]
[115.06446838 126.80424500]
[97.30459595 132.29843140]
[100.50741577 146.95251465]
[103.71022797 161.60658264]
[106.91304016 176.26066589]
[120.35042572 184.58004761]
[123.88802338 199.98332214]
[115.42704010 213.33200073]
[99.98722076 216.70655823]
[86.72873688 208.10490417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[11 25]
[12 24]
[39 61]
[41 59]
[42 58]
[43 56]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
