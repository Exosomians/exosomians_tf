%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUGUUUUGGACCUCCAUAACCCCUAACUUGGGUCCUGGAGCACGUACGAUUCGUGCGCGAGAUGGCGACUCGAUAUGGGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[-20.17827797 309.09823608]
[-24.53122902 316.56817627]
[-30.41554260 322.88684082]
[-37.53820419 327.74691772]
[-45.54615021 330.91369629]
[-54.04378510 332.23608398]
[-62.61251450 331.65411377]
[-70.83135986 329.20138550]
[-78.29765320 325.00332642]
[-84.64675903 319.27078247]
[-97.54696655 326.92483521]
[-110.44718170 334.57888794]
[-118.00102234 349.13470459]
[-134.39355469 349.60037231]
[-142.76155090 335.49688721]
[-134.49673462 321.33267212]
[-118.10123444 321.67868042]
[-105.20101929 314.02462769]
[-92.30080414 306.37057495]
[-93.38825226 283.58749390]
[-81.38112640 264.06939697]
[-60.36056900 254.67991638]
[-37.60161972 258.80041504]
[-28.18958473 247.12078857]
[-18.77754974 235.44116211]
[-9.36551476 223.76155090]
[0.04651989 212.08192444]
[9.45855522 200.40229797]
[7.61600971 185.66661072]
[16.99477005 173.68772888]
[32.46341324 171.85501099]
[41.87545013 160.17538452]
[51.28748322 148.49575806]
[60.69952011 136.81614685]
[70.11155701 125.13652039]
[79.52359009 113.45689392]
[88.93562317 101.77727509]
[98.13768768 89.93151093]
[107.12685394 77.92339325]
[116.11602020 65.91527557]
[111.69113922 51.15971375]
[116.74419403 36.79586792]
[129.13967896 28.26263046]
[144.00508118 28.65985870]
[146.08117676 12.97546005]
[159.90237427 7.42354488]
[168.89154053 -4.58457375]
[177.88070679 -16.59269142]
[186.86987305 -28.60081100]
[195.85903931 -40.60892868]
[204.84820557 -52.61704636]
[209.49989319 -68.92036438]
[226.45379639 -68.96366882]
[231.18870544 -52.68432617]
[216.85632324 -43.62788391]
[207.86715698 -31.61976433]
[198.87799072 -19.61164665]
[189.88882446 -7.60352755]
[180.89965820 4.40459108]
[171.91050720 16.41271019]
[170.47735596 31.23820686]
[156.01319885 37.64902115]
[160.58239746 51.80036163]
[155.88702393 66.09782410]
[143.52862549 74.99295807]
[128.12414551 74.90444183]
[119.13497162 86.91255951]
[110.14580536 98.92067719]
[108.15317535 106.93649292]
[100.61524963 111.18930817]
[91.20320892 122.86892700]
[81.79117584 134.54855347]
[72.37914276 146.22817993]
[62.96710587 157.90780640]
[53.55507278 169.58741760]
[44.14303589 181.26704407]
[45.64029694 196.77175903]
[35.92877579 208.48246765]
[21.13817787 209.81433105]
[11.72614288 221.49395752]
[2.31410789 233.17358398]
[-7.09792709 244.85319519]
[-16.50996208 256.53283691]
[-25.92199707 268.21243286]
[-21.12810898 275.47604370]
[-18.05682755 283.60681152]
[-16.85444260 292.20315552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 19]
[11 18]
[12 17]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 68]
[39 67]
[40 66]
[44 62]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
