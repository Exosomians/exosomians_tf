%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAUACGUCAAAGACACCACAUCACCAAUAAUACAAGCGAAGUGUAUACUUUCCAGAGACCAAGCUCUGACGCACCCUUGUAGCACAAAAC\
) } def
/len { sequence length } bind def

/coor [
[19.10428047 299.82492065]
[5.81289196 305.66464233]
[-8.23715496 309.30932617]
[-22.68602943 310.66653442]
[-37.16382217 309.70230103]
[-51.30001450 306.44213867]
[-64.73297119 300.97033691]
[-77.11916351 293.42770386]
[-88.14200592 284.00802612]
[-99.59679413 293.69244385]
[-111.05157471 303.37686157]
[-119.24347687 318.22036743]
[-135.77461243 314.45767212]
[-136.73526001 297.53097534]
[-120.73599243 291.92208862]
[-109.28121185 282.23767090]
[-97.82642365 272.55325317]
[-105.71900177 259.22348022]
[-111.22729492 244.74140930]
[-114.18939209 229.52975464]
[-114.51769257 214.03276062]
[-112.20156097 198.70314026]
[-107.30760956 183.98895264]
[-99.97781372 170.32041931]
[-90.42538452 158.09739685]
[-78.92858124 147.67762756]
[-65.82258606 139.36633301]
[-51.48973465 133.40724182]
[-36.34836960 129.97543335]
[-20.84064102 129.17221069]
[-5.41956615 131.02210999]
[9.46417999 135.47210693]
[23.37544441 142.39323425]
[35.90731812 151.58421326]
[46.68967438 141.15632629]
[57.47202682 130.72843933]
[68.25438690 120.30055237]
[79.03673553 109.87266541]
[89.81909180 99.44477844]
[93.04895782 91.86654663]
[101.14030457 88.85609436]
[102.08930969 73.30819702]
[113.51475525 63.26260757]
[128.33145142 64.26315308]
[139.45623779 54.20138550]
[150.58100891 44.13961411]
[161.70579529 34.07784271]
[146.77348328 32.65446854]
[135.36186218 22.91922760]
[131.60359192 8.39767933]
[136.85969543 -5.65128136]
[149.22673035 -14.13990307]
[164.22601318 -13.99408054]
[176.42567444 -5.26662254]
[181.40763855 8.88187218]
[177.36903381 23.32563400]
[190.75682068 16.56048393]
[204.14460754 9.79533100]
[217.53239441 3.03017950]
[230.92016602 -3.73497224]
[235.61544800 -18.82569504]
[249.64492798 -26.10232544]
[264.68515015 -21.24776459]
[271.81304932 -7.14213896]
[266.79974365 7.84593391]
[252.61955261 14.82429695]
[237.68531799 9.65281010]
[224.29754639 16.41796112]
[210.90975952 23.18311310]
[197.52197266 29.94826508]
[184.13418579 36.71341705]
[171.76756287 45.20262527]
[160.64279175 55.26439667]
[149.51800537 65.32616425]
[138.39321899 75.38793945]
[137.90565491 90.23036957]
[126.76688385 100.59291840]
[111.20207977 99.98087311]
[100.24697876 110.22713470]
[89.46462250 120.65502167]
[78.68226624 131.08291626]
[67.89991760 141.51078796]
[57.11755753 151.93867493]
[46.33520508 162.36656189]
[54.60764313 174.33169556]
[60.86495590 187.46057129]
[64.94773865 201.41682434]
[66.75227356 215.84295654]
[66.23321533 230.36964417]
[63.40466690 244.62507629]
[58.33985519 258.24453735]
[51.16918945 270.87973022]
[42.07693481 282.20764160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 17]
[10 16]
[11 15]
[34 84]
[35 83]
[36 82]
[37 81]
[38 80]
[39 79]
[41 78]
[44 75]
[45 74]
[46 73]
[47 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
