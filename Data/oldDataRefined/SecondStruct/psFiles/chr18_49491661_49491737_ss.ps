%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:53 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCGACGAGUCUCUCAUCAACAAAAGUAAUAAUUAGGUUUCCACAGGAUUCUUUACGGUAGUAGCGUCGGUAUGAA\
) } def
/len { sequence length } bind def

/coor [
[71.80101776 231.96209717]
[75.95278168 217.10388184]
[87.49359894 206.86605835]
[85.08742523 192.06030273]
[82.68125916 177.25454712]
[80.27508545 162.44880676]
[77.86891937 147.64305115]
[75.46275330 132.83729553]
[65.03372192 143.61854553]
[52.71308136 152.17434692]
[38.96796036 158.18031311]
[24.31950378 161.40873718]
[9.32310009 161.73721313]
[-5.45266581 159.15327454]
[-19.44757652 153.75488281]
[-32.13101959 145.74674988]
[-43.02210617 135.43247986]
[-51.70790482 123.20313263]
[-57.85909653 109.52238464]
[-61.24245834 94.90893555]
[-61.72971725 79.91685486]
[-59.30239487 65.11455536]
[-54.05252457 51.06325912]
[-46.17914963 38.29572296]
[-35.98078918 27.29602051]
[-23.84411049 18.48120308]
[-10.22926998 12.18548012]
[4.34752941 8.64755154]
[19.33361244 8.00155735]
[34.16078949 10.27199078]
[48.26688766 15.37276745]
[61.11708450 23.11049461]
[72.22416687 33.19179916]
[81.16701508 45.23445129]
[87.60656738 58.78185654]
[91.29859924 73.31996918]
[98.26944733 60.03813171]
[105.24029541 46.75629044]
[100.76747131 31.83544731]
[108.02610779 18.46507454]
[122.27841187 14.29287052]
[129.24926758 1.01103020]
[136.22010803 -12.27081013]
[138.22715759 -29.10553932]
[154.95957947 -31.83724785]
[162.21652222 -16.51494408]
[149.50195312 -5.29996252]
[142.53109741 7.98187780]
[135.56025696 21.26371765]
[140.22282410 35.36322021]
[133.34260559 48.93219757]
[118.52214050 53.72713852]
[111.55129242 67.00897980]
[104.58044434 80.29081726]
[111.81732941 93.42959595]
[126.76869202 94.63659668]
[141.72004700 95.84358978]
[156.29583740 88.32838440]
[169.94393921 97.42021179]
[168.62435913 113.76618195]
[153.69456482 120.55096436]
[140.51304626 110.79495239]
[125.56169128 109.58795166]
[110.61033630 108.38095093]
[105.52487946 113.89349365]
[90.26850128 130.43112183]
[92.67467499 145.23687744]
[95.08084106 160.04263306]
[97.48701477 174.84838867]
[99.89318085 189.65414429]
[102.29935455 204.45989990]
[116.48822784 210.51623535]
[125.13144684 223.29505920]
[125.47098541 238.71868896]
[117.39849854 251.86549377]
[103.48989105 258.54037476]
[88.18334198 256.61343384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[36 54]
[37 53]
[38 52]
[41 49]
[42 48]
[43 47]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
