%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCAUCAGUACGGACUCGCAAAUGUAUUACUUUAAGUAGAAGAAAAGUAAUAUUUAAAGAAGAAAAGAUAA\
) } def
/len { sequence length } bind def

/coor [
[100.07169342 110.76430511]
[89.69261169 121.59364319]
[79.31352997 132.42298889]
[84.23652649 146.91514587]
[81.84932709 162.03334045]
[72.70049286 174.30352783]
[58.89236069 180.90609741]
[43.59793091 180.32383728]
[30.33175659 172.69053650]
[22.14230728 159.76028442]
[20.91145706 144.50434875]
[26.92204666 130.42843628]
[38.79288864 120.76708221]
[53.79614639 117.74040222]
[68.48418427 122.04390717]
[78.86326599 111.21456146]
[89.24235535 100.38522339]
[96.55777740 87.29000854]
[100.33744812 72.77401733]
[89.10932159 63.93294907]
[82.16982269 51.48982239]
[80.55857086 37.37782669]
[84.49035645 23.77466393]
[93.32717896 12.76649857]
[105.68153381 6.02803278]
[119.63419342 4.56776667]
[124.02653503 -9.77473450]
[128.41886902 -24.11723518]
[132.81121826 -38.45973587]
[137.20355225 -52.80223846]
[141.59590149 -67.14473724]
[145.98823547 -81.48723602]
[150.38058472 -95.82974243]
[154.77291870 -110.17224121]
[159.16526794 -124.51473999]
[148.63725281 -135.69761658]
[145.12680054 -150.64994812]
[149.57817078 -165.34963989]
[160.79399109 -175.84252930]
[175.75726318 -179.30610657]
[190.44291687 -174.80868530]
[200.90061951 -163.56002808]
[204.31727600 -148.58598328]
[199.77381897 -133.91448975]
[188.49244690 -123.49210358]
[173.50776672 -120.12239838]
[169.11541748 -105.77989960]
[164.72308350 -91.43740082]
[160.33073425 -77.09489441]
[155.93840027 -62.75239563]
[151.54605103 -48.40989685]
[147.15371704 -34.06739426]
[142.76136780 -19.72489357]
[138.36903381 -5.38239288]
[133.97668457 8.96010780]
[145.84048462 19.45527077]
[152.02813721 34.09895325]
[151.27934265 50.03624344]
[143.69139099 64.13662720]
[130.70985413 73.60890198]
[114.85343933 76.55368805]
[111.07376862 91.06967926]
[124.11924744 83.66593170]
[139.06703186 82.41545868]
[153.16131592 87.54882050]
[163.80361938 98.11959839]
[169.03189087 112.17893982]
[167.88224792 127.13481903]
[160.56663513 140.22991943]
[148.43379211 149.05000305]
[133.72053528 151.96896362]
[119.13947296 148.44863892]
[107.37880707 139.13807678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[18 62]
[19 61]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
