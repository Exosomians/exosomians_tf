%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUCCUACCGGCUCGCCAGAUUCCGCGACGCAAGUCCAGCGUCAGAGGGGACCUCCGCACCCAAGCUUAGGGUGAGGACUGUUCGGCUGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[21.80542755 218.43733215]
[12.53304195 230.22813416]
[3.26065755 242.01893616]
[-5.82348776 253.95535278]
[-14.71710682 266.03442383]
[-23.61072540 278.11346436]
[-32.50434494 290.19250488]
[-31.52653694 306.20574951]
[-43.53258514 316.84692383]
[-59.31247330 313.95303345]
[-66.76123047 299.74401855]
[-60.16479492 285.11984253]
[-44.58339691 281.29888916]
[-35.68978119 269.21984863]
[-26.79615974 257.14080811]
[-17.90254211 245.06173706]
[-16.44502831 237.67390442]
[-8.53013897 232.74655151]
[0.74224579 220.95574951]
[10.01463032 209.16494751]
[5.02455139 193.61506653]
[10.27586937 177.97727966]
[23.90984535 168.40112305]
[40.73170471 168.77429199]
[49.62532425 156.69523621]
[58.51894379 144.61618042]
[67.41255951 132.53712463]
[76.11341858 120.31848907]
[84.61931610 107.96333313]
[83.66795349 92.99353790]
[73.66641998 81.81456757]
[63.66488647 70.63560486]
[53.66334915 59.45663452]
[43.66181564 48.27766800]
[28.03889084 48.95462418]
[15.66744995 39.39002991]
[12.38890839 24.09999466]
[19.75129318 10.30400562]
[34.27831268 4.51610756]
[49.11074829 9.46916866]
[57.24518204 22.82450485]
[54.84078217 38.27613449]
[64.84231567 49.45510101]
[74.84384918 60.63406754]
[84.84538269 71.81303406]
[94.84692383 82.99200439]
[91.34225464 68.40717316]
[99.74642944 55.98260498]
[114.58787537 53.80737686]
[126.20398712 63.29767609]
[127.03205872 78.27480316]
[116.53337097 88.98766327]
[130.85690308 84.53385925]
[145.18043518 80.08004761]
[159.50396729 75.62624359]
[171.56521606 61.82571030]
[188.49525452 66.13513947]
[202.67025757 61.22912216]
[216.84527588 56.32310104]
[227.35581970 44.49775314]
[241.91372681 47.64682388]
[256.08874512 42.74080658]
[270.26376343 37.83478546]
[284.43878174 32.92876816]
[298.61376953 28.02274704]
[304.02523804 13.35133839]
[317.62683105 5.63572168]
[332.99630737 8.51897526]
[342.87667847 20.63971519]
[342.60272217 36.27489853]
[332.30380249 48.04207230]
[316.84274292 50.38513184]
[303.51980591 42.19776154]
[289.34478760 47.10377884]
[275.16976929 52.00979996]
[260.99475098 56.91581726]
[246.81974792 61.82183838]
[237.32308960 73.29627228]
[221.75129700 70.49811554]
[207.57627869 75.40413666]
[193.40127563 80.31015778]
[187.75358582 91.13725281]
[175.83677673 95.27542877]
[163.95777893 89.94977570]
[149.63424683 94.40358734]
[135.31071472 98.85739136]
[120.98717499 103.31119537]
[110.98019409 115.50083923]
[96.97446442 116.46923828]
[88.46856689 128.82438660]
[86.11351013 137.84536743]
[79.49161530 141.43074036]
[70.59799957 153.50979614]
[61.70437622 165.58885193]
[52.81076050 177.66790771]
[57.97409821 190.55982971]
[56.06033325 204.20491028]
[47.68310547 215.00697327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 16]
[5 15]
[6 14]
[7 13]
[24 95]
[25 94]
[26 93]
[27 92]
[28 90]
[29 89]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[52 87]
[53 86]
[54 85]
[55 84]
[57 81]
[58 80]
[59 79]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
