%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:30 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUACGACUCGAGUAAGGACUGUCACGCCUCGCGUUACUACUAUUCGAAAUGAAGAAGAAGGCACUCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[175.38168335 281.34707642]
[163.19093323 272.59091187]
[153.24966431 261.33596802]
[146.05891418 248.14460754]
[141.98210144 233.67684937]
[141.22680664 218.65742493]
[143.83412170 203.83944702]
[149.67643738 189.96659851]
[158.46371460 177.73591614]
[148.55358887 166.47583008]
[138.64347839 155.21574402]
[128.73335266 143.95565796]
[118.82322693 132.69557190]
[108.91310883 121.43549347]
[99.00299072 110.17540741]
[91.51011658 106.54728699]
[88.92364502 98.22068787]
[76.72397614 99.28065491]
[65.69887543 94.23742676]
[58.66589355 84.51192474]
[57.35695648 72.70404816]
[61.99315262 61.89823151]
[53.59352875 49.47058487]
[39.45535278 42.36970520]
[38.73883057 27.49234200]
[30.33920860 15.06469822]
[21.93958664 2.63705325]
[13.53996468 -9.79059124]
[-0.33900127 -19.52766800]
[5.17546654 -35.55973053]
[22.10754585 -34.69888687]
[25.96760941 -18.19021416]
[34.36722946 -5.76256847]
[42.76685333 6.66507626]
[51.16647339 19.09272194]
[64.70385742 25.30469513]
[66.02117157 41.07096481]
[74.42079926 53.49860764]
[92.37155914 55.65753174]
[103.47541809 70.31838226]
[100.59418488 88.79739380]
[110.26306915 100.26528168]
[120.17319489 111.52536774]
[130.08331299 122.78545380]
[139.99343872 134.04553223]
[149.90354919 145.30561829]
[159.81367493 156.56570435]
[169.72380066 167.82579041]
[182.97155762 160.66320801]
[197.47412109 156.63031006]
[212.50326538 155.92626953]
[227.30509949 158.58317566]
[241.13784790 164.46463013]
[253.30900574 173.27267456]
[263.21005249 184.56298828]
[270.34686279 197.76719666]
[274.36431885 212.22155762]
[275.06402588 227.20027161]
[272.41409302 241.95198059]
[266.55062866 255.73739624]
[257.77062988 267.86645508]
[267.68075562 279.12652588]
[277.59088135 290.38659668]
[293.29357910 295.11492920]
[296.78619385 311.13784790]
[284.47579956 321.97235107]
[269.02630615 316.47283936]
[266.33081055 300.29672241]
[256.42068481 289.03665161]
[246.51055908 277.77655029]
[233.36454773 284.94485474]
[218.94601440 289.00982666]
[203.97720337 289.76455688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[17 41]
[22 38]
[23 37]
[25 35]
[26 34]
[27 33]
[28 32]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
