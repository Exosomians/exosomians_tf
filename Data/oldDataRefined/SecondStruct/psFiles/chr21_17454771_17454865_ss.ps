%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGUGUAAAAGCACGACGUACCCGGCCCUUAGCUUGGGCCCGGAGGGCGCACCGUCCGCUCUUAAGAUGGUGACUUGGUGGGUACGUGGCUA\
) } def
/len { sequence length } bind def

/coor [
[-0.40833032 255.89530945]
[-7.90833044 268.88568115]
[-15.40832996 281.87606812]
[-22.90833092 294.86645508]
[-30.40833092 307.85684204]
[-27.66167068 323.66302490]
[-38.41429520 335.56933594]
[-54.41770935 334.44229126]
[-63.39546585 321.14645386]
[-58.46059799 305.88125610]
[-43.39871216 300.35684204]
[-35.89871216 287.36645508]
[-28.39871216 274.37606812]
[-20.89871216 261.38568115]
[-13.39871120 248.39530945]
[-15.52109146 227.97813416]
[2.68062615 216.92427063]
[0.88563377 202.13821411]
[13.62868881 192.76136780]
[19.81929398 179.09841919]
[26.00989914 165.43545532]
[32.20050430 151.77250671]
[38.39110947 138.10954285]
[44.58171463 124.44658661]
[50.77231979 110.78363037]
[56.96292877 97.12067413]
[53.79625320 82.45874023]
[42.51865768 72.56855774]
[31.24106026 62.67836761]
[19.96346283 52.78818130]
[8.68586540 42.89799500]
[-6.74116182 45.45550156]
[-20.17650604 37.45390701]
[-25.27640915 22.67131424]
[-19.63285255 8.08761597]
[-5.91055059 0.58878577]
[9.41124439 3.71554279]
[19.09804916 15.99152851]
[18.57605171 31.62039757]
[29.85364914 41.51058578]
[41.13124847 51.40077209]
[52.40884399 61.29095840]
[63.68643951 71.18114471]
[78.10987091 67.06231689]
[82.46413422 52.70820999]
[86.81840515 38.35410690]
[91.17267609 24.00000191]
[87.77452087 8.54804039]
[98.87319183 -1.38518023]
[103.22746277 -15.73928547]
[98.97867584 -31.57847404]
[110.76123047 -42.98476410]
[126.45423889 -38.22434235]
[129.91407776 -22.19432449]
[117.58156586 -11.38501549]
[113.22729492 2.96908998]
[116.93689728 17.39435005]
[105.52678680 28.35427094]
[101.17251587 42.70837784]
[96.81824493 57.06248093]
[92.46397400 71.41658783]
[103.60537720 72.47336578]
[112.86136627 77.44607544]
[119.02294159 85.09797668]
[121.51695251 93.89420319]
[136.48483276 94.87525177]
[151.45271301 95.85630035]
[166.42060852 96.83734131]
[181.38848877 97.81838989]
[192.07064819 86.39800262]
[207.60069275 84.56717682]
[220.64579773 93.19036865]
[225.04644775 108.19597626]
[218.72480774 122.49880981]
[204.66577148 129.34550476]
[189.50756836 125.50325775]
[180.40744019 112.78627777]
[165.43955994 111.80522919]
[150.47166443 110.82418060]
[135.50378418 109.84313202]
[120.53590393 108.86208344]
[96.18242645 125.68112946]
[70.62588501 103.31127930]
[64.43527985 116.97423553]
[58.24467468 130.63719177]
[52.05406952 144.30015564]
[45.86346436 157.96310425]
[39.67285538 171.62606812]
[33.48225021 185.28901672]
[27.29164696 198.95198059]
[28.64384460 214.71530151]
[16.34358406 223.11486816]
[20.96876335 231.72790527]
[20.98907089 241.36465454]
[16.53113365 249.75062561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[17 92]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[44 61]
[45 60]
[46 59]
[47 58]
[49 56]
[50 55]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
