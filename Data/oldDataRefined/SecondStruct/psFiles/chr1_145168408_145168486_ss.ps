%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGACGUACCAACAGAUCACCGAUCCUAAGCCACGACUUUCGCGGUGCCGGGCCCAAGCUAAGGGCCAGUCCCUUAAC\
) } def
/len { sequence length } bind def

/coor [
[86.78649139 219.24246216]
[86.27236938 203.94558716]
[92.93638611 190.16699219]
[105.24720001 181.07290649]
[102.90068054 166.25758362]
[100.55416870 151.44226074]
[92.79019928 150.93753052]
[85.19114685 149.26774597]
[77.93079376 146.47109985]
[71.17521667 142.61155701]
[65.07892609 137.77740479]
[59.78136063 132.07919312]
[55.40367889 125.64725494]
[52.04601669 118.62870789]
[49.78516769 111.18408203]
[48.67284012 103.48365784]
[33.71907806 102.30677032]
[18.76531982 101.12988281]
[3.81155920 99.95299530]
[-12.45313644 104.73797607]
[-21.55363083 90.43352509]
[-10.32746983 77.72881317]
[4.98844576 84.99923706]
[19.94220543 86.17612457]
[34.89596558 87.35301208]
[49.84972763 88.52989960]
[53.65543365 77.66629028]
[59.78136063 67.92081451]
[67.92081451 59.78136063]
[77.66629028 53.65543365]
[88.52989960 49.84972763]
[87.35301208 34.89596558]
[86.17612457 19.94220543]
[77.37992859 6.79163647]
[84.09480286 -6.50346327]
[82.91791534 -21.45722389]
[81.74102783 -36.41098404]
[74.47060394 -51.72689819]
[87.17531586 -62.95306015]
[101.47976685 -53.85256577]
[96.69479370 -37.58787155]
[97.87168121 -22.63410950]
[99.04856110 -7.68034983]
[107.76058197 4.40062666]
[101.12988281 18.76531982]
[102.30677032 33.71907806]
[103.48365784 48.67284012]
[117.11324310 51.48453903]
[129.49053955 57.84645462]
[139.70979309 67.29304504]
[147.02320862 79.13302612]
[150.89561462 92.50000000]
[165.89561462 92.50000000]
[180.89561462 92.50000000]
[195.89561462 92.50000000]
[210.89561462 92.50000000]
[220.80798340 80.40541840]
[236.18502808 77.56279755]
[249.76617432 85.31433868]
[255.13882446 100.00000000]
[249.76617432 114.68566132]
[236.18502808 122.43720245]
[220.80798340 119.59458160]
[210.89561462 107.50000000]
[195.89561462 107.50000000]
[180.89561462 107.50000000]
[165.89561462 107.50000000]
[150.89561462 107.50000000]
[139.11927795 133.41101074]
[115.36949158 149.09574890]
[117.71601105 163.91107178]
[120.06252289 178.72639465]
[134.58103943 183.57113647]
[145.17671204 194.61605835]
[149.41473389 209.32312012]
[146.32125854 224.31274414]
[136.60711670 236.14042664]
[122.50457001 242.08825684]
[107.25426483 240.78947449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 72]
[5 71]
[6 70]
[16 26]
[17 25]
[18 24]
[19 23]
[31 47]
[32 46]
[33 45]
[35 43]
[36 42]
[37 41]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
