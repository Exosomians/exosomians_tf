%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUUAUCGACACAGUCUUCACCCUAAGCUUGGGUGCGGAGGUACGCCUCUGGUCUUCGGGGUUUGGACCCUUCAUCGUUGAACUCAGACCGCGGAAUCUGGUGAGCCGGUAGGACUGUGCG\
) } def
/len { sequence length } bind def

/coor [
[52.99442673 306.43499756]
[47.82371902 320.97006226]
[35.60165024 330.38412476]
[20.22823715 331.67321777]
[6.60908318 324.42599487]
[-0.90999144 310.95501709]
[0.07032289 295.55883789]
[9.23721123 283.15029907]
[23.66555405 277.68893433]
[26.68503189 262.99600220]
[24.92958641 255.72798157]
[29.97159576 247.97122192]
[33.36231613 233.35948181]
[36.75303650 218.74774170]
[40.14375687 204.13600159]
[43.53448105 189.52426147]
[46.92520142 174.91250610]
[50.31592178 160.30076599]
[53.70664215 145.68902588]
[57.09736252 131.07728577]
[47.18338776 119.82059479]
[32.26034927 121.33811951]
[17.33730888 122.85564423]
[2.41426849 124.37316895]
[-12.50877094 125.89069366]
[-21.14669609 138.92604065]
[-36.15726471 143.30973816]
[-50.45294189 136.97195435]
[-57.28375244 122.90518188]
[-53.42438889 107.75132751]
[-40.69713211 98.66558075]
[-25.11139870 99.93794250]
[-14.02629566 110.96765137]
[0.89674377 109.45012665]
[15.81978321 107.93260193]
[30.74282265 106.41507721]
[45.66586304 104.89755249]
[50.33724594 90.64349365]
[39.20704269 80.58772278]
[28.07683945 70.53195190]
[16.94663429 60.47617722]
[5.81643152 50.42040634]
[-5.31377268 40.36463165]
[-21.45343781 37.45891190]
[-26.75149345 21.93916130]
[-15.75775433 9.77077103]
[0.21836409 13.47153664]
[4.74200010 29.23442841]
[15.87220383 39.29020309]
[27.00240707 49.34597397]
[38.13261032 59.40174484]
[49.26281357 69.45751953]
[60.39302063 79.51329041]
[73.37197876 67.37911987]
[89.21121216 61.87051773]
[104.92951965 63.18473434]
[117.87873840 70.30571747]
[128.21324158 59.43382645]
[138.54774475 48.56193542]
[148.88224792 37.69004440]
[152.78216553 22.35703278]
[167.15878296 18.46314240]
[177.49328613 7.59125042]
[187.82778931 -3.28064132]
[198.16229248 -14.15253353]
[208.49679565 -25.02442551]
[218.83129883 -35.89631653]
[229.16580200 -46.76820755]
[227.64575195 -56.27980804]
[230.69534302 -65.27023315]
[237.48727417 -71.70317841]
[246.36271667 -74.18570709]
[255.23535156 -72.26859283]
[266.36557007 -82.32437134]
[277.49575806 -92.38014221]
[288.62597656 -102.43591309]
[293.14959717 -118.19880676]
[309.12573242 -121.89957428]
[320.11944580 -109.73117828]
[314.82141113 -94.21143341]
[298.68173218 -91.30570984]
[287.55154419 -81.24993896]
[276.42132568 -71.19416046]
[265.29113770 -61.13838959]
[260.88818359 -41.03921509]
[240.03768921 -36.43370438]
[229.70318604 -25.56181335]
[219.36868286 -14.68992138]
[209.03417969 -3.81802917]
[198.69967651 7.05386257]
[188.36517334 17.92575455]
[178.03067017 28.79764557]
[174.86993408 43.35302353]
[159.75413513 48.02454758]
[149.41963196 58.89643860]
[139.08512878 69.76833344]
[128.75062561 80.64022064]
[133.52583313 91.20124817]
[134.55226135 102.74612427]
[131.71511841 113.98394012]
[143.80554199 122.86209869]
[155.89596558 131.74024963]
[167.98638916 140.61840820]
[184.33721924 141.87640381]
[191.17819214 156.78053284]
[181.47192383 169.99870300]
[165.20336914 167.93319702]
[159.10823059 152.70883179]
[147.01780701 143.83067322]
[134.92738342 134.95251465]
[122.83696747 126.07436371]
[100.63433838 139.62136841]
[71.70910645 134.46800232]
[68.31838226 149.07974243]
[64.92766571 163.69149780]
[61.53694153 178.30323792]
[58.14622116 192.91497803]
[54.75550079 207.52671814]
[51.36478043 222.13845825]
[47.97406006 236.75019836]
[44.58333588 251.36193848]
[41.37797928 266.01547241]
[38.35850143 280.70840454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 123]
[10 122]
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[17 116]
[18 115]
[19 114]
[20 113]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[57 97]
[58 96]
[59 95]
[60 94]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[73 84]
[74 83]
[75 82]
[76 81]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
