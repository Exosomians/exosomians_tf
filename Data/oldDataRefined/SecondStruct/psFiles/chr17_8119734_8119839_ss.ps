%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCUGUGGUGCUCCCUCCAAGGUACCACAUUACCAAUCGUGAGACCUGAGACUUAGGUCGCUAGGCUCAAGUUUAGAGCCACCUUGGAACUUCGAAAAGAAAAU\
) } def
/len { sequence length } bind def

/coor [
[75.14856720 220.46722412]
[83.39978790 206.29508972]
[82.95943451 191.30155945]
[82.51908875 176.30801392]
[82.07874298 161.31448364]
[81.63839722 146.32095337]
[68.68487549 138.75747681]
[55.41091156 145.74331665]
[42.13695145 152.72915649]
[28.86299324 159.71499634]
[15.58903217 166.70083618]
[2.31507254 173.68667603]
[-10.95888805 180.67251587]
[-24.23284721 187.65837097]
[-26.32419777 203.03385925]
[-37.07791901 214.22032166]
[-52.35898972 216.91633606]
[-66.29152679 210.08523560]
[-73.51818085 196.35369873]
[-71.26016235 181.00178528]
[-60.38571930 169.93263245]
[-45.07630157 167.40255737]
[-31.21868896 174.38439941]
[-17.94472885 167.39855957]
[-4.67076921 160.41271973]
[8.60319042 153.42687988]
[21.87715149 146.44104004]
[35.15111160 139.45520020]
[48.42507172 132.46936035]
[61.69903183 125.48351288]
[53.81797028 99.02077484]
[62.50915909 72.69411469]
[50.66493607 63.49007416]
[38.82071304 54.28602982]
[26.97649002 45.08198929]
[10.94328308 45.64397049]
[0.61722469 33.36585617]
[3.91958332 17.66636658]
[18.31707191 10.58880520]
[32.76517105 17.56247139]
[36.18053055 33.23776627]
[48.02475357 42.44180679]
[59.86897659 51.64585114]
[71.71320343 60.84989166]
[85.08827972 54.05966187]
[84.64793396 39.06612778]
[84.20758820 24.07259178]
[83.76724243 9.07905769]
[83.32689667 -5.91447783]
[82.88654327 -20.90801239]
[82.44619751 -35.90154648]
[75.93748474 -51.55635452]
[89.17870331 -62.14438629]
[103.01848602 -52.35169983]
[97.43973541 -36.34189606]
[97.88008118 -21.34836006]
[98.32042694 -6.35482454]
[98.76077271 8.63871098]
[99.20111847 23.63224602]
[99.64147186 38.62578201]
[100.08181763 53.61931610]
[109.26501465 55.58764267]
[117.66303253 59.31230927]
[124.95320129 64.55947113]
[130.87431335 71.03896332]
[135.23580933 78.41935730]
[149.23687744 73.03698730]
[163.23796082 67.65460968]
[177.23902893 62.27224350]
[191.24011230 56.88986969]
[196.15252686 42.04392242]
[209.48553467 33.87294388]
[224.94369507 36.23501968]
[235.22813416 48.01484680]
[235.48284912 63.65035629]
[225.58758545 75.75893402]
[210.21456909 78.62328339]
[196.62248230 70.89094543]
[182.62139893 76.27331543]
[168.62033081 81.65568542]
[154.61924744 87.03805542]
[140.61817932 92.42043304]
[141.31199646 99.22158813]
[140.87487793 106.04405212]
[139.31881714 112.70106506]
[136.68640137 119.01037598]
[148.53062439 128.21441650]
[160.37484741 137.41845703]
[172.21907043 146.62249756]
[188.52958679 148.32519531]
[194.96223450 163.41006470]
[184.89967346 176.35906982]
[168.69338989 173.85139465]
[163.01502991 158.46672058]
[151.17080688 149.26268005]
[139.32658386 140.05863953]
[127.48236084 130.85459900]
[119.06294250 138.41062927]
[108.55477905 143.61134338]
[96.63193512 145.88059998]
[97.07228088 160.87414551]
[97.51262665 175.86767578]
[97.95297241 190.86120605]
[98.39331818 205.85473633]
[107.46204376 219.51820374]
[99.92218018 234.08126831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[32 44]
[33 43]
[34 42]
[35 41]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
