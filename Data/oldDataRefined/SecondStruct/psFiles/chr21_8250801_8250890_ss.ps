%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGCUGGAGCGGCAGGGCGGGCGGCGGAAGACGCAGCGCCCACGCCCGGCCGCCCCAGGAGACUGCGCCGUCUGUCGGGAGCGACAGC\
) } def
/len { sequence length } bind def

/coor [
[168.39466858 204.49870300]
[171.19850159 193.71040344]
[162.89187622 181.22039795]
[154.58525085 168.73040771]
[146.06428528 156.38565063]
[137.33149719 144.18980408]
[127.19234467 133.13551331]
[115.79467010 123.38394165]
[104.39698792 113.63238525]
[90.68794250 110.88397980]
[85.85144806 97.76529694]
[74.45377350 88.01373291]
[63.05609512 78.26216888]
[51.65841675 68.51061249]
[40.26073837 58.75904846]
[24.74469566 55.66664886]
[20.10399055 41.51344681]
[8.70631218 31.76188660]
[-2.69136524 22.01032448]
[-14.08904266 12.25876427]
[-25.81651497 2.90641689]
[-37.85980606 -6.03557062]
[-49.90309906 -14.97755814]
[-61.94638824 -23.91954422]
[-73.98967743 -32.86153412]
[-86.33443451 -41.38250351]
[-98.96595001 -49.47230530]
[-111.59746552 -57.56210327]
[-127.51329041 -55.54566574]
[-138.91223145 -66.83476257]
[-137.04998779 -82.76937103]
[-123.35512543 -91.12581635]
[-108.33316040 -85.49375153]
[-103.50765991 -70.19361877]
[-90.87615204 -62.10381699]
[-78.24463654 -54.01401520]
[-73.27477264 -54.20528412]
[-68.17662048 -51.12459946]
[-65.04769135 -44.90482330]
[-53.00440216 -35.96283722]
[-40.96110916 -27.02084923]
[-28.91781807 -18.07886124]
[-16.87452698 -9.13687420]
[-11.90330601 -8.98480701]
[-7.02984810 -5.55973959]
[-4.33748102 0.86108649]
[7.06019640 10.61264801]
[18.45787430 20.36421013]
[29.85555077 30.11577034]
[44.55635834 32.51067352]
[50.01230240 47.36137009]
[61.40997696 57.11293030]
[72.80765533 66.86449432]
[84.20532990 76.61605835]
[95.60301208 86.36761475]
[109.31205750 89.11602020]
[114.14855194 102.23470306]
[125.54622650 111.98626709]
[136.94390869 121.73783112]
[137.29208374 106.74186707]
[146.97958374 95.28969574]
[161.71026611 92.46003723]
[174.95147705 99.50776672]
[180.83106995 113.30741119]
[176.74163818 127.73920441]
[164.49671936 136.40303040]
[149.52734375 135.45703125]
[158.26011658 147.65286255]
[165.96945190 152.95162964]
[167.07524109 160.42378235]
[175.38186646 172.91377258]
[183.68849182 185.40377808]
[202.08709717 193.28010559]
[202.99557495 212.46595764]
[212.14410400 224.35311890]
[221.29263306 236.24026489]
[230.44116211 248.12742615]
[239.58969116 260.01458740]
[248.73822021 271.90173340]
[264.09616089 277.65200806]
[266.52798462 293.86984253]
[253.53202820 303.87170410]
[238.47743225 297.36856079]
[236.85105896 281.05026245]
[227.70252991 269.16311646]
[218.55400085 257.27593994]
[209.40547180 245.38879395]
[200.25694275 233.50164795]
[191.10841370 221.61448669]
[180.63822937 221.16439819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 68]
[6 67]
[7 59]
[8 58]
[9 57]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[19 47]
[20 46]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 36]
[27 35]
[28 34]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
