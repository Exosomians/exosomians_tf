%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:33 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAUCCCUCCUUAUGGUUUGGGUCUGUUGAGUCCACCCAGUGUCUACGGUUCGUCGACACCACCCUA\
) } def
/len { sequence length } bind def

/coor [
[91.07827759 218.70240784]
[76.21053314 220.68995667]
[61.29914856 219.06192017]
[47.21058655 213.91288757]
[34.76351166 205.54208374]
[24.68120384 194.43591309]
[17.54952621 181.23973083]
[13.78288651 166.72035217]
[13.60016060 151.72146606]
[17.01196480 137.11463928]
[23.82004356 123.74862671]
[33.62879562 112.40013123]
[45.86824799 103.72858429]
[59.82719040 98.23786163]
[74.69448853 96.24703979]
[89.60897064 97.87242889]
[81.34552002 85.35382843]
[73.08206177 72.83522797]
[60.43163300 69.38916779]
[53.85119247 58.51977921]
[56.48935318 46.50512314]
[48.79586411 33.62839127]
[41.10237503 20.75165749]
[33.40888596 7.87492561]
[26.08178711 1.87296832]
[25.67406082 -5.75665045]
[18.56603050 -18.96558380]
[4.33875895 -27.12136459]
[4.55882215 -43.51903534]
[18.99983788 -51.29007721]
[32.80612946 -42.44031143]
[31.77496338 -26.07361412]
[38.88299561 -12.86468029]
[46.28561783 0.18143642]
[53.97910690 13.05816841]
[61.67259598 25.93490028]
[69.36608124 38.81163025]
[85.07069397 46.31933212]
[85.60066223 64.57177734]
[93.86412048 77.09037781]
[102.12757111 89.60897064]
[115.49266815 96.41883087]
[130.47756958 95.74585724]
[145.46246338 95.07288361]
[160.44735718 94.39990997]
[175.43225098 93.72694397]
[188.87139893 85.37828827]
[201.93298340 92.53678894]
[216.91787720 91.86381531]
[231.90277100 91.19084930]
[247.45469666 84.43997192]
[258.24694824 97.51528931]
[248.67019653 111.50537109]
[232.57574463 106.17574310]
[217.59085083 106.84871674]
[202.60595703 107.52169037]
[190.23863220 115.82220459]
[176.10522461 108.71183777]
[161.12033081 109.38481140]
[146.13543701 110.05778503]
[131.15054321 110.73075104]
[116.16564178 111.40372467]
[126.24549866 122.51212311]
[133.37426758 135.70988464]
[137.13769531 150.23008728]
[137.31710815 165.22901917]
[133.90208435 179.83509827]
[127.09104919 193.19960022]
[117.27979279 204.54592896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 41]
[17 40]
[18 39]
[21 37]
[22 36]
[23 35]
[24 34]
[26 33]
[27 32]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
