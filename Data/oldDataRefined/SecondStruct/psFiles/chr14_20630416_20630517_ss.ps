%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACUUUUGUGUCUCUCUUAGCUUGGCCGGUGGAAUUCCUACCGGCAUCAACCUUUAAGAAUCUCAGGAGGCGAGAUGGUCCACUCGAUAGCCUUUCACAGA\
) } def
/len { sequence length } bind def

/coor [
[186.70429993 179.81692505]
[174.81561279 170.67039490]
[167.47029114 169.05920410]
[162.70948792 161.05914307]
[151.10527039 151.55430603]
[139.50105286 142.04946899]
[127.89682770 132.54461670]
[116.29261017 123.03977966]
[104.68838501 113.53493500]
[90.92354584 111.08121490]
[85.80677032 98.06929016]
[70.29061890 99.44290161]
[58.65768814 89.63833618]
[57.44377899 74.83758545]
[45.83955765 65.33274841]
[34.23533630 55.82790375]
[19.30066109 59.60436630]
[5.17111826 53.92903137]
[-2.81282449 41.17283249]
[-1.76698411 26.33894539]
[-13.37120533 16.83410263]
[-28.95001221 14.07522774]
[-33.89323044 0.02482282]
[-45.49745178 -9.48002052]
[-57.10167313 -18.98486328]
[-68.99035645 -28.13140106]
[-81.15245056 -36.91112518]
[-93.31453705 -45.69084930]
[-105.47663116 -54.47057343]
[-117.63871765 -63.25029755]
[-129.80081177 -72.03002167]
[-141.96290588 -80.80974579]
[-154.12498474 -89.58946991]
[-170.12832642 -88.46123505]
[-180.88183594 -100.36676025]
[-178.13635254 -116.17314911]
[-163.99797058 -123.75508881]
[-149.31245422 -117.29636383]
[-145.34526062 -101.75156403]
[-133.18318176 -92.97183990]
[-121.02108765 -84.19211578]
[-108.85899353 -75.41239166]
[-96.69690704 -66.63266754]
[-84.53481293 -57.85293961]
[-72.37272644 -49.07321548]
[-60.21063232 -40.29349136]
[-55.27901459 -40.19716644]
[-50.39708710 -36.88412476]
[-47.59682846 -30.58908463]
[-35.99260712 -21.08424187]
[-24.38838577 -11.57939911]
[-9.63959217 -9.50037384]
[-3.86636281 5.22988081]
[7.73785877 14.73472404]
[22.07518578 10.78769207]
[36.15402603 16.10278511]
[44.50114059 28.83774185]
[43.74018097 44.22368240]
[55.34440231 53.72852325]
[66.94862366 63.23336792]
[81.69853210 61.50835037]
[93.60226440 70.98230743]
[95.31161499 86.46506500]
[109.07645416 88.91878510]
[114.19322968 101.93070984]
[125.79744720 111.43555450]
[137.40167236 120.94039917]
[149.00588989 130.44523621]
[160.61012268 139.95008850]
[172.21434021 149.45492554]
[183.96215820 158.78170776]
[195.85084534 167.92823792]
[208.52555847 175.95018005]
[221.88024902 182.78041077]
[235.23495483 189.61064148]
[248.58964539 196.44088745]
[257.82641602 197.60192871]
[262.24273682 203.68847656]
[275.38290405 210.92280579]
[288.52310181 218.15711975]
[301.62368774 210.14027405]
[316.97796631 209.76380920]
[330.45571899 217.12901306]
[338.43145752 230.25466919]
[338.75979614 245.61006165]
[331.35238647 259.06463623]
[318.20178223 266.99920654]
[302.84545898 267.27941895]
[289.41415405 259.82986450]
[281.52084351 246.65444946]
[281.28878784 231.29731750]
[268.14859009 224.06298828]
[255.00840759 216.82867432]
[241.75941467 209.79557800]
[228.40472412 202.96534729]
[215.05001831 196.13511658]
[201.69532776 189.30488586]
[204.15840149 204.10127258]
[195.66743469 216.46669006]
[180.97361755 219.48194885]
[168.29901123 211.45983887]
[164.73579407 196.88919067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[11 63]
[14 60]
[15 59]
[16 58]
[20 54]
[21 53]
[23 51]
[24 50]
[25 49]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[73 97]
[74 96]
[75 95]
[76 94]
[78 93]
[79 92]
[80 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
