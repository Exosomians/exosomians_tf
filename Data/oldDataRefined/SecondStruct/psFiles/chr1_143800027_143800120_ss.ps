%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUUUUUGGAGAACGGAACUGGCCCUUAACUUGGGCCCAGAGGGCGCACACUCCGCUCUUGGGAUGGUGACUUGGUGGUCACGGAGAGGGGU\
) } def
/len { sequence length } bind def

/coor [
[80.36809540 122.50526428]
[71.95737457 134.92539978]
[63.54664612 147.34553528]
[55.13592148 159.76565552]
[46.72519302 172.18579102]
[38.31446838 184.60592651]
[29.90374184 197.02606201]
[26.02892494 213.53128052]
[9.09608364 214.37698364]
[3.59594750 198.33999634]
[17.48361015 188.61532593]
[25.89433670 176.19520569]
[34.30506134 163.77507019]
[42.71578598 151.35493469]
[51.12651443 138.93479919]
[59.53723907 126.51467133]
[67.94796753 114.09453583]
[64.99121094 99.38883972]
[49.71217346 102.42015076]
[37.09395981 93.92101288]
[34.29822540 79.33611298]
[21.74072838 71.13188934]
[8.79188156 63.56040573]
[-4.51646042 56.64028931]
[-17.82480240 49.72016907]
[-31.13314438 42.80005264]
[-44.44148636 35.87993622]
[-58.81569672 42.03754044]
[-73.76998138 37.46551132]
[-82.24338531 24.32262611]
[-80.23501587 8.81454754]
[-68.69318390 -1.73628163]
[-53.06756973 -2.34808230]
[-40.73612213 7.26801872]
[-37.52136993 22.57159233]
[-24.21302795 29.49171066]
[-10.90468597 36.41182709]
[2.40365672 43.33194351]
[15.71199894 50.25206375]
[19.33304024 49.41665268]
[23.55013275 50.42584610]
[27.42685127 53.54356003]
[29.94495201 58.57439041]
[42.50244904 66.77861023]
[56.98194885 63.48018265]
[69.83390808 71.62154388]
[73.19543457 86.83133698]
[83.40196228 76.67436218]
[96.64568329 72.81419373]
[109.52958679 75.64219666]
[119.02426147 83.90507507]
[123.17979431 95.14442444]
[138.07943726 96.87669373]
[152.97906494 98.60896301]
[167.87870789 100.34123230]
[182.77835083 102.07350159]
[197.37973022 95.98167419]
[209.12831116 105.13701630]
[224.02793884 106.86928558]
[238.92758179 108.60155487]
[253.82722473 110.33382416]
[245.64903259 97.75935364]
[247.19206238 82.83892822]
[257.77047729 72.20421600]
[272.68249512 70.58202362]
[285.30020142 78.69335938]
[290.01538086 92.93298340]
[284.73229980 106.97183228]
[271.79925537 114.57003021]
[285.90405273 119.67442322]
[300.00881958 124.77882385]
[314.11361694 129.88322449]
[328.21841431 134.98762512]
[342.32321167 140.09201050]
[358.36422729 136.68354797]
[369.13397217 149.05061340]
[363.55346680 164.47105408]
[347.36343384 167.08163452]
[337.21881104 154.19680786]
[323.11401367 149.09240723]
[309.00921631 143.98800659]
[294.90441895 138.88362122]
[280.79965210 133.77922058]
[266.69485474 128.67481995]
[252.09495544 125.23345947]
[237.19531250 123.50119019]
[222.29566956 121.76892090]
[207.39604187 120.03665161]
[193.86038208 126.25238037]
[181.04608154 116.97313690]
[166.14643860 115.24086761]
[151.24679565 113.50859833]
[136.34716797 111.77632904]
[121.44752502 110.04405975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[18 47]
[21 44]
[22 43]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[58 88]
[59 87]
[60 86]
[61 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
