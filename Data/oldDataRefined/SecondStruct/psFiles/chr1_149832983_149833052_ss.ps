%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAGCCUCCGAUCCGGCGGCGAGGUCGAAACGUGCAAAGCUAGGGUUUCCGGGAAAAAUCCCGGCUGGU\
) } def
/len { sequence length } bind def

/coor [
[128.02688599 149.37188721]
[107.51403046 156.27281189]
[85.90918732 154.99580383]
[66.35211182 145.72647095]
[51.68496323 129.81185913]
[37.99079514 135.93312073]
[24.29662514 142.05436707]
[14.85529900 154.74972534]
[0.07853954 152.87977600]
[-13.61562920 159.00103760]
[-27.30979729 165.12229919]
[-39.30263519 177.10595703]
[-54.13792038 168.89921570]
[-50.35871506 152.37184143]
[-33.43105316 151.42811584]
[-19.73688316 145.30686951]
[-6.04271460 139.18560791]
[2.41911364 126.92810059]
[18.17537117 128.36019897]
[31.86953926 122.23894501]
[45.56370926 116.11769104]
[43.54749680 106.01702881]
[43.38942719 95.71832275]
[45.09469986 85.56053925]
[48.60718918 75.87803650]
[53.81128311 66.98950958]
[60.53568268 59.18753433]
[68.55905151 52.72890091]
[77.61730957 47.82620239]
[87.41229248 44.64081192]
[97.62160492 43.27757645]
[107.90920258 43.78136826]
[117.93647003 46.13560486]
[127.37335205 50.26279449]
[135.90924072 56.02709198]
[143.26316833 63.23876190]
[149.19308472 71.66043091]
[153.50379944 81.01490784]
[156.05342102 90.99427795]
[156.75805664 101.27007294]
[171.57853699 103.58380127]
[186.39901733 105.89753723]
[201.21949768 108.21127319]
[216.03997803 110.52500916]
[220.18556213 108.51685333]
[224.34864807 107.97434235]
[228.06964111 108.72514343]
[230.99172974 110.46623230]
[232.89445496 112.80860901]
[233.71023560 115.32964325]
[247.66177368 120.83916473]
[261.61328125 126.34868622]
[275.56481934 131.85821533]
[289.51635742 137.36773682]
[303.46789551 142.87725830]
[319.60061646 139.93336487]
[330.00881958 152.60624695]
[323.98538208 167.85913086]
[307.72671509 170.00114441]
[297.95834351 156.82879639]
[284.00683594 151.31925964]
[270.05529785 145.80973816]
[256.10375977 140.30021667]
[242.15223694 134.79069519]
[228.20071411 129.28117371]
[213.72624207 125.34548950]
[198.90576172 123.03175354]
[184.08528137 120.71801758]
[169.26480103 118.40428162]
[154.44432068 116.09055328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[9 17]
[10 16]
[11 15]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
