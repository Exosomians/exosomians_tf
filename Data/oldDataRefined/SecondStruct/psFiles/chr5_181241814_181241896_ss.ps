%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGGAAGUCUUAACGUCCUGUACAGGAGUGAGGGUGAACCCCUAACCGACUGUUACGGUAGACAGUAGUGGUCCUGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[127.92729950 150.60447693]
[120.26493835 137.70919800]
[122.37555695 122.85843658]
[133.32839966 112.60816193]
[118.49594116 110.37252808]
[105.57379150 120.46025085]
[89.32062531 118.32048035]
[79.44968414 105.23199463]
[64.86998749 111.37551117]
[53.08904266 102.26186371]
[38.18335724 100.58239746]
[23.27767563 98.90292358]
[8.37199211 97.22345734]
[-6.53369093 95.54399109]
[-15.66354370 97.72662354]
[-21.96153069 93.51287842]
[-31.16661072 95.35260773]
[-37.30263519 90.90631866]
[-52.04113388 88.11764526]
[-66.77963257 85.32897186]
[-81.51812744 82.54029846]
[-96.80987549 88.46436310]
[-109.41476440 77.97395325]
[-106.36597443 61.86070251]
[-90.79983521 56.70054245]
[-78.72945404 67.80180359]
[-63.99095535 70.59047699]
[-49.25246048 73.37915039]
[-34.51396179 76.16782379]
[-19.72589684 78.68041992]
[-4.85422373 80.63831329]
[10.05145931 82.31777954]
[24.95714188 83.99724579]
[39.86282730 85.67671204]
[54.76850891 87.35617828]
[68.28205872 81.09252930]
[81.12915802 90.32630920]
[90.14931488 81.22093964]
[102.76792145 78.97554779]
[114.37541199 84.41036224]
[120.73157501 95.54006958]
[135.56404114 97.77570343]
[150.56141663 98.05618286]
[165.46710205 96.37671661]
[180.37277222 94.69725037]
[195.27845764 93.01778412]
[210.11093140 90.78215027]
[224.84942627 87.99347687]
[239.58792114 85.20480347]
[254.32641602 82.41612244]
[268.95034790 79.07831573]
[283.43920898 75.19602966]
[297.92810059 71.31374359]
[312.41699219 67.43145752]
[326.90588379 63.54916763]
[341.39477539 59.66688538]
[349.07885742 45.85637283]
[364.30053711 41.60475159]
[378.02902222 49.43443298]
[382.11947632 64.70020294]
[374.14511108 78.34515381]
[358.83694458 82.27397919]
[345.27706909 74.15576935]
[330.78817749 78.03805542]
[316.29928589 81.92034149]
[301.81039429 85.80262756]
[287.32150269 89.68491364]
[272.83261108 93.56719971]
[269.61260986 97.39627075]
[263.85839844 99.08688354]
[257.11508179 97.15462494]
[242.37658691 99.94329834]
[227.63809204 102.73197174]
[212.89959717 105.52064514]
[209.40243530 109.09838104]
[203.53799438 110.35425568]
[196.95793152 107.92346191]
[182.05224609 109.60293579]
[167.14656067 111.28240204]
[152.24087524 112.96186829]
[162.80229187 123.61346436]
[164.35691833 138.53268433]
[156.21839905 151.13285828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[8 37]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[16 30]
[18 29]
[19 28]
[20 27]
[21 26]
[43 80]
[44 79]
[45 78]
[46 77]
[47 74]
[48 73]
[49 72]
[50 71]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
