%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCCAGAGGGCCUCGCCCUGGCCCAGCCUCCUACCUGCUCUUAGUGCUCGCUGCCACCACCACCGCACAGCCCAAGCACCGACGCCAGCGA\
) } def
/len { sequence length } bind def

/coor [
[34.89172363 208.60345459]
[25.37582588 220.19862366]
[15.85992622 231.79377747]
[13.08620358 247.36994934]
[-0.96890610 252.29975891]
[-10.48480511 263.89492798]
[-20.00070381 275.49008179]
[-29.51660347 287.08523560]
[-31.65263748 303.34466553]
[-46.90329742 309.37371826]
[-59.58000946 298.97021484]
[-56.64205933 282.83639526]
[-41.11175919 277.56933594]
[-31.59586143 265.97418213]
[-22.07996178 254.37902832]
[-12.56406307 242.78387451]
[-10.47098064 228.03706360]
[4.26476955 222.27787781]
[13.78066921 210.68272400]
[23.29656792 199.08755493]
[32.42798996 187.18725586]
[40.96449280 174.85324097]
[49.29804611 162.38119507]
[57.63159943 149.90914917]
[65.96514893 137.43710327]
[74.29870605 124.96506500]
[64.55750275 105.25740051]
[68.15841675 83.57061768]
[56.56326294 74.05471802]
[44.96810532 64.53881836]
[29.98836517 68.58690643]
[15.50212765 63.02555847]
[7.07964754 49.99323654]
[7.95953989 34.50112915]
[17.80346870 22.50626755]
[32.82624054 18.62092209]
[47.25129700 24.33908653]
[55.53190613 37.46200943]
[54.48400497 52.94366074]
[66.07916260 62.45956039]
[77.67431641 71.97546387]
[84.63818359 67.62986755]
[92.40830231 64.98319244]
[100.57686615 64.17433929]
[108.71514893 65.24576569]
[116.39603424 68.14123535]
[123.21637726 72.70877838]
[128.81823730 78.70868683]
[142.48120117 72.51808167]
[156.14414978 66.32747650]
[169.80711365 60.13686752]
[183.47006226 53.94626236]
[194.22563171 37.05214310]
[213.31454468 39.28937912]
[226.54336548 32.21842957]
[239.77218628 25.14747810]
[253.00100708 18.07652664]
[251.47622681 2.95225787]
[255.86012268 -11.60280895]
[265.48416138 -23.36913109]
[278.88073730 -30.55243301]
[294.00701904 -32.05730820]
[308.55630493 -27.65427780]
[320.30993652 -18.01477242]
[327.47561646 -4.60874367]
[328.96060181 10.51948452]
[324.53842163 25.06296730]
[314.88348389 36.80392838]
[301.46801758 43.95195770]
[286.33786011 45.41703415]
[271.80020142 40.97574234]
[260.07196045 31.30534554]
[246.84313965 38.37629700]
[233.61431885 45.44724655]
[220.38549805 52.51819992]
[218.22943115 62.74942398]
[210.56405640 70.18319702]
[199.83445740 72.10298920]
[189.66067505 67.60922241]
[175.99771118 73.79982758]
[162.33476257 79.99043274]
[148.67179871 86.18103790]
[135.00883484 92.37164307]
[134.98104858 107.75479126]
[128.50527954 121.70851898]
[116.77518463 131.66076660]
[101.95296478 135.77703857]
[86.77075195 133.29861450]
[78.43719482 145.77066040]
[70.10364532 158.24270630]
[61.77008820 170.71475220]
[53.43653488 183.18679810]
[51.20315170 192.25015259]
[44.62068939 195.92442322]
[43.54557419 202.77043152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[8 13]
[21 94]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[28 41]
[29 40]
[30 39]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[54 75]
[55 74]
[56 73]
[57 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
