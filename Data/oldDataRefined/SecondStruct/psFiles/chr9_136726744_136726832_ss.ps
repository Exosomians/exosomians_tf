%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUCACACUCUGAUAGUUUGUAAGUUUGCAAGUGCCCCGUCUUGCGACUCGCAUCUGUAUCGGAGAGAUUAGAGACGGUGGAUUACU\
) } def
/len { sequence length } bind def

/coor [
[199.02778625 330.27835083]
[193.40869141 316.37057495]
[187.78959656 302.46282959]
[181.92861938 288.65524292]
[175.82757568 274.95208740]
[159.81875610 273.70068359]
[146.51330566 264.54574585]
[139.54336548 249.87315369]
[140.86814880 233.58990479]
[150.22428894 220.08386230]
[143.64872742 206.60194397]
[137.07316589 193.12004089]
[130.49758911 179.63812256]
[123.92202759 166.15621948]
[117.34645844 152.67430115]
[110.77088928 139.19239807]
[104.19532776 125.71047974]
[88.22754669 123.23873901]
[76.78881836 111.82669067]
[74.27979279 95.86472321]
[81.66573334 81.49366760]
[74.62366486 68.24945831]
[67.58158875 55.00524139]
[54.27116776 46.45285416]
[55.12770844 31.58289909]
[48.08563232 18.33868599]
[41.04356003 5.09447145]
[34.00148773 -8.14974213]
[27.05824471 -14.42532635]
[26.95393181 -21.98134613]
[20.37836456 -35.46325684]
[13.80279827 -48.94516754]
[7.22723055 -62.42707825]
[0.65166348 -75.90898895]
[-14.65248108 -78.47077942]
[-25.50397301 -89.56243134]
[-27.73019028 -104.91898346]
[-20.47510719 -118.63552094]
[-6.52845240 -125.43775940]
[8.74700165 -122.71009827]
[19.47753143 -111.50138092]
[21.53702736 -96.12158203]
[14.13357449 -82.48455811]
[20.70914078 -69.00264740]
[27.28470802 -55.52073669]
[33.86027527 -42.03882599]
[40.43584442 -28.55691338]
[47.24570084 -15.19181538]
[54.28777313 -1.94760191]
[61.32984924 11.29661179]
[68.37191772 24.54082680]
[81.17864227 32.14589691]
[80.82579803 47.96316910]
[87.86787415 61.20738220]
[94.90995026 74.45159912]
[108.23983765 75.28695679]
[119.40380859 82.61834717]
[125.46732330 94.51866913]
[124.83652496 107.85979462]
[117.67723846 119.13491058]
[124.25279999 132.61682129]
[130.82836914 146.09873962]
[137.40393066 159.58064270]
[143.97950745 173.06256104]
[150.55506897 186.54446411]
[157.13064575 200.02638245]
[163.70620728 213.50828552]
[177.80990601 213.78022766]
[190.33917236 220.11514282]
[198.83799744 231.20648193]
[201.66860962 244.82186890]
[198.32682800 258.25228882]
[189.53076172 268.85101318]
[195.63180542 282.55419922]
[202.12037659 289.29882812]
[201.69735718 296.84371948]
[207.31645203 310.75149536]
[212.93554688 324.65924072]
[228.16986084 325.59658813]
[241.48460388 333.05853271]
[250.23612976 345.56347656]
[252.68681335 360.62854004]
[248.35006714 375.26260376]
[238.08697510 386.56002808]
[223.93525696 392.27767944]
[208.70475769 391.28033447]
[195.41950989 383.76605225]
[186.71728516 371.22674561]
[184.32594299 356.15213013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 74]
[5 73]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[21 55]
[22 54]
[23 53]
[25 51]
[26 50]
[27 49]
[28 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
