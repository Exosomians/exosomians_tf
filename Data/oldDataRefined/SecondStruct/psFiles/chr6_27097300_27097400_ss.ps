%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUUCUGCUCCACCGGCUCACCAAUUCCGCUACCUGACGAUUAGGUAACACGAGACGUGCGCACCCAAGCUUAGGGUGGGAGCAGCCCCCUCCAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[109.94226074 293.50241089]
[105.27554321 279.14538574]
[104.65651703 264.06164551]
[108.13111115 249.37049866]
[115.44148254 236.16212463]
[126.04517365 225.41668701]
[139.15530396 217.93156433]
[135.49659729 203.38461304]
[131.83789062 188.83766174]
[128.17918396 174.29071045]
[124.52047729 159.74374390]
[120.86177063 145.19679260]
[117.20306396 130.64984131]
[98.05882263 133.44990540]
[81.29421234 125.79636383]
[71.86572266 111.04106140]
[56.97941589 112.88438416]
[42.09310913 114.72770691]
[36.18040085 128.90287781]
[23.96253204 138.20982361]
[8.72604275 140.14501953]
[-5.43052530 134.18791199]
[-14.69912720 121.94092560]
[-16.58655548 106.69844818]
[-10.58510017 92.56062317]
[1.69087493 83.33045197]
[16.93919563 81.49081421]
[31.05813980 87.53655243]
[40.24978256 99.84140015]
[55.13609314 97.99807739]
[70.02239990 96.15475464]
[72.35198975 87.79221344]
[76.96254730 80.43681335]
[68.29593658 68.19386292]
[59.62933350 55.95090485]
[50.96272659 43.70795059]
[42.29611969 31.46499825]
[33.62950897 19.22204399]
[24.96290207 6.97909117]
[10.87646294 -2.45534301]
[16.04268074 -18.60299110]
[32.98942566 -18.10878372]
[37.20585632 -1.68751645]
[45.87246323 10.55543709]
[54.53907013 22.79839134]
[63.20568085 35.04134369]
[71.87228394 47.28429794]
[80.53889465 59.52725220]
[89.20549774 71.77020264]
[95.36401367 70.13446808]
[101.72859192 69.82626343]
[106.27588654 55.53213120]
[110.82317352 41.23800278]
[115.37046051 26.94387245]
[114.41033173 10.01713371]
[130.40977478 4.40873289]
[140.22807312 18.23035240]
[129.66459656 31.49116325]
[125.11730194 45.78529358]
[120.57001495 60.07942200]
[116.02272034 74.37355042]
[124.80257416 79.99522400]
[131.52693176 88.65465546]
[135.14508057 99.57337189]
[149.57246399 95.46842194]
[163.99984741 91.36347961]
[178.42723083 87.25853729]
[192.85461426 83.15358734]
[199.07875061 68.80805969]
[213.09086609 61.86582947]
[228.27487183 65.60480499]
[237.46134949 78.25955200]
[236.31271362 93.85489655]
[225.37132263 105.02718353]
[209.80337524 106.50120544]
[196.95956421 97.58097839]
[182.53216553 101.68592072]
[168.10478210 105.79086304]
[153.67739868 109.89581299]
[139.25001526 114.00075531]
[131.75001526 126.99113464]
[135.40872192 141.53808594]
[139.06742859 156.08503723]
[142.72613525 170.63200378]
[146.38484192 185.17895508]
[150.04354858 199.72590637]
[153.70225525 214.27285767]
[168.79359436 214.66502380]
[183.21917725 219.11535645]
[195.90849304 227.29359436]
[205.91995239 238.59286499]
[212.51058960 252.17469788]
[215.19137573 267.03121948]
[213.76336670 282.05996704]
[208.33251953 296.14572144]
[199.30184937 308.24322510]
[187.34149170 317.45474243]
[173.33898926 323.09677124]
[158.33340454 324.75057983]
[143.43826294 322.29345703]
[129.75888062 315.90777588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 87]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[16 31]
[17 30]
[18 29]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[51 61]
[52 60]
[53 59]
[54 58]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
