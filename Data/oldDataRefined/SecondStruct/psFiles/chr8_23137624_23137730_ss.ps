%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGCAUAUUGAUACGUCGGUUCUUAGACUAUAUUUAAAGAGGGCAAACGAAUAGUGUGCGUCAUAAAGUAUUUUUAAUGAGGUUCACGCAAUUGUUUCAAGAUCC\
) } def
/len { sequence length } bind def

/coor [
[90.84609222 271.44992065]
[92.99447632 256.37332153]
[101.09483337 243.47741699]
[113.74372864 234.99653625]
[111.13900757 220.22442627]
[108.53427887 205.45230103]
[105.92955780 190.68019104]
[101.60175323 184.54478455]
[103.47044373 175.44100952]
[101.29647064 160.59938049]
[99.12248993 145.75775146]
[96.94851685 130.91613770]
[85.10412598 127.26227570]
[75.63105774 119.26846313]
[70.03735352 108.20723724]
[69.21349335 95.83948517]
[55.27328110 90.30139160]
[41.33306885 84.76329803]
[26.96419144 90.77770233]
[12.90572548 84.96270752]
[7.26045752 71.22711182]
[-6.67975521 65.68902588]
[-20.61996841 60.15093231]
[-34.56018066 54.61283875]
[-48.50039291 49.07474518]
[-62.44060516 43.53665543]
[-73.00669861 54.46488190]
[-86.95253754 60.51319504]
[-102.15147400 60.75926971]
[-116.28579712 55.16557693]
[-127.20011902 44.58512115]
[-133.23008728 30.63134003]
[-133.45616150 15.43208599]
[-127.84387970 1.30513382]
[-117.24907684 -9.59525776]
[-103.28737640 -15.60685921]
[-88.08783722 -15.81294441]
[-73.96827698 -10.18208694]
[-63.08183670 0.42704824]
[-57.08860397 14.39664459]
[-56.90251541 29.59644127]
[-42.96230316 35.13453293]
[-29.02208900 40.67262650]
[-15.08187580 46.21071625]
[-1.14166307 51.74880981]
[12.79854965 57.28690338]
[26.33070564 51.17001343]
[40.54695511 56.58784103]
[46.87116241 70.82308197]
[60.81137466 76.36117554]
[74.75158691 81.89926910]
[82.64987183 74.23001862]
[92.72699738 69.79698181]
[103.71746826 69.15686035]
[114.24110413 72.39003754]
[122.97632599 79.09049988]
[136.17935181 71.97149658]
[149.38237000 64.85248566]
[157.85717773 51.49253845]
[172.73185730 52.26255417]
[185.93487549 45.14354706]
[194.40968323 31.78359795]
[209.28437805 32.55361176]
[222.48739624 25.43460655]
[235.69041443 18.31560135]
[248.89343262 11.19659519]
[257.36825562 -2.16335392]
[272.24291992 -1.39333951]
[285.44595337 -8.51234531]
[298.64898682 -15.63135052]
[306.79293823 -29.86539650]
[323.19076538 -29.65896034]
[330.97381592 -15.22440815]
[322.13552856 -1.41076863]
[305.76797485 -2.42832971]
[292.56497192 4.69067574]
[279.36193848 11.80968094]
[271.83151245 24.66043091]
[256.01245117 24.39961624]
[242.80941772 31.51862144]
[229.60639954 38.63762665]
[216.40338135 45.75663376]
[208.87294006 58.60738373]
[193.05389404 58.34656906]
[179.85086060 65.46557617]
[172.32043457 78.31632233]
[156.50137329 78.05551147]
[143.29835510 85.17451477]
[130.09533691 92.29351807]
[127.76191711 113.94255829]
[111.79013824 128.74215698]
[113.96411896 143.58378601]
[116.13809204 158.42539978]
[118.31207275 173.26702881]
[120.70167542 188.07546997]
[123.30639648 202.84757996]
[125.91111755 217.61968994]
[128.51583862 232.39181519]
[143.30255127 236.03506470]
[155.32504272 245.38275146]
[162.50036621 258.81533813]
[163.58535767 274.00555420]
[158.39201355 288.32162476]
[147.82012939 299.28314209]
[133.70133972 304.99099731]
[118.48181152 304.45626831]
[104.79842377 297.77160645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[7 95]
[9 94]
[10 93]
[11 92]
[12 91]
[16 51]
[17 50]
[18 49]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[56 89]
[57 88]
[58 87]
[60 85]
[61 84]
[63 82]
[64 81]
[65 80]
[66 79]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
