%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGAGAGACACAGGACGGUCACCAAAAUGGGAUACCAUCCAAUGCAGUACGACAAGAUGGUGUCCCAUCUUGGUGCCUGUCCU\
) } def
/len { sequence length } bind def

/coor [
[22.53373909 307.88073730]
[21.89452744 323.04501343]
[15.81692314 336.95281982]
[5.12286901 347.72323608]
[-8.74135113 353.89962769]
[-23.90071487 354.64669800]
[-38.30504227 349.86343384]
[-50.00626755 340.19668579]
[-57.42189789 326.95385742]
[-59.54902649 311.92587280]
[-56.09997940 297.14520264]
[-47.54120636 284.61077881]
[-35.03022003 276.01779175]
[-20.25902176 272.52835083]
[-5.22529888 274.61437988]
[2.03894854 261.49072266]
[9.30319595 248.36705017]
[16.56744385 235.24337769]
[23.83168983 222.11970520]
[31.09593773 208.99603271]
[38.36018372 195.87236023]
[37.75433731 180.99008179]
[51.20697784 172.66320801]
[58.47122574 159.53953552]
[65.73547363 146.41586304]
[72.99971771 133.29219055]
[80.26396942 120.16852570]
[87.52821350 107.04485321]
[87.46781921 93.06315613]
[99.34811401 85.69089508]
[106.61235809 72.56723022]
[113.87660980 59.44355774]
[121.14085388 46.31988525]
[128.40510559 33.19621658]
[135.66935730 20.07254791]
[142.93359375 6.94887733]
[150.19784546 -6.17479277]
[157.46209717 -19.29846191]
[164.72633362 -32.42213058]
[171.99058533 -45.54580307]
[179.25483704 -58.66947174]
[186.51908875 -71.79314423]
[182.84255981 -82.33912659]
[185.65090942 -92.91869354]
[193.73832703 -99.96044159]
[204.16197205 -101.23238373]
[212.35424805 -113.79766846]
[206.69400024 -128.24554443]
[210.63957214 -143.25260925]
[222.67382812 -153.04835510]
[238.16934204 -153.86608887]
[251.16777039 -145.39140320]
[256.67095947 -130.88298035]
[252.56282043 -115.91959381]
[240.42301941 -106.25498199]
[224.91954041 -105.60538483]
[216.72726440 -93.04010010]
[217.33778381 -73.85333252]
[199.64274597 -64.52889252]
[192.37850952 -51.40522385]
[185.11425781 -38.28155518]
[177.85000610 -25.15788460]
[170.58576965 -12.03421497]
[163.32151794 1.08945465]
[156.05726624 14.21312428]
[148.79301453 27.33679390]
[141.52877808 40.46046448]
[134.26452637 53.58413315]
[127.00028229 66.70780182]
[119.73603058 79.83147430]
[112.47178650 92.95514679]
[112.53218079 106.93684387]
[100.65188599 114.30910492]
[93.38764191 127.43276978]
[86.12339020 140.55644226]
[78.85914612 153.68011475]
[71.59489441 166.80378723]
[64.33065033 179.92745972]
[64.41690826 195.74842834]
[51.48385620 203.13661194]
[44.21960831 216.26028442]
[36.95536041 229.38395691]
[29.69111252 242.50762939]
[22.42686653 255.63128662]
[15.16261864 268.75497437]
[7.89837122 281.87863159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 80]
[23 78]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
