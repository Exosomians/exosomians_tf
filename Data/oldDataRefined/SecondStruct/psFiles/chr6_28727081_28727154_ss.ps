%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGGGUCUUAACUUGGUCAGAGGAAAUCUAGAAGUCCGACUACGGGAGGGUUGGCUCGAUAGAGUCGAAUG\
) } def
/len { sequence length } bind def

/coor [
[80.18507385 116.25529480]
[76.45880127 107.00852966]
[61.46208954 106.69438934]
[46.46537781 106.38025665]
[31.46866798 106.06611633]
[16.47195816 105.75198364]
[1.47524834 105.43784332]
[-13.52146149 105.12371063]
[-28.51817131 104.80957031]
[-34.89518738 115.94851685]
[-45.41218185 123.17754364]
[-57.95148087 125.11818695]
[-70.02142334 121.44917297]
[-79.25144196 112.95755768]
[-83.85766602 101.37092590]
[-98.77548981 99.80299377]
[-113.69332123 98.23506927]
[-127.01582336 107.17322540]
[-142.26628113 102.19295502]
[-147.74584961 87.11469269]
[-139.25106812 73.50519562]
[-123.29841614 71.80450439]
[-112.12539673 83.31724548]
[-97.20756531 84.88516998]
[-82.28973389 86.45309448]
[-71.35729218 72.89027405]
[-54.37997437 68.35073090]
[-37.85128403 74.75811768]
[-28.20403671 89.81286621]
[-13.20732594 90.12699890]
[1.78938472 90.44113922]
[16.78609467 90.75527191]
[31.78280449 91.06940460]
[46.77951431 91.38354492]
[61.77622604 91.69767761]
[76.77293396 92.01181793]
[92.97068024 73.14105988]
[120.59419250 76.87652588]
[129.91140747 65.12112427]
[139.22862244 53.36572266]
[137.60595703 37.87363815]
[147.22239685 26.08471680]
[162.00172424 24.63321686]
[163.86077881 8.33978462]
[179.00663757 2.05209899]
[191.85855103 12.23839283]
[189.19555664 28.41987991]
[173.75712585 33.95043564]
[175.71885681 48.67073441]
[166.43733215 60.72510910]
[150.98402405 62.68294144]
[141.66680908 74.43833923]
[132.34959412 86.19374084]
[135.16030884 100.92805481]
[148.15069580 108.42805481]
[161.14108276 115.92805481]
[174.13145447 123.42805481]
[187.12184143 130.92805481]
[200.11221313 138.42805481]
[213.10260010 145.92805481]
[229.49281311 145.38696289]
[237.92559814 159.45182800]
[229.72602844 173.65390015]
[213.32911682 173.38331604]
[205.60260010 158.91842651]
[192.61221313 151.41842651]
[179.62184143 143.91842651]
[166.63145447 136.41842651]
[153.64108276 128.91842651]
[140.65069580 121.41843414]
[127.66031647 113.91843414]
[119.41852570 122.73306274]
[108.77451324 127.46292114]
[97.54834747 127.65507507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[15 25]
[16 24]
[17 23]
[38 53]
[39 52]
[40 51]
[43 48]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
