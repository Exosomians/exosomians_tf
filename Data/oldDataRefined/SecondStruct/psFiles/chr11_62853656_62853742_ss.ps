%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGAGUCUUUUAGUCUAAAGUCUCAGAGUUGUCGUUCAGUAGUCGGCUUGCUCUAAGGUACAUUCAGUAGUGUUUGUGUCCGGAUU\
) } def
/len { sequence length } bind def

/coor [
[80.90113068 154.70417786]
[76.00160980 140.52691650]
[79.16434479 125.86413574]
[89.47025299 114.96837616]
[76.57003784 122.62242126]
[63.66982651 130.27647400]
[55.74959564 143.97247314]
[40.85584641 143.81263733]
[27.95563316 151.46669006]
[15.05541897 159.12072754]
[2.15520549 166.77478027]
[-1.50995886 182.14820862]
[-15.01585007 190.35591125]
[-30.34966278 186.52841187]
[-38.41411972 172.93650818]
[-34.42471695 157.64401245]
[-20.74830055 149.72370911]
[-5.49884510 153.87457275]
[7.40136862 146.22052002]
[20.30158234 138.56646729]
[33.20179749 130.91241455]
[40.19931793 117.76388550]
[56.01577377 117.37625885]
[68.91599274 109.72221375]
[81.81620026 102.06816101]
[87.55645752 88.20996857]
[83.84685516 73.67591095]
[80.13726044 59.14184952]
[76.42765808 44.60778809]
[72.71806335 30.07372856]
[59.55945206 17.34464455]
[64.68342590 0.66284323]
[60.45743561 -13.72955132]
[56.23144913 -28.12194633]
[52.00545883 -42.51433945]
[37.17437363 -46.76197052]
[27.01129150 -58.36866379]
[24.75921822 -73.63076782]
[31.13678169 -87.67819214]
[44.10892487 -96.02846527]
[59.53628540 -96.01703644]
[72.49604797 -87.64756012]
[78.85279846 -73.59070587]
[76.57811737 -58.33195496]
[66.39785767 -46.74032974]
[70.62384033 -32.34793472]
[74.84983063 -17.95553970]
[79.07582092 -3.56314516]
[89.64134216 2.61359549]
[93.19049835 14.74763584]
[87.25212097 26.36413193]
[90.96172333 40.89818954]
[94.67131805 55.43225098]
[98.38091278 69.96630859]
[102.09051514 84.50036621]
[108.49493408 86.65625763]
[113.45867157 91.35374451]
[116.02082825 97.77191925]
[130.41322327 101.99790955]
[144.87875366 105.96633148]
[159.41281128 109.67593384]
[173.94686890 113.38552856]
[188.48094177 117.09512329]
[201.96252441 109.29228210]
[216.64929199 113.26138306]
[224.00502014 126.16210938]
[238.53907776 129.87170410]
[254.17297363 124.92057037]
[266.09353638 136.18255615]
[262.03790283 152.07229614]
[246.17819214 156.24380493]
[234.82948303 144.40576172]
[220.29542542 140.69616699]
[207.65678406 148.49363708]
[192.86434937 144.93861389]
[184.77133179 131.62918091]
[170.23727417 127.91958618]
[155.70321655 124.20999146]
[141.16915894 120.50039673]
[133.74203491 121.92959595]
[126.18723297 116.39030457]
[111.79484558 112.16431427]
[124.47685242 120.17472076]
[131.16636658 133.60046387]
[129.92385864 148.54890442]
[121.10955811 160.68597412]
[107.27907562 166.49266052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[11 18]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[32 48]
[33 47]
[34 46]
[35 45]
[58 82]
[59 81]
[60 79]
[61 78]
[62 77]
[63 76]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
