%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUUUUGGGUUGUGGACCGAGUGUUUUGCGAUCCAUUGUAGAGUACCAAGGUGACCCCGAGCUUGGGUCCUGGAAGACGCACAUUUCGUCUGCACUAUUGGUGAUGUGAUACCUUGGGGUGUGCU\
) } def
/len { sequence length } bind def

/coor [
[-58.33643723 246.67633057]
[-63.76748657 253.22431946]
[-70.88591766 257.82019043]
[-79.02326202 260.05673218]
[-87.42260742 259.74707031]
[-95.30902100 256.94027710]
[-101.96105194 251.91479492]
[-115.07334137 259.19955444]
[-128.18563843 266.48431396]
[-141.29792786 273.76907349]
[-154.41023254 281.05383301]
[-167.52252197 288.33859253]
[-180.63481140 295.62338257]
[-193.74710083 302.90814209]
[-206.85940552 310.19290161]
[-219.97169495 317.47766113]
[-233.08398438 324.76242065]
[-234.82647705 340.18133545]
[-245.32402039 351.60855103]
[-260.54010010 354.65005493]
[-274.62380981 348.13635254]
[-282.15969849 334.57205200]
[-280.25003052 319.17291260]
[-269.62915039 307.86026001]
[-254.38098145 304.98400879]
[-240.36874390 311.65011597]
[-227.25645447 304.36535645]
[-214.14416504 297.08059692]
[-201.03187561 289.79583740]
[-187.91957092 282.51107788]
[-174.80728149 275.22631836]
[-161.69499207 267.94155884]
[-148.58268738 260.65679932]
[-135.47039795 253.37202454]
[-122.35810852 246.08726501]
[-109.24581146 238.80250549]
[-105.66931915 217.23098755]
[-87.28085327 204.91331482]
[-65.45121765 209.93417358]
[-53.56033325 200.79049683]
[-41.66944885 191.64680481]
[-36.29671097 177.75497437]
[-20.64047050 175.47624207]
[-20.76156616 162.52922058]
[-13.26419735 151.73461914]
[-0.72263998 147.19436646]
[12.32381535 150.79176331]
[24.43722343 141.94499207]
[36.55063248 133.09822083]
[48.66403961 124.25144958]
[60.77744675 115.40467834]
[72.89085388 106.55790710]
[85.00426483 97.71113586]
[91.29679108 84.09481812]
[90.18465424 69.13610840]
[89.07250977 54.17739105]
[87.96036530 39.21867752]
[86.84822845 24.25996017]
[74.05200195 15.27159882]
[70.07711029 0.14763589]
[76.80036926 -13.97085381]
[91.04727173 -20.41755295]
[106.09085083 -16.14852524]
[114.82800293 -3.17947602]
[113.13330078 12.36600590]
[101.80693817 23.14781952]
[102.91908264 38.10653305]
[104.03122711 53.06525040]
[105.14336395 68.02396393]
[106.25550842 82.98268127]
[112.94226074 86.37934113]
[115.27063751 71.56114960]
[130.08311462 69.19668579]
[136.90899658 82.55360413]
[126.31577301 93.17266083]
[133.00253296 96.56932068]
[145.73852539 88.64501953]
[158.47450256 80.72071838]
[171.21049500 72.79642487]
[183.94648743 64.87212372]
[185.97334290 49.36645126]
[197.52775574 38.82939148]
[213.15408325 38.23622131]
[225.47406006 47.86701584]
[228.67056274 63.17441177]
[221.23429871 76.93072510]
[206.67645264 82.64064026]
[191.87078857 77.60811615]
[179.13479614 85.53240967]
[166.39880371 93.45671082]
[153.66281128 101.38101196]
[140.92683411 109.30531311]
[142.31031799 116.67660522]
[146.46076965 138.79048157]
[161.20335388 141.55744934]
[175.94593811 144.32443237]
[190.68852234 147.09140015]
[207.37118530 144.07057190]
[214.89216614 159.26501465]
[202.37353516 170.69831848]
[187.92155457 161.83398438]
[173.17897034 159.06701660]
[158.43638611 156.30004883]
[143.69380188 153.53308105]
[133.69328308 164.71295166]
[119.84855652 170.48561096]
[104.86801910 169.72174072]
[91.68226624 162.57080078]
[82.87079620 150.43168640]
[80.15737152 135.67915344]
[84.07279968 121.19918823]
[93.85103607 109.82454681]
[81.73762512 118.67131042]
[69.62421417 127.51808167]
[57.51081085 136.36485291]
[45.39739990 145.21162415]
[33.28399277 154.05839539]
[21.17058563 162.90516663]
[18.83057785 180.18927002]
[5.01761961 190.27880859]
[-11.49678802 187.36712646]
[-17.72004128 201.91296387]
[-32.52576828 203.53768921]
[-44.41664886 212.68136597]
[-56.30753326 221.82505798]
[-54.40528488 230.22161865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[39 125]
[40 124]
[41 123]
[43 121]
[47 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
[53 112]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
