%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCCCCUUUCGCGCUUACGUCAGGGGGUGAUGGUGUUUAAUACGUCAACUCAAAGGGUGUAAACCCCUUUAGCGUCCCCAGUCGUGUAG\
) } def
/len { sequence length } bind def

/coor [
[71.77336884 108.70778656]
[85.70903778 103.15309906]
[71.47483063 98.42156982]
[57.24062347 93.69004059]
[43.00642014 88.95851135]
[28.01497650 89.46512604]
[14.13266850 95.14680481]
[0.25036076 100.82849121]
[-13.63194752 106.51016998]
[-27.51425552 112.19185638]
[-33.69119263 126.49161530]
[-47.85076523 132.05589294]
[-61.44533539 126.07900238]
[-75.32764435 131.76068115]
[-81.20536804 146.43133545]
[-95.76792908 152.57197571]
[-110.37561035 146.53947449]
[-116.36194611 131.91279602]
[-110.17533875 117.36971283]
[-95.48619843 111.53836060]
[-81.00933075 117.87837982]
[-67.12702179 112.19669342]
[-61.62382507 98.40356445]
[-47.62612915 92.44377136]
[-33.19593811 98.30954742]
[-19.31363106 92.62786102]
[-5.43132257 86.94618225]
[8.45098591 81.26449585]
[22.33329391 75.58281708]
[22.28121567 73.08841705]
[22.90869713 70.49023438]
[16.99335861 56.70586395]
[11.07802105 42.92149734]
[5.16268301 29.13713074]
[-0.75265479 15.35276413]
[-16.01357841 13.62078190]
[-28.35438919 4.47747946]
[-34.45547104 -9.61763954]
[-32.67565918 -24.87306023]
[-23.49372101 -37.18515015]
[-9.37954712 -43.24201965]
[5.87021971 -41.41439819]
[18.15346909 -32.19391251]
[24.16606712 -18.06082344]
[22.29065514 -2.81686020]
[13.03171253 9.43742657]
[18.94705009 23.22179413]
[24.86238861 37.00616074]
[30.77772522 50.79052734]
[36.69306183 64.57489777]
[47.73794937 74.72430420]
[61.97215652 79.45583344]
[76.20635986 84.18736267]
[90.44056702 88.91889191]
[105.43200684 88.41228485]
[119.31431580 82.73059845]
[133.19662476 77.04891205]
[147.07893372 71.36723328]
[160.96124268 65.68554688]
[174.84355164 60.00386429]
[179.43614197 45.05588913]
[192.59068298 36.60057831]
[208.09597778 38.63027954]
[218.63092041 50.18662262]
[219.22122192 65.81306458]
[209.58816528 78.13126373]
[194.28018188 81.32495880]
[180.52523804 73.88617706]
[166.64292908 79.56785583]
[152.76062012 85.24954224]
[138.87831116 90.93122101]
[124.99600220 96.61290741]
[111.11369324 102.29459381]
[113.34108734 103.32450867]
[115.49932861 104.53813934]
[126.01598358 115.23394012]
[136.53262329 125.92973328]
[151.85809326 123.49874878]
[165.67024231 130.57011414]
[172.65802002 144.42472839]
[170.13449097 159.73522949]
[159.06999207 170.61441040]
[143.71905518 172.87899780]
[129.98443604 165.65821838]
[123.14735413 151.72860718]
[125.83683014 136.44638062]
[115.32018280 125.75058746]
[104.80353546 115.05479431]
[105.95428467 130.01058960]
[96.77910614 141.87718201]
[82.01515961 144.52783203]
[69.28511047 136.59399414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[13 22]
[14 21]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
