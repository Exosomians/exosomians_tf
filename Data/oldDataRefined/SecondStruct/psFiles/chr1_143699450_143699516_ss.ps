%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAAGUCCCCUUUCGCGCUUGCGUCAGGGGGUGAUGGUGUUUAAUGCGUCAGCUCAAAGGGUGUC\
) } def
/len { sequence length } bind def

/coor [
[60.04714584 164.51657104]
[47.75413132 155.92112732]
[40.45188141 142.81855774]
[39.60803986 127.84231567]
[45.39221191 114.00239563]
[56.64186096 104.08042908]
[71.09596252 100.07058716]
[85.84907532 102.77862549]
[71.62666321 98.01174927]
[57.40425491 93.24488068]
[43.18184662 88.47801208]
[28.95943642 83.71113586]
[14.73702621 78.94426727]
[0.71883965 85.73603821]
[-13.63680077 80.69915009]
[-20.02532959 67.29309845]
[-34.24774170 62.52622604]
[-48.47014999 57.75935745]
[-64.42539978 61.54907227]
[-75.48676300 49.44211960]
[-70.27526093 33.89309311]
[-54.15203094 30.89749908]
[-43.70327759 43.53694534]
[-29.48086929 48.30381775]
[-15.25845909 53.07069016]
[-2.08134985 46.22237778]
[12.41010189 50.85405731]
[19.50389671 64.72185516]
[33.72630692 69.48873138]
[47.94871521 74.25559998]
[62.17112732 79.02246857]
[76.39353943 83.78934479]
[90.61594391 88.55621338]
[105.36054230 85.79997253]
[116.90055084 76.21726990]
[128.44056702 66.63456726]
[139.98057556 57.05186462]
[151.52058411 47.46916199]
[148.85215759 32.34384918]
[154.11897278 17.91622734]
[165.90428162 8.06725883]
[181.03788757 5.44626474]
[195.44892883 10.75827885]
[205.26091003 22.57439613]
[207.83445740 37.71614075]
[202.47729492 52.11045837]
[190.63047791 61.88535309]
[175.48074341 64.41142273]
[161.10328674 59.00917053]
[149.56327820 68.59187317]
[138.02326965 78.17457581]
[126.48325348 87.75727844]
[114.94324493 97.33998108]
[114.59677887 112.33597565]
[125.68190765 122.44141388]
[136.76704407 132.54684448]
[147.85217285 142.65228271]
[163.63082886 148.85473633]
[162.03874207 165.73376465]
[145.37861633 168.87646484]
[137.74674988 153.73741150]
[126.66160583 143.63198853]
[115.57647705 133.52655029]
[104.49134064 123.42111206]
[105.68685913 138.37339783]
[100.22949219 152.34541321]
[89.21609497 162.52897644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[16 25]
[17 24]
[18 23]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
