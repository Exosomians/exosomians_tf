%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAACAUCCGACCCCUAUUUACUUAUCUUAUUAUCAAAGAUAGGUUAGUAAAAGGGAUCGGUCAAAGUUACAAGGUUUCA\
) } def
/len { sequence length } bind def

/coor [
[116.51589966 304.00769043]
[108.95684052 290.98641968]
[104.27061462 276.67791748]
[102.66208649 261.70773315]
[104.20158386 246.73028564]
[108.82180023 232.40034485]
[116.32075500 219.34434509]
[126.37062836 208.13302612]
[138.53208923 199.25650024]
[132.39605713 185.56895447]
[126.26003265 171.88139343]
[120.12400055 158.19383240]
[113.72691345 144.62632751]
[107.07112122 131.18385315]
[100.41532135 117.74136353]
[84.40972137 108.47772217]
[85.33426666 90.00776672]
[77.66898346 77.11421967]
[70.00370789 64.22068024]
[62.33842468 51.32713318]
[48.63553238 43.41882706]
[48.78240585 28.52494812]
[41.11712646 15.63140392]
[33.45184708 2.73785949]
[25.78656578 -10.15568447]
[18.12128639 -23.04922867]
[10.45600510 -35.94277191]
[2.79072523 -48.83631516]
[-4.87455511 -61.72986221]
[-12.53983498 -74.62340546]
[-28.00137711 -76.96321869]
[-38.30276489 -88.72822571]
[-38.57999802 -104.36335754]
[-28.70217323 -116.48616791]
[-13.33330059 -119.37265015]
[0.26990992 -111.65988922]
[5.68443775 -96.98961639]
[0.35370895 -82.28868866]
[8.01898956 -69.39514160]
[15.68426895 -56.50159836]
[23.34955025 -43.60805130]
[31.01482964 -30.71450806]
[38.68011093 -17.82096481]
[46.34539032 -4.92742062]
[54.01066971 7.96612358]
[61.67594910 20.85966682]
[74.83057404 27.84573936]
[75.23197174 43.66185379]
[82.89724731 56.55539703]
[90.56253052 69.44894409]
[98.22781372 82.34248352]
[108.29470062 84.31158447]
[115.59027863 91.52227783]
[117.67704773 101.56542969]
[113.85780334 111.08556366]
[120.51360321 124.52805328]
[127.16939545 137.97053528]
[133.95304871 144.47386169]
[133.81155396 152.05781555]
[139.94758606 165.74536133]
[146.08361816 179.43292236]
[152.21965027 193.12046814]
[166.93777466 189.94706726]
[181.99406433 189.90348816]
[196.73031616 192.99160767]
[210.50231934 199.07646179]
[222.70803833 207.89201355]
[232.81388855 219.05290222]
[240.37808228 232.07122803]
[245.06993103 246.37788391]
[246.68434143 261.34744263]
[245.15074158 276.32546997]
[240.53616333 290.65722656]
[233.04234314 303.71618652]
[222.99687195 314.93145752]
[210.83891296 323.81277466]
[197.09994507 329.97183228]
[182.38056946 333.13946533]
[167.32426453 333.17712402]
[152.58921814 330.08319092]
[138.81961060 323.99291992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 62]
[10 61]
[11 60]
[12 59]
[13 57]
[14 56]
[15 55]
[17 51]
[18 50]
[19 49]
[20 48]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
