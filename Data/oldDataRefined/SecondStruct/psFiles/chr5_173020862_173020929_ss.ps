%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGAAGGGGCUCUCACACGAUUCGUAAGUGAAACCGACGAAUCAAGAUCAGACCCUCGUCUGUCUC\
) } def
/len { sequence length } bind def

/coor [
[107.37542725 244.30587769]
[105.33292389 229.44560242]
[103.29042816 214.58531189]
[99.12007904 208.17675781]
[101.50915527 199.00389099]
[100.14513397 184.06604004]
[91.28253937 172.09509277]
[97.73286438 157.64851379]
[96.36884308 142.71064758]
[95.00482178 127.77280426]
[93.64080048 112.83495331]
[85.73540497 101.30254364]
[91.42134857 88.52907562]
[90.05732727 73.59121704]
[88.69330597 58.65336609]
[73.54232025 53.17395401]
[62.28004837 41.73330688]
[57.07677841 26.60681343]
[58.90462494 10.77305412]
[67.35633087 -2.67270780]
[80.73466492 -11.12359238]
[78.69216156 -25.98388100]
[76.64966583 -40.84416962]
[74.60716248 -55.70446014]
[72.56465912 -70.56475067]
[70.52216339 -85.42504120]
[68.47966003 -100.28532410]
[56.17062378 -109.83128357]
[54.31092834 -124.93082428]
[63.48739243 -136.60678101]
[61.44489288 -151.46707153]
[53.29810715 -166.33537292]
[65.33009338 -178.27972412]
[80.13844299 -170.02449036]
[76.30518341 -153.50958252]
[78.34767914 -138.64929199]
[90.33399963 -129.88208008]
[92.61707306 -114.84073639]
[83.33995056 -102.32782745]
[85.38245392 -87.46753693]
[87.42494965 -72.60724640]
[89.46745300 -57.74695969]
[91.50994873 -42.88666916]
[93.55245209 -28.02638245]
[95.59494781 -13.16609192]
[109.15045166 -9.48627186]
[120.27636719 -0.84119117]
[127.23430634 11.46105862]
[128.92068481 25.53773880]
[125.04168701 39.21957016]
[116.16375732 50.38504028]
[103.63115692 57.28934479]
[104.99517822 72.22719574]
[106.35919952 87.16504669]
[114.26459503 98.69745636]
[108.57865143 111.47092438]
[109.94267273 126.40878296]
[111.30669403 141.34663391]
[112.67071533 156.28448486]
[121.63088226 169.32388306]
[115.08298492 182.70202637]
[116.44701385 197.63987732]
[118.15071106 212.54280090]
[120.19321442 227.40309143]
[122.23571014 242.26338196]
[132.71467590 254.87779236]
[126.77673340 270.16415405]
[110.53033447 272.39718628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[5 62]
[6 61]
[8 59]
[9 58]
[10 57]
[11 56]
[13 54]
[14 53]
[15 52]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
