%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUUAGUGUCCCCAGUCGUGUAGGUCUCACGUUACCUAUUCGGAGCGGGACCCUUUUGGUGGAAGCACUA\
) } def
/len { sequence length } bind def

/coor [
[113.60406494 175.01414490]
[105.23173523 170.45071411]
[98.90700531 163.25556946]
[95.42255402 154.28414917]
[95.23095703 144.61717224]
[98.38611603 135.43046570]
[104.53299713 127.85197449]
[98.27509308 114.21970367]
[86.98214722 105.97586060]
[88.09264374 92.03819275]
[81.83473969 78.40592957]
[75.57683563 64.77366638]
[69.31893158 51.14140320]
[63.06103134 37.50914001]
[47.98355484 34.35066223]
[37.77626419 23.05178642]
[36.19805908 8.08605099]
[43.64576340 -4.78522396]
[37.38785934 -18.41748810]
[31.12995338 -32.04975128]
[18.34081650 -41.36363983]
[20.06287384 -56.15836334]
[13.80496979 -69.79062653]
[7.54706621 -83.42288971]
[1.28916216 -97.05515289]
[-4.96874189 -110.68742371]
[-11.22664547 -124.31968689]
[-26.46657181 -127.23932648]
[-37.05522537 -138.58216858]
[-38.92105484 -153.98664856]
[-31.34660721 -167.52944946]
[-17.24441528 -174.00308228]
[-2.03705931 -170.91828918]
[8.42792320 -159.46124268]
[10.12653255 -144.03742981]
[2.40561867 -130.57759094]
[8.66352272 -116.94532776]
[14.92142677 -103.31305695]
[21.17933083 -89.68079376]
[27.43723488 -76.04853058]
[33.69513702 -62.41626740]
[46.03667068 -54.07744980]
[44.76221848 -38.30765533]
[51.02012253 -24.67539215]
[57.27802658 -11.04312801]
[71.89353943 -8.29999352]
[82.21331787 2.65291572]
[84.12718964 17.75889015]
[76.69329071 31.25123405]
[82.95119476 44.88349915]
[89.20909882 58.51576233]
[95.46700287 72.14802551]
[101.72490692 85.78029633]
[113.01785278 94.02413940]
[111.90735626 107.96180725]
[118.16526031 121.59407043]
[138.97990417 126.92625427]
[149.68003845 145.25588989]
[144.22578430 165.49555969]
[153.25013733 177.47724915]
[162.27450562 189.45893860]
[171.29885864 201.44062805]
[180.32322693 213.42231750]
[195.62049866 219.33207703]
[197.88346863 235.57432556]
[184.78416443 245.44046021]
[169.79803467 238.78102112]
[168.34153748 222.44667053]
[159.31716919 210.46498108]
[150.29281616 198.48329163]
[141.26844788 186.50160217]
[132.24409485 174.51991272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 56]
[8 55]
[10 53]
[11 52]
[12 51]
[13 50]
[14 49]
[18 45]
[19 44]
[20 43]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
