%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCUUACGUCUUAUAGUCUAUAAAAUAACAGUAGUUCAUUAGUCACUCUCUCAAGUUCAACCUAACUCUAGUAGUACAUAAGACGUUAAUA\
) } def
/len { sequence length } bind def

/coor [
[78.70455933 402.98233032]
[64.05406952 398.82507324]
[52.36524963 389.06332397]
[45.66326904 375.38839722]
[45.10928345 360.16958618]
[50.79927444 346.04357910]
[61.74741364 335.45782471]
[76.05687714 330.24636841]
[77.05876160 315.27987671]
[78.06065369 300.31335449]
[79.06254578 285.34686279]
[80.06443024 270.38037109]
[81.06632233 255.41384888]
[82.06821442 240.44735718]
[83.07009888 225.48085022]
[84.07199097 210.51434326]
[81.32211304 203.48902893]
[85.36566162 195.06712341]
[86.86709595 180.14245605]
[88.11893463 165.19479370]
[89.12082672 150.22828674]
[90.12271881 135.26177979]
[91.12460327 120.29528046]
[85.55183411 116.79051971]
[81.25521851 111.80271149]
[78.61425781 105.77242279]
[77.86221313 99.23227692]
[79.06552124 92.75993347]
[82.11788940 86.92708588]
[86.74971771 82.24891663]
[92.55189514 79.13863373]
[99.01193237 77.87095642]
[103.45606995 63.54441833]
[103.02119446 54.21223068]
[108.29547882 48.81790161]
[113.21585083 34.64786530]
[118.13622284 20.47782898]
[123.05659485 6.30779219]
[111.66652679 -2.55248117]
[103.60655975 -14.49620914]
[99.66397858 -28.33276749]
[100.21642303 -42.68785477]
[105.19576263 -56.14001083]
[114.09618378 -67.36133575]
[126.02550507 -75.24861908]
[139.79464722 -79.03173828]
[154.03610229 -78.34888458]
[159.42721558 -92.34659576]
[164.81832886 -106.34429932]
[158.17796326 -120.68589020]
[163.70190430 -135.49337769]
[178.11289978 -141.98173523]
[192.86114502 -136.30155945]
[199.19679260 -121.82277679]
[193.36100769 -107.13539886]
[178.81604004 -100.95318604]
[173.42492676 -86.95547485]
[168.03381348 -72.95776367]
[179.97590637 -62.84128571]
[187.77636719 -49.24186325]
[190.48855591 -33.77345276]
[187.77093506 -18.27894020]
[179.92996216 -4.61059523]
[167.88566589 5.59135962]
[153.06369019 11.09557247]
[137.22662354 11.22816563]
[132.30625916 25.39820099]
[127.38588715 39.56823730]
[122.46551514 53.73827362]
[117.78260803 67.98854828]
[113.33847046 82.31508636]
[121.77791595 104.04885101]
[106.09111023 121.29716492]
[105.08921814 136.26367188]
[104.08732605 151.23017883]
[103.08544159 166.19667053]
[105.67185974 175.17382812]
[101.79176331 181.64389038]
[100.29032898 196.56855774]
[99.03849030 211.51623535]
[98.03660583 226.48274231]
[97.03471375 241.44923401]
[96.03282928 256.41574097]
[95.03093719 271.38223267]
[94.02904510 286.34875488]
[93.02716064 301.31524658]
[92.02526855 316.28176880]
[91.02337646 331.24826050]
[104.51054382 338.32046509]
[113.95005798 350.27102661]
[117.70646667 365.02938843]
[115.12895203 380.03860474]
[106.66407776 392.69821167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[18 79]
[19 78]
[20 76]
[21 75]
[22 74]
[23 73]
[32 71]
[33 70]
[35 69]
[36 68]
[37 67]
[38 66]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
