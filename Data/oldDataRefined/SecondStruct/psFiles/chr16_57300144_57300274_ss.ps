%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAGACACCCCUUCUUUUUCAGACUGUCCUGCACCAGCACACUAAGACUUGAGGGUUGAAGCCUCCUCCAACUCCGCCCUCCUACAGCGGUGGUGUGAGGUCGAAUCCGCUGUCUCGCUCUAAGAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[91.69844055 252.65760803]
[90.42389679 267.74581909]
[84.31699371 281.60165405]
[74.04016113 292.72216797]
[60.70815277 299.90103149]
[45.76712799 302.35958862]
[30.83777428 299.83111572]
[17.53951836 292.58993530]
[7.31485319 281.42144775]
[1.27287602 267.53717041]
[0.06897475 252.44314575]
[3.83373952 237.77667236]
[12.15879726 225.12866211]
[24.14110756 215.87107849]
[38.48091888 211.00810242]
[53.62275314 211.06723022]
[58.52877426 196.89222717]
[63.43479538 182.71720886]
[68.34081268 168.54220581]
[73.24683380 154.36718750]
[78.15285492 140.19216919]
[70.91428375 135.30906677]
[64.73536682 129.13957214]
[59.84121704 121.90847015]
[56.41012955 113.87918854]
[54.56710815 105.34426880]
[39.58409882 104.63053894]
[24.60108948 103.91680908]
[10.44839191 110.98870850]
[-1.89630878 102.65458679]
[-16.87931824 101.94085693]
[-31.86232948 101.22712708]
[-47.97121811 106.51296234]
[-57.50986481 92.49687958]
[-46.68209457 79.45097351]
[-31.14859962 86.24411774]
[-16.16559029 86.95784760]
[-1.18258011 87.67157745]
[11.89843178 80.54862976]
[25.31481743 88.93379974]
[40.29782867 89.64752960]
[55.28083801 90.36125946]
[64.69648743 70.90754700]
[81.99202728 57.94739532]
[103.30701447 54.37355423]
[123.88387299 60.98372650]
[133.70678711 49.64748383]
[143.52969360 38.31124115]
[153.35260010 26.97499657]
[149.23330688 13.76360130]
[152.18142700 0.35371321]
[161.31645203 -9.75066376]
[174.15580750 -13.96399403]
[187.28883362 -11.28030586]
[197.37873840 -22.37957764]
[207.46864319 -33.47884750]
[217.55854797 -44.57811737]
[227.64845276 -55.67738724]
[225.46484375 -69.02720642]
[231.31192017 -81.00865173]
[242.83660889 -87.31407928]
[255.69198608 -85.82222748]
[266.04318237 -96.67823792]
[276.39434814 -107.53424835]
[286.74554443 -118.39025879]
[297.09674072 -129.24627686]
[307.31799316 -140.22468567]
[310.87561035 -155.64071655]
[325.16195679 -159.85371399]
[335.25186157 -170.95297241]
[345.34176636 -182.05224609]
[346.48095703 -187.34738159]
[349.30194092 -191.23515320]
[352.95953369 -193.30404663]
[356.56948853 -193.55041504]
[367.42550659 -203.90161133]
[378.28152466 -214.25279236]
[389.13751221 -224.60397339]
[386.11697388 -239.73274231]
[391.77642822 -254.08454895]
[404.30996704 -263.07977295]
[419.71817017 -263.84808350]
[433.08438110 -256.14428711]
[440.14343262 -242.42666626]
[438.64285278 -227.07246399]
[429.06146240 -214.98112488]
[414.45663452 -210.01097107]
[399.48870850 -213.74797058]
[388.63269043 -203.39677429]
[377.77670288 -193.04559326]
[366.92068481 -182.69441223]
[356.44104004 -171.96234131]
[346.35113525 -160.86306763]
[336.26123047 -149.76380920]
[333.42532349 -135.14166260]
[318.41726685 -130.13478088]
[316.22445679 -122.99988556]
[307.95275879 -118.89508820]
[297.60156250 -108.03907776]
[287.25036621 -97.18306732]
[276.89920044 -86.32705688]
[266.54800415 -75.47104645]
[267.69223022 -58.73633575]
[256.18774414 -46.07112885]
[238.74772644 -45.58748245]
[228.65782166 -34.48821259]
[218.56791687 -23.38894081]
[208.47801208 -12.28967094]
[198.38810730 -1.19040060]
[202.24761963 14.71921825]
[195.83187866 29.96056938]
[181.47158813 38.48968506]
[164.68884277 36.79790878]
[154.86593628 48.13415146]
[145.04302979 59.47039413]
[135.22010803 70.80664062]
[141.73384094 81.26513672]
[145.22012329 93.08269501]
[145.42605591 105.40205383]
[142.33670044 117.32952881]
[136.17616272 127.99989319]
[127.39134216 136.63909912]
[116.61949921 142.62042236]
[104.64205170 145.50999451]
[92.32786560 145.09819031]
[87.42184448 159.27320862]
[82.51582336 173.44821167]
[77.60980225 187.62322998]
[72.70378876 201.79824829]
[67.79776764 215.97325134]
[79.73661041 225.28683472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[26 42]
[27 41]
[28 40]
[30 38]
[31 37]
[32 36]
[46 116]
[47 115]
[48 114]
[49 113]
[54 109]
[55 108]
[56 107]
[57 106]
[58 105]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
[67 96]
[69 94]
[70 93]
[71 92]
[75 91]
[76 90]
[77 89]
[78 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
