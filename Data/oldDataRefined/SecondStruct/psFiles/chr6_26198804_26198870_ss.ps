%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACAAUUCUGACGAAGGAAUUUUUCGGUUAUAUUCUCAAGAGCAAAAUGAACGGGAACCGGAACA\
) } def
/len { sequence length } bind def

/coor [
[129.46292114 144.91659546]
[115.74114227 150.97569275]
[101.00847626 148.15635681]
[90.49329376 137.45912170]
[87.92724609 122.68023682]
[94.22167206 109.06369781]
[79.62010193 112.49795532]
[65.01853180 115.93222046]
[50.41696167 119.36647797]
[35.81539154 122.80073547]
[21.21382141 126.23499298]
[13.10807323 139.80232239]
[-2.23730731 143.58317566]
[-15.71817875 135.33444214]
[-19.33658028 119.94994354]
[-10.94577599 106.55702972]
[4.47611618 103.10148621]
[17.77956200 111.63342285]
[32.38113403 108.19916534]
[46.98270416 104.76490784]
[61.58427429 101.33064270]
[76.18584442 97.89638519]
[90.78741455 94.46212769]
[104.50932312 88.40331268]
[116.88428497 79.92626953]
[129.25924683 71.44921875]
[141.63421631 62.97217560]
[154.00917053 54.49512863]
[166.38414001 46.01808167]
[178.75909424 37.54103851]
[191.13406372 29.06399155]
[191.30128479 12.31579781]
[201.21884155 -0.97724319]
[216.91217041 -5.81137657]
[232.28042603 -0.50975358]
[244.25067139 -9.54927349]
[256.22094727 -18.58879280]
[252.73884583 -33.41427612]
[255.59425354 -48.37310410]
[264.29241943 -60.87357330]
[277.32635498 -68.74990082]
[292.43783569 -70.63745880]
[307.00872803 -66.20922852]
[318.51449585 -56.23241806]
[324.96176147 -42.43557358]
[325.23342896 -27.20908165]
[319.28247070 -13.19102192]
[308.13992310 -2.81011152]
[293.73626709 2.13509631]
[278.56707764 0.78781378]
[265.26046753 -6.61853409]
[253.29019165 2.42098522]
[241.31994629 11.46050453]
[242.78552246 24.91940880]
[237.28515625 37.40979385]
[226.19090271 45.54481506]
[212.40724182 47.05917358]
[199.61109924 41.43895340]
[187.23614502 49.91600037]
[174.86117554 58.39304733]
[162.48622131 66.87009430]
[150.11125183 75.34713745]
[137.73629761 83.82418060]
[125.36133575 92.30123138]
[112.98637390 100.77827454]
[127.28878784 105.29944611]
[136.48226929 117.15186310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[35 53]
[36 52]
[37 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
