%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCCCAGCCACCGCGGGGCGCACCCCGGGCCACCCGAAGGGCCUCCCAAGGCCCCCAGCCGGACGCCGCGCAC\
) } def
/len { sequence length } bind def

/coor [
[31.09494400 261.06106567]
[19.35097694 260.97018433]
[11.14675522 273.52767944]
[2.94253302 286.08517456]
[-5.26168919 298.64266968]
[-8.86308098 315.20968628]
[-25.77962494 316.33526611]
[-31.54416275 300.39141846]
[-17.81918716 290.43844604]
[-9.61496449 277.88095093]
[-1.41074169 265.32345581]
[6.79348087 252.76596069]
[1.83632827 235.36878967]
[11.07499313 219.45509338]
[29.24560547 214.98461914]
[36.38481522 201.79252625]
[43.52402878 188.60041809]
[42.77678680 173.72456360]
[56.14969635 165.27021790]
[63.28890610 152.07810974]
[70.42811584 138.88601685]
[77.56732941 125.69390106]
[71.00970459 117.97120667]
[67.00978851 108.66298676]
[65.92046356 98.59046173]
[67.83785248 88.64229584]
[72.59277344 79.69617462]
[79.76573181 72.54138184]
[73.74030304 58.80477905]
[67.71486664 45.06818008]
[61.68943787 31.33157921]
[49.78985596 19.25531006]
[58.10004425 4.47772408]
[74.60060883 8.37230587]
[75.42604065 25.30614662]
[81.45146942 39.04274750]
[87.47689819 52.77934647]
[93.50233459 66.51594543]
[105.21276093 64.34175110]
[117.59871674 66.35939789]
[129.13639832 72.74866486]
[140.58265686 63.05417633]
[152.02891541 53.35968781]
[163.47517395 43.66519928]
[174.92143250 33.97071075]
[186.36770630 24.27622223]
[191.39338684 8.66614437]
[207.47973633 5.47846413]
[218.07849121 17.99239159]
[212.28656006 33.33467102]
[196.06219482 35.72248077]
[184.61592102 45.41696930]
[173.16966248 55.11145782]
[161.72340393 64.80594635]
[150.27714539 74.50043488]
[138.83088684 84.19492340]
[141.90911865 98.87567902]
[156.28552246 103.15572357]
[172.10255432 98.82515717]
[183.56956482 110.54861450]
[178.89030457 126.26600647]
[162.87837219 129.80862427]
[152.00547791 117.53213501]
[137.62907410 113.25209045]
[117.05107880 132.83862305]
[90.75943756 132.83311462]
[83.62022400 146.02522278]
[76.48101044 159.21733093]
[69.34180450 172.40943909]
[69.57839966 188.22886658]
[56.71613312 195.73962402]
[49.57692337 208.93173218]
[42.43770981 222.12384033]
[48.11064911 232.95993042]
[47.71217346 245.06288147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[15 73]
[16 72]
[17 71]
[19 69]
[20 68]
[21 67]
[22 66]
[28 38]
[29 37]
[30 36]
[31 35]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
