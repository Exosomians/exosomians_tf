%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGACUCAGGUACUACUAAAGUUCAAUAGGGACAGACUUCCGUUUCUUUCCGGAAAGACACACCUUAAACUUAUAGACUUUGA\
) } def
/len { sequence length } bind def

/coor [
[84.72357941 261.73706055]
[76.40853882 274.83819580]
[61.96851349 280.51843262]
[46.95599747 276.59365845]
[37.14360428 264.57299805]
[36.30440140 249.07861328]
[44.76107788 236.06846619]
[59.26187134 230.54518127]
[63.05587387 216.03292847]
[66.84987640 201.52067566]
[70.64387512 187.00840759]
[74.17218781 172.42929077]
[77.43363953 157.78814697]
[75.77528381 150.40168762]
[81.09084320 142.67646790]
[84.88484192 128.16421509]
[88.67884064 113.65196228]
[83.02101135 105.12430573]
[83.01656342 94.89044189]
[88.66698456 86.35787964]
[98.09088898 82.36764526]
[102.93409729 68.17105103]
[107.77729797 53.97445297]
[112.62050629 39.77785492]
[117.46371460 25.58125877]
[116.32994843 19.98957825]
[117.50101471 15.08757782]
[120.26707458 11.68248749]
[123.69203949 10.14757633]
[130.05888367 -3.43414688]
[136.42573547 -17.01587105]
[142.79258728 -30.59759331]
[149.15943909 -44.17931747]
[138.30166626 -55.88608551]
[132.73530579 -70.81044769]
[133.27246094 -86.69176483]
[139.80300903 -101.13626099]
[151.31568909 -111.97783661]
[166.05451965 -117.60286713]
[181.78665161 -117.19035339]
[187.65322876 -130.99554443]
[193.51979065 -144.80073547]
[199.38636780 -158.60592651]
[205.25292969 -172.41111755]
[197.15129089 -185.64527893]
[198.40933228 -201.11128235]
[208.54330444 -212.86212158]
[223.65649414 -216.37936401]
[237.93757629 -210.31056213]
[245.89518738 -196.98928833]
[244.46943665 -181.53785706]
[234.20858765 -169.89764404]
[219.05813599 -166.54455566]
[213.19155884 -152.73936462]
[207.32498169 -138.93417358]
[201.45841980 -125.12897491]
[195.59184265 -111.32378387]
[205.87278748 -101.59649658]
[212.19465637 -88.89987183]
[213.76765442 -74.77365875]
[210.37934875 -60.93893433]
[202.42298889 -49.08843231]
[190.85208130 -40.67942429]
[177.06607056 -36.75452805]
[162.74116516 -37.81246567]
[156.37431335 -24.23074341]
[150.00746155 -10.64902020]
[143.64060974 2.93270373]
[137.27375793 16.51442719]
[131.66030884 30.42446518]
[126.81710815 44.62105942]
[121.97389984 58.81765747]
[117.13069153 73.01425171]
[112.28748322 87.21085358]
[116.98343658 105.10955811]
[103.19109344 117.44596100]
[99.39709473 131.95822144]
[95.60309601 146.47047424]
[92.07478333 161.04960632]
[88.81332397 175.69073486]
[90.00837708 184.99160767]
[85.15612793 190.80241394]
[81.36212921 205.31466675]
[77.56813049 219.82691956]
[73.77412415 234.33918762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 85]
[9 84]
[10 83]
[11 82]
[12 80]
[13 79]
[15 78]
[16 77]
[17 76]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
