%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:45 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCUUCGUCAAUUCAGUUCGGCCGCGCAGUGUCCGUGAGCCGCACGUUCGGCGGGGCGUCCACGAUGGCAGAGAAUGGAG\
) } def
/len { sequence length } bind def

/coor [
[150.38040161 152.26290894]
[138.91003418 142.59695435]
[127.43965912 132.93099976]
[115.96929932 123.26503754]
[104.49893188 113.59908295]
[90.76969147 110.95339203]
[85.83511353 97.87128448]
[74.36474609 88.20532990]
[62.89438248 78.53937531]
[53.48789215 83.38129425]
[43.06717300 85.02379608]
[32.68688583 83.31979370]
[23.39160538 78.45993042]
[16.11070061 70.95143890]
[11.56542683 61.56529999]
[10.19749832 51.25704956]
[12.12622547 41.06955338]
[17.13836861 32.02747345]
[7.69121075 20.37624168]
[-7.01022148 14.53000641]
[-9.01605225 -0.22891979]
[-18.46321106 -11.88015175]
[-27.91036797 -23.53138351]
[-37.35752487 -35.18261719]
[-47.02348328 -46.65298080]
[-56.90477371 -57.93837357]
[-66.78606415 -69.22377014]
[-76.66735840 -80.50916290]
[-92.29663086 -79.99948883]
[-104.56497192 -89.69596863]
[-107.67964935 -105.02022552]
[-100.16999817 -118.73661041]
[-85.58185577 -124.36866760]
[-70.80329132 -119.25710297]
[-62.81229019 -105.81546021]
[-65.38196564 -90.39044952]
[-55.50067139 -79.10505676]
[-45.61938095 -67.81966400]
[-35.73809052 -56.53427505]
[-28.78976631 -53.50139618]
[-25.70629501 -44.62977219]
[-16.25913620 -32.97854233]
[-6.81197834 -21.32731056]
[2.63517928 -9.67607784]
[16.66088867 -4.66321754]
[19.34244347 10.92908287]
[28.78960037 22.58031464]
[48.56455612 19.65218163]
[66.44725800 28.87627602]
[75.64385986 46.92021561]
[72.56034088 67.06900787]
[84.03070068 76.73496246]
[95.50106812 86.40091705]
[109.23030853 89.04660797]
[114.16488647 102.12871552]
[125.63525391 111.79467010]
[137.10562134 121.46062469]
[148.57598877 131.12658691]
[160.04635620 140.79254150]
[178.14414978 143.48335266]
[183.69943237 160.01568604]
[195.52735901 169.24066162]
[207.35528564 178.46563721]
[219.18319702 187.69061279]
[234.02342224 183.55853271]
[248.28448486 188.89477539]
[256.57083130 201.45664978]
[255.87956238 216.31127930]
[271.91375732 215.77764893]
[282.21807861 228.07402039]
[278.88793945 243.76763916]
[264.47796631 250.81971741]
[250.04222107 243.82051086]
[246.65458679 228.13920593]
[232.41561890 232.42753601]
[218.21385193 227.45022583]
[209.56495667 214.91825867]
[209.95822144 199.51853943]
[198.13029480 190.29356384]
[186.30238342 181.06858826]
[174.47445679 171.84361267]
[162.27471924 172.98690796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[7 53]
[8 52]
[9 51]
[18 47]
[19 46]
[21 44]
[22 43]
[23 42]
[24 41]
[25 39]
[26 38]
[27 37]
[28 36]
[61 81]
[62 80]
[63 79]
[64 78]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
