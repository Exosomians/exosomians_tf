%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAUGUACAAACUAAGGCGUUUAAAGUCUCUUGUCUAUUGAGGUAAUAGGAUUAUAAGAGACUCACUUCUUUU\
) } def
/len { sequence length } bind def

/coor [
[88.62421417 138.83193970]
[80.60512543 135.51290894]
[73.47825623 130.56018066]
[67.57145691 124.20160675]
[54.09559631 130.78955078]
[40.61973190 137.37750244]
[27.14386559 143.96545410]
[13.66800117 150.55340576]
[12.69075489 165.88116455]
[4.16719532 178.65788269]
[-9.60988331 185.44668579]
[-24.93451500 184.42138672]
[-37.68445206 175.85783386]
[-44.43002701 162.05953979]
[-43.35670853 146.73818970]
[-34.75321960 134.01516724]
[-20.93385315 127.31287384]
[-5.61595011 128.43420410]
[7.08005190 137.07752991]
[20.55591583 130.48959351]
[34.03178024 123.90164185]
[47.50764465 117.31369019]
[60.98350906 110.72573853]
[61.46772766 87.64719391]
[74.49192810 68.58875275]
[95.81751251 59.75283051]
[118.50424194 64.01499176]
[127.71743774 52.17788315]
[136.93063354 40.34077454]
[146.14381409 28.50366783]
[155.35700989 16.66656113]
[164.57020569 4.82945299]
[173.78338623 -7.00765467]
[182.99658203 -18.84476280]
[192.20977783 -30.68186951]
[201.42295837 -42.51897812]
[209.62718201 -55.07647324]
[216.76638794 -68.26857758]
[223.90560913 -81.46068573]
[231.04481506 -94.65279388]
[238.18402100 -107.84490204]
[245.32324219 -121.03700256]
[247.54423523 -137.84484863]
[264.31005859 -140.36352539]
[271.37152100 -124.95015717]
[258.51535034 -113.89779663]
[251.37612915 -100.70568848]
[244.23692322 -87.51358032]
[237.09771729 -74.32147980]
[229.95849609 -61.12937164]
[222.81929016 -47.93726349]
[223.74081421 -44.99291229]
[223.37312317 -41.46001434]
[221.46635437 -37.90312576]
[218.01066589 -34.97248840]
[213.26007080 -33.30578613]
[204.04687500 -21.46867943]
[194.83369446 -9.63157177]
[185.62049866 2.20553613]
[176.40730286 14.04264355]
[167.19412231 25.87975121]
[157.98092651 37.71685791]
[148.76773071 49.55396652]
[139.55455017 61.39107513]
[130.34135437 73.22817993]
[135.35243225 80.31414032]
[138.73721313 88.30570221]
[140.33995056 96.83523560]
[140.08695984 105.51036072]
[137.98983765 113.93198395]
[134.14508057 121.71270752]
[128.72955322 128.49458313]
[121.99237823 133.96562195]
[114.24349976 137.87414551]
[105.83937073 140.04034424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
