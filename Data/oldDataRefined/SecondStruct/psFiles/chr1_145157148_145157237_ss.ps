%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCACACCAAAGGCAUCACAUCACCAAUAGUACAAGCGGAGUGUGCGCUUUCCAGGGGCCAAGCUUUGACCUACCUUUGUAUCCAAAA\
) } def
/len { sequence length } bind def

/coor [
[65.08647156 99.72409058]
[50.46255493 96.38627625]
[35.83863831 93.04846191]
[21.21471786 89.71064758]
[6.59079981 86.37283325]
[-8.03311920 83.03501892]
[-22.65703773 79.69720459]
[-37.28095627 76.35939026]
[-51.90487671 73.02158356]
[-60.33326721 82.58106232]
[-71.99390411 87.54045868]
[-84.58021545 86.98719025]
[-95.63188934 81.09246063]
[-103.01579285 71.06539917]
[-105.33762360 58.90561295]
[-119.69641876 54.56683350]
[-127.78981781 67.31044006]
[-139.02204895 77.39704895]
[-152.55958557 84.07816315]
[-167.39788818 86.85800934]
[-182.43583679 85.53029633]
[-196.55751038 80.19355011]
[-208.71499634 71.24378967]
[-218.00611877 59.34515762]
[-223.74142456 45.38059998]
[-225.49531555 30.38638687]
[-223.13764954 15.47518539]
[-216.84335327 1.75350606]
[-207.07952881 -9.76041126]
[-194.57070923 -18.21215820]
[-180.24513245 -22.97455788]
[-165.16584778 -23.69420815]
[-150.45185852 -20.31770897]
[-137.19500732 -13.09561634]
[-126.37906647 -2.56385779]
[-118.80663300 10.49603939]
[-115.03964996 25.11494446]
[-115.35763550 40.20803833]
[-100.99884033 44.54681778]
[-87.64015961 33.26190186]
[-70.03788757 32.08314133]
[-55.03334808 41.65218353]
[-48.56706238 58.39766312]
[-33.94314194 61.73547363]
[-19.31922340 65.07328796]
[-4.69530487 68.41110229]
[9.92861366 71.74891663]
[24.55253220 75.08673096]
[39.17645264 78.42454529]
[53.80036926 81.76235962]
[68.42428589 85.10017395]
[82.85910797 69.58256531]
[103.60961151 65.27247620]
[123.03012848 73.75798035]
[133.96502686 91.91253662]
[148.96279907 91.65362549]
[163.96055603 91.39471436]
[178.95832825 91.13581085]
[193.95608521 90.87689972]
[208.95385742 90.61798859]
[214.16404724 76.36252594]
[224.17501831 64.95441437]
[237.63285828 57.93651581]
[252.71751404 56.25794601]
[267.38891602 60.14570999]
[279.66284180 69.07402039]
[287.87939453 81.83540344]
[290.92730713 96.70397949]
[288.39440918 111.66889954]
[280.62322998 124.70628357]
[268.66479492 134.05291748]
[254.13632202 138.44477844]
[239.00271606 137.28785706]
[225.31066895 130.73866272]
[214.91189575 119.68289185]
[209.21276855 105.61575317]
[194.21499634 105.87466431]
[179.21723938 106.13357544]
[164.21946716 106.39248657]
[149.22171021 106.65139008]
[134.22393799 106.91030121]
[131.16912842 115.73263550]
[125.88559723 123.43003082]
[118.75114441 129.45207214]
[110.27590942 133.36819458]
[101.06591034 134.89834595]
[91.77968597 133.93312073]
[83.08125305 130.54154968]
[75.59257507 124.96614075]
[69.84912872 117.60554504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[15 39]
[16 38]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
