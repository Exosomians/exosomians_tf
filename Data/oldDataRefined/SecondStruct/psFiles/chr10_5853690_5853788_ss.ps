%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUGUUGUCUGGUGUGGUACCAAGGUGACCCCGAACUUGGGUCCUGGAAGACGCACAUUUCGUCUACACUAUUGGUGAUGUGAUACCUUGGUGUCC\
) } def
/len { sequence length } bind def

/coor [
[34.55770111 268.19702148]
[36.19512939 283.22399902]
[33.32889557 298.06570435]
[26.21386528 311.40240479]
[15.48269939 322.04821777]
[2.08960605 329.05654907]
[-12.77450943 331.80416870]
[-27.78793907 330.04681396]
[-41.61569977 323.94070435]
[-53.02823639 314.02883911]
[-61.01075363 301.19253540]
[-64.85345459 286.57318115]
[-64.21464539 271.47076416]
[-59.15112686 257.22814941]
[-50.11314392 245.11177063]
[-37.90435410 236.19903564]
[-23.61034966 231.28244019]
[-8.50214481 230.79917908]
[6.07684946 234.79222107]
[14.11425114 222.12730408]
[21.95173073 209.33769226]
[29.58735085 196.42657471]
[37.22297287 183.51544189]
[44.85859299 170.60430908]
[52.49421310 157.69317627]
[60.12983704 144.78204346]
[67.76545715 131.87091064]
[75.40107727 118.95978546]
[83.03669739 106.04865265]
[81.39068604 91.13924408]
[71.12248230 80.20471191]
[60.85427094 69.27017975]
[50.58606720 58.33565140]
[40.31785965 47.40112305]
[24.71580315 48.45462799]
[12.11731052 39.19115067]
[8.47100449 23.98462486]
[15.49855804 10.01510429]
[29.88177681 3.87857056]
[44.82934189 8.47250748]
[53.28347397 21.62779808]
[51.25238800 37.13291550]
[61.52059555 48.06744766]
[71.78880310 59.00197601]
[82.05700684 69.93650818]
[92.32521820 80.87103271]
[99.81041718 80.40010834]
[94.28871918 66.45339203]
[105.84665680 56.89231873]
[118.51127625 64.93019104]
[114.78081512 79.45824432]
[122.26601410 78.98731995]
[131.08279419 66.85206604]
[139.89956665 54.71680832]
[148.71635437 42.58155441]
[157.53312683 30.44629860]
[153.57475281 15.31800652]
[160.31343079 1.20686507]
[174.56735229 -5.22427416]
[189.60626221 -0.93882471]
[198.32925415 12.03975582]
[196.61758423 27.58337784]
[185.27944946 38.35281754]
[169.66838074 39.26307678]
[160.85160828 51.39833450]
[152.03483582 63.53358841]
[143.21804810 75.66884613]
[134.40127563 87.80410004]
[137.80619812 94.48664856]
[148.02098083 114.53429413]
[163.02098083 114.53429413]
[178.02098083 114.53429413]
[193.02098083 114.53429413]
[208.86012268 108.48795319]
[219.05487061 122.03429413]
[208.86012268 135.58062744]
[193.02098083 129.53428650]
[178.02098083 129.53428650]
[163.02098083 129.53428650]
[148.02098083 129.53428650]
[146.45541382 144.45236206]
[137.88819885 156.76507568]
[124.44443512 163.41828918]
[109.45881653 162.76167297]
[96.64849091 154.95811462]
[89.19104004 141.94326782]
[88.93626404 126.94542694]
[95.94783020 113.68428040]
[88.31221008 126.59540558]
[80.67658997 139.50653076]
[73.04096985 152.41766357]
[65.40534210 165.32879639]
[57.76972580 178.23992920]
[50.13410187 191.15106201]
[42.49848175 204.06219482]
[34.86286163 216.97332764]
[33.13511276 226.13153076]
[26.77917099 230.16470337]
[18.74176788 242.82962036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 99]
[20 98]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
