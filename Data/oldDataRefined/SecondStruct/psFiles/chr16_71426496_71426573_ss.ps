%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAUCGCGUCACCCGUCGCGCAGUCAGAGUAUUAGACUUCCAGGACUCAAGCUCGGAGUCUCUCCCGUCGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[69.20284271 173.90345764]
[62.10079193 177.46466064]
[54.35360336 179.14022827]
[46.45182037 178.83349609]
[38.89342880 176.57308960]
[32.15246201 172.51042175]
[26.64927673 166.90963745]
[12.93801880 172.99252319]
[-0.77323818 179.07539368]
[-14.48449516 185.15827942]
[-23.96133804 197.82713318]
[-38.73280334 195.91583252]
[-47.94697571 209.48162842]
[-64.28041840 208.01513672]
[-70.93068695 193.02493286]
[-61.05655670 179.93167114]
[-44.81568146 182.20457458]
[-36.31956100 169.97079468]
[-20.56737518 171.44702148]
[-6.85611820 165.36413574]
[6.85513926 159.28126526]
[20.56639671 153.19837952]
[25.18396759 130.12895203]
[44.72231293 116.62846375]
[68.37162018 120.54113007]
[79.08314514 110.04050446]
[89.79467010 99.53987122]
[93.00256348 91.88588715]
[101.14700317 88.84528351]
[112.26752472 78.77880859]
[107.54196930 63.34439087]
[109.94670868 47.44116592]
[118.95955658 34.18923187]
[132.76683044 26.16670799]
[148.62814331 24.90823746]
[163.42022705 30.61164093]
[174.13175964 20.11100960]
[184.84327698 9.61037922]
[195.55480957 -0.89025199]
[206.26632690 -11.39088345]
[216.97785950 -21.89151382]
[227.68937683 -32.39214706]
[232.12767029 -47.57806396]
[246.63265991 -50.96247101]
[257.34417725 -61.46310425]
[254.93614197 -76.79219055]
[262.02816772 -90.59374237]
[275.89324951 -97.56078339]
[291.19995117 -95.01433563]
[302.06256104 -83.93356323]
[304.30416870 -68.57925415]
[297.06283569 -54.85545349]
[283.12301636 -48.03923416]
[267.84481812 -50.75157928]
[257.13330078 -40.25094986]
[253.46116638 -25.81610489]
[238.19000244 -21.68062210]
[227.47848511 -11.17998981]
[216.76695251 -0.67935914]
[206.05543518 9.82127190]
[195.34391785 20.32190323]
[184.63238525 30.82253456]
[173.92086792 41.32316589]
[179.04307556 54.36729813]
[178.75521851 68.42181396]
[173.06799316 81.32519531]
[162.82505798 91.08006287]
[149.57806396 96.16233826]
[135.35165405 95.75929260]
[122.33400726 89.89933014]
[111.21347809 99.96580505]
[100.29529572 110.25139618]
[89.58377075 120.75202942]
[78.87225342 131.25265503]
[82.04492950 138.65800476]
[83.26973724 146.60192871]
[82.47857666 154.58203125]
[79.73056030 162.09591675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 19]
[12 17]
[25 74]
[26 73]
[27 72]
[29 71]
[30 70]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
