%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACAAGUCUUUCCGGUAAAAGUAAGUCGGGGAAGUCUCGUCAACUUGUAAAGCGGGUAGUAGUAUUGUAGCAAUUAU\
) } def
/len { sequence length } bind def

/coor [
[132.07553101 304.71649170]
[142.82218933 293.64794922]
[139.32051086 279.06237793]
[135.81883240 264.47683716]
[132.31715393 249.89129639]
[128.81547546 235.30574036]
[125.31378937 220.72019958]
[112.51941681 213.18099976]
[108.76043701 198.43905640]
[116.75499725 185.07025146]
[113.25331116 170.48471069]
[97.18992615 162.12788391]
[91.98923492 144.45814514]
[101.27342224 128.18969727]
[96.63816833 113.92384338]
[86.37712097 104.42634583]
[89.09598541 90.71141052]
[84.46073151 76.44556427]
[70.50748444 74.20511627]
[58.96923447 66.16143799]
[52.10604477 53.96074295]
[51.23144913 40.05633926]
[56.46141434 27.21535683]
[66.70281219 17.96807671]
[62.63120270 3.53124785]
[58.55959702 -10.90558052]
[54.48798752 -25.34240913]
[50.41638184 -39.77923584]
[39.22365189 -50.96107101]
[43.21575928 -65.31071472]
[39.14415359 -79.74754333]
[27.95142365 -90.92937469]
[31.94353294 -105.27902222]
[27.87192535 -119.71585083]
[15.75401688 -130.76521301]
[19.52791786 -146.72421265]
[35.31136322 -151.17559814]
[46.86769867 -139.54017639]
[42.30875397 -123.78746033]
[46.38035965 -109.35063171]
[57.28186417 -99.20141602]
[53.58098221 -83.81915283]
[57.65258789 -69.38232422]
[68.55409241 -59.23310852]
[64.85321045 -43.85084534]
[68.92481995 -29.41401672]
[72.99642181 -14.97718716]
[77.06803131 -0.54035878]
[81.13964081 13.89647007]
[96.78318024 17.41946793]
[108.63548279 28.35769844]
[113.45526123 43.84637833]
[109.86128235 59.75981140]
[98.72657776 71.81031036]
[103.36183167 86.07615662]
[113.62287903 95.57365417]
[110.90401459 109.28858948]
[115.53926849 123.55443573]
[127.27503967 126.90460205]
[135.75918579 135.50798035]
[138.88171387 147.05464172]
[135.95014954 158.52581787]
[127.83886719 166.98303223]
[131.34054565 181.56857300]
[144.53305054 189.85081482]
[147.87648010 204.69252014]
[139.89933777 217.21852112]
[143.40101624 231.80406189]
[146.90269470 246.38961792]
[150.40437317 260.97515869]
[153.90606689 275.56069946]
[157.40774536 290.14627075]
[172.00810242 295.12954712]
[181.57862854 307.22946167]
[183.06541443 322.58502197]
[175.99401855 336.29629517]
[162.62089539 343.98806763]
[147.21337891 343.20590210]
[134.68792725 334.19943237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[10 64]
[11 63]
[14 58]
[15 57]
[17 55]
[18 54]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[30 43]
[31 42]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
