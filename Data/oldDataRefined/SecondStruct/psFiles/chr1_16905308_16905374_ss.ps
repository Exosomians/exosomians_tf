%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAAAACAUUGAACAUCAUUAUUCCAUCUUUAAUUUUUCUUUUUCAUAAAAGGACAUGAACGAAC\
) } def
/len { sequence length } bind def

/coor [
[132.26988220 219.87329102]
[117.58564758 222.88896179]
[102.64497375 224.11267090]
[87.66574097 223.52659607]
[72.86636353 221.13925171]
[58.46264267 216.98547363]
[44.66461563 211.12582397]
[31.67348671 203.64573669]
[19.67868614 194.65431213]
[8.85512447 184.28263855]
[-0.63937163 172.68197632]
[-8.66635418 160.02145386]
[-15.10877419 146.48571777]
[-19.87269020 132.27212524]
[-22.88863182 117.58795166]
[-24.11262512 102.64730835]
[-23.52681923 87.66806030]
[-21.13975906 72.86863708]
[-16.98624802 58.46483612]
[-11.12685585 44.66670227]
[-3.64702272 31.67543221]
[5.34418154 19.68046379]
[15.71564770 8.85670662]
[27.31614113 -0.63800758]
[39.97650146 -8.66522789]
[53.51211929 -15.10790157]
[67.72562408 -19.87208366]
[82.40974426 -22.88830185]
[97.35036469 -24.11257553]
[112.32962036 -23.52705193]
[127.12908936 -21.14026833]
[141.53297424 -16.98702812]
[155.33120728 -11.12789440]
[168.32261658 -3.64830518]
[180.31776428 5.34267426]
[191.14170837 15.71393681]
[200.63664246 27.31425095]
[208.66410828 39.97446442]
[215.10702515 53.50996017]
[229.32943726 48.74308777]
[243.55184937 43.97621918]
[257.77426147 39.20934677]
[271.99667358 34.44247437]
[286.21908569 29.67560387]
[300.44149780 24.90873146]
[310.89022827 12.26928520]
[327.01345825 15.26488113]
[332.22497559 30.81390762]
[321.16360474 42.92086029]
[305.20837402 39.13114166]
[290.98596191 43.89801407]
[276.76354980 48.66488647]
[262.54113770 53.43175507]
[248.31872559 58.19862747]
[234.09631348 62.96549988]
[219.87390137 67.73236847]
[222.88929749 82.41666412]
[224.11273193 97.35735321]
[223.52635193 112.33657837]
[221.13873291 127.13591003]
[216.98469543 141.53955078]
[211.12478638 155.33746338]
[203.64445496 168.32846069]
[194.65280151 180.32308960]
[184.28092957 191.14645386]
[172.68008423 200.64073181]
[160.01942444 208.66748047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
