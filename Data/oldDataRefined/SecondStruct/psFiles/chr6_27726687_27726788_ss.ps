%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCACUCCGAAGCACCGAAUCGACCAAUUUCGCGGACAGAUCAUUUGUCCUCUAGGACCCAAGCUUAGGGUCGCUCCGGAGAAAUAAAGAAGGGGAUUUGA\
) } def
/len { sequence length } bind def

/coor [
[154.31208801 265.37149048]
[154.18550110 250.30725098]
[157.41470337 235.59262085]
[163.83772278 221.96572876]
[173.13240051 210.11006165]
[184.83248901 200.62030029]
[178.20671082 187.16299438]
[171.58093262 173.70568848]
[164.95515442 160.24838257]
[158.32937622 146.79107666]
[145.76594543 138.79046631]
[146.61170959 122.99188995]
[139.98591614 109.53458405]
[133.36013794 96.07727814]
[120.10095978 122.78034973]
[93.49228668 126.38079071]
[77.60836029 108.53302002]
[62.62405396 109.21904755]
[47.63975143 109.90508270]
[32.65544510 110.59111023]
[25.00620842 123.98860168]
[11.31747818 131.10353088]
[-4.04272223 129.66554260]
[-16.17300797 120.13350677]
[-21.20264816 105.54905701]
[-17.52670479 90.56603241]
[-6.31815577 79.96546936]
[8.84639072 77.12996674]
[23.12798119 82.96431732]
[31.96941566 95.60681152]
[46.95372009 94.92077637]
[61.93802261 94.23474884]
[76.92232513 93.54871368]
[81.49011230 77.96697998]
[96.67247772 66.57524109]
[89.23860931 53.54690552]
[81.80474091 40.51856613]
[74.37087250 27.49022484]
[66.93701172 14.46188641]
[59.50313950 1.43354726]
[52.06927490 -11.59479237]
[38.96795654 -22.35545158]
[45.68128204 -37.92361450]
[62.49946594 -35.78234482]
[65.09761047 -19.02865982]
[72.53147888 -6.00031996]
[79.96534729 7.02801943]
[87.39921570 20.05635834]
[94.83308411 33.08469772]
[102.26694489 46.11303711]
[109.70081329 59.14137650]
[117.11376953 60.28073120]
[114.69967651 45.47626495]
[128.03364563 38.60566711]
[138.68827820 49.16402817]
[131.93966675 62.55944061]
[139.35263062 63.69879532]
[150.35580444 53.50419235]
[161.35899353 43.30958939]
[172.36218262 33.11498642]
[183.36537170 22.92038536]
[182.41658020 7.31161118]
[191.76438904 -5.22443867]
[206.99504089 -8.76862526]
[220.91708374 -1.64749157]
[226.95697021 12.77657986]
[222.26283264 27.69298363]
[209.05110168 36.05865097]
[193.55996704 33.92356873]
[182.55677795 44.11817169]
[171.55360413 54.31277466]
[160.55041504 64.50737762]
[149.54722595 74.70198059]
[146.81744385 89.45149994]
[153.44322205 102.90880585]
[160.06900024 116.36610413]
[173.10635376 125.32926941]
[171.78668213 140.16529846]
[178.41246033 153.62260437]
[185.03823853 167.07991028]
[191.66401672 180.53721619]
[198.28979492 193.99452209]
[212.94554138 190.50782776]
[228.00968933 190.37028503]
[242.72665405 193.58880615]
[256.35821533 200.00192261]
[268.22064209 209.28796387]
[277.71890259 220.98115540]
[284.37658691 234.49497986]
[287.85971069 249.15156555]
[287.99359131 264.21575928]
[284.77151489 278.93191528]
[278.35510254 292.56195068]
[269.06619263 304.42211914]
[257.37069702 313.91754150]
[243.85525513 320.57192993]
[229.19783020 324.05151367]
[214.13360596 324.18176270]
[199.41821289 320.95611572]
[185.78974915 314.53640747]
[173.93183899 305.24459839]
[164.43923950 293.54681396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[12 76]
[13 75]
[14 74]
[17 33]
[18 32]
[19 31]
[20 30]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
