%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGACAGACAAAUCAUGCUCGGUACCGUUUUGGUGUCUUUUCGAACGGACGUCUCUGCAGACACC\
) } def
/len { sequence length } bind def

/coor [
[140.40356445 157.03662109]
[143.52474976 141.23776245]
[131.43096924 132.36418152]
[119.33718872 123.49060059]
[107.24340820 114.61701202]
[90.66048431 113.37525940]
[83.78245544 98.23497772]
[71.28604126 89.93801117]
[58.78962708 81.64104462]
[46.29321671 73.34407806]
[33.79680252 65.04711151]
[26.65998650 64.18724823]
[21.95700455 60.25060654]
[20.56929779 55.34167480]
[8.90473366 45.91098404]
[-2.75982904 36.48028946]
[-15.96518707 41.06984329]
[-29.58916283 38.46488571]
[-40.00422668 29.47033691]
[-44.49301147 16.57742691]
[-41.95681381 3.27446127]
[-53.16651917 -6.69261074]
[-69.32875061 -9.47007751]
[-74.74987793 -24.94726753]
[-63.85311508 -37.20257187]
[-47.84811401 -33.62878799]
[-43.19944763 -17.90231514]
[-31.98974419 -7.93524313]
[-16.25086212 -11.99261189]
[-0.99569845 -5.92537117]
[7.83212519 8.11070633]
[6.67086411 24.81572723]
[18.33542633 34.24641800]
[29.99999046 43.67711258]
[42.09376907 52.55069733]
[54.59018326 60.84766388]
[67.08659363 69.14463043]
[79.58300781 77.44159698]
[92.07942200 85.73856354]
[103.83628082 84.14418030]
[113.56394958 90.93669891]
[116.11698914 102.52323914]
[128.21076965 111.39682007]
[140.30455017 120.27040100]
[152.39833069 129.14398193]
[164.78494263 121.96567535]
[178.93791199 120.12207794]
[192.66564941 123.86465454]
[203.85554504 132.58247375]
[210.79902649 144.90164185]
[212.45245361 158.90180969]
[208.59379578 172.41539001]
[220.25834656 181.84608459]
[231.92291260 191.27677917]
[243.58747864 200.70747375]
[259.86212158 202.72431946]
[266.00274658 217.93040466]
[255.69239807 230.68299866]
[239.53747559 227.86332703]
[234.15678406 212.37203979]
[222.49221802 202.94134521]
[210.82765198 193.51065063]
[199.16310120 184.07995605]
[185.02006531 191.16166687]
[169.14830017 191.45072937]
[154.65223694 184.84103394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[14 34]
[15 33]
[16 32]
[21 28]
[22 27]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
