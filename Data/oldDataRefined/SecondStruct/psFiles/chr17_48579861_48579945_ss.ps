%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAUAAGGGGAUCUAUGCUUAAACACUGGUGUUUUAAGGAAUGUGUUUAAGCCUAGAUGUCCCAUAUAUGUCUUCUGUCUGUCU\
) } def
/len { sequence length } bind def

/coor [
[151.80897522 236.91444397]
[161.90759277 225.63186646]
[154.56631470 212.55111694]
[147.22505188 199.47038269]
[139.88378906 186.38963318]
[132.54251099 173.30889893]
[119.56625366 165.99685669]
[119.55950928 150.17565918]
[112.21824646 137.09490967]
[104.87697601 124.01417542]
[97.53571320 110.93343353]
[89.95675659 97.98895264]
[82.14265442 85.18505859]
[74.32855225 72.38116455]
[66.51444244 59.57726669]
[58.70034027 46.77336884]
[44.90676498 39.02430725]
[44.88112259 24.12972641]
[37.06701660 11.32582951]
[29.25291252 -1.47806680]
[21.43880653 -14.28196335]
[13.62470245 -27.08585930]
[5.81059694 -39.88975525]
[-2.00350809 -52.69365311]
[-9.81761360 -65.49755096]
[-17.63171768 -78.30144501]
[-25.44582367 -91.10533905]
[-40.30044174 -88.08605194]
[-55.29141617 -90.33248901]
[-68.60851288 -97.57339478]
[-78.64363098 -108.93439484]
[-84.18497467 -123.04358673]
[-84.56340027 -138.19721985]
[-79.73322296 -152.56541443]
[-70.27769470 -164.41316223]
[-57.33862686 -172.30975342]
[-42.47846985 -175.30166626]
[-27.49166107 -173.02760315]
[-14.18793011 -165.76216125]
[-4.17376900 -154.38269043]
[1.34156537 -140.26332092]
[1.69206893 -125.10900879]
[-3.16458344 -110.74973297]
[-12.64192677 -98.91944885]
[-4.82782221 -86.11554718]
[2.98628306 -73.31165314]
[10.80038834 -60.50775909]
[18.61449242 -47.70386124]
[26.42859840 -34.89996338]
[34.24270248 -22.09606743]
[42.05680847 -9.29217148]
[49.87091446 3.51172447]
[57.68502045 16.31562042]
[70.91967773 23.14886093]
[71.50423431 38.95926285]
[79.31833649 51.76316071]
[87.13244629 64.56705475]
[94.94654846 77.37095642]
[102.76065826 90.17485046]
[109.47038269 95.00555420]
[110.61644745 103.59216309]
[117.95771790 116.67290497]
[125.29898834 129.75364685]
[132.64025879 142.83438110]
[146.14161682 151.08204651]
[145.62326050 165.96763611]
[152.96452332 179.04837036]
[160.30580139 192.12910461]
[167.64706421 205.20985413]
[174.98832703 218.29058838]
[189.87983704 215.54803467]
[204.85462952 217.79180908]
[218.28833008 224.77853394]
[228.72377014 235.75032043]
[235.02899170 249.51705933]
[236.52003479 264.58541870]
[233.03518677 279.32089233]
[224.95242310 292.12512207]
[213.14854431 301.60916138]
[198.90391541 306.74426270]
[183.76368713 306.97338867]
[169.37017822 302.27175903]
[157.28468323 293.14929199]
[148.81813049 280.59555054]
[144.88893127 265.97225952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[8 64]
[9 63]
[10 62]
[11 61]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
