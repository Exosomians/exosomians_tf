%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUUCCAGGCGGGCUACGCAACCCGCCCUUAGCUCGGGCCCAGUUGACGAACCUUCCGUUGAUACGAGUGGUGAUAUGGUGGUUGCGGCGUGCCG\
) } def
/len { sequence length } bind def

/coor [
[53.56000900 350.89868164]
[44.70370865 363.38165283]
[31.05546570 370.30871582]
[15.75154877 370.08804321]
[2.30868292 362.77041626]
[-6.18405819 350.03732300]
[-7.77510548 334.81472778]
[-2.09884739 320.60067749]
[9.54035282 310.66149902]
[24.46789360 307.28109741]
[28.27271271 292.77166748]
[32.07752991 278.26223755]
[35.88235092 263.75280762]
[31.62642860 249.47920227]
[42.61115646 238.09295654]
[46.41597748 223.58354187]
[44.71828842 218.93548584]
[46.06011200 213.16766357]
[50.95747757 208.28172302]
[55.68410110 194.04588318]
[60.41072464 179.81004333]
[65.13734436 165.57420349]
[69.86396790 151.33836365]
[74.59059143 137.10253906]
[79.31721497 122.86669922]
[83.81506348 108.55693054]
[78.86087799 94.39868164]
[66.55829620 85.81693268]
[54.25571060 77.23518372]
[41.95312500 68.65343475]
[26.90376091 72.90203857]
[12.66562557 66.43601227]
[5.96152925 52.30841446]
[9.95694160 37.18986130]
[22.76535225 28.21887207]
[38.33901978 29.63127518]
[49.32453537 40.76017761]
[50.53487396 56.35084915]
[62.83745956 64.93260193]
[75.14004517 73.51435089]
[87.44262695 82.09609985]
[102.11816406 78.99310303]
[109.89405060 66.16596222]
[117.66994476 53.33882141]
[118.20735168 37.52674484]
[131.42156982 30.65406990]
[139.19746399 17.82692719]
[146.97334290 4.99978638]
[154.54264832 -7.95033836]
[150.51324463 -22.99698639]
[158.16427612 -36.14674759]
[172.53379822 -39.89544296]
[179.89456177 -52.96522522]
[187.25532532 -66.03500366]
[184.33992004 -81.81093597]
[194.96470642 -93.83148193]
[210.97924805 -92.87550354]
[220.09857178 -79.67635345]
[215.32710266 -64.35928345]
[200.32510376 -58.67424011]
[192.96434021 -45.60446167]
[185.60357666 -32.53467941]
[189.84695435 -18.30340004]
[182.56826782 -4.94392633]
[167.61242676 -0.58957499]
[167.06285095 6.92328453]
[159.80049133 12.77567482]
[152.02459717 25.60281563]
[144.24871826 38.42995834]
[144.26748657 53.32455063]
[130.49708557 61.11470795]
[122.72119141 73.94184875]
[114.94530487 86.76898956]
[117.42395020 92.21422577]
[118.08619690 97.89584351]
[117.02473450 103.24923706]
[114.49632263 107.78795624]
[110.88354492 111.14791107]
[106.64583588 113.11591339]
[102.26555634 113.64052582]
[98.19508362 112.82484436]
[98.74517059 122.13557434]
[93.55305481 127.59332275]
[88.82643127 141.82916260]
[84.09980774 156.06498718]
[79.37318420 170.30082703]
[74.64656067 184.53666687]
[69.91993713 198.77250671]
[65.19331360 213.00833130]
[60.92539978 227.38835144]
[57.12057877 241.89778137]
[61.10435486 257.20922852]
[50.39177322 267.55764771]
[46.58695221 282.06707764]
[42.78213501 296.57647705]
[38.97731781 311.08590698]
[50.32513809 321.35653687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 96]
[11 95]
[12 94]
[13 93]
[15 91]
[16 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[26 81]
[27 41]
[28 40]
[29 39]
[30 38]
[42 73]
[43 72]
[44 71]
[46 69]
[47 68]
[48 67]
[49 65]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
