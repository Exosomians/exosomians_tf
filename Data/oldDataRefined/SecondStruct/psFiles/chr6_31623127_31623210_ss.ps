%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACCUCCUUUUAUUUACACCUAAACCCUUUGAAACUCCGGUCGAACGAAGAACGUCCGAGUACUAGUUGGUUAGAGUGUAUU\
) } def
/len { sequence length } bind def

/coor [
[30.29242134 326.87048340]
[23.82615471 340.53350830]
[13.61868572 351.68246460]
[0.57765496 359.32595825]
[-14.13733864 362.78433228]
[-29.21784782 361.75009155]
[-43.32292175 356.31515503]
[-55.19834900 346.96286011]
[-63.78817368 334.52474976]
[-68.32859802 320.10687256]
[-68.41588593 304.99118042]
[-64.04227448 290.52178955]
[-55.59666824 277.98532104]
[-43.83003998 268.49649048]
[-29.78867340 262.89904785]
[-14.72111416 261.69070435]
[0.03283790 264.97891235]
[7.45267534 251.94258118]
[14.87251282 238.90625000]
[22.29235077 225.86991882]
[29.71218872 212.83357239]
[36.88986206 199.66235352]
[43.82292175 186.36074829]
[50.75597763 173.05914307]
[57.68903732 159.75753784]
[57.99518967 152.18980408]
[65.13198090 146.09954834]
[72.55181885 133.06321716]
[62.90373230 121.68975830]
[57.72430801 107.70352936]
[57.63745880 92.78932953]
[62.65365219 78.74372864]
[72.16863251 67.25868988]
[85.03620911 59.71770096]
[99.70633698 57.02916718]
[114.41184998 59.51695251]
[121.83168793 46.48061752]
[129.25152588 33.44428253]
[136.67135620 20.40794945]
[138.26348877 11.16186142]
[144.61390686 7.03430605]
[152.51039124 -5.71895123]
[153.19685364 -21.52525711]
[166.47528076 -28.27303886]
[174.37176514 -41.02629471]
[167.63551331 -54.90528488]
[169.49484253 -70.22019196]
[179.35646057 -82.08409119]
[194.07356262 -86.71124268]
[208.94996643 -82.62515259]
[219.23867798 -71.12966919]
[221.65658569 -55.89296341]
[215.43215942 -41.77701187]
[202.55160522 -33.28615952]
[187.12503052 -33.12981415]
[179.22854614 -20.37655640]
[179.10688782 -5.48244762]
[165.26364136 2.17753148]
[157.36715698 14.93078804]
[149.70768738 27.82778549]
[142.28785706 40.86412048]
[134.86801147 53.90045547]
[127.44818115 66.93679047]
[137.09626770 78.31024170]
[142.27569580 92.29647064]
[142.36253357 107.21067047]
[137.34634399 121.25627136]
[127.83136749 132.74131775]
[114.96379089 140.28230286]
[100.29366302 142.97082520]
[85.58815002 140.48304749]
[78.16831207 153.51937866]
[70.99063873 166.69059753]
[64.05758667 179.99220276]
[57.12452698 193.29380798]
[50.19146729 206.59541321]
[48.94207764 215.89402771]
[42.74852371 220.25341797]
[35.32868576 233.28974915]
[27.90884781 246.32608032]
[20.48900986 259.36242676]
[13.06917191 272.39874268]
[23.43019867 283.40515137]
[30.08523178 296.97723389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 76]
[23 75]
[24 74]
[25 73]
[27 72]
[28 71]
[36 63]
[37 62]
[38 61]
[39 60]
[41 59]
[42 58]
[44 56]
[45 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
