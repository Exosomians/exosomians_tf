%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGACAGAGUCACUACUUUUGAAACAGGUCAAGACGAUGACUGUCAUUCACUUCUAUUUCACACAGACUCCUCUG\
) } def
/len { sequence length } bind def

/coor [
[191.45536804 217.19096375]
[173.20681763 205.06840515]
[160.95222473 186.86917114]
[156.56948853 165.33776855]
[160.74710083 143.73260498]
[147.75672913 136.23260498]
[134.76634216 128.73260498]
[121.77596283 121.23261261]
[108.78557587 113.73261261]
[92.13471222 114.27964783]
[83.69773865 99.91412354]
[70.41590118 92.94327545]
[57.13405991 85.97243500]
[49.21949005 90.19326019]
[40.36369705 90.75547791]
[32.15858078 87.63764191]
[26.04621696 81.47274017]
[23.06549644 73.42146301]
[23.67605400 64.95422363]
[11.68441200 55.94308853]
[-0.30722955 46.93195343]
[-12.29887104 37.92082214]
[-24.29051208 28.90968704]
[-36.28215408 19.89855385]
[-51.89248657 22.36696243]
[-64.62678528 13.00676918]
[-66.93001556 -2.62878871]
[-57.43571091 -15.26341343]
[-41.77667618 -17.40120506]
[-29.24313545 -7.77385044]
[-27.27101898 7.90691185]
[-15.27937889 16.91804504]
[-3.28773713 25.92918015]
[8.70390415 34.94031525]
[20.69554520 43.95144653]
[32.68718719 52.96258163]
[54.20700836 52.77083969]
[64.10491180 72.69058990]
[77.38674927 79.66143799]
[90.66858673 86.63228607]
[102.15377045 83.84040833]
[112.50680542 89.54290771]
[116.28557587 100.74223328]
[129.27595520 108.24223328]
[142.26634216 115.74223328]
[155.25672913 123.24223328]
[168.24710083 130.74223328]
[175.12171936 123.34199524]
[183.19937134 117.28556824]
[192.22138977 112.76480103]
[201.89920044 109.92242432]
[211.92364502 108.84750366]
[221.97471619 109.57267761]
[231.73193359 112.07313538]
[240.88442993 116.26750183]
[249.14093018 122.02044678]
[256.23901367 129.14709473]
[261.95346069 137.41889954]
[266.10330200 146.57106018]
[268.55767822 156.31091309]
[269.23995972 166.32734680]
[268.13000488 176.30072021]
[265.26489258 185.91307068]
[260.73760986 194.85823059]
[254.69412231 202.85159302]
[247.32849121 209.63917542]
[254.82849121 222.62956238]
[262.32849121 235.61993408]
[269.82849121 248.61032104]
[284.29336548 256.33682251]
[284.56396484 272.73376465]
[270.36187744 280.93331909]
[256.29702759 272.50054932]
[256.83810425 256.11032104]
[249.33810425 243.11993408]
[241.83810425 230.12956238]
[234.33810425 217.13917542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[11 40]
[12 39]
[13 38]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
