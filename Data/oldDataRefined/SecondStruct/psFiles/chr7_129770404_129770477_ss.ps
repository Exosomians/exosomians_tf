%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUCAACCGUUCAGAUCUUGGUGGCCUAGGACAAUGGAGUGGUCACACUCAAGAUGGUAACGGUUUUUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.03483582 278.85342407]
[113.15483856 263.97171021]
[111.27483368 249.08999634]
[99.38504028 240.19233704]
[97.26645660 225.12693787]
[106.67974854 212.71615601]
[104.79975128 197.83442688]
[102.91975403 182.95271301]
[101.03975677 168.07098389]
[99.15975952 153.18927002]
[97.27976227 138.30755615]
[95.39975739 123.42582703]
[82.55300140 116.29521179]
[76.31500244 102.99211121]
[79.04867554 88.55562592]
[89.71852112 78.45417023]
[87.83852386 63.57244873]
[85.95851898 48.69072723]
[84.07852173 33.80900955]
[82.19852448 18.92728806]
[80.31852722 4.04556704]
[77.50780487 -10.68874168]
[73.77745819 -25.21748924]
[70.04711151 -39.74623489]
[66.31676483 -54.27498245]
[62.58641434 -68.80373383]
[58.85606384 -83.33248138]
[43.80188751 -85.43965912]
[30.70256233 -93.15173340]
[21.55563736 -105.29266357]
[17.75595284 -120.01104736]
[19.88293457 -135.06243896]
[27.61223221 -148.15161133]
[39.76518631 -157.28256226]
[54.48855591 -161.06288147]
[69.53713989 -158.91609192]
[82.61612701 -151.16958618]
[91.73107910 -139.00463867]
[95.49202728 -124.27629852]
[93.32545471 -109.23056030]
[85.56174469 -96.16176605]
[73.38481140 -87.06282806]
[77.11515808 -72.53408051]
[80.84551239 -58.00533295]
[84.57585907 -43.47658539]
[88.30620575 -28.94783783]
[92.03655243 -14.41909027]
[95.18040466 -12.26491451]
[97.29850006 -8.33248711]
[97.49440765 -3.19430161]
[95.20024872 2.16556859]
[97.08024597 17.04728889]
[98.96024323 31.92901039]
[100.84024048 46.81072998]
[102.72023773 61.69245148]
[104.60024261 76.57417297]
[117.44699860 83.70478821]
[123.68499756 97.00788879]
[120.95132446 111.44437408]
[110.28147888 121.54582977]
[112.16147614 136.42755127]
[114.04148102 151.30926514]
[115.92147827 166.19099426]
[117.80147552 181.07270813]
[119.68147278 195.95443726]
[121.56147003 210.83615112]
[133.76547241 220.51603699]
[135.46005249 235.63500977]
[126.15655518 247.20999146]
[128.03656006 262.09170532]
[129.91654968 276.97344971]
[140.25704956 289.70159912]
[134.15243530 304.92214966]
[117.88259888 306.97750854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
