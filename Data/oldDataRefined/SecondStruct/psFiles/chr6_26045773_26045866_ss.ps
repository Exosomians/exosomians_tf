%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGUUUCUAUAGGUCGACCGUGCAGCGUAGGCACCCCUUUCCCGUAUUCAGACGGGCAAAGAAGGAGUAACUUUUCCGAGAAAAGUCUCGGUG\
) } def
/len { sequence length } bind def

/coor [
[74.83410645 89.10504150]
[84.42077637 76.07324982]
[70.00946808 80.23429108]
[55.59816742 84.39533234]
[41.18686295 88.55638123]
[30.07464409 99.81822968]
[15.70052147 95.91516876]
[1.28921664 100.07621002]
[-13.12208843 104.23725891]
[-27.53339386 108.39830017]
[-41.94469833 112.55934143]
[-47.03350067 117.27253723]
[-52.86523438 118.38086700]
[-57.44725037 116.48512268]
[-72.10205078 119.68461609]
[-83.93428040 130.18742371]
[-98.01902008 125.34291077]
[-106.34144592 138.77841187]
[-121.74552155 142.31251526]
[-135.09228516 133.84851074]
[-138.46333313 118.40792847]
[-129.85868835 105.15139771]
[-114.38333130 101.94378662]
[-101.21851349 110.68811035]
[-90.43450165 100.41414642]
[-75.30155182 105.02981567]
[-60.64674759 101.83032227]
[-46.10574341 98.14804077]
[-31.69443703 93.98699188]
[-17.28313255 89.82595062]
[-2.87182713 85.66490936]
[11.53947830 81.50386047]
[21.62090111 70.53964233]
[37.02581787 74.14507294]
[51.43712234 69.98403168]
[65.84842682 65.82298279]
[80.25973511 61.66194153]
[90.23509979 50.45962143]
[92.70401764 35.66419983]
[95.17294312 20.86878204]
[97.64186096 6.07336187]
[99.86581421 -8.76085567]
[101.84419250 -23.62981796]
[103.82257843 -38.49877930]
[105.80096436 -53.36774063]
[107.77934265 -68.23670197]
[97.97774506 -80.63445282]
[99.89645386 -96.32183838]
[112.39714050 -105.99181366]
[128.06336975 -103.90734863]
[137.60063171 -91.30512238]
[135.35066223 -75.66181183]
[122.64830780 -66.25831604]
[120.66992188 -51.38935852]
[118.69153595 -36.52039719]
[116.71315765 -21.65143394]
[114.73477173 -6.78247356]
[117.01842499 0.40483716]
[112.43727875 8.54228115]
[109.96836090 23.33769989]
[107.49944305 38.13312149]
[105.03051758 52.92853928]
[115.72444916 63.44709015]
[130.47702026 60.73388290]
[145.22959900 58.02067566]
[153.99169922 44.86768723]
[169.50421143 41.84482193]
[182.56382751 50.74549484]
[185.42251587 66.28909302]
[176.38426208 79.25387573]
[160.81130981 81.94806671]
[147.94281006 72.77325439]
[133.19023132 75.48645782]
[118.43765259 78.19966888]
[124.58332825 89.65697479]
[124.72464752 101.79000854]
[119.61554718 111.83277893]
[129.21507263 123.35879517]
[138.81460571 134.88481140]
[148.41412354 146.41082764]
[158.01365662 157.93684387]
[167.61318970 169.46286011]
[183.18118286 174.61743164]
[186.23576355 190.72958374]
[173.63464355 201.22451782]
[158.34075928 195.30595398]
[156.08717346 179.06239319]
[146.48764038 167.53637695]
[136.88810730 156.01036072]
[127.28858185 144.48434448]
[117.68905640 132.95832825]
[108.08953094 121.43230438]
[94.65700531 123.43553162]
[81.78635406 117.36577606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[14 27]
[15 26]
[17 24]
[38 62]
[39 61]
[40 60]
[41 59]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[63 74]
[64 73]
[65 72]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
