%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAUAUAGAGGAGUCCUUUUGUAUCGUGGUUUGUAAUCCUCACGAUACCGAAGGAUAUCUCUUGAAGGUAGAAACCAGUGUCGCAAUUCUCGAGACCCAAAGUGUCGGAGUAUUCGGGAGAAACUUUACUGGGUA\
) } def
/len { sequence length } bind def

/coor [
[116.24507904 164.84104919]
[101.41172028 166.83016968]
[86.50759888 165.46922302]
[72.27982330 160.82644653]
[59.44160461 153.13455200]
[48.63649750 142.77914429]
[40.40613556 130.27929688]
[35.16309357 116.26160431]
[33.17019653 101.42875671]
[18.23234177 100.06473541]
[3.29448962 98.70071411]
[-11.64336300 97.33669281]
[-26.58121490 95.97267151]
[-41.02780151 102.42299652]
[-52.99875259 93.56040192]
[-67.93660736 92.19637299]
[-82.87445831 90.83235168]
[-97.81230927 89.46833038]
[-112.75016022 88.10430908]
[-127.68801880 86.74028778]
[-142.62586975 85.37625885]
[-157.07244873 91.82659149]
[-169.04341125 82.96398926]
[-183.98126221 81.59996796]
[-198.91911316 80.23594666]
[-213.85696411 78.87192535]
[-228.79481506 77.50790405]
[-243.73266602 76.14387512]
[-258.67053223 74.77985382]
[-273.60836792 73.41583252]
[-288.54623413 72.05181122]
[-297.33773804 84.64566040]
[-311.25509644 91.14196777]
[-326.55465698 89.79325867]
[-339.12091064 80.96233368]
[-345.57354736 67.02465057]
[-344.17691040 51.72939682]
[-335.30661011 39.19090652]
[-321.34878540 32.78197098]
[-306.05798340 34.22656631]
[-293.54736328 43.13610077]
[-287.18218994 57.11395645]
[-272.24435425 58.47797775]
[-257.30648804 59.84200287]
[-242.36865234 61.20602417]
[-227.43078613 62.57004929]
[-212.49293518 63.93407059]
[-197.55508423 65.29809570]
[-182.61723328 66.66211700]
[-167.67938232 68.02613831]
[-154.30125427 61.47824860]
[-141.26184082 70.43840790]
[-126.32398987 71.80242920]
[-111.38613892 73.16645813]
[-96.44828796 74.53047943]
[-81.51043701 75.89450073]
[-66.57257843 77.25852203]
[-51.63473129 78.62254333]
[-38.25659943 72.07465363]
[-25.21719360 81.03481293]
[-10.27933979 82.39884186]
[4.65851259 83.76286316]
[19.59636497 85.12688446]
[34.53421783 86.49090576]
[39.18062592 72.26432037]
[46.87578964 59.42805862]
[57.23395920 48.62559128]
[69.73590088 40.39841843]
[83.75492096 35.15895081]
[98.58827972 33.16983414]
[113.49240112 34.53077698]
[127.72017670 39.17355728]
[140.55839539 46.86544418]
[151.36351013 57.22085953]
[159.59385681 69.72070312]
[164.83689880 83.73839569]
[166.82980347 98.57124329]
[181.76765442 99.93526459]
[196.70550537 101.29928589]
[211.64335632 102.66330719]
[226.58122253 104.02732849]
[241.51907349 105.39135742]
[248.63545227 91.98863220]
[260.30953979 82.35752869]
[274.74261475 77.94164276]
[289.72619629 79.38410950]
[302.97994995 86.43412018]
[312.49887085 97.98986816]
[316.85644531 112.27065277]
[331.79431152 113.63467407]
[346.73217773 114.99869537]
[361.67001343 116.36271667]
[376.60787964 117.72674561]
[391.54571533 119.09076691]
[406.48358154 120.45478821]
[421.42141724 121.81880951]
[436.37384033 123.01271820]
[451.33886719 124.03635406]
[466.31457520 124.88958740]
[481.29904175 125.57230377]
[490.87606812 113.36328888]
[505.80950928 109.14761353]
[520.35717773 114.54629517]
[528.92510986 127.48342896]
[528.21887207 142.98442078]
[518.50994873 155.08883667]
[503.53167725 159.14225769]
[489.04345703 153.58607483]
[480.61633301 140.55676270]
[465.63186646 139.87403870]
[458.74758911 142.73658752]
[450.31524658 139.00138855]
[435.35018921 137.97775269]
[428.40255737 140.68284607]
[420.05740356 136.75666809]
[405.11956787 135.39263916]
[390.18170166 134.02862549]
[375.24383545 132.66459656]
[360.30599976 131.30056763]
[345.36813354 129.93655396]
[330.43029785 128.57252502]
[315.49243164 127.20850372]
[308.62042236 140.46386719]
[297.16598511 150.10447693]
[282.85455322 154.63743591]
[267.85754395 153.34226990]
[254.46296692 146.38536072]
[244.72628784 134.79916382]
[240.15504456 120.32920837]
[225.21719360 118.96518707]
[210.27934265 117.60115814]
[195.34149170 116.23713684]
[180.40364075 114.87311554]
[165.46577454 113.50909424]
[160.81936646 127.73567963]
[153.12420654 140.57194519]
[142.76603699 151.37440491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[77 134]
[78 133]
[79 132]
[80 131]
[81 130]
[82 129]
[89 122]
[90 121]
[91 120]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[97 113]
[98 112]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
