%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCGGGGGAGCGGGCAGUGCGUGGCGUGCAAGCACCCCUUGGACCGCGAUUUGGUAAGCAUCUGCUGGACGAAGACCCAGCCCCAAAGCAUGCAUCGUCUCGUCGAGGGAGCGACGCUAGAUAACUUUCAGUCGGGAGCUGUGUUCCCAAACAGGCGC\
) } def
/len { sequence length } bind def

/coor [
[31.71490860 158.61798096]
[20.17214966 168.19737244]
[8.62939072 177.77676392]
[-2.91336775 187.35615540]
[-7.54926205 195.28674316]
[-14.77608013 197.00718689]
[-26.50355339 206.35954285]
[-38.23102570 215.71188354]
[-49.95849609 225.06422424]
[-52.18789673 237.80177307]
[-62.19072342 245.34738159]
[-74.25205231 244.07560730]
[-86.15976715 253.19734192]
[-88.37262726 268.61621094]
[-100.57868958 277.69732666]
[-115.26457214 275.49267578]
[-127.17229462 284.61441040]
[-139.08001709 293.73614502]
[-144.02180481 301.47982788]
[-151.31024170 302.91699219]
[-163.39367676 311.80468750]
[-175.47711182 320.69235229]
[-184.65399170 334.94790649]
[-200.89285278 330.07598877]
[-200.70671082 313.12304688]
[-184.36477661 308.60891724]
[-172.28134155 299.72125244]
[-160.19790649 290.83355713]
[-148.20175171 281.82843018]
[-136.29403687 272.70669556]
[-124.38631439 263.58496094]
[-122.69085693 248.83161926]
[-110.74467468 239.41123962]
[-95.28150940 241.28962708]
[-83.37379456 232.16787720]
[-77.55764771 215.63354492]
[-59.31084442 213.33676147]
[-47.58337021 203.98440552]
[-35.85589981 194.63206482]
[-24.12842751 185.27970886]
[-12.49275780 175.81340027]
[-0.94999915 166.23400879]
[10.59276009 156.65461731]
[22.13551903 147.07522583]
[23.25407028 132.26696777]
[34.82360840 122.38767242]
[50.34828186 123.66131592]
[61.89104080 114.08193207]
[73.43379974 104.50254059]
[81.96636963 86.70821381]
[97.63903046 82.29627228]
[101.68598175 67.85250854]
[105.73293304 53.40874863]
[109.77988434 38.96499252]
[113.82683563 24.52123070]
[117.87378693 10.07747173]
[121.92073822 -4.36628723]
[113.06926727 -19.42701530]
[117.73254395 -35.91226578]
[132.56639099 -43.78813553]
[136.33074951 -58.30810928]
[135.45547485 -67.45248413]
[140.31280518 -73.07325745]
[144.35975647 -87.51702118]
[148.40670776 -101.96077728]
[147.71002197 -111.12049103]
[152.67610168 -116.64541626]
[157.00410461 -131.00746155]
[153.57768250 -146.45318604]
[164.65815735 -156.40669250]
[168.98617554 -170.76873779]
[173.31417847 -185.13078308]
[177.64218140 -199.49282837]
[181.97018433 -213.85487366]
[181.45234680 -223.02644348]
[186.52528381 -228.45341492]
[191.13269043 -242.72828674]
[195.74009705 -257.00314331]
[186.76765442 -269.52517700]
[186.88760376 -284.75143433]
[195.84439087 -296.84442139]
[210.03466797 -301.29119873]
[214.64208984 -315.56607056]
[204.28334045 -326.90591431]
[200.99801636 -341.90930176]
[205.66981506 -356.54043579]
[217.04208374 -366.86358643]
[232.05570984 -370.10186768]
[246.67211914 -365.38421631]
[256.95956421 -353.97964478]
[260.15078735 -338.95596313]
[255.38732910 -324.35440063]
[243.95057678 -314.10275269]
[228.91694641 -310.95864868]
[224.30953979 -296.68377686]
[233.22248840 -284.78012085]
[233.41934204 -269.73269653]
[224.61503601 -257.30941772]
[210.01496887 -252.39573669]
[205.40756226 -238.12088013]
[200.80014038 -223.84600830]
[196.33222961 -209.52687073]
[192.00422668 -195.16482544]
[187.67622375 -180.80278015]
[183.34822083 -166.44073486]
[179.02021790 -152.07868958]
[182.75619507 -137.66023254]
[171.36614990 -126.67945862]
[167.03814697 -112.31741333]
[162.85046387 -97.91382599]
[158.80351257 -83.47006989]
[154.75656128 -69.02630615]
[150.85072327 -54.54375076]
[147.08636475 -40.02378082]
[155.12191772 -29.91362190]
[155.86254883 -16.82511520]
[148.81237793 -5.54235172]
[136.36450195 -0.31933564]
[132.31755066 14.12442398]
[128.27059937 28.56818390]
[124.22364044 43.01194382]
[120.17668915 57.45569992]
[116.12973785 71.89945984]
[112.08278656 86.34322357]
[117.51411438 72.36106873]
[128.63674927 62.29691315]
[143.09060669 58.28622055]
[157.80883789 61.18000412]
[169.66842651 70.36423492]
[176.15295410 83.89016724]
[175.88650513 98.88780212]
[168.92561340 112.17486572]
[156.74728394 120.93204498]
[141.93556213 123.30119324]
[127.63327026 118.77962494]
[116.87525940 108.32690430]
[126.56680298 119.77565002]
[136.25836182 131.22439575]
[145.94990540 142.67315674]
[155.64144897 154.12190247]
[165.33300781 165.57064819]
[180.18157959 173.75331116]
[176.42921448 190.28678894]
[159.50309753 191.25798035]
[153.88424683 175.26220703]
[144.19270325 163.81344604]
[134.50115967 152.36470032]
[124.80960846 140.91595459]
[115.11805725 129.46719360]
[105.42650604 118.01844788]
[113.22025299 130.83474731]
[110.40785217 145.56874084]
[98.44134521 154.61322021]
[83.49907684 153.29852295]
[73.29576111 142.30342102]
[73.09939575 127.30470276]
[83.01319122 116.04529572]
[71.47043610 125.62468719]
[59.92767334 135.20407104]
[58.31808853 150.69752502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[6 40]
[7 39]
[8 38]
[9 37]
[12 35]
[13 34]
[16 31]
[17 30]
[18 29]
[20 28]
[21 27]
[22 26]
[47 159]
[48 158]
[49 157]
[51 124]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[57 118]
[60 114]
[61 113]
[63 112]
[64 111]
[65 110]
[67 109]
[68 108]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[76 101]
[77 100]
[78 99]
[82 95]
[83 94]
[136 150]
[137 149]
[138 148]
[139 147]
[140 146]
[141 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
