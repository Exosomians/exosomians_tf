%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUUGAUGACAAAGUCAAAUUCUAAUUAGAGGUAAAAGAAAGAGUCUCUCUAAGGGUAGACGAAAUUAAAAUUUUAGUAGUGAUUGUCAUCGAGUUA\
) } def
/len { sequence length } bind def

/coor [
[83.20056152 342.77700806]
[89.24690247 326.93786621]
[89.24690247 311.93786621]
[81.50959778 299.21060181]
[89.24690247 285.41043091]
[89.24690247 270.41043091]
[89.24690247 255.41043091]
[89.24690247 240.41043091]
[89.24690247 225.41043091]
[89.24690247 210.41043091]
[89.24690247 195.41043091]
[89.24690247 180.41043091]
[89.24690247 165.41043091]
[86.43098450 161.34931946]
[86.26335144 155.43887329]
[89.74766541 149.47598267]
[90.68952179 134.50556946]
[91.63137817 119.53517151]
[92.57323456 104.56477356]
[90.57695770 101.99790192]
[89.54593658 98.59864044]
[89.80867004 94.75322723]
[91.53418732 90.97019958]
[94.68932343 87.81419373]
[97.50004578 73.07987976]
[100.31076813 58.34557343]
[98.83413696 49.14354324]
[103.44813538 43.19580078]
[106.72028351 28.55705070]
[109.99243164 13.91829967]
[113.26457977 -0.72045183]
[116.53672791 -15.35920334]
[119.80887604 -29.99795532]
[107.10099792 -36.24611282]
[96.13916016 -45.19839478]
[87.48778534 -56.38922119]
[81.59128571 -69.23788452]
[78.75123596 -83.07865143]
[79.11093903 -97.19529724]
[82.64823151 -110.85811615]
[89.17678833 -123.36170197]
[98.35591125 -134.06130981]
[109.70837402 -142.40615845]
[122.64517212 -147.96769714]
[136.49609375 -150.46174622]
[150.54447937 -149.76286316]
[154.72933960 -164.16726685]
[158.91421509 -178.57167053]
[163.09907532 -192.97607422]
[167.05717468 -207.44444275]
[170.78752136 -221.97319031]
[174.51786804 -236.50193787]
[172.60050964 -253.34710693]
[188.25660706 -259.85275269]
[198.84202576 -246.60943604]
[189.04661560 -232.77159119]
[185.31626892 -218.24284363]
[181.58592224 -203.71409607]
[182.99679565 -196.31990051]
[177.50347900 -188.79121399]
[173.31861877 -174.38681030]
[169.13374329 -159.98240662]
[164.94888306 -145.57798767]
[178.66992188 -137.52612305]
[189.89140320 -126.23385620]
[197.86741638 -112.44410706]
[202.06587219 -97.06604767]
[202.20391846 -81.11516571]
[198.26701355 -65.64621735]
[190.51026917 -51.68344879]
[179.44190979 -40.15280914]
[165.78994751 -31.82053185]
[150.45433044 -27.24222183]
[134.44763184 -26.72580528]
[131.17547607 -12.08705425]
[127.90332794 2.55169678]
[124.63117981 17.19044876]
[121.35903168 31.82919884]
[118.08688354 46.46795273]
[115.04507446 61.15629196]
[112.23435211 75.89060211]
[109.42363739 90.62490845]
[107.54364014 105.50662994]
[106.60177612 120.47703552]
[105.65991974 135.44743347]
[104.71806335 150.41783142]
[104.24690247 165.41043091]
[104.24690247 180.41043091]
[104.24690247 195.41043091]
[104.24690247 210.41043091]
[104.24690247 225.41043091]
[104.24690247 240.41043091]
[104.24690247 255.41043091]
[104.24690247 270.41043091]
[104.24690247 285.41043091]
[111.98419952 299.21060181]
[104.24690247 311.93786621]
[104.24690247 326.93786621]
[110.29324341 342.77700806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[16 86]
[17 85]
[18 84]
[19 83]
[24 82]
[25 81]
[26 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[46 63]
[47 62]
[48 61]
[49 60]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
