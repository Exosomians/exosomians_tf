%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGCCCUUCACGAUCGAGUCGUCAUCCAACCCAUUAGUGUGAUGGACGUGCUUGUCGUGAAACCUCG\
) } def
/len { sequence length } bind def

/coor [
[65.68429565 377.32546997]
[68.73691559 358.18566895]
[69.40988922 343.20077515]
[70.08286285 328.21588135]
[70.75583649 313.23098755]
[60.70086288 304.87423706]
[57.34466553 292.03469849]
[62.16463089 279.45925903]
[73.57084656 271.93554688]
[74.91543579 256.99594116]
[76.26002502 242.05632019]
[77.60461426 227.11671448]
[78.94920349 212.17709351]
[80.29380035 197.23748779]
[81.63838959 182.29786682]
[79.01467133 175.12197876]
[83.39321899 166.72328186]
[85.40672302 151.85902405]
[87.42021942 136.99478149]
[89.43371582 122.13053894]
[91.44721985 107.26628876]
[93.12668610 92.36060333]
[94.47127533 77.42098999]
[95.81586456 62.48137665]
[97.16045380 47.54176331]
[98.16948700 32.57574081]
[98.84246063 17.59084320]
[99.51543427 2.60594749]
[89.13134003 -9.00474930]
[90.02729034 -24.19197845]
[101.16030884 -34.02007294]
[101.83328247 -49.00497055]
[90.98693848 -60.49985504]
[91.52902985 -76.29484558]
[103.13794708 -87.01905060]
[118.92632294 -86.30999756]
[129.52719116 -74.58834839]
[128.65124512 -58.80834961]
[116.81817627 -48.33199692]
[116.14520264 -33.34710312]
[126.35242462 -22.56061363]
[125.88339996 -7.35421228]
[114.50032806 3.27891994]
[113.82735443 18.26381683]
[113.15438843 33.24871063]
[116.09740448 40.29966736]
[112.10006714 48.88635254]
[110.75547791 63.82596588]
[109.41088867 78.76557922]
[108.06629944 93.70519257]
[110.59793091 101.66066742]
[106.31146240 109.27978516]
[104.29796600 124.14403534]
[102.28446960 139.00828552]
[100.27096558 153.87252808]
[98.25746918 168.73677063]
[96.57800293 183.64245605]
[95.23341370 198.58207703]
[93.88882446 213.52168274]
[92.54423523 228.46130371]
[91.19964600 243.40090942]
[89.85504913 258.34051514]
[88.51045990 273.28015137]
[99.93009949 286.32162476]
[98.57477570 303.26876831]
[85.74073029 313.90396118]
[85.06775665 328.88885498]
[84.39478302 343.87374878]
[83.72181702 358.85864258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 50]
[23 49]
[24 48]
[25 47]
[26 45]
[27 44]
[28 43]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
