%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGAGGGCCCCCCGAGAAGCACUAGCUACACCACUGCAGCACGAGAGGGCCCGGCCCAGGCUCGGCGCUGCCCGCUCCCCGCCUGCAAGCACC\
) } def
/len { sequence length } bind def

/coor [
[111.95726776 140.41851807]
[122.75711823 130.00874329]
[137.10186768 125.62034607]
[123.51295471 119.26884460]
[109.92404938 112.91734314]
[98.63461304 116.23207855]
[88.05754089 111.07800293]
[83.71123505 100.14418030]
[70.33512878 93.35597229]
[56.95902252 86.56776428]
[43.58291245 79.77956390]
[30.20680428 72.99135590]
[16.83069611 66.20314789]
[3.34642053 59.63243484]
[-12.43176270 60.79841232]
[-20.68551254 48.39982605]
[-34.27442169 42.04832458]
[-50.05260468 43.21430206]
[-58.30635452 30.81571770]
[-73.00527191 35.97125244]
[-86.69587708 29.33634758]
[-91.52030945 15.29140282]
[-105.10921478 8.93990135]
[-118.69812775 2.58839965]
[-130.17282104 12.60095882]
[-144.72985840 17.07450294]
[-159.84713745 15.23396492]
[-172.90551758 7.39822865]
[-181.64253235 -5.07511806]
[-184.54444885 -20.02499199]
[-181.10850525 -34.86123657]
[-171.92999268 -47.01338196]
[-158.59913635 -54.37599945]
[-143.42558289 -55.67346573]
[-129.03826904 -50.68099213]
[-117.92985535 -40.26354980]
[-112.02495575 -26.22602654]
[-112.34662628 -11.00050831]
[-98.75771332 -4.64900684]
[-85.16880798 1.70249510]
[-71.29910278 -3.60474634]
[-57.42753601 2.64300060]
[-51.95485306 17.22681046]
[-37.14863968 15.60653210]
[-27.92292023 28.45941734]
[-14.33401108 34.81092072]
[0.47220254 33.19063950]
[9.69792271 46.04352570]
[17.23358727 46.02341080]
[23.61890221 52.82704163]
[36.99501038 59.61524582]
[50.37111664 66.40345001]
[63.74722672 73.19165802]
[77.12333679 79.97986603]
[90.49944305 86.76806641]
[107.13553619 85.35661316]
[116.27555084 99.32843781]
[129.86445618 105.67993927]
[143.45336914 112.03144073]
[157.95268250 115.87461090]
[172.90353394 117.08781433]
[187.85440063 118.30101776]
[202.80525208 119.51422882]
[217.75610352 120.72743225]
[229.73391724 110.76902771]
[244.87892151 112.21237183]
[254.29893494 123.69274902]
[269.24978638 124.90595245]
[283.63055420 118.31016541]
[295.69033813 127.05150604]
[310.64117432 128.26470947]
[323.74765015 119.01268768]
[339.11209106 123.62937927]
[344.94821167 138.57325745]
[336.77902222 152.38064575]
[320.87127686 154.45971680]
[309.42797852 143.21557617]
[294.47711182 142.00236511]
[281.16574097 148.68492126]
[268.03659058 139.85681152]
[253.08572388 138.64360046]
[241.93797302 148.45498657]
[226.75839233 147.43760681]
[216.54290771 135.67828369]
[201.59204102 134.46508789]
[186.64118958 133.25187683]
[171.69033813 132.03866577]
[156.73947144 130.82546997]
[167.02676392 141.74203491]
[171.25303650 156.13435364]
[168.50131226 170.87979126]
[159.36863708 182.77912903]
[145.83647156 189.25064087]
[130.84080505 188.89024353]
[117.63514709 181.77612305]
[109.08466339 169.45179749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 59]
[4 58]
[5 57]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[14 48]
[16 46]
[17 45]
[19 43]
[22 40]
[23 39]
[24 38]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[67 81]
[68 80]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
