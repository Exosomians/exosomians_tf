%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCUCUUCGGCCGCCCUCGGGGCCCCUCUCAAGAGAAAAGAAACACUUCCCGUCCCGCGGGACCUUACCCAAGCGGGGCUCUCUCCCCGGGCACGGAACCUUUCGCAGCGCCA\
) } def
/len { sequence length } bind def

/coor [
[108.48621368 114.16617584]
[101.10212708 115.47965240]
[94.80378723 129.09327698]
[88.50545502 142.70690918]
[82.20711517 156.32054138]
[86.36756897 171.81474304]
[76.73212433 184.64196777]
[60.69226837 184.96226501]
[50.55240631 172.52993774]
[54.09097672 156.88200378]
[68.59348297 150.02220154]
[74.89182281 136.40858459]
[81.19016266 122.79494476]
[87.48849487 109.18131256]
[89.31205750 94.29257202]
[86.48537445 79.56131744]
[83.65869904 64.83006287]
[80.83201599 50.09880829]
[76.66970825 44.68576050]
[76.06293488 38.86526871]
[78.27385712 34.49472809]
[76.24885559 19.63204575]
[74.22385406 4.76936150]
[72.19886017 -10.09332180]
[63.54061508 2.15554833]
[49.70780182 7.95669842]
[34.90247726 5.54788685]
[23.62212181 -4.33915138]
[19.29341316 -18.70098686]
[23.23130989 -33.17485809]
[34.23957443 -43.36397552]
[48.97417831 -46.17314529]
[62.95912552 -40.74900818]
[71.94635773 -28.73873329]
[73.56814575 -43.65080261]
[75.18992615 -58.56287003]
[76.81171417 -73.47493744]
[78.43349457 -88.38700867]
[70.48123169 -85.89641571]
[61.19149399 -86.45388031]
[51.57549286 -90.47081757]
[42.74577713 -98.05091095]
[33.99485779 -110.23374176]
[25.24394035 -122.41658020]
[10.08430576 -128.67097473]
[8.18946743 -144.96029663]
[21.50867271 -154.52746582]
[36.34026337 -147.53060913]
[37.42677307 -131.16749573]
[46.17769241 -118.98466492]
[54.92861176 -106.80183411]
[62.41761017 -107.20787048]
[77.39561462 -108.01995850]
[84.88461304 -108.42599487]
[92.26703644 -121.48355865]
[99.64945984 -134.54110718]
[107.03188324 -147.59866333]
[114.41430664 -160.65623474]
[121.79673767 -173.71379089]
[129.17915344 -186.77134705]
[136.20529175 -200.02401733]
[142.86996460 -213.46211243]
[149.53463745 -226.90019226]
[144.25141907 -241.79527283]
[151.12336731 -256.02734375]
[166.07347107 -261.15277100]
[180.23208618 -254.13075256]
[185.19918823 -239.12728882]
[178.02784729 -225.04370117]
[162.97271729 -220.23551941]
[156.30804443 -206.79743958]
[149.64337158 -193.35934448]
[150.34303284 -188.51164246]
[147.90953064 -183.18957520]
[142.23670959 -179.38891602]
[134.85429382 -166.33135986]
[127.47187042 -153.27380371]
[120.08944702 -140.21624756]
[112.70701599 -127.15869141]
[105.32459259 -114.10112762]
[97.94216919 -101.04357147]
[93.34556580 -86.76522827]
[91.72378540 -71.85315704]
[90.10199738 -56.94108582]
[88.48020935 -42.02901840]
[86.85842896 -27.11694717]
[87.06153870 -12.11832237]
[89.08654022 2.74436140]
[91.11154175 17.60704613]
[93.13654327 32.46973038]
[95.56327057 47.27212906]
[98.38995361 62.00338364]
[101.21662903 76.73463440]
[104.04331207 91.46589661]
[121.35468292 86.34881592]
[141.24508667 99.61915588]
[151.85168457 110.22576141]
[162.45829773 120.83235931]
[173.06489563 131.43896484]
[189.03666687 135.15841675]
[193.54187012 150.92658997]
[181.94592285 162.52253723]
[166.17774963 158.01734924]
[162.45829773 142.04556274]
[151.85168457 131.43896484]
[141.24508667 120.83235931]
[130.63848877 110.22576141]
[123.25439453 111.53923035]
[127.47749329 125.93247986]
[131.70057678 140.32571411]
[139.34754944 153.23013306]
[133.09587097 166.86524963]
[118.32771301 169.49234009]
[107.75727844 158.84970093]
[110.48503876 144.09951782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[15 94]
[16 93]
[17 92]
[18 91]
[21 90]
[22 89]
[23 88]
[24 87]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[42 51]
[43 50]
[44 49]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 72]
[62 71]
[63 70]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
