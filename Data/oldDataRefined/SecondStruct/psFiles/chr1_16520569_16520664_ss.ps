%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUCAAGGUUAUUCGCAGGGACCCACCCGAGCUUGGUGGUUGGAAAGUCAAUUGUCGGCUUGCGCGAUUGGCUAACGCGGUGUCUCUGUUCGCG\
) } def
/len { sequence length } bind def

/coor [
[43.06999207 361.95547485]
[31.44451332 371.57369995]
[17.72537231 377.85443115]
[2.84796548 380.36941528]
[-12.17334175 378.94720459]
[-26.31437302 373.68472290]
[-38.61096573 364.94079590]
[-48.22472382 353.31161499]
[-54.50015640 339.59005737]
[-57.00940323 324.71166992]
[-55.58137512 309.69091797]
[-50.31343842 295.55191040]
[-41.56476974 283.25869751]
[-29.93186569 273.64944458]
[-16.20787811 267.37930298]
[-1.32853425 264.87579346]
[13.69167042 266.30963135]
[18.92328644 252.25152588]
[24.15490341 238.19342041]
[29.38651848 224.13531494]
[34.61813354 210.07722473]
[39.84975052 196.01911926]
[45.08136749 181.96101379]
[50.31298447 167.90292358]
[55.31626892 153.76194763]
[60.08991623 139.54180908]
[56.80524826 125.01389313]
[68.53208923 114.39354706]
[65.39757538 99.72470856]
[55.22895050 88.69750977]
[45.06032181 77.67031860]
[34.89169693 66.64311981]
[19.84839630 61.74315262]
[16.90851974 47.14156342]
[1.00132024 45.05816650]
[-7.16409302 31.24854851]
[-1.32391346 16.30626488]
[14.04177284 11.69375706]
[27.14572716 20.94934654]
[27.93571663 36.97293854]
[42.25168991 41.08416367]
[45.91889191 56.47449493]
[56.08752060 67.50168610]
[66.25614166 78.52888489]
[76.42477417 89.55608368]
[86.14678192 80.22154236]
[98.46513367 77.54251099]
[109.53696442 81.43391418]
[120.72737885 71.44518280]
[131.91778564 61.45645523]
[143.10820007 51.46772766]
[154.29861450 41.47900009]
[165.48901367 31.49027061]
[176.67942810 21.50154305]
[187.86984253 11.51281452]
[199.06025696 1.52408612]
[203.48927307 -6.68843555]
[210.77854919 -8.59971046]
[222.28654480 -18.22083473]
[225.13996887 -34.00809097]
[239.32983398 -41.49324417]
[253.97087097 -34.93432617]
[257.83175659 -19.36277390]
[247.95072937 -6.72375345]
[231.90766907 -6.71283722]
[220.39967346 2.90828586]
[209.04898071 12.71449757]
[197.85856628 22.70322609]
[186.66816711 32.69195557]
[175.47775269 42.68068314]
[164.28733826 52.66941071]
[153.09692383 62.65813828]
[141.90650940 72.64686584]
[130.71611023 82.63559723]
[119.52569580 92.62432098]
[121.08045197 106.63671112]
[113.16495514 119.25903320]
[98.36668396 124.50245667]
[82.75222778 119.16719055]
[85.69544983 134.71221924]
[74.31005096 144.31544495]
[69.53640747 158.53558350]
[69.75668335 167.86367798]
[64.37108612 173.13453674]
[59.13946915 187.19262695]
[53.90785217 201.25073242]
[48.67623520 215.30883789]
[43.44461823 229.36692810]
[38.21300507 243.42503357]
[32.98138809 257.48312378]
[27.74977112 271.54122925]
[40.05311203 280.27566528]
[49.67584610 291.89743042]
[55.96187592 305.61413574]
[58.48261261 320.49057007]
[57.06618500 335.51242065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 82]
[26 81]
[28 79]
[29 45]
[30 44]
[31 43]
[32 42]
[34 40]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
