%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCACUUCCCCCAUAUCGAGUCCCCAUCUCGUAAACUGACGUCUAGUUCUCCAGGGGCCAAGUUUAGGCCCACGGGGGAAGGGCCUACAAAAGAGUAAAU\
) } def
/len { sequence length } bind def

/coor [
[160.81312561 284.17745972]
[163.13414001 274.41485596]
[168.96943665 266.17916870]
[162.28335571 252.75172424]
[156.38218689 248.08659363]
[155.60531616 238.80622864]
[149.33590698 225.17926025]
[143.06651306 211.55227661]
[136.79710388 197.92529297]
[130.52769470 184.29830933]
[124.25829315 170.67134094]
[117.98888397 157.04435730]
[111.71948242 143.41737366]
[97.14293671 144.88041687]
[82.86957550 141.58081055]
[70.41407776 133.86868286]
[61.09819794 122.56246185]
[55.91053391 108.86193848]
[40.91764832 109.32386780]
[25.92476273 109.78578949]
[10.93187618 110.24771881]
[1.39666045 122.64181519]
[-13.88555336 125.95662689]
[-27.69897079 118.62699127]
[-33.52132034 104.11374664]
[-28.60346222 89.26959991]
[-15.26746368 81.10350037]
[0.18982786 83.47123718]
[10.46995068 95.25482941]
[25.46283722 94.79290771]
[40.45572281 94.33097839]
[55.44860840 93.86905670]
[58.13937759 83.56517792]
[63.17755127 74.18290710]
[70.28060150 66.24837494]
[62.38411713 53.49511719]
[54.48763657 40.74185944]
[46.59115219 27.98860168]
[38.69467163 15.23534489]
[23.46980476 10.17738247]
[18.06718254 -4.92861700]
[26.63123512 -18.49462509]
[42.59235382 -20.11396027]
[53.70653534 -8.54440784]
[51.44792938 7.33886194]
[59.34440994 20.09211922]
[67.24089050 32.84537506]
[75.13737488 45.59863281]
[83.03385925 58.35189056]
[89.26145935 56.32965851]
[95.71669769 55.23317719]
[102.26274109 55.08569336]
[108.76081848 55.89032745]
[115.07317352 57.63002777]
[121.06600189 60.26791382]
[126.61225891 63.74806595]
[137.38093567 53.30605698]
[148.14961243 42.86404800]
[158.91828918 32.42203903]
[169.68696594 21.98002815]
[168.38372803 6.39684629]
[177.44425964 -6.34838772]
[192.59043884 -10.23776340]
[206.67071533 -3.43483639]
[213.03680420 10.84825897]
[208.68284607 25.86748123]
[195.66464233 34.53121567]
[180.12898254 32.74870682]
[169.36030579 43.19071579]
[158.59162903 53.63272476]
[147.82295227 64.07473755]
[137.05426025 74.51674652]
[144.83587646 96.51309204]
[140.54859924 119.44803619]
[125.34645844 137.14797974]
[131.61585999 150.77494812]
[137.88526917 164.40193176]
[144.15467834 178.02891541]
[150.42408752 191.65588379]
[156.69348145 205.28286743]
[162.96289062 218.90985107]
[169.23229980 232.53681946]
[175.71080017 246.06564331]
[182.39688110 259.49310303]
[202.62332153 264.55972290]
[212.73115540 282.47198486]
[206.77864075 301.86233521]
[215.06411743 314.36636353]
[223.34959412 326.87039185]
[238.88610840 329.76730347]
[247.75465393 342.84875488]
[244.69364929 358.35379028]
[231.51916504 367.08352661]
[216.04736328 363.85876465]
[207.45739746 350.59271240]
[210.84555054 335.15588379]
[202.56007385 322.65182495]
[194.27459717 310.14779663]
[184.59317017 311.22604370]
[175.15376282 308.59216309]
[167.33618164 302.58560181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 84]
[4 83]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[18 32]
[19 31]
[20 30]
[21 29]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
