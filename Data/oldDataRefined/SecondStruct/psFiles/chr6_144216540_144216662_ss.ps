%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:14 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGACGUGGUCCUACCGGCUCACCAAUUCCGCAACCUGAAUUCUAGGUUACCUGUAUACAGGCGCACCCAAGCUUGGGGUGAGGACCAUCGAAAUCCAAAAAGAGAAUUUAGUAAAAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[178.63504028 257.70291138]
[180.23561096 242.75520325]
[184.21336365 228.25782776]
[190.46527100 214.58633423]
[198.82939148 202.09483337]
[209.08908081 191.10688782]
[199.90750122 179.24525452]
[190.57638550 167.50086975]
[181.09725952 155.87564087]
[171.61813354 144.25041199]
[162.13899231 132.62516785]
[152.65986633 120.99993896]
[143.18074036 109.37470245]
[133.70159912 97.74946594]
[121.74379730 122.08208466]
[97.68655396 128.10929871]
[79.44470978 114.95204163]
[65.25096893 119.80361176]
[51.05723190 124.65518188]
[48.17144012 139.74052429]
[38.11745834 151.35144043]
[23.59976006 156.36460876]
[8.52353001 153.43154907]
[-3.05580068 143.34123230]
[-8.02344990 128.80787659]
[-5.04314518 113.74092102]
[5.08342648 102.19327545]
[19.63226891 97.27120209]
[34.68981552 100.29872131]
[46.20566177 110.46144104]
[60.39940262 105.60987091]
[74.59313965 100.75830078]
[74.74684143 97.10836029]
[75.42218018 93.51815796]
[62.69252014 85.58369446]
[49.96285629 77.64923096]
[37.23319244 69.71477509]
[24.50352669 61.78031540]
[11.77386379 53.84585571]
[-4.11606741 56.05710602]
[-15.65244102 44.90849304]
[-13.98553848 28.95227051]
[-0.39406511 20.42869186]
[14.69576454 25.87631416]
[19.70832443 41.11619186]
[32.43798828 49.05065155]
[45.16765213 56.98511124]
[57.89731598 64.91957092]
[70.62697601 72.85403442]
[83.35664368 80.78849030]
[90.58352661 71.94047546]
[102.23892975 66.29762268]
[98.84820557 51.68587875]
[95.45748901 37.07413864]
[92.06676483 22.46239662]
[80.47986603 10.85740757]
[84.99735260 -4.90724707]
[100.97202301 -8.61424255]
[111.97051239 3.54986000]
[106.67850494 19.07167435]
[110.06922913 33.68341827]
[113.45994568 48.29515839]
[116.85066986 62.90690231]
[131.64773560 65.36595154]
[139.58219910 52.63629150]
[147.51664734 39.90662766]
[149.43627930 30.85653114]
[155.81681824 26.95856285]
[164.07119751 14.43398571]
[172.32559204 1.90940881]
[180.57998657 -10.61516857]
[181.00820923 -27.00872421]
[195.54670715 -34.59580612]
[209.23954773 -25.57147408]
[208.00067139 -9.21918869]
[193.10456848 -2.36077762]
[184.85017395 10.16379929]
[176.59577942 22.68837738]
[168.34138489 35.21295547]
[160.24632263 47.84108734]
[152.31185913 60.57075119]
[144.37739563 73.30041504]
[145.32684326 88.27033997]
[154.80596924 99.89556885]
[164.28509521 111.52080536]
[173.76423645 123.14604187]
[183.24336243 134.77127075]
[192.72248840 146.39651489]
[202.20162964 158.02174377]
[210.14439392 162.76533508]
[211.76913452 170.06365967]
[220.95072937 181.92529297]
[234.15951538 174.74728394]
[248.34873962 169.78118896]
[263.15084839 167.15565491]
[278.18246460 166.93869019]
[293.05419922 169.13589478]
[307.38085938 173.69038391]
[320.79132080 180.48416138]
[332.93823242 189.34127808]
[343.50698853 200.03228760]
[352.22381592 212.28027344]
[358.86291504 225.76799011]
[363.25231934 240.14607239]
[365.27835083 255.04209900]
[364.88848877 270.07022095]
[362.09289551 284.84115601]
[356.96392822 298.97232056]
[349.63449097 312.09768677]
[340.29437256 323.87725830]
[329.18554688 334.00595093]
[316.59576416 342.22137451]
[302.85107422 348.31072998]
[288.30755615 352.11630249]
[273.34191895 353.53952026]
[258.34179688 352.54348755]
[243.69569397 349.15405273]
[229.78303528 343.45898438]
[216.96415710 335.60580444]
[205.57110596 325.79791260]
[195.89900208 314.28936768]
[188.19836426 301.37826538]
[182.66865540 287.39904785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 92]
[7 91]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[13 84]
[14 83]
[17 32]
[18 31]
[19 30]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[52 63]
[53 62]
[54 61]
[55 60]
[64 82]
[65 81]
[66 80]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
