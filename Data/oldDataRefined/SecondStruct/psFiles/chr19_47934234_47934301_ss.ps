%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCCAAGGUCCCGUGCUCAAGCUCCGGUCGGACCAGGUGUACCCAGCCUUUUUUCCUGAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[132.74945068 346.50225830]
[124.83524323 333.66418457]
[120.36315155 319.26101685]
[119.61430359 304.19815063]
[122.63577271 289.42245483]
[129.23762512 275.86270142]
[139.00486755 264.37133789]
[151.32351685 255.67066956]
[145.97990417 241.65475464]
[140.63627625 227.63883972]
[135.29264832 213.62294006]
[129.94902039 199.60702515]
[115.54666138 195.90432739]
[105.97303009 184.29357910]
[105.06129456 169.09416199]
[113.37031555 156.12240601]
[108.02669525 142.10650635]
[102.68306732 128.09059143]
[97.33943939 114.07468414]
[86.61579132 105.10278320]
[88.64465332 91.26893616]
[74.49876404 84.74730682]
[69.27922821 70.45706177]
[75.58378601 57.01131439]
[63.43790054 46.87286758]
[66.13359833 32.22423172]
[60.78997421 18.20832634]
[55.44635010 4.19241810]
[42.39080048 -5.73152542]
[44.72555161 -21.96362305]
[60.04881287 -27.80568314]
[72.59732819 -17.24789619]
[69.46225739 -1.15120769]
[74.80588531 12.86470032]
[80.14950562 26.88060760]
[91.91317749 36.01654434]
[89.59969330 51.66768646]
[103.25541687 57.50349426]
[108.87427521 71.64149475]
[102.66056061 85.92531586]
[113.38420868 94.89721680]
[111.35534668 108.73106384]
[116.69897461 122.74697113]
[122.04260254 136.76287842]
[127.38622284 150.77877808]
[142.22209167 154.92645264]
[151.66064453 166.87496948]
[152.24668884 181.91227722]
[143.96492004 194.26341248]
[149.30854797 208.27931213]
[154.65217590 222.29522705]
[159.99580383 236.31112671]
[165.33943176 250.32704163]
[180.32379150 248.61831665]
[195.26222229 250.69055176]
[209.21566772 256.41348267]
[221.30702209 265.42736816]
[230.77621460 277.16555786]
[237.02796936 290.89022827]
[239.66932678 305.73858643]
[238.53425598 320.77728271]
[233.69407654 335.06097412]
[225.45306396 347.69174194]
[214.32926941 357.87564087]
[201.02191162 364.97250366]
[186.36753845 368.53619385]
[171.28730774 368.34268188]
[156.72917175 364.40417480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[16 45]
[17 44]
[18 43]
[19 42]
[21 40]
[24 37]
[26 35]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
