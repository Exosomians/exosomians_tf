%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUGGCCCAGCCACCGCGGGGCGCACCCCGGGCCACCCGAAGGGCCUCCCAAGGCCCCCAGCCGGACGCCGCGCACGCCCC\
) } def
/len { sequence length } bind def

/coor [
[36.25645065 217.84861755]
[29.40868187 230.04547119]
[17.99788666 238.01971436]
[4.32196522 240.23612976]
[-8.89551830 236.31198120]
[-19.09810829 247.30775452]
[-29.30069923 258.30352783]
[-39.50329208 269.29931641]
[-45.84435654 285.02276611]
[-62.70872116 283.28219604]
[-65.70469666 266.59506226]
[-50.49906921 259.09671021]
[-40.29647827 248.10093689]
[-30.09388733 237.10516357]
[-19.89129639 226.10939026]
[-25.03265381 210.91052246]
[-21.85850143 195.08781433]
[-11.12986374 182.90826416]
[4.34230328 177.70388794]
[20.43313980 180.96037292]
[30.21745110 169.59078979]
[40.00176239 158.22122192]
[49.78607178 146.85163879]
[59.57038498 135.48207092]
[69.35469818 124.11248779]
[64.09619141 115.21392059]
[61.36035156 105.24639130]
[61.33940887 94.91024017]
[64.03483582 84.93170166]
[69.25723267 76.01189423]
[76.63967896 68.77753448]
[70.13142395 55.26300049]
[63.62316895 41.74846649]
[57.11491394 28.23393440]
[44.79500580 16.58677864]
[52.57649994 1.52408481]
[69.20466614 4.83170462]
[70.62944794 21.72567749]
[77.13770294 35.24021149]
[83.64595795 48.75474548]
[90.15421295 62.26927567]
[100.08504486 61.00590134]
[110.01026917 62.31258392]
[119.27572632 66.10319519]
[129.06004333 54.73362350]
[138.84434509 43.36404419]
[148.62866211 31.99447060]
[158.41297913 20.62489510]
[168.19728088 9.25531864]
[170.71276855 -6.94975471]
[186.10017395 -12.62070751]
[198.53025818 -1.92375040]
[195.21601868 14.13700485]
[179.56686401 19.03962898]
[169.78254700 30.40920639]
[159.99824524 41.77878189]
[150.21392822 53.14835739]
[140.42961121 64.51793671]
[130.64530945 75.88751221]
[135.49577332 83.85698700]
[138.31439209 92.75052643]
[138.93978882 102.05904388]
[137.33619690 111.24969482]
[150.59791565 118.25872803]
[163.98840332 125.01855469]
[177.50292969 131.52680969]
[191.01745605 138.03506470]
[207.91143799 139.45983887]
[211.21905518 156.08801270]
[196.15635681 163.86950684]
[184.50920105 151.54959106]
[170.99467468 145.04133606]
[157.48013306 138.53308105]
[149.90281677 138.46685791]
[143.58889771 131.52046204]
[130.32716370 124.51142883]
[107.24947357 138.31439209]
[80.72427368 133.89680481]
[70.93995667 145.26637268]
[61.15564728 156.63595581]
[51.37133789 168.00552368]
[41.58702469 179.37510681]
[31.80271530 190.74467468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[8 12]
[20 83]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[31 41]
[32 40]
[33 39]
[34 38]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[63 76]
[64 75]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
