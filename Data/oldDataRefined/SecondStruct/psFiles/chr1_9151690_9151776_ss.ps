%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCCCGUCAUAUGAACGACUAACGAAGGAAUGAUAACGAGUGUUGUUGGUCGAUUCUGUGACGGUUUCUUUGUGAGUGUCGACCG\
) } def
/len { sequence length } bind def

/coor [
[190.27366638 254.29534912]
[182.16404724 241.67654419]
[174.05444336 229.05773926]
[159.49095154 226.15248108]
[151.08689880 213.47073364]
[154.23295593 198.21492004]
[146.12335205 185.59611511]
[138.01373291 172.97731018]
[129.90412903 160.35850525]
[121.79450989 147.73970032]
[113.68489838 135.12089539]
[105.57528687 122.50209808]
[97.46567535 109.88329315]
[90.65161133 105.21505737]
[89.30117798 96.66619110]
[81.64712524 83.76598358]
[73.99307251 70.86576843]
[66.10998535 58.10422516]
[58.00037384 45.48542023]
[49.89076233 32.86661911]
[41.78115082 20.24781609]
[33.67153931 7.62901306]
[25.56192589 -4.98978996]
[17.45231438 -17.60859299]
[9.34270096 -30.22739601]
[1.23308909 -42.84619904]
[-6.87652302 -55.46500015]
[-20.91969490 -54.08322906]
[-34.10824203 -58.91091156]
[-43.84780121 -68.93680573]
[-48.24925613 -82.13327789]
[-46.49500656 -95.86619568]
[-38.99013519 -107.42073822]
[-46.64418793 -120.32094574]
[-61.19999313 -127.87479401]
[-61.66567230 -144.26731873]
[-47.56217194 -152.63531494]
[-33.39796448 -144.37049866]
[-33.74397278 -127.97499847]
[-26.08992195 -115.07478333]
[-10.04833794 -115.69587708]
[4.23020077 -108.15668488]
[12.86334991 -94.40168762]
[13.45110798 -78.07936096]
[5.74228001 -63.57461548]
[13.85189247 -50.95581055]
[21.96150398 -38.33700943]
[30.07111740 -25.71820450]
[38.18072891 -13.09940243]
[46.29034042 -0.48059914]
[54.39995193 12.13820362]
[62.50956726 24.75700760]
[70.61917877 37.37580872]
[78.72879028 49.99461365]
[85.13854218 54.00955582]
[86.89328766 63.21171570]
[94.54734039 76.11193085]
[102.20138550 89.01214600]
[110.08447266 101.77368164]
[118.19409180 114.39248657]
[126.30370331 127.01129150]
[134.41331482 139.63009644]
[142.52291870 152.24890137]
[150.63253784 164.86770630]
[158.74215698 177.48649597]
[166.85176086 190.10530090]
[182.03585815 193.58103943]
[190.08039856 206.49383545]
[186.67324829 220.94813538]
[194.78285217 233.56694031]
[202.89247131 246.18574524]
[217.59353638 242.55844116]
[232.67562866 243.90361023]
[246.50273132 250.07530212]
[257.57501221 260.40408325]
[264.69137573 273.76953125]
[267.07998657 288.72192383]
[264.48165894 303.63925171]
[257.17828369 316.90347290]
[245.96205139 327.07574463]
[232.04965210 333.05267334]
[216.95016479 334.18591309]
[202.30146790 330.35253906]
[189.69258118 321.96835327]
[180.49118042 309.94284058]
[175.69537354 295.58041382]
[175.82539368 280.43902588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[15 58]
[16 57]
[17 56]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
