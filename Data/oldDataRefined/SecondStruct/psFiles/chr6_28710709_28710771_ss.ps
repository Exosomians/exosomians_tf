%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUCGUGCUAAACGAAGUACUCACCGUUGUCUGAGUUUUCAUCGGAUUCCAGAUGCAAAA\
) } def
/len { sequence length } bind def

/coor [
[117.81198883 150.19363403]
[103.87362671 155.73640442]
[89.45887756 151.58731079]
[80.60006714 139.48271179]
[81.00447845 124.48815918]
[90.50392914 112.87798309]
[76.64573669 118.61823273]
[62.78754425 124.35848236]
[48.92935181 130.09873962]
[41.48622894 144.31068420]
[25.70748711 147.21083069]
[13.69722366 136.57441711]
[14.66868687 120.56080627]
[27.87665176 111.45425415]
[43.18909836 116.24053955]
[57.04729462 110.50028992]
[70.90548706 104.76004028]
[84.76367950 99.01978302]
[85.76641846 95.57021332]
[87.51762390 92.53137970]
[89.88229370 90.05744934]
[92.69586182 88.26268005]
[90.49490356 73.42502594]
[88.29394531 58.58737946]
[86.09298706 43.74973297]
[83.89202881 28.91208649]
[70.07424927 21.85173988]
[63.07542419 8.00269318]
[65.58674622 -7.30981302]
[76.64257050 -18.19780922]
[91.99169922 -20.47463608]
[105.73207855 -13.26480961]
[112.58025360 0.65934575]
[109.90296173 15.94370842]
[98.72967529 26.71112823]
[100.93063354 41.54877472]
[103.13159180 56.38642502]
[105.33255005 71.22407532]
[107.53350830 86.06172180]
[117.33110046 97.41985321]
[131.68519592 101.77412415]
[146.03930664 106.12839508]
[160.49595642 110.12908173]
[175.04641724 113.77378845]
[189.59689331 117.41848755]
[204.14735413 121.06319427]
[215.95809937 110.99909973]
[231.43128967 109.83283234]
[244.61715698 118.01284027]
[250.44546509 132.39373779]
[246.67512512 147.44578552]
[234.75590515 157.38116455]
[219.27098083 158.37951660]
[206.17462158 150.05694580]
[200.50265503 135.61366272]
[185.95217896 131.96896362]
[171.40171814 128.32424927]
[156.85124207 124.67955017]
[149.32064819 126.16675568]
[141.68504333 120.48249817]
[127.33093262 116.12822723]
[112.97682953 111.77395630]
[123.56797791 122.39598083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[40 62]
[41 61]
[42 60]
[43 58]
[44 57]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
