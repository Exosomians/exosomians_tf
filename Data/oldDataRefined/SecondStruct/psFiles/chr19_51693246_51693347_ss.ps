%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUACAACGGUCAGAGAUCCAGGGACUCUGGGAAAUUGGACACUCCUGUAGGUCCCAGUGUCCACUCCAAGAACCCUCGGACCGCAGACCGGGUUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[85.05302429 376.46786499]
[71.43511963 369.90704346]
[60.35719299 359.62255859]
[52.80427170 346.52886963]
[49.44796371 331.79025269]
[50.58670807 316.71728516]
[56.11925125 302.65020752]
[65.55363464 290.83987427]
[78.05097198 282.33648682]
[92.50000000 277.89608765]
[92.50000000 262.89608765]
[92.50000000 247.89608765]
[92.50000000 232.89608765]
[92.50000000 217.89608765]
[84.76270294 205.16882324]
[92.50000000 191.36865234]
[84.76270294 178.64137268]
[92.50000000 164.84120178]
[84.76270294 152.11392212]
[92.50000000 138.31375122]
[92.50000000 123.31375885]
[92.50000000 108.31375885]
[92.27125549 93.31549835]
[91.81381226 78.32247925]
[91.35636902 63.32945633]
[90.89892578 48.33642960]
[81.99727631 38.84928894]
[82.01835632 26.24301529]
[90.39876556 17.37249184]
[90.39876556 2.37249136]
[90.39876556 -12.62750912]
[82.66146851 -26.42768097]
[90.39876556 -39.15495300]
[90.39876556 -54.15495300]
[90.39876556 -69.15495300]
[82.12774658 -76.54495239]
[79.43978119 -87.07715607]
[83.00946045 -97.10903168]
[91.39002228 -103.31183624]
[92.30448151 -118.28393555]
[93.21894073 -133.25602722]
[94.13340759 -148.22813416]
[95.04786682 -163.20022583]
[95.96232605 -178.17233276]
[96.87678528 -193.14442444]
[97.79124451 -208.11653137]
[97.79124451 -223.11653137]
[96.87678528 -238.08862305]
[87.38034821 -251.45835876]
[94.45571136 -266.25265503]
[110.82435608 -267.25241089]
[119.64762115 -253.42916870]
[111.84888458 -239.00308228]
[112.76334381 -224.03099060]
[114.96096039 -222.03691101]
[116.42880249 -218.97828674]
[116.72760773 -215.15724182]
[115.54721832 -211.03987122]
[112.76334381 -207.20207214]
[111.84888458 -192.22996521]
[110.93442535 -177.25787354]
[110.01996613 -162.28576660]
[109.10550690 -147.31367493]
[108.19104004 -132.34156799]
[107.27658081 -117.36947632]
[106.36212158 -102.39736938]
[116.33705139 -85.95140839]
[105.39876556 -69.15495300]
[105.39876556 -54.15495300]
[105.39876556 -39.15495300]
[113.13607025 -26.42768097]
[105.39876556 -12.62750912]
[105.39876556 2.37249136]
[105.39876556 17.37249184]
[115.00640106 31.97026253]
[105.89194489 47.87899017]
[106.34938812 62.87201309]
[106.80683136 77.86503601]
[107.26427460 92.85805511]
[110.68715668 100.32020569]
[107.50000000 108.31375885]
[107.50000000 123.31375885]
[107.50000000 138.31375122]
[115.23729706 152.11392212]
[107.50000000 164.84120178]
[115.23729706 178.64137268]
[107.50000000 191.36865234]
[115.23729706 205.16882324]
[107.50000000 217.89608765]
[107.50000000 232.89608765]
[107.50000000 247.89608765]
[107.50000000 262.89608765]
[107.50000000 277.89608765]
[121.94902802 282.33648682]
[134.44636536 290.83987427]
[143.88075256 302.65020752]
[149.41328430 316.71728516]
[150.55203247 331.79025269]
[147.19572449 346.52886963]
[139.64280701 359.62255859]
[128.56488037 369.90704346]
[114.94697571 376.46786499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[16 87]
[18 85]
[20 83]
[21 82]
[22 81]
[23 79]
[24 78]
[25 77]
[26 76]
[29 74]
[30 73]
[31 72]
[33 70]
[34 69]
[35 68]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
