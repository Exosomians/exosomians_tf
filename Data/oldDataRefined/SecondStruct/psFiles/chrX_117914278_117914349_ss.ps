%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUGUUUCUUUAGACAUUGACCAACACUAGUUAAUCAACAUUUGUGGUGACGUGAGCCUGGUCGGUCAU\
) } def
/len { sequence length } bind def

/coor [
[47.24262619 179.69259644]
[41.84547043 185.06956482]
[35.01230621 188.31692505]
[27.54010391 189.09497070]
[20.28745651 187.34977722]
[14.07594299 183.31533813]
[0.87575954 190.43960571]
[-12.32442379 197.56387329]
[-25.52460670 204.68814087]
[-38.72478867 211.81240845]
[-46.86307144 226.04969788]
[-63.26100159 225.84979248]
[-71.04978943 211.41833496]
[-62.21700668 197.60118103]
[-45.84905624 198.61221313]
[-32.64887238 191.48794556]
[-19.44869041 184.36369324]
[-6.24850655 177.23942566]
[6.95167637 170.11515808]
[15.61240578 148.63414001]
[39.34036255 146.58480835]
[50.28372574 136.32601929]
[61.22708893 126.06723022]
[72.17045593 115.80844116]
[83.11381531 105.54965210]
[82.87677002 95.23168182]
[88.41265869 86.52130127]
[97.85510254 82.35514069]
[108.02067566 84.13776398]
[119.80542755 74.85769653]
[131.59017944 65.57762146]
[143.37492371 56.29755020]
[155.15966797 47.01747894]
[154.24903870 34.79824448]
[159.43321228 23.83047104]
[169.25387573 16.91811752]
[181.08514404 15.76247787]
[191.83509827 20.54479599]
[204.37399292 12.31215191]
[216.91287231 4.07950783]
[224.78720093 -14.24819660]
[243.90823364 -15.26883316]
[255.69297791 -24.54890442]
[267.47772217 -33.82897568]
[279.26248169 -43.10904694]
[287.96578979 -57.65856934]
[304.35601807 -53.32309341]
[304.72726440 -36.37321091]
[288.54254150 -31.32429886]
[276.75781250 -22.04422760]
[264.97305298 -12.76415634]
[253.18830872 -3.48408556]
[252.83447266 7.10298157]
[246.44181824 15.82818222]
[236.03247070 19.50573921]
[225.14550781 16.61838913]
[212.60662842 24.85103416]
[200.06774902 33.08367920]
[197.67375183 50.99959564]
[182.87626648 61.91204453]
[164.43974304 58.80222702]
[152.65498352 68.08229828]
[140.87023926 77.36237335]
[129.08549500 86.64244080]
[117.30075073 95.92251587]
[111.58734131 113.47869873]
[93.37261200 116.49301147]
[82.42924500 126.75180054]
[71.48588562 137.01058960]
[60.54251862 147.26937866]
[49.59915543 157.52818298]
[51.39018250 165.09643555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[21 71]
[22 70]
[23 69]
[24 68]
[25 67]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[38 58]
[39 57]
[40 56]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
