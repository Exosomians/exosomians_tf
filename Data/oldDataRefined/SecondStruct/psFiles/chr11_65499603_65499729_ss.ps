%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUAAUUAACCCUCACCAUCCUACUUUGUUAAACCUCUUCUAUCUUCAAACUUCACCUUUUGACCUUCUGUCUUCAUGCCCUUCCGCUUCUUUUCUUAUCUCUUCUAUCCCUUUAAUCUUCUAUU\
) } def
/len { sequence length } bind def

/coor [
[70.35990143 337.59231567]
[57.17832565 335.57366943]
[44.12958145 332.82427979]
[31.25414658 329.35269165]
[18.59195328 325.16964722]
[6.18228102 320.28817749]
[-5.93637562 314.72338867]
[-17.72642708 308.49252319]
[-29.15130043 301.61495972]
[-40.17555618 294.11196899]
[-50.76499939 286.00689697]
[-60.88677979 277.32482910]
[-70.50950623 268.09271240]
[-79.60332489 258.33917236]
[-88.14002228 248.09448242]
[-96.09313202 237.39042664]
[-103.43797302 226.26019287]
[-110.15177155 214.73831177]
[-116.21369171 202.86051941]
[-121.60493469 190.66366577]
[-126.30877686 178.18557739]
[-130.31062317 165.46496582]
[-133.59806824 152.54127502]
[-136.16091919 139.45462036]
[-137.99121094 126.24557495]
[-139.08326721 112.95512390]
[-139.43371582 99.62448120]
[-139.04145813 86.29500580]
[-137.90771484 73.00804138]
[-136.03599548 59.80480194]
[-133.43211365 46.72624588]
[-130.10415649 33.81293869]
[-126.06241608 21.10494041]
[-121.31945801 8.64166927]
[-115.88998413 -3.53821683]
[-109.79083252 -15.39693546]
[-103.04093170 -26.89770317]
[-95.66120911 -38.00484085]
[-87.67456818 -48.68390274]
[-79.10577393 -58.90176010]
[-69.98140717 -68.62671661]
[-60.32976913 -77.82859802]
[-50.18080521 -86.47888184]
[-39.56599045 -94.55071259]
[-28.51825333 -102.01907349]
[-17.07186317 -108.86077881]
[-5.26232624 -115.05461884]
[6.87372637 -120.58137512]
[1.47530091 -134.57626343]
[-3.92312455 -148.57116699]
[-9.32155037 -162.56605530]
[-14.71997547 -176.56094360]
[-29.74894714 -180.42224121]
[-39.61205673 -192.40133667]
[-40.51673889 -207.89201355]
[-32.11512375 -220.93780518]
[-17.63780594 -226.52232361]
[-2.65160584 -222.49821472]
[7.08097363 -210.41282654]
[7.81755877 -194.91323853]
[-0.72508371 -181.95936584]
[4.67334175 -167.96447754]
[10.07176781 -153.96958923]
[15.47019291 -139.97470093]
[20.86861801 -125.97980499]
[40.90835953 -132.02763367]
[61.39974213 -136.30206299]
[82.18614960 -138.77041626]
[103.10871124 -139.41383362]
[124.00751495 -138.22738647]
[144.72282410 -135.22013855]
[165.09631348 -130.41510010]
[184.97225952 -123.84896851]
[204.19876099 -115.57194519]
[222.62887573 -105.64728546]
[240.12170410 -94.15084839]
[256.54357910 -81.17050171]
[271.76898193 -66.80545044]
[285.68154907 -51.16549683]
[298.17492676 -34.37017059]
[310.84774780 -42.39513397]
[314.06549072 -57.86838913]
[327.32766724 -66.46434021]
[342.76602173 -63.08316803]
[351.22128296 -49.73085785]
[347.67709351 -34.32909775]
[334.23611450 -26.01548386]
[318.87271118 -29.72233009]
[306.19989014 -21.69736671]
[312.65536499 -10.02879524]
[318.45123291 1.98107636]
[323.56945801 14.29499435]
[327.99417114 26.87476349]
[331.71170044 39.68135834]
[334.71044922 52.67506027]
[336.98117065 65.81555939]
[338.51678467 79.06209564]
[339.31253052 92.37358093]
[339.36593628 105.70871735]
[338.67687988 119.02615356]
[337.24743652 132.28456116]
[335.08209229 145.44284058]
[332.18756104 158.46014404]
[328.57275391 171.29611206]
[324.24896240 183.91093445]
[319.22958374 196.26547241]
[313.53015137 208.32139587]
[307.16836548 220.04130554]
[300.16397095 231.38887024]
[292.53866577 242.32887268]
[284.31613159 252.82739258]
[275.52185059 262.85183716]
[266.18313599 272.37115479]
[256.32891846 281.35577393]
[245.98979187 289.77783203]
[235.19781494 297.61123657]
[223.98646545 304.83163452]
[212.39051819 311.41668701]
[200.44595337 317.34594727]
[188.18980408 322.60101318]
[175.66009521 327.16555786]
[162.89570618 331.02548218]
[149.93620300 334.16879272]
[136.82180786 336.58572388]
[123.59320831 338.26876831]
[110.29141235 339.21273804]
[96.95769501 339.41467285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
