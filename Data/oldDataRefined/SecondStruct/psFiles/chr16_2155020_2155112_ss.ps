%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUCGGAGUCAGAACGAUUUAUUAGUCUGACGUGCACGUCAAAAGUAUGCUCCACAGUCUUCAGUUUCGUUAAGUAGUGUCUGACCCUCUU\
) } def
/len { sequence length } bind def

/coor [
[103.30055237 365.63766479]
[88.71939087 360.98486328]
[77.97893524 350.08068848]
[73.54724884 335.43081665]
[76.44271088 320.40167236]
[85.99996185 308.44686890]
[100.02281952 302.31350708]
[101.02471161 287.34701538]
[98.27482605 280.32171631]
[102.31838226 271.89978027]
[103.81981659 256.97512817]
[105.32125092 242.05046082]
[106.82268524 227.12579346]
[108.32411957 212.20112610]
[109.82556152 197.27645874]
[109.07389832 182.29530334]
[106.08610535 167.59587097]
[103.09832001 152.89645386]
[100.11052704 138.19702148]
[85.49771118 135.33706665]
[73.08866119 127.10728455]
[64.76906586 114.75827026]
[61.80317688 100.16658020]
[64.64168549 85.54958344]
[72.85325623 73.12847137]
[85.19004822 64.79076385]
[82.20225525 50.09133911]
[71.87120056 38.10886002]
[76.91836548 24.09545898]
[73.93057251 9.39603233]
[70.94277954 -5.30339289]
[56.47168350 -10.25662422]
[46.48874283 -21.71252632]
[43.59951019 -36.52869034]
[48.48163986 -50.70687103]
[59.72928619 -60.47191238]
[56.74149704 -75.17134094]
[53.75370789 -89.87076569]
[39.03847504 -94.08033752]
[27.97307587 -104.65462494]
[23.10026169 -119.16373444]
[25.53976631 -134.27357483]
[34.73101044 -146.51202393]
[48.56191635 -153.06677246]
[63.85423660 -152.43157959]
[77.09391785 -144.75241089]
[85.23856354 -131.79389954]
[86.41661072 -116.53379059]
[80.35733795 -102.47876740]
[68.45313263 -92.85855103]
[71.44092560 -78.15912628]
[74.42871094 -63.45970154]
[88.59602356 -58.86047745]
[98.62577057 -47.71326828]
[101.74987030 -32.94484711]
[97.03133392 -18.50073624]
[85.64221191 -8.29118252]
[88.62999725 6.40824270]
[91.61779022 21.10766792]
[101.73513794 32.03874588]
[96.90167999 47.10354614]
[99.88947296 61.80297470]
[114.50228882 64.66292572]
[126.91133881 72.89271545]
[135.23092651 85.24172974]
[138.19682312 99.83341980]
[135.35832214 114.45041656]
[127.14674377 126.87152863]
[114.80995178 135.20924377]
[117.79774475 149.90866089]
[120.78553009 164.60809326]
[123.77332306 179.30751038]
[132.14277649 166.85952759]
[145.81814575 160.69639587]
[160.68757629 162.67124939]
[172.28016663 172.19027710]
[177.11029053 186.39132690]
[173.72563171 201.00447083]
[163.14389038 211.63587952]
[148.54675293 215.08892822]
[134.32324219 210.32534790]
[124.75022888 198.77789307]
[123.24878693 213.70256042]
[121.74735260 228.62722778]
[120.24591827 243.55189514]
[118.74448395 258.47656250]
[117.24304962 273.40121460]
[115.99121094 288.34890747]
[114.98931885 303.31539917]
[128.06956482 311.26309204]
[135.94812012 324.38510132]
[136.81455994 339.66607666]
[130.46978760 353.59454346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 89]
[8 88]
[10 87]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 72]
[17 71]
[18 70]
[19 69]
[26 62]
[27 61]
[29 59]
[30 58]
[31 57]
[36 52]
[37 51]
[38 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
