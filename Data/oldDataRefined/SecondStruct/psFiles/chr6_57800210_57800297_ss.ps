%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCCAAUCGAGUCAGCCAAUCUCGCACCACGAUUAUUGCGGUUCCAGCGCCCAAGCUAGGGGCACGGCCAGUCUUCGCCGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[84.45568848 190.50279236]
[87.76275635 175.34222412]
[99.37175751 165.04608154]
[97.78627777 150.13011169]
[96.20079803 135.21412659]
[94.61532593 120.29815674]
[88.50135040 115.95426941]
[79.81338501 128.18206787]
[67.58571625 119.49391937]
[76.27341461 107.26648712]
[70.15944672 102.92259979]
[55.55254364 106.33411407]
[40.94564056 109.74562836]
[26.33873940 113.15714264]
[21.26537132 127.72644043]
[9.10654545 137.22204590]
[-6.25789976 138.61395264]
[-19.92522621 131.45799255]
[-27.53423882 118.03761292]
[-26.65692902 102.63521576]
[-17.57324409 90.16564178]
[-3.18175578 84.60788727]
[11.92526627 87.73542023]
[22.92722511 98.55024719]
[37.53412628 95.13872528]
[52.14102936 91.72721100]
[66.74793243 88.31569672]
[74.23985291 82.07028961]
[82.42348480 78.81616974]
[90.29669189 78.41401672]
[96.99485016 80.42220306]
[101.87483978 84.16301727]
[104.57314301 88.81038666]
[105.03285217 93.49007416]
[116.27400970 83.55848694]
[117.40393829 68.02268982]
[128.94554138 58.11078262]
[143.74958801 59.28374100]
[154.99075317 49.35215378]
[166.23190308 39.42056656]
[177.47305298 29.48897743]
[188.35670471 19.16686058]
[198.86929321 8.46707249]
[209.19142151 -2.41657996]
[219.31985474 -13.48070717]
[229.44827271 -24.54483414]
[239.57670593 -35.60895920]
[249.70513916 -46.67308807]
[259.63671875 -57.91424179]
[269.36837769 -69.32892609]
[279.10003662 -80.74360657]
[277.59643555 -96.47621155]
[287.72216797 -108.61067200]
[303.46978760 -109.94783020]
[315.49652100 -99.69437408]
[316.66711426 -83.93350220]
[306.28707886 -72.01584625]
[290.51470947 -71.01195526]
[280.78305054 -59.59727478]
[271.05142212 -48.18259048]
[269.06420898 -40.88842010]
[260.76925659 -36.54465866]
[250.64083862 -25.48053169]
[240.51240540 -14.41640377]
[230.38397217 -3.35227704]
[220.25553894 7.71185017]
[218.01216125 14.93134689]
[209.56909180 18.97966194]
[199.05650330 29.67944908]
[198.22343445 34.59078217]
[194.15100098 38.95287323]
[187.40464783 40.73013306]
[176.16349792 50.66172028]
[164.92233276 60.59330750]
[153.68118286 70.52489471]
[153.02087402 85.36064911]
[141.76222229 95.59282684]
[126.20559692 94.79964447]
[114.96443939 104.73123169]
[109.53129578 118.71267700]
[111.11677551 133.62864685]
[112.70225525 148.54463196]
[114.28773499 163.46060181]
[127.80171967 171.08631897]
[134.22184753 185.21295166]
[131.07943726 200.40850830]
[119.58280945 210.82998657]
[104.15265656 212.47012329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[5 81]
[6 80]
[11 27]
[12 26]
[13 25]
[14 24]
[34 79]
[35 78]
[38 75]
[39 74]
[40 73]
[41 72]
[42 69]
[43 68]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
