%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCAGCCGGCCAAUCGAGUCAACCAAUCUCGCACGACGAUGAUUACGGUCCCAGCUCCAAAGCUAGGGGCAUGCCCGGAAACCGAAAAAGGGGGGAGCUCUUUAAAC\
) } def
/len { sequence length } bind def

/coor [
[66.98480225 309.26910400]
[55.67959976 310.89309692]
[44.36190796 309.48062134]
[38.13068390 323.12509155]
[31.89945793 336.76956177]
[33.99608231 353.03414917]
[20.79650116 362.76568604]
[5.87931156 355.95324707]
[4.59003973 339.60485840]
[18.25497818 330.53833008]
[24.48620224 316.89385986]
[30.71742821 303.24938965]
[17.89265442 289.51803589]
[12.15227604 271.57748413]
[14.63637638 252.85751343]
[24.90865135 236.95506287]
[41.03238678 226.94329834]
[59.93550491 224.77763367]
[64.16149139 210.38523865]
[68.38748169 195.99284363]
[72.40752411 181.54156494]
[76.22080231 167.03436279]
[68.51377106 154.34037781]
[72.17431641 139.57368469]
[85.54119110 131.57591248]
[89.35446167 117.06871796]
[83.51541138 103.25186157]
[70.45422363 95.87586212]
[57.39303207 88.49987030]
[44.33184052 81.12387848]
[31.16665459 73.93514252]
[17.90016174 66.93513489]
[4.63366747 59.93512344]
[-11.05648899 63.28154373]
[-23.36354446 52.98999786]
[-22.84657860 36.95527649]
[-9.90216446 27.47784615]
[5.53985214 31.82798004]
[11.63367748 46.66862869]
[24.90017128 53.66864014]
[38.16666412 60.66864777]
[45.66260910 61.01174927]
[51.70783234 68.06268311]
[64.76902771 75.43868256]
[77.83021545 82.81467438]
[90.89141083 90.19066620]
[88.33771515 84.03728485]
[87.15205383 77.22152710]
[87.44576263 69.98476410]
[89.29189301 62.58425140]
[94.33263397 48.45658493]
[99.37337494 34.32891846]
[104.41411591 20.20125389]
[109.45485687 6.07358837]
[114.29335022 -8.12461567]
[118.92860413 -22.39046288]
[123.56385803 -36.65631104]
[128.19911194 -50.92215729]
[124.26213837 -66.84171295]
[136.26635742 -78.01447296]
[151.86288452 -72.94685364]
[155.00732422 -56.85199738]
[142.46496582 -46.28690338]
[137.82971191 -32.02105713]
[133.19445801 -17.75520897]
[128.55920410 -3.48936081]
[129.49934387 3.95530319]
[123.58252716 11.11432934]
[118.54178619 25.24199486]
[113.50104523 39.36965942]
[108.46030426 53.49732590]
[103.41956329 67.62499237]
[107.82794952 73.69261932]
[116.64474487 61.55737686]
[130.91058350 66.19268036]
[130.91050720 81.19268036]
[116.64472961 85.82787323]
[121.05311584 91.89550018]
[136.04699707 91.46716309]
[151.04087830 91.03881836]
[166.70089722 84.54264069]
[177.27832031 97.79233551]
[167.47456360 111.62427521]
[151.46922302 106.03269958]
[136.47534180 106.46104431]
[121.48146057 106.88938141]
[135.95600891 110.82477570]
[144.05500793 123.45039368]
[141.59690857 138.24761963]
[129.85083008 147.57659912]
[114.88131714 146.62075806]
[104.41715240 135.87361145]
[103.86167145 120.88198853]
[100.04839325 135.38919067]
[107.75478363 148.92614746]
[103.68091583 163.58419800]
[90.72800446 170.84764099]
[86.91472626 185.35484314]
[87.75803375 194.60412598]
[82.77987671 200.21882629]
[78.55388641 214.61122131]
[74.32790375 229.00361633]
[83.88826752 235.50776672]
[91.38504791 244.29061890]
[96.29394531 254.72515869]
[98.27503204 266.06927490]
[97.19625854 277.51858521]
[93.14226532 288.26354980]
[86.40776825 297.54650879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[18 102]
[19 101]
[20 100]
[21 98]
[22 97]
[25 94]
[26 93]
[27 46]
[28 45]
[29 44]
[30 43]
[31 41]
[32 40]
[33 39]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 66]
[56 65]
[57 64]
[58 63]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
