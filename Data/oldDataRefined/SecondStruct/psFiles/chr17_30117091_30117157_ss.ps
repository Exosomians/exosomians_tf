%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGACUCCCCGUCUCUCGCUCUGAAAAGAUAAAAGGUUUUCGAGCCAGACUCCGGGGAGUCAGAAC\
) } def
/len { sequence length } bind def

/coor [
[109.26737213 281.29550171]
[107.88334656 266.35949707]
[99.00473022 254.40042114]
[105.43569946 239.94520569]
[104.05167389 225.00920105]
[102.66764832 210.07318115]
[101.28362274 195.13716125]
[99.89959717 180.20115662]
[98.51557159 165.26513672]
[97.13155365 150.32913208]
[95.74752808 135.39311218]
[94.36350250 120.45710754]
[81.49103546 110.37696838]
[79.60685730 94.13629913]
[89.82955170 81.37675476]
[87.75720215 66.52059937]
[85.68486023 51.66444397]
[76.11517334 39.06556320]
[82.01992798 25.39138412]
[79.94757843 10.53522873]
[77.87523651 -4.32092810]
[75.80288696 -19.17708397]
[71.38553619 -27.57230186]
[73.99438477 -34.76546478]
[72.61035919 -49.70147705]
[71.22633362 -64.63748932]
[69.84230804 -79.57350159]
[68.45828247 -94.50951385]
[54.71867371 -101.52568817]
[46.97315979 -114.86774445]
[47.69330978 -130.27828979]
[56.64932251 -142.83987427]
[70.98336792 -148.54414368]
[86.12150574 -145.57087708]
[97.23321533 -134.86883545]
[100.77278137 -119.85301208]
[95.61074829 -105.31489563]
[83.39429474 -95.89353943]
[84.77832031 -80.95752716]
[86.16234589 -66.02151489]
[87.54637146 -51.08550262]
[88.93039703 -36.14949036]
[90.65904236 -21.24942970]
[92.73139191 -6.39327335]
[94.80373383 8.46288300]
[96.87608337 23.31904030]
[106.29753876 34.85530472]
[100.54101562 49.59209824]
[102.61335754 64.44824982]
[104.68570709 79.30441284]
[115.78638458 85.82067108]
[121.07803345 97.55461121]
[118.61343384 110.18839264]
[109.29951477 119.07308197]
[110.68354034 134.00909424]
[112.06756592 148.94509888]
[113.45159149 163.88111877]
[114.83561707 178.81712341]
[116.21963501 193.75314331]
[117.60366058 208.68916321]
[118.98768616 223.62516785]
[120.37171173 238.56118774]
[129.34933472 251.58857727]
[122.81935883 264.97546387]
[124.20338440 279.91146851]
[131.68537903 295.12515259]
[119.13748169 306.52630615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[15 50]
[16 49]
[17 48]
[19 46]
[20 45]
[21 44]
[22 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
