%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCGCACCACGAUUAUUGCGGUUCCAGCGCCCAAGCUAGGGGCAUGCCCGGUGUCCGAAAAGAUUACAAAUAAAGUGCCCGGUGUCCGAAAA\
) } def
/len { sequence length } bind def

/coor [
[96.31587982 169.26565552]
[86.25585175 158.13931274]
[81.79096985 143.81921387]
[83.74488831 128.94702148]
[91.75501251 116.26836395]
[80.07185364 125.67601013]
[68.38869476 135.08366394]
[56.70553589 144.49130249]
[59.14563370 159.65512085]
[53.66191864 174.00170898]
[41.72947693 183.67189026]
[26.55808067 186.06443787]
[12.22875881 180.53578186]
[2.59602451 168.57308960]
[0.25103623 153.39427185]
[5.82458401 139.08235168]
[17.81741142 129.48716736]
[33.00350952 127.18975830]
[47.29788971 132.80813599]
[58.98104858 123.40049744]
[70.66420746 113.99285126]
[82.34736633 104.58520508]
[82.34736633 89.58520508]
[70.66420746 80.17755890]
[58.98104858 70.76991272]
[47.29788971 61.36227036]
[35.61473083 51.95462418]
[23.77762413 42.74143600]
[11.78980350 33.72521591]
[-0.19801641 24.70899963]
[-15.80939484 27.17079163]
[-28.53972244 17.80520058]
[-30.83632278 2.16866684]
[-21.33666229 -10.46193123]
[-5.67672253 -12.59308434]
[6.85273361 -2.96041656]
[8.81820107 12.72117996]
[20.80602074 21.73739815]
[32.79384232 30.75361443]
[40.17742538 32.28827667]
[45.02237701 40.27146530]
[56.70553589 49.67911148]
[68.38869476 59.08675766]
[80.07185364 68.49440002]
[91.75501251 77.90204620]
[100.41902924 80.38528442]
[106.09291840 85.58218384]
[108.20413971 91.67866516]
[122.74514771 87.99638367]
[137.22328186 84.07418060]
[151.63458252 79.91313934]
[166.04588318 75.75209808]
[180.45719910 71.59104919]
[188.01113892 66.10080719]
[195.41409302 67.53915405]
[209.95509338 63.85687256]
[221.43359375 52.96858978]
[235.67080688 57.34476852]
[236.65242004 42.24868774]
[242.25280762 28.19554710]
[251.92330933 16.56212997]
[264.71652222 8.48815727]
[279.37908936 4.76463652]
[294.47448730 5.75636053]
[308.52389526 11.36616993]
[320.15081787 21.04447174]
[328.21621704 33.84308624]
[331.92990112 48.50813675]
[330.92807007 63.60288620]
[325.30886841 77.64851379]
[315.62277222 89.26895905]
[302.81875610 97.32577515]
[288.15121460 101.02964783]
[273.05712891 100.01769257]
[259.01528931 94.38906097]
[247.40132141 84.69518280]
[239.35308838 71.88577271]
[228.91465759 82.51067352]
[213.63737488 78.39787292]
[199.09637451 82.08015442]
[184.61824036 86.00235748]
[170.20693970 90.16339874]
[155.79562378 94.32444763]
[141.38432312 98.48548889]
[135.71971130 103.46390533]
[126.42742920 102.53738403]
[111.88642120 106.21966553]
[126.83670807 107.43987274]
[139.89620972 114.81886292]
[148.65583801 126.99544525]
[151.49969482 141.72338867]
[147.90318298 156.28584290]
[138.52975464 167.99647522]
[125.10852814 174.69502258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 39]
[29 38]
[30 37]
[48 87]
[49 86]
[50 84]
[51 83]
[52 82]
[53 81]
[55 80]
[56 79]
[58 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
