%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUGAAGGUAUAUAUGUAAGGAACCUUUCGACUUGUUUUACUCACUUUUGAGAUAUGGCAGUAGGAGCAGCUUGACU\
) } def
/len { sequence length } bind def

/coor [
[92.27384949 308.27529907]
[86.11972809 294.40118408]
[85.39700317 279.24063110]
[90.20340729 264.84402466]
[99.88891602 253.15832520]
[113.14365387 245.76397705]
[111.03275299 230.91323853]
[108.92185974 216.06251526]
[99.47048950 204.55073547]
[105.18874359 189.79905701]
[103.07784271 174.94833374]
[100.96694946 160.09761047]
[98.85604858 145.24687195]
[96.74515533 130.39614868]
[94.63425446 115.54541779]
[85.10556793 103.96076965]
[70.94108582 99.02443695]
[56.77660370 94.08810425]
[42.61211777 89.15177155]
[28.44763374 84.21543884]
[18.05090714 95.34323883]
[4.02441025 101.27427673]
[-11.20168114 100.98097229]
[-24.98935509 94.51414490]
[-34.94981384 82.99419403]
[-39.35734558 68.41703796]
[-37.44832230 53.30824661]
[-29.55348969 40.28551483]
[-17.04067993 31.60511017]
[-2.07780862 28.77096176]
[12.74271393 32.27410507]
[24.85314178 41.50759888]
[32.15527344 54.87168121]
[33.38396835 70.05094910]
[47.54845047 74.98728180]
[61.71293640 79.92361450]
[75.87741852 84.85994720]
[90.04190826 89.79627991]
[79.97800446 78.67343140]
[66.45507812 72.18262482]
[56.88315964 60.63367081]
[53.01477432 46.14106750]
[55.55818176 31.35827065]
[64.04771423 18.99187088]
[76.92901611 11.30603600]
[91.84364319 9.70796967]
[106.06087494 14.49026299]
[116.97766876 24.77732277]
[122.59526825 38.68568802]
[121.88513947 53.66886902]
[114.97547913 66.98577881]
[108.88964844 80.69572449]
[120.80336761 71.58181763]
[132.71708679 62.46791077]
[144.63079834 53.35400009]
[150.42573547 38.01285553]
[166.65058899 35.62822342]
[176.61460876 48.65321350]
[170.06767273 63.68882751]
[153.74470520 65.26771545]
[141.83099365 74.38162994]
[129.91726685 83.49553680]
[118.00355530 92.60944366]
[132.55238342 88.95822144]
[145.79382324 96.00553894]
[150.89125061 110.11284637]
[145.21289062 123.99651337]
[131.69047546 130.48837280]
[117.30565643 126.23665619]
[109.48498535 113.43452454]
[111.59587860 128.28524780]
[113.70677948 143.13598633]
[115.81767273 157.98670959]
[117.92857361 172.83743286]
[120.03946686 187.68815613]
[129.64183044 200.26216125]
[123.77258301 213.95161438]
[125.88348389 228.80235291]
[127.99437714 243.65307617]
[142.78457642 247.06109619]
[155.34271240 255.58505249]
[163.97038269 268.07214355]
[167.50080872 282.83358765]
[165.45648193 297.87304688]
[158.11392212 311.15655518]
[146.46611023 320.88757324]
[132.08834839 325.75012207]
[116.92510223 325.08657837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[8 77]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
