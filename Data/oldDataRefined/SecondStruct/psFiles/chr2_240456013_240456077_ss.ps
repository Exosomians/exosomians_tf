%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGACCGAGGCACAGAAGUGAGGGCACGAACAGGCUCCUCCCUCCCUCCCUGCCCCCGACACGA\
) } def
/len { sequence length } bind def

/coor [
[91.06089783 323.75469971]
[78.74617004 314.79550171]
[71.14577484 301.59875488]
[69.57651520 286.45089722]
[74.31028748 271.97640991]
[84.52693176 260.68304443]
[98.45634460 254.52745056]
[98.45634460 239.52745056]
[88.82120514 225.04621887]
[97.68856812 209.09999084]
[96.97483826 194.11698914]
[96.26110840 179.13397217]
[95.54738617 164.15097046]
[84.38767242 154.35317993]
[83.45040894 139.16845703]
[93.80288696 127.52954865]
[93.08915710 112.54653931]
[85.69227600 100.68156433]
[91.92782593 88.16719055]
[88.28712463 79.39002991]
[91.55387115 72.45771027]
[91.55387115 57.45770645]
[91.55387115 42.45770645]
[91.55387115 27.45770645]
[91.55387115 12.45770645]
[88.33492279 3.51726127]
[91.92782593 -3.25177383]
[84.85593414 -17.40447044]
[93.19005585 -29.74917221]
[93.90378571 -44.73218155]
[83.08874512 -56.25652695]
[83.67379761 -72.04998016]
[95.31184387 -82.74257660]
[111.09822845 -81.99057770]
[121.66718292 -70.24013519]
[120.74832153 -54.46257782]
[108.88679504 -44.01845169]
[108.17306519 -29.03544235]
[115.29601288 -15.95443058]
[106.91084290 -2.53804517]
[106.55387115 12.45770645]
[106.55387115 27.45770645]
[106.55387115 42.45770645]
[106.55387115 57.45770645]
[106.55387115 72.45771027]
[106.91084290 87.45346069]
[114.30772400 99.31843567]
[108.07217407 111.83280945]
[108.78589630 126.81582642]
[120.19784546 137.41795349]
[120.70822906 152.62301636]
[110.53039551 163.43724060]
[111.24411774 178.42024231]
[111.95784760 193.40325928]
[112.67157745 208.38626099]
[121.79988861 217.82487488]
[121.89211273 230.54951477]
[113.45634460 239.52745056]
[113.45634460 254.52745056]
[127.38576508 260.68304443]
[137.60240173 271.97640991]
[142.33618164 286.45089722]
[140.76692200 301.59875488]
[133.16651917 314.79550171]
[120.85179901 323.75469971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 59]
[8 58]
[10 55]
[11 54]
[12 53]
[13 52]
[16 49]
[17 48]
[19 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[27 40]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
