%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGGCGGACCUAUGGCGUCGAUCCUUAUUACCUUAUCCUGGCGCCAAGAUAAAACAACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[47.73203659 121.54299927]
[33.22808838 125.36863708]
[21.85763359 136.36970520]
[7.57791328 132.13427734]
[-6.92603302 135.95991516]
[-21.42997932 139.78555298]
[-35.93392563 143.61119080]
[-50.43787384 147.43684387]
[-64.94181824 151.26248169]
[-69.59870148 165.97019958]
[-81.48249054 175.80783081]
[-96.80112457 177.63621521]
[-110.66648102 170.87193298]
[-118.65416718 157.67343140]
[-118.21534729 142.25231934]
[-109.49005127 129.52940369]
[-95.26248169 123.56451416]
[-80.07260895 126.26104736]
[-68.76746368 136.75852966]
[-54.26351547 132.93289185]
[-39.75956726 129.10725403]
[-25.25562096 125.28160858]
[-10.75167465 121.45597076]
[3.75227189 117.63032532]
[14.08530712 106.90290070]
[29.40244675 110.86469269]
[43.90639496 107.03905487]
[44.31837845 90.22258759]
[49.66016006 74.27177429]
[59.45880890 60.59882355]
[72.84679413 50.41427612]
[88.63879395 44.61982346]
[105.43666840 43.72848511]
[121.75321198 47.81917191]
[136.14381409 56.52971649]
[147.33441162 69.08892059]
[160.87066650 62.62596893]
[174.40692139 56.16300964]
[187.94317627 49.70005417]
[201.47943115 43.23709869]
[210.59921265 30.30883408]
[225.41824341 31.80738449]
[238.95449829 25.34442902]
[247.78669739 11.52689457]
[264.15469360 12.53724098]
[271.22048950 27.33610916]
[261.71539307 40.69969559]
[245.41744995 38.88068390]
[231.88119507 45.34363937]
[223.72961426 57.80963135]
[207.94238281 56.77335358]
[194.40612793 63.23630905]
[180.86987305 69.69926453]
[167.33361816 76.16222382]
[153.79736328 82.62517548]
[156.36700439 95.66392517]
[155.82182312 108.94227600]
[152.19195557 121.72647858]
[145.67799377 133.31008911]
[136.63986206 143.05299377]
[125.57704926 150.41682434]
[113.10084534 154.99462891]
[99.90069580 156.53344727]
[86.70603943 154.94825745]
[74.24600220 150.32666016]
[63.20911407 142.92402649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
