%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACGGGAGUAUAGAGUAUUAGAAGCGAGUGUCCUGCGACCUGUAAGUUUCUUUCUUUUUCUUCAUAUCUUUUCUCUCUUUUUGCAGU\
) } def
/len { sequence length } bind def

/coor [
[99.03438568 330.64144897]
[93.86159515 316.39300537]
[93.87711334 301.23468018]
[99.07907104 286.99685669]
[108.83930969 275.39886475]
[121.97923279 267.84118652]
[119.37451172 253.06907654]
[116.76978302 238.29695129]
[114.16506195 223.52484131]
[111.56034088 208.75273132]
[98.11460876 202.40054321]
[90.90221405 189.19276428]
[92.87305450 174.09411621]
[103.47914124 162.92195129]
[100.87441254 148.14984131]
[98.26969147 133.37771606]
[83.97783661 129.33183289]
[72.85044098 119.49275970]
[67.08522797 105.80376434]
[67.82084656 90.96849823]
[74.91201782 77.91699982]
[86.95819092 69.22700500]
[84.35346985 54.45488739]
[81.74874878 39.68276978]
[79.14402008 24.91065598]
[76.53929901 10.13853931]
[71.87514496 2.02452445]
[74.11087799 -5.19391203]
[72.02328491 -20.04793358]
[69.93568420 -34.90195465]
[55.26087570 -38.76533127]
[43.21566010 -47.92807007]
[35.61668015 -60.96912766]
[33.59500122 -75.88557434]
[37.42782974 -90.40019989]
[46.50099564 -102.30914307]
[59.40712738 -109.81655121]
[57.31953049 -124.67057037]
[43.26401138 -131.03028870]
[34.89727020 -143.99180603]
[34.88909912 -159.41917419]
[43.24210739 -172.38955688]
[57.29087830 -178.76416016]
[72.55250549 -176.50886536]
[84.15705109 -166.34333801]
[88.40155792 -151.51135254]
[83.93160248 -136.74574280]
[72.17355347 -126.75817108]
[74.26114655 -111.90414429]
[88.73663330 -108.24497986]
[100.74087524 -99.29826355]
[108.42600250 -86.40238953]
[110.59416199 -71.50652313]
[106.88415527 -56.87609482]
[97.83114624 -44.74819565]
[84.78970337 -36.98955154]
[86.87730408 -22.13553047]
[88.96489716 -7.28150892]
[91.31141663 7.53381634]
[93.91613770 22.30593300]
[96.52085876 37.07804871]
[99.12558746 51.85016632]
[101.73030853 66.62228394]
[116.02216339 70.66816711]
[127.14955902 80.50724030]
[132.91477966 94.19623566]
[132.17915344 109.03150177]
[125.08798218 122.08300018]
[113.04180908 130.77299500]
[115.64653015 145.54510498]
[118.25125122 160.31723022]
[132.03881836 167.18814087]
[139.05484009 180.70214844]
[136.79473877 195.58018494]
[126.33245850 206.14799500]
[128.93717957 220.92012024]
[131.54190063 235.69223022]
[134.14662170 250.46435547]
[136.75134277 265.23648071]
[151.68370056 267.84423828]
[164.82208252 275.40457153]
[174.57994080 287.00457764]
[179.77899170 301.24346924]
[179.79139709 316.40182495]
[174.61569214 330.64920044]
[164.87684631 342.26516724]
[151.75086975 349.84701538]
[136.82279968 352.47924805]
[121.89527130 349.84396362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[14 71]
[15 70]
[16 69]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[28 58]
[29 57]
[30 56]
[37 49]
[38 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
