%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUAGCACGUAUACUACCUUUUCAAAAUUAGAGGACUGUGAACACUACAGAAGUUUCCUUGGUGACUACGUGGA\
) } def
/len { sequence length } bind def

/coor [
[71.64926910 320.60186768]
[57.07318115 325.44262695]
[42.03276825 322.33111572]
[30.57382774 312.10427856]
[25.77875710 297.51309204]
[28.93740654 282.48251343]
[39.20011520 271.05566406]
[53.80626678 266.30636597]
[56.84507751 251.61740112]
[59.88389206 236.92843628]
[62.92270279 222.23947144]
[65.96151733 207.55052185]
[69.00032806 192.86155701]
[60.40861893 183.04055786]
[59.11127853 169.85919189]
[65.81932068 158.21131897]
[78.22871399 152.55497742]
[81.86413574 138.00219727]
[85.49956512 123.44940948]
[89.13498688 108.89661407]
[76.26671600 116.60424805]
[61.35140991 118.19598389]
[47.14638138 113.37756348]
[36.27763748 103.03974915]
[30.75442314 89.09363556]
[31.59778976 74.11736298]
[38.65182495 60.87951660]
[50.61248779 51.82730484]
[65.26867676 48.63415909]
[79.91098022 51.89038467]
[91.83255005 60.99401855]
[98.82951355 74.26211548]
[99.60834503 89.24211121]
[109.66045380 78.10859680]
[119.71256256 66.97508240]
[129.76467896 55.84157181]
[139.81678772 44.70806122]
[148.68299866 32.60887909]
[156.27116394 19.66979980]
[163.85932922 6.73071766]
[171.44747925 -6.20836353]
[179.03564453 -19.14744568]
[176.39653015 -34.97193909]
[187.22985840 -46.80487442]
[203.22525024 -45.56903458]
[212.11238098 -32.21245193]
[207.07382202 -16.98114967]
[191.97471619 -11.55928421]
[184.38656616 1.37979686]
[176.79840088 14.31887817]
[169.21023560 27.25795937]
[161.62208557 40.19704056]
[162.48835754 42.66031265]
[162.41848755 45.62549591]
[161.21870422 48.73792267]
[158.82586670 51.58061218]
[155.32489014 53.72072220]
[150.95030212 54.76016998]
[140.89819336 65.89368439]
[130.84606934 77.02719879]
[120.79396820 88.16070557]
[110.74185944 99.29421997]
[103.68777466 112.53204346]
[100.05235291 127.08483124]
[96.41692352 141.63761902]
[92.78150177 156.19041443]
[102.05158997 170.86395264]
[98.05747223 187.41128540]
[83.68929291 195.90036011]
[80.65048218 210.58932495]
[77.61166382 225.27828979]
[74.57285309 239.96725464]
[71.53404236 254.65621948]
[68.49522400 269.34518433]
[80.01805115 279.49996948]
[84.90450287 294.06082153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[17 66]
[18 65]
[19 64]
[20 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
