%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAAGAACCCCAACGCGAUGACAGGUUACUCGCGUAUCACUCCCGUCAUGACGAUUGCGGACUUGUUGUGUGGGCGUAGUUGAUCUCGAAAACGAAAUAAAACCACGUUAAAAACCUUUUUACUUUUGGACAAAAGUAUCU\
) } def
/len { sequence length } bind def

/coor [
[108.74468994 209.11654663]
[122.97541046 204.37455750]
[136.99060059 209.71926880]
[131.28788757 195.84558105]
[125.58519745 181.97189331]
[119.88249969 168.09820557]
[114.17980194 154.22451782]
[108.47709656 140.35083008]
[102.38217163 141.16279602]
[96.23426056 141.05934143]
[90.17009735 140.04277039]
[84.32454681 138.13569641]
[78.82759857 135.38050842]
[73.80150604 131.83850098]
[69.35803986 127.58842468]
[65.59602356 122.72481537]
[51.78492737 128.57746887]
[37.97382736 134.43013000]
[24.16273117 140.28277588]
[10.35163307 146.13543701]
[-3.45946479 151.98809814]
[-17.20635033 157.99002075]
[-30.88741302 164.14051819]
[-44.56847382 170.29100037]
[-53.71556473 183.90213013]
[-70.05605316 182.51628113]
[-76.78024292 167.55909729]
[-66.97086334 154.41725159]
[-50.71896744 156.60993958]
[-37.03790665 150.45945740]
[-23.35684395 144.30895996]
[-18.50996399 138.65568542]
[-9.31212044 138.17700195]
[4.49897718 132.32434082]
[18.31007385 126.47168732]
[32.12117386 120.61902618]
[45.93227005 114.76637268]
[59.74336624 108.91371918]
[58.18449402 99.69123840]
[58.74096298 90.22302246]
[61.44298553 80.99463654]
[66.20928192 72.49238586]
[72.84841156 65.17771912]
[81.06591797 59.46231842]
[90.47718048 55.68514633]
[83.30789948 42.50935745]
[76.13862610 29.33356667]
[68.96934509 16.15777588]
[62.06719589 10.05943012]
[61.79099274 2.61796689]
[54.90884018 -10.71004963]
[48.02669144 -24.03806496]
[41.14454269 -37.36608124]
[34.26239395 -50.69409943]
[27.38024330 -64.02211761]
[20.49809265 -77.35012817]
[13.61594296 -90.67814636]
[-1.74278247 -92.88929749]
[-12.84507751 -103.72989655]
[-15.42188358 -119.03151703]
[-8.48236656 -132.91038513]
[5.30508900 -140.02976990]
[20.63892365 -137.65213013]
[31.62296677 -126.69173431]
[34.03362656 -111.36306000]
[26.94395828 -97.56029510]
[33.82611084 -84.23227692]
[40.70825958 -70.90426636]
[47.59040833 -57.57624817]
[54.47255707 -44.24822998]
[61.35470963 -30.92021561]
[68.23685455 -17.59219933]
[75.11901093 -4.26418304]
[82.14513397 8.98849773]
[89.31441498 22.16428757]
[96.48369598 35.34007645]
[103.65296936 48.51586914]
[118.30227661 51.74042511]
[130.34130859 42.79270172]
[142.38034058 33.84498215]
[148.84097290 19.40300179]
[163.67132568 18.02097130]
[175.71035767 9.07324982]
[187.74938965 0.12552857]
[194.61997986 -16.92187691]
[212.07948303 -18.34479904]
[223.92182922 -27.55123901]
[230.06806946 -42.12979507]
[244.86500549 -43.83279419]
[256.70736694 -53.03923416]
[268.54971313 -62.24567413]
[274.22497559 -77.63150024]
[290.43075562 -80.14244843]
[300.49594116 -67.19547272]
[294.06631470 -52.10931396]
[277.75616455 -50.40331650]
[265.91378784 -41.19687653]
[254.07144165 -31.99043655]
[248.77224731 -18.07038689]
[233.12828064 -15.70888138]
[221.28591919 -6.50244093]
[219.45233154 5.50123024]
[209.59698486 13.26278496]
[196.69711304 12.16456032]
[184.65808105 21.11228180]
[172.61904907 30.06000328]
[167.01953125 43.86198044]
[151.32806396 45.88401413]
[139.28903198 54.83173370]
[127.25000000 63.77945709]
[133.96855164 70.68123627]
[139.01498413 78.77127838]
[142.19349670 87.65793610]
[143.39749146 96.92106628]
[142.61268616 106.13178253]
[139.91595459 114.87237549]
[135.46995544 122.75521851]
[129.51383972 129.43994141]
[122.35078430 134.64813232]
[128.05348206 148.52182007]
[133.75617981 162.39550781]
[139.45887756 176.26919556]
[145.16157532 190.14288330]
[150.86428833 204.01657104]
[157.60165405 217.41836548]
[165.33496094 230.27122498]
[173.06826782 243.12408447]
[180.80157471 255.97692871]
[188.53488159 268.82980347]
[196.26818848 281.68264771]
[210.87020874 289.14675903]
[211.43678284 305.53610229]
[197.38505554 313.99075317]
[183.17024231 305.81326294]
[183.41532898 289.41595459]
[175.68202209 276.56311035]
[167.94871521 263.71023560]
[160.21540833 250.85739136]
[152.48210144 238.00453186]
[144.74879456 225.15167236]
[140.67802429 239.58872986]
[128.38313293 248.18150330]
[113.42643738 247.04254150]
[102.57447052 236.68711853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 31]
[23 30]
[24 29]
[45 77]
[46 76]
[47 75]
[48 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[78 110]
[79 109]
[80 108]
[82 106]
[83 105]
[84 104]
[86 101]
[87 100]
[89 98]
[90 97]
[91 96]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
