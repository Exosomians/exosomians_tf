%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUUCCGCUUCCCGUUCAUCUUCGGACCUAAUCAAACGUCGUUGAGUUAGGGUUUCCUUGGUUUCCGAGAAAAGUCUCGGUGG\
) } def
/len { sequence length } bind def

/coor [
[89.22712708 154.80627441]
[84.38392639 169.00286865]
[88.08787537 184.97825623]
[75.92167664 195.97442627]
[60.40086746 190.67945862]
[57.49193192 174.54037476]
[70.18732452 164.15966797]
[75.03053284 149.96307373]
[67.84757996 145.67280579]
[61.38605881 140.35772705]
[55.79095078 134.13711548]
[51.18780136 127.15054321]
[47.67988968 119.55476379]
[45.34593201 111.52022552]
[30.38594627 112.61515045]
[15.42596245 113.71008301]
[7.36068010 126.96643066]
[-6.96910763 132.91931152]
[-22.05330467 129.27972412]
[-32.09172821 117.44715881]
[-33.22440338 101.97148132]
[-25.01578903 88.80339813]
[-10.62226772 83.00631714]
[4.42155886 86.80933380]
[14.33103275 98.75009918]
[29.29101753 97.65516663]
[44.25099945 96.56024170]
[56.42180634 65.06114197]
[84.52101898 46.33265305]
[82.33699799 31.49250412]
[80.15298462 16.65235329]
[77.96896362 1.81220317]
[75.78495026 -13.02794743]
[73.33025360 -27.82573318]
[70.60569763 -42.57621765]
[67.88114929 -57.32670212]
[65.15659332 -72.07718658]
[51.99687195 -80.82917023]
[48.96207809 -96.33934784]
[57.85270309 -109.40580750]
[73.39409637 -112.27644348]
[86.36582947 -103.24816895]
[89.07199860 -87.67729187]
[79.90708160 -74.80174255]
[82.63162994 -60.05125809]
[85.35618591 -45.30076981]
[88.08074188 -30.55028534]
[92.49588013 -24.40078163]
[90.62509918 -15.21196461]
[92.80911255 -0.37181431]
[94.99313354 14.46833611]
[97.17715454 29.30848694]
[99.36116791 44.14863586]
[108.02336121 44.72425079]
[116.49172974 46.63516617]
[124.56171417 49.83522034]
[132.03834534 54.24710846]
[138.74102783 59.76425552]
[144.50784302 66.25337982]
[149.19947815 73.55773163]
[152.70260620 81.50084686]
[154.93257141 89.89084625]
[155.83554077 98.52505493]
[155.38967896 107.19489288]
[153.60575867 115.69092560]
[150.52688599 123.80790710]
[146.22743225 131.34976196]
[157.39901733 141.35954285]
[168.57058716 151.36932373]
[179.74217224 161.37910461]
[190.91375732 171.38888550]
[202.08534241 181.39868164]
[218.23686218 184.23780823]
[223.59887695 199.73558044]
[212.65541077 211.94920349]
[196.66416931 208.31436157]
[192.07556152 192.57025146]
[180.90397644 182.56047058]
[169.73239136 172.55068970]
[158.56080627 162.54090881]
[147.38922119 152.53112793]
[136.21765137 142.52134705]
[128.02380371 148.31614685]
[118.92523956 152.55110168]
[109.21569824 155.08950806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[14 27]
[15 26]
[16 25]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[37 44]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
