%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUUCCAGGUCCUUCUCCUAUAUAUGUAUAUAGAAGCUCGUCCAAGGUGGCUCUGAACUUGAGCCUAGCGACCUAAGUCUCAGGUCUCACGAUUGGUAAUGUGGUACCUUGGGGAGAACCAUGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[38.86122131 431.51919556]
[27.24608421 441.67263794]
[11.98211861 443.91201782]
[-2.06000447 437.52279663]
[-10.39949322 424.54370117]
[-10.37524700 409.11636353]
[-1.99500263 396.16357422]
[12.06713390 389.81848145]
[14.17020702 374.96664429]
[16.27327919 360.11480713]
[18.20211411 345.23934937]
[19.95644379 330.34228516]
[21.53602791 315.42568970]
[22.94065094 300.49160767]
[24.34527397 285.55752563]
[17.83377075 272.16162109]
[26.82934189 259.14663696]
[28.23396492 244.21253967]
[29.63858795 229.27845764]
[31.04320908 214.34436035]
[25.61704254 209.16683960]
[14.76471043 198.81179810]
[9.33854389 193.63427734]
[-5.51329374 195.73735046]
[-20.36513138 197.84042358]
[-35.21696854 199.94349670]
[-50.06880569 202.04656982]
[-64.92064667 204.14964294]
[-77.49222565 214.67996216]
[-92.80266571 208.80439758]
[-95.10190582 192.56723022]
[-82.02468109 182.67185974]
[-67.02371979 189.29780579]
[-52.17187881 187.19473267]
[-37.32004166 185.09165955]
[-22.46820450 182.98858643]
[-7.61636686 180.88551331]
[7.23547077 178.78244019]
[-7.29501152 175.05885315]
[-17.22259140 163.81416321]
[-19.11657143 148.93421936]
[-12.32244301 135.56111145]
[0.81192911 128.31623840]
[15.74766827 129.70321655]
[27.32339478 139.24273682]
[31.53885651 153.63821411]
[26.93710327 167.91526794]
[36.63865280 156.47497559]
[46.34020233 145.03469849]
[56.04174805 133.59442139]
[65.74330139 122.15415192]
[75.44484711 110.71387482]
[85.14639282 99.27359772]
[88.63097382 84.68395233]
[85.14639282 70.09430695]
[81.66181183 55.50466537]
[78.17723846 40.91501999]
[74.69265747 26.32537651]
[60.62624741 19.49381638]
[54.28922272 5.19779730]
[58.67373276 -9.81253624]
[71.70954132 -18.44976425]
[87.24153900 -16.63565063]
[97.93599701 -5.22676706]
[98.74330902 10.38996315]
[89.28229523 22.84079552]
[92.76687622 37.43043900]
[96.25145721 52.02008438]
[99.73603821 66.60972595]
[103.22061920 81.19937134]
[110.47259521 83.11219025]
[114.29847717 68.60830688]
[128.80229187 72.43443298]
[124.97653961 86.93783569]
[132.22851562 88.85065460]
[142.45562744 77.87768555]
[152.68275452 66.90471649]
[162.90986633 55.93174362]
[173.13697815 44.95877457]
[171.04774475 29.46138191]
[179.45246887 16.27447128]
[194.38270569 11.62449646]
[208.78883362 17.70703316]
[215.86874390 31.65009308]
[212.27951050 46.87019348]
[199.71585083 56.18086243]
[184.10995483 55.18589020]
[173.88282776 66.15885925]
[163.65571594 77.13182831]
[153.42860413 88.10479736]
[143.20147705 99.07777405]
[149.18450928 112.83289337]
[164.18450928 112.83289337]
[179.18450928 112.83289337]
[194.18450928 112.83289337]
[209.18450928 112.83289337]
[218.19592285 100.20063019]
[232.92202759 95.30963898]
[247.70030212 100.04059601]
[256.84823608 112.57435608]
[256.84823608 128.09143066]
[247.70030212 140.62518311]
[232.92202759 145.35614014]
[218.19592285 140.46514893]
[209.18450928 127.83289337]
[194.18450928 127.83289337]
[179.18450928 127.83289337]
[164.18450928 127.83289337]
[149.18450928 127.83289337]
[111.21772766 131.09646606]
[96.58666992 108.97514343]
[86.88512421 120.41542053]
[77.18357849 131.85569763]
[67.48202515 143.29597473]
[57.78047943 154.73625183]
[48.07892990 166.17652893]
[38.37738037 177.61680603]
[45.97729874 215.74897766]
[44.57267761 230.68307495]
[43.16805649 245.61715698]
[41.76343155 260.55123901]
[48.17446518 275.01531982]
[39.27936172 286.96212769]
[37.87474060 301.89624023]
[36.47011948 316.83032227]
[38.79683685 325.76248169]
[34.85350037 332.09661865]
[33.09917068 346.99368286]
[35.21585464 355.97793579]
[31.12511826 362.21789551]
[29.02204514 377.06973267]
[26.91897202 391.92156982]
[38.66661453 401.92138672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 132]
[9 131]
[10 130]
[11 128]
[12 127]
[13 125]
[14 124]
[15 123]
[17 121]
[18 120]
[19 119]
[20 118]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[47 117]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
