%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUCUUUUCAUACACAGUCUUCACCCUAAGCUUGGGUGCGGAGGUAACCUCUGGUCUUAGGGGUGGCGCCUCCUUCGAAUCGAACUCAGACCGCGGAAUCUGGUGAGCCGGUAGGACUGUGUGACGU\
) } def
/len { sequence length } bind def

/coor [
[89.87000275 373.31423950]
[78.56727600 383.36926270]
[64.70975494 389.43756104]
[49.65505981 390.92462158]
[34.87810135 387.68478394]
[21.82656670 380.03543091]
[11.77911854 368.72595215]
[5.72010136 354.86437988]
[4.24311590 339.80868530]
[7.49286222 325.03390503]
[15.15096378 311.98748779]
[26.46715736 301.94763184]
[40.33279800 295.89791870]
[55.38946915 294.43099976]
[58.60190964 279.77902222]
[61.81435394 265.12707520]
[65.02679443 250.47509766]
[68.23923492 235.82313538]
[71.45167542 221.17115784]
[74.66411591 206.51919556]
[77.87655640 191.86721802]
[81.08899689 177.21525574]
[84.30143738 162.56327820]
[87.51388550 147.91131592]
[78.18164062 136.16783142]
[63.18271637 135.98797607]
[48.18379593 135.80812073]
[33.18487167 135.62826538]
[18.18595123 135.44839478]
[8.12927246 147.42326355]
[-7.28075171 150.08129883]
[-20.76798058 142.16746521]
[-25.96415520 127.41844177]
[-20.41580200 112.79825592]
[-6.74268389 105.21012115]
[8.59917164 108.23691559]
[18.36580849 120.44947815]
[33.36473083 120.62934113]
[48.36365128 120.80919647]
[63.36257553 120.98905182]
[78.36149597 121.16891479]
[72.85525513 97.35178375]
[86.25539398 79.98975372]
[81.99803162 65.60660553]
[77.74067688 51.22345734]
[73.48332214 36.84030914]
[69.22596741 22.45716476]
[64.96861267 8.07401657]
[49.72221756 -5.01267958]
[54.80000687 -23.60970688]
[49.85794830 -37.77219391]
[44.91588974 -51.93468475]
[39.97383118 -66.09716797]
[35.03177261 -80.25965881]
[30.08971596 -94.42214966]
[25.14765930 -108.58463287]
[12.38020325 -118.87657928]
[15.17655945 -135.03555298]
[30.66007423 -140.43858337]
[42.90263748 -129.52751160]
[39.31014633 -113.52669525]
[44.25220490 -99.36420441]
[49.19426346 -85.20171356]
[54.13631821 -71.03923035]
[59.07837677 -56.87673950]
[64.02043915 -42.71425247]
[68.96249390 -28.55176544]
[78.63471222 -24.89748764]
[84.78360748 -16.31192970]
[85.14457703 -5.53680563]
[79.35176086 3.81666088]
[83.60911560 18.19980812]
[87.86647034 32.58295441]
[92.12382507 46.96610260]
[96.38117981 61.34925079]
[100.63853455 75.73239899]
[111.33022308 77.40658569]
[120.63623047 83.73683167]
[126.56217957 93.81123352]
[127.65393829 105.88323212]
[123.33577728 117.67182159]
[114.08918762 126.79258728]
[129.08810425 126.97244263]
[144.08703613 127.15229797]
[159.08595276 127.33216095]
[168.90118408 118.86447906]
[181.45146179 119.37992096]
[189.97467041 128.05110168]
[204.96496582 128.59057617]
[219.95527649 129.13003540]
[226.11172485 126.30709076]
[231.88026428 126.98958588]
[235.64640808 130.07191467]
[250.59359741 131.32946777]
[265.54080200 132.58703613]
[280.48797607 133.84458923]
[291.37942505 122.62361145]
[306.94064331 121.08016205]
[319.82412720 129.94302368]
[323.94665527 145.02740479]
[317.36172485 159.21093750]
[303.17852783 165.79658508]
[288.09393311 161.67480469]
[279.23043823 148.79177856]
[264.28323364 147.53422546]
[249.33604431 146.27667236]
[234.38885498 145.01910400]
[219.41580200 144.12033081]
[204.42550659 143.58087158]
[189.43521118 143.04139709]
[174.45770264 152.10519409]
[158.90609741 142.33108521]
[143.90716553 142.15121460]
[128.90824890 141.97135925]
[113.90932465 141.79150391]
[102.16585541 151.12374878]
[98.95340729 165.77572632]
[95.74096680 180.42768860]
[92.52852631 195.07966614]
[89.31608582 209.73162842]
[86.10364532 224.38360596]
[82.89120483 239.03556824]
[79.67876434 253.68754578]
[76.46632385 268.33950806]
[73.25388336 282.99148560]
[70.04144287 297.64346313]
[83.10321045 305.27529907]
[93.16580963 316.57128906]
[99.24339294 330.42474365]
[100.74055481 345.47845459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[21 119]
[22 118]
[23 117]
[24 116]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[82 115]
[83 114]
[84 113]
[85 112]
[88 110]
[89 109]
[90 108]
[93 107]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
