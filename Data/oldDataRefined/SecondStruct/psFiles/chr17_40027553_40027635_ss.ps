%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCAGUCCCUGGUUCACCGAGGAAGUUUCGAGACUCCGAGUCUUAGGAAAAGAACUCAGAGUUGACCUUGUAGUAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[57.78213120 371.55062866]
[43.29043579 376.63848877]
[28.19930458 373.78308105]
[16.56817245 363.75250244]
[11.52575684 349.24493408]
[14.42844200 334.16284180]
[24.49542046 322.56320190]
[39.01872635 317.56628418]
[41.80739975 302.82778931]
[44.59607315 288.08929443]
[47.38475037 273.35079956]
[50.17342377 258.61230469]
[52.96209717 243.87379456]
[47.72583389 229.92994690]
[57.89385605 217.80882263]
[51.49003220 211.05474854]
[49.01780701 201.93658447]
[51.19643021 192.59996033]
[57.63420105 185.30755615]
[66.89132690 181.89082336]
[71.31266022 167.55723572]
[75.73398590 153.22364807]
[80.15531158 138.89004517]
[84.57663727 124.55645752]
[78.23664093 119.16392517]
[73.68955231 112.19261932]
[71.30997467 104.21687317]
[71.29393005 95.89372253]
[73.64276123 87.90885925]
[78.16294861 80.92008972]
[84.48212433 75.50315857]
[92.07968903 72.10433197]
[100.32975006 71.00360107]
[108.55263519 72.29165649]
[116.53311920 59.59079742]
[124.51360321 46.88993454]
[132.49407959 34.18907166]
[140.47456360 21.48820686]
[141.26533508 5.68677568]
[154.58801270 -0.97322142]
[162.56849670 -13.67408466]
[170.54898071 -26.37494659]
[178.52946472 -39.07580948]
[186.27105713 -51.92367935]
[193.77105713 -64.91406250]
[201.27105713 -77.90444183]
[198.52439880 -93.71062469]
[209.27700806 -105.61695099]
[225.28042603 -104.48990631]
[234.25819397 -91.19406128]
[229.32331848 -75.92885590]
[214.26142883 -70.40444183]
[206.76142883 -57.41405869]
[199.26142883 -44.42367935]
[198.62913513 -36.87248611]
[191.23031616 -31.09532928]
[183.24983215 -18.39446640]
[175.26936340 -5.69360352]
[167.28887939 7.00725985]
[167.06892395 21.90023994]
[153.17543030 29.46868896]
[145.19494629 42.16955185]
[137.21446228 54.87041473]
[129.23397827 67.57128143]
[121.25350189 80.27214050]
[128.97805786 101.08245087]
[119.72248840 121.25848389]
[98.91023254 128.97778320]
[94.48890686 143.31138611]
[90.06757355 157.64497375]
[85.64624786 171.97856140]
[81.22492218 186.31214905]
[87.59525299 206.59228516]
[72.63235474 220.59748840]
[77.66915131 235.59553528]
[67.70059204 246.66247559]
[64.91191864 261.40097046]
[62.12324524 276.13946533]
[59.33457184 290.87796021]
[56.54589844 305.61645508]
[53.75722504 320.35494995]
[65.45101166 330.31240845]
[70.58427429 344.78808594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[15 74]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[40 59]
[41 58]
[42 57]
[43 56]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
