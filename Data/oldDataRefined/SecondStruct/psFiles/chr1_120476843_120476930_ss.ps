%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUGUCUUUCCAGGGUCACUCUGAACUUGAGACUAGUGACAUAAGUCUCAGGUUUCACGAGUGGUAAUGUGGUACCUUGGAGUGUGA\
) } def
/len { sequence length } bind def

/coor [
[104.75661469 379.91781616]
[89.64083099 378.31112671]
[76.29293060 371.03775024]
[66.74835205 359.20687866]
[62.46259308 344.62261963]
[64.08919525 329.50897217]
[71.38011169 316.17062378]
[83.22352600 306.64163208]
[97.81341553 302.37506104]
[99.39889526 287.45907593]
[100.98437500 272.54312134]
[102.56985474 257.62713623]
[104.15532684 242.71116638]
[105.74080658 227.79519653]
[107.32628632 212.87921143]
[108.91176605 197.96324158]
[110.49724579 183.04727173]
[109.43916321 168.08464050]
[105.77038574 153.54022217]
[102.10161591 138.99580383]
[98.43283844 124.45137787]
[94.76406860 109.90695953]
[90.83917999 95.42955780]
[86.65939331 81.02367401]
[82.47961426 66.61779785]
[78.29983521 52.21191406]
[73.86646271 37.88204193]
[69.18087769 23.63264465]
[64.49529266 9.38324738]
[59.80971146 -4.86614943]
[55.12413025 -19.11554718]
[50.43854523 -33.36494446]
[45.75296402 -47.61434174]
[41.06738281 -61.86373901]
[36.38179779 -76.11313629]
[21.42206383 -79.88273621]
[10.89182186 -91.15737152]
[8.15123367 -106.33936310]
[14.07481194 -120.58417511]
[26.77236557 -129.34635925]
[42.19214630 -129.82991028]
[55.41376495 -121.88054657]
[62.21824646 -108.03487396]
[60.43430710 -92.71100616]
[50.63119507 -80.79871368]
[55.31678009 -66.54932404]
[60.00236130 -52.29992294]
[64.68794250 -38.05052567]
[69.37352753 -23.80112839]
[74.05911255 -9.55173206]
[78.74468994 4.69766474]
[83.43027496 18.94706154]
[88.11585999 33.19645691]
[93.31140900 38.68828964]
[92.70571136 48.03213120]
[96.88549805 62.43801117]
[101.06527710 76.84389496]
[105.24505615 91.24977875]
[110.44521332 97.66213226]
[109.30848694 106.23818970]
[112.97725677 120.78260803]
[116.64603424 135.32702637]
[120.31480408 149.87144470]
[123.98358154 164.41586304]
[131.56704712 151.47402954]
[144.48965454 143.85784912]
[159.48519897 143.49230957]
[172.76354980 150.46980286]
[180.96859741 163.02676392]
[182.02650452 177.98942566]
[175.66987610 191.57592773]
[163.50538635 200.35231018]
[148.60757446 202.10032654]
[134.74191284 196.37815857]
[125.41321564 184.63275146]
[123.82773590 199.54872131]
[122.24226379 214.46469116]
[120.65678406 229.38067627]
[119.07130432 244.29664612]
[117.48582458 259.21261597]
[115.90034485 274.12860107]
[114.31486511 289.04455566]
[112.72939301 303.96054077]
[126.09638977 311.19876099]
[135.67205811 323.00448608]
[139.99617004 337.57742310]
[138.40933228 352.69528198]
[131.15353394 366.05276489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 58]
[24 57]
[25 56]
[26 55]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
