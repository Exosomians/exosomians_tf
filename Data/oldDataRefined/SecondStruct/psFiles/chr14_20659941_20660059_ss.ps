%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUCUCAGUCCGCGAAGGAAGCUCGGCCUUAACUUGGUCGCUGGAUUCCUACAGGUGUUUGCAAAGGCGUCAGAUGUCAGGAGGCGAGAUGGUCGACUCGAUAGCUUCCUACGUGUG\
) } def
/len { sequence length } bind def

/coor [
[77.24183655 343.73104858]
[69.46319580 356.76397705]
[57.49938202 366.10375977]
[42.96841049 370.48727417]
[27.83547020 369.32168579]
[14.14716911 362.76464844]
[3.75473857 351.70291138]
[-1.93633199 337.63250732]
[-2.15637159 322.45635986]
[3.12437820 308.22686768]
[13.19173908 296.86849976]
[26.68418503 289.91735840]
[41.77696991 288.31353760]
[45.65925598 273.82464600]
[49.54154205 259.33575439]
[53.42382812 244.84686279]
[49.24422836 230.55070496]
[60.28963470 219.22332764]
[64.17192078 204.73443604]
[68.05420685 190.24554443]
[71.93649292 175.75666809]
[75.81877899 161.26777649]
[79.70106506 146.77888489]
[83.58335114 132.29000854]
[87.46563721 117.80111694]
[79.62815857 105.01151276]
[64.95594025 101.89283752]
[50.28372955 98.77416229]
[35.61151505 95.65548706]
[20.93930054 92.53681183]
[8.72893333 102.30619812]
[-6.90310049 101.88963318]
[-18.57583427 91.48380280]
[-20.77775764 76.00202179]
[-12.46919250 62.75431442]
[2.42681265 57.99584198]
[16.87681961 63.97341156]
[24.05797577 77.86459351]
[38.73019028 80.98326874]
[53.40240479 84.10194397]
[68.07461548 87.22061920]
[82.74683380 90.33929443]
[95.83427429 83.00997925]
[100.84137726 68.87035370]
[98.15446472 53.27897644]
[109.69641876 43.86448669]
[103.14307404 29.73326492]
[108.42240906 15.46500492]
[121.93476105 9.30447865]
[126.94186401 -4.83514357]
[131.94895935 -18.97476578]
[136.95606995 -33.11438751]
[141.77766418 -47.31834030]
[146.41291809 -61.58418655]
[151.04817200 -75.85003662]
[144.12715149 -89.80487061]
[149.03118896 -104.20643616]
[162.37763977 -110.71856689]
[167.01289368 -124.98441315]
[161.84654236 -136.89051819]
[166.09109497 -148.72877502]
[176.92944336 -154.27218628]
[181.93655396 -168.41181946]
[186.94364929 -182.55143738]
[183.42475891 -198.56858826]
[195.71733093 -209.42329407]
[211.17585754 -203.94914246]
[213.89790344 -187.77748108]
[201.08328247 -177.54432678]
[196.07617188 -163.40470886]
[191.06907654 -149.26509094]
[195.23617554 -132.27239990]
[181.27874756 -120.34915924]
[176.64349365 -106.08330536]
[183.61326599 -92.97003937]
[179.11567688 -78.43640900]
[165.31401062 -71.21478271]
[160.67875671 -56.94893265]
[156.04350281 -42.68308640]
[156.98060608 -35.25798035]
[151.09568787 -28.10728455]
[146.08859253 -13.96766281]
[141.08148193 0.17195944]
[136.07438660 14.31158161]
[142.69850159 27.60280418]
[137.82200623 42.01372147]
[123.83603668 48.87158966]
[126.88108826 63.45160675]
[114.98099518 73.87745667]
[109.97389221 88.01708221]
[113.97933960 89.74544525]
[117.65692902 92.75983429]
[120.61044312 96.98226929]
[122.46755981 102.21725464]
[135.83265686 109.02710724]
[149.19775391 115.83696747]
[162.56285095 122.64682770]
[179.42060852 124.45030975]
[182.35429382 141.14851379]
[167.12078857 148.59007263]
[155.75299072 136.01191711]
[142.38789368 129.20207214]
[129.02279663 122.39220428]
[115.65770721 115.58235168]
[101.95452118 121.68340302]
[98.07223511 136.17228699]
[94.18994904 150.66117859]
[90.30766296 165.15005493]
[86.42537689 179.63894653]
[82.54309082 194.12783813]
[78.66080475 208.61672974]
[74.77851868 223.10560608]
[78.68043518 238.43811035]
[67.91271210 248.72915649]
[64.03042603 263.21804810]
[60.14814377 277.70693970]
[56.26585770 292.19583130]
[68.53468323 301.13116455]
[76.74391174 313.89724731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 117]
[14 116]
[15 115]
[16 114]
[18 112]
[19 111]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[43 90]
[44 89]
[46 87]
[49 84]
[50 83]
[51 82]
[52 81]
[53 79]
[54 78]
[55 77]
[58 74]
[59 73]
[62 71]
[63 70]
[64 69]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
