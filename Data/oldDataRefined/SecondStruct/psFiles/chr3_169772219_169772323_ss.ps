%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUUCACCCCAAAGGCAUCACAUCACCAAUAGUGCAAGCGGAUUGUGCGCUUUCCAGGGGCCAAGCUUUGGCCCGCCUUUGUGUGAUUUUUUAGGGAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[142.95188904 337.90829468]
[142.33247375 322.83953857]
[145.48075867 308.09033203]
[152.19886780 294.58782959]
[162.06445312 283.18075562]
[174.45739746 274.58624268]
[169.23437500 260.52493286]
[164.01135254 246.46365356]
[158.78833008 232.40235901]
[147.84815979 227.00912476]
[143.43566895 215.20671082]
[148.46527100 203.21553040]
[143.66122437 189.00563049]
[138.85717773 174.79573059]
[134.05313110 160.58584595]
[129.24906921 146.37594604]
[124.44503021 132.16604614]
[119.64098358 117.95615387]
[123.02851105 132.56863403]
[119.17740631 147.06584167]
[108.98473358 158.07081604]
[94.82476044 163.02008057]
[79.99588776 160.76074219]
[67.95233154 151.81912231]
[61.49950027 138.27803040]
[62.14100266 123.29003143]
[47.67147064 119.33622742]
[33.20193481 115.38241577]
[18.61208916 122.05444336]
[4.36473179 114.67932129]
[1.38921857 98.91461945]
[11.96810722 86.85366058]
[27.98618126 87.74858856]
[37.15574265 100.91287994]
[51.62527847 104.86669159]
[66.09481049 108.82049561]
[70.99097443 103.13916016]
[85.67947388 86.09516144]
[79.63262177 72.36797333]
[73.58576965 58.64079285]
[67.53891754 44.91360855]
[61.49206924 31.18642426]
[46.42785645 26.99077034]
[37.62759781 14.06446171]
[39.24650574 -1.48909616]
[50.52018356 -12.32598782]
[66.12554169 -13.32936382]
[78.69421387 -4.02546263]
[82.29164886 11.19269943]
[75.21925354 25.13957214]
[81.26610565 38.86675644]
[87.31295776 52.59394073]
[93.35980988 66.32112122]
[99.40666199 80.04830933]
[106.69683075 81.80995178]
[105.54228973 66.85445404]
[119.40911865 61.13508987]
[129.13349915 72.55596924]
[121.27717590 85.33324432]
[128.56735229 87.09488678]
[140.21520996 77.64356995]
[151.86306763 68.19225311]
[163.51092529 58.74093628]
[175.15878296 49.28961945]
[186.80664062 39.83830261]
[198.45449829 30.38698387]
[206.94422913 15.71181297]
[223.39608765 19.80727768]
[224.01499939 36.74992371]
[207.90580750 42.03484344]
[196.25794983 51.48616028]
[184.61009216 60.93747711]
[172.96223450 70.38879395]
[161.31437683 79.84011078]
[149.66651917 89.29142761]
[138.01866150 98.74275208]
[133.85087585 113.15210724]
[138.65492249 127.36199951]
[143.45896912 141.57189941]
[148.26301575 155.78178406]
[153.06706238 169.99168396]
[157.87110901 184.20158386]
[162.67515564 198.41148376]
[176.76965332 210.14471436]
[172.84962463 227.17933655]
[178.07264709 241.24063110]
[183.29566956 255.30192566]
[188.51869202 269.36322021]
[203.51718140 267.78329468]
[218.43725586 269.98376465]
[232.34103394 275.82635498]
[244.35450745 284.94378662]
[253.72250366 296.76287842]
[259.85614014 310.54074097]
[262.36984253 325.41125488]
[261.10562134 340.43963623]
[256.14291382 354.68121338]
[247.79370117 367.24075317]
[236.58282471 377.32870483]
[223.21499634 384.31097412]
[208.53053284 387.74862671]
[193.45252991 387.42559814]
[178.92877197 383.36218262]
[165.87225342 375.81378174]
[155.10372925 365.25491333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 88]
[7 87]
[8 86]
[9 85]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[26 36]
[27 35]
[28 34]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
