%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAGAAGUCUAAGGUGUCAUCCUCAUAGUCACUACUUAAUUUAAAAGUGGAGUCUUAGACGGGAUACUUUAAGUAGUAAUCUGU\
) } def
/len { sequence length } bind def

/coor [
[95.32447815 406.85446167]
[82.54907990 395.70880127]
[89.72257233 380.34725952]
[90.80493927 365.38635254]
[91.88730621 350.42544556]
[92.96967316 335.46456909]
[94.05204010 320.50366211]
[82.56513977 311.05966187]
[78.79730225 296.49026489]
[84.39639282 282.33032227]
[97.41010284 274.08718872]
[98.49246979 259.12628174]
[99.57483673 244.16539001]
[99.57483673 229.16539001]
[98.49246979 214.20448303]
[97.41010284 199.24359131]
[96.32773590 184.28268433]
[95.24536896 169.32179260]
[94.16300201 154.36088562]
[93.08063507 139.39999390]
[89.93824768 135.52398682]
[89.35841370 129.57304382]
[92.50000000 123.32740784]
[92.50000000 108.32740784]
[92.22918701 93.32984924]
[91.68765259 78.33963013]
[80.39826965 67.60708618]
[80.06261444 52.39715195]
[90.36402893 41.70059204]
[89.82249451 26.71036911]
[81.59201813 13.19852924]
[88.86479187 0.20021887]
[80.63431549 -13.31162167]
[87.90708160 -26.30993271]
[87.36554718 -41.30015182]
[86.82401276 -56.29037476]
[86.28247833 -71.28059387]
[85.74094391 -86.27082062]
[85.19940186 -101.26103973]
[72.75484467 -110.73030090]
[69.35893250 -125.99469757]
[76.61510468 -139.84684753]
[91.09722900 -145.74618530]
[105.96727753 -140.90722656]
[114.20407867 -127.61477661]
[111.91846466 -112.14512634]
[100.18962860 -101.80257416]
[100.73116302 -86.81235504]
[101.27269745 -71.82213593]
[101.81423187 -56.83190918]
[102.35577393 -41.84169006]
[102.89730835 -26.85146904]
[111.08905029 -14.41182804]
[103.85501099 -0.34131733]
[112.04675293 12.09832287]
[104.81271362 26.16883278]
[105.35425568 41.15905380]
[116.40065765 51.08440399]
[117.16339111 66.27890778]
[106.67787170 77.79809570]
[107.21940613 92.78831482]
[110.70191193 100.28240967]
[107.50000000 108.32740784]
[107.50000000 123.32740784]
[108.04153442 138.31762695]
[109.12390137 153.27853394]
[110.20626831 168.23942566]
[111.28863525 183.20031738]
[112.37100220 198.16122437]
[113.45336914 213.12211609]
[114.53573608 228.08302307]
[117.46289062 232.00175476]
[118.69923401 236.23501587]
[118.37519073 240.15840149]
[116.82781219 243.26913452]
[114.53573608 245.24775696]
[113.45336914 260.20864868]
[112.37100220 275.16955566]
[124.06267548 285.20004272]
[127.56529999 300.01846313]
[121.73958588 313.89379883]
[109.01293945 321.58602905]
[107.93057251 336.54693604]
[106.84820557 351.50781250]
[105.76583862 366.46871948]
[104.68347168 381.42962646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[11 78]
[12 77]
[13 76]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[23 64]
[24 63]
[25 61]
[26 60]
[29 57]
[30 56]
[32 54]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
