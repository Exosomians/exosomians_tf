%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGUUAAGGGACUGGCCCUUAGCUUGGGCCCGGCGCCGCCACUUUCGCGGCUUAGGAUCGGUGAUCUGGUGGUCCCUGUGUG\
) } def
/len { sequence length } bind def

/coor [
[97.28946686 298.45681763]
[82.12313843 299.04568481]
[67.76950073 294.11236572]
[56.16976547 284.32409668]
[48.89271164 271.00457764]
[46.92249680 255.95524597]
[50.52557373 241.21134949]
[59.21465302 228.76690674]
[71.81462097 220.30491638]
[86.62142181 216.96978760]
[88.80543518 202.12963867]
[90.98945618 187.28948975]
[93.17346954 172.44932556]
[95.35749054 157.60917664]
[97.54150391 142.76902771]
[99.72552490 127.92887878]
[67.73742676 108.48908997]
[53.22517395 104.69508362]
[38.71291733 100.90108490]
[24.20066071 97.10708618]
[9.68840599 93.31308746]
[-2.96077466 102.50722504]
[-18.55680847 101.36804962]
[-29.73572540 90.43343353]
[-31.21918297 74.86637115]
[-22.30673790 62.01715469]
[-7.20657396 57.95279312]
[6.95147324 64.59234619]
[13.48240662 78.80082703]
[27.99466133 82.59483337]
[42.50691605 86.38883209]
[57.01917267 90.18283081]
[71.53142548 93.97682953]
[77.93338013 90.06977844]
[70.11946869 77.26576233]
[82.92360687 69.45205688]
[90.73727417 82.25567627]
[97.13922119 78.34862518]
[100.40067291 63.70748520]
[103.66212463 49.06634521]
[106.92357635 34.42520905]
[110.18502808 19.78406906]
[100.53504944 7.47911644]
[101.10387421 -8.14811802]
[111.62291718 -19.71893120]
[127.12541199 -21.76993942]
[140.29154968 -13.33271980]
[144.90469360 1.60893178]
[138.78665161 16.00002289]
[124.82617188 23.04552269]
[121.56472015 37.68666077]
[118.30326843 52.32779694]
[115.04180908 66.96893311]
[111.78035736 81.61007690]
[116.03216553 87.78843689]
[125.15649414 75.88269043]
[139.29904175 80.88153839]
[138.91494751 95.87661743]
[124.53578949 100.14514923]
[128.78759766 106.32350922]
[143.62774658 108.50753021]
[158.46789551 110.69154358]
[173.30804443 112.87556458]
[188.14819336 115.05957794]
[203.18505859 108.51552582]
[216.20814514 118.48204041]
[213.82040405 134.70642090]
[198.47816467 140.49842834]
[185.96418762 129.89973450]
[171.12402344 127.71571350]
[156.28387451 125.53169250]
[141.44372559 123.34767914]
[126.60357666 121.16365814]
[114.56567383 130.11289978]
[112.38165283 144.95304871]
[110.19763947 159.79319763]
[108.01361847 174.63334656]
[105.82960510 189.47349548]
[103.64558411 204.31364441]
[101.46157074 219.15380859]
[114.67972565 226.61334229]
[124.30756378 238.34660339]
[129.04299927 252.76672363]
[128.24560547 267.92352295]
[122.02322388 281.76718140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
