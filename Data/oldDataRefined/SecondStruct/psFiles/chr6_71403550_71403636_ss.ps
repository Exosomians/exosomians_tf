%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCGACGUUUGUAGGCUGACUUUCGGGUAGACACCGAAGUGUCGAAGGUCAGCUCCUACAAAUGUCAGCGAGUGACAGUUGUCGU\
) } def
/len { sequence length } bind def

/coor [
[106.78537750 152.73944092]
[113.64339447 140.63549805]
[106.45465851 127.47030640]
[99.26592255 114.30512238]
[87.42817688 106.86473846]
[87.56889343 92.88361359]
[80.38015747 79.71842957]
[73.19142151 66.55324554]
[66.00268555 53.38805771]
[58.81395340 40.22287369]
[51.62521744 27.05768776]
[44.43648529 13.89250374]
[37.24774933 0.72731853]
[30.05901527 -12.43786621]
[22.87027931 -25.60305214]
[15.68154526 -38.76823425]
[8.02749443 -51.66844940]
[-0.08211789 -64.28725433]
[-8.19173050 -76.90605927]
[-16.30134201 -89.52485657]
[-24.41095543 -102.14366150]
[-32.52056885 -114.76246643]
[-40.63018036 -127.38127136]
[-48.73979187 -140.00007629]
[-56.84940338 -152.61886597]
[-64.95901489 -165.23767090]
[-68.95346832 -166.92938232]
[-71.96881866 -169.50598145]
[-73.85163879 -172.57421875]
[-74.58450317 -175.73081970]
[-74.27813721 -178.60548401]
[-73.15100861 -180.89843750]
[-78.89125824 -194.75662231]
[-84.63151550 -208.61482239]
[-90.37176514 -222.47302246]
[-96.11201477 -236.33120728]
[-109.44464111 -245.87966919]
[-107.57267761 -262.17163086]
[-92.42184448 -268.44729614]
[-79.57801056 -258.25082397]
[-82.25382233 -242.07145691]
[-76.51357269 -228.21327209]
[-70.77332306 -214.35507202]
[-65.03306580 -200.49688721]
[-59.29281616 -186.63868713]
[-52.34021378 -173.34729004]
[-44.23060226 -160.72848511]
[-36.12098694 -148.10968018]
[-28.01137543 -135.49087524]
[-19.90176392 -122.87207794]
[-11.79215145 -110.25327301]
[-3.68253946 -97.63446808]
[4.42707300 -85.01567078]
[12.53668499 -72.39686584]
[20.64629745 -59.77806091]
[25.25597763 -57.87886047]
[28.61103058 -52.93679810]
[28.84672928 -45.95697021]
[36.03546524 -32.79178619]
[43.22420120 -19.62660027]
[50.41293335 -6.46141624]
[57.60166931 6.70376873]
[64.79040527 19.86895370]
[71.97914124 33.03413773]
[79.16786957 46.19932175]
[86.35660553 59.36450958]
[93.54534149 72.52969360]
[100.73407745 85.69487762]
[112.57182312 93.13526154]
[112.43110657 107.11638641]
[119.61984253 120.28157043]
[126.80857849 133.44676208]
[143.50796509 135.32772827]
[155.73208618 146.61793518]
[158.86874390 162.79209900]
[151.89195251 177.53543091]
[159.54600525 190.43563843]
[167.20005798 203.33586121]
[181.75585938 210.88969421]
[182.22154236 227.28222656]
[168.11804199 235.65022278]
[153.95382690 227.38540649]
[154.29983521 210.98991394]
[146.64578247 198.08969116]
[138.99174500 185.18948364]
[125.51595306 185.16461182]
[113.74682617 178.37974548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
