%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUGAUUUUAACCUUGCUAUGUCUCUUCUAAUCGUACCGGGGACGCGUUCCUACUGUGCGUUUAAGCACUUC\
) } def
/len { sequence length } bind def

/coor [
[93.47283173 180.52684021]
[79.66848755 178.19082642]
[66.47471619 173.50666809]
[54.28773880 166.61505127]
[43.47354507 157.72291565]
[34.35688782 147.09732056]
[27.21155167 135.05734253]
[22.25211716 121.96456146]
[19.62751961 108.21216583]
[19.41658020 94.21315765]
[21.62563133 80.38792419]
[26.18833351 67.15166473]
[32.96766663 54.90187073]
[41.76003647 44.00641251]
[31.95872879 32.65148544]
[22.15741920 21.29656029]
[12.35610962 9.94163418]
[2.55480075 -1.41329134]
[-12.31961441 -6.80424213]
[-14.77877808 -21.49443626]
[-24.58008766 -32.84936142]
[-34.38139725 -44.20428848]
[-44.18270493 -55.55921173]
[-59.07484436 -52.02610779]
[-73.90021515 -55.82965469]
[-85.25205231 -66.09582520]
[-90.52179718 -80.46553040]
[-88.49849701 -95.63671112]
[-79.64708710 -108.12315369]
[-66.00155640 -115.05554962]
[-50.69755554 -114.84089661]
[-37.25182343 -107.52851105]
[-28.75409698 -94.79873657]
[-27.15708923 -79.57677460]
[-32.82777786 -65.36051941]
[-23.02647018 -54.00559616]
[-13.22516155 -42.65066910]
[-3.42385221 -31.29574394]
[10.74950790 -26.71697426]
[13.90972614 -11.21460056]
[23.71103477 0.14032547]
[33.51234436 11.49525166]
[43.31365204 22.85017776]
[53.11496353 34.20510483]
[67.05830383 26.22995377]
[82.30382538 21.17094040]
[98.24888611 19.22804451]
[114.26316071 20.47806931]
[129.71362305 24.87160110]
[143.98948669 32.23496628]
[156.52645874 42.27708435]
[166.82893372 54.60099411]
[174.48963928 68.71952820]
[179.20578003 84.07458496]
[180.79090881 100.05917358]
[179.18237305 116.04141998]
[174.44374084 131.38955688]
[166.76235962 145.49685669]
[178.32005310 155.05821228]
[189.87774658 164.61956787]
[201.43545532 174.18092346]
[217.14402771 172.44427490]
[229.42727661 182.38900757]
[230.99774170 198.11506653]
[220.92370605 210.29248047]
[205.18191528 211.69660950]
[193.11169434 201.49438477]
[191.87408447 185.73863220]
[180.31639099 176.17726135]
[168.75869751 166.61590576]
[157.20098877 157.05455017]
[146.49205017 166.07316589]
[134.38691711 173.10755920]
[121.24912262 177.94645691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[20 38]
[21 37]
[22 36]
[23 35]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
