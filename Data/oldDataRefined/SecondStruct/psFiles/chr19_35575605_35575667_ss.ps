%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGUAGUCUGGGGUCUUUUCCACAACCAACUAUAUCUGUCGUCCUGCCACCGGUACCUUCAG\
) } def
/len { sequence length } bind def

/coor [
[89.71738434 259.11239624]
[97.68744659 244.78025818]
[96.95143127 229.79832458]
[96.21541595 214.81639099]
[87.34406281 206.25410461]
[86.82125092 193.52957153]
[95.49533844 183.65791321]
[95.49533844 168.65791321]
[95.12722015 153.66242981]
[94.39120483 138.68049622]
[93.65518951 123.69857025]
[92.91917419 108.71663666]
[91.81570435 93.75727844]
[90.34545135 78.82950592]
[88.87519073 63.90173721]
[75.67633820 58.69288635]
[66.11559296 48.29867935]
[62.06409836 34.83957672]
[64.27710724 21.02697182]
[72.25393677 9.61697483]
[84.34977722 2.86049032]
[75.94465637 -10.54340744]
[83.04813385 -23.63500023]
[82.31211853 -38.61693192]
[81.57610321 -53.59886551]
[67.49616241 -59.49105453]
[57.37351990 -70.91448975]
[53.21804047 -85.60104370]
[55.85479355 -100.63468170]
[64.76025391 -113.03046417]
[78.16623688 -120.32720947]
[93.41096497 -121.07613373]
[107.46759796 -115.12854004]
[117.54517365 -103.66533661]
[121.64279175 -88.96253204]
[118.94685364 -73.93939209]
[109.99264526 -61.57877350]
[96.55803680 -54.33488083]
[97.29405212 -39.35294724]
[98.03006744 -24.37101555]
[106.38254547 -12.03872585]
[99.33171082 2.12447524]
[113.75143433 9.02269173]
[122.86529541 22.26732063]
[124.17082214 38.38451767]
[117.22843933 53.09080505]
[103.80296326 62.43148041]
[105.27322388 77.35925293]
[106.74347687 92.28701782]
[110.73256683 99.66741943]
[107.90110779 107.98062134]
[108.63712311 122.96255493]
[109.37313843 137.94448853]
[110.10915375 152.92642212]
[113.76776123 161.71435547]
[110.49533844 168.65791321]
[110.49533844 183.65791321]
[120.11312103 199.15390015]
[111.19734955 214.08038330]
[111.93336487 229.06231689]
[112.66938019 244.04425049]
[122.00585175 257.52618408]
[114.75472260 272.23510742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[7 57]
[8 56]
[9 54]
[10 53]
[11 52]
[12 51]
[13 49]
[14 48]
[15 47]
[21 42]
[23 40]
[24 39]
[25 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
