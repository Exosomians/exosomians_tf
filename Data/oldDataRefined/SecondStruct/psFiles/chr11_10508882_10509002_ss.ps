%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGAAGGGUGAUAAAACGAUGUAUCUGCCCACACGAGAAAAUCGACAAGAAUCCAUCGAGCAGACCAAAGCCCCCAGAAUCGAAACCAAGAGAAACGUUUCAAUAAAGAUCAAUUAAGU\
) } def
/len { sequence length } bind def

/coor [
[137.45144653 183.03022766]
[137.06523132 168.03520203]
[136.67901611 153.04017639]
[136.29278564 138.04515076]
[117.48725128 146.43965149]
[98.06124878 146.62631226]
[81.25368500 139.48612976]
[69.51892090 127.05126190]
[56.65920258 134.77314758]
[43.79948044 142.49504089]
[30.93976212 150.21693420]
[18.18052864 158.10375977]
[5.52389574 166.15420532]
[-7.13273764 174.20463562]
[-19.78937149 182.25508118]
[-20.61330032 197.75027466]
[-30.41383934 209.78060913]
[-45.42248154 213.72019958]
[-59.86809540 208.05416870]
[-68.19605255 194.96124268]
[-67.20407867 179.47590637]
[-57.27360916 167.55259705]
[-42.22311401 163.77604675]
[-27.83981323 169.59844971]
[-15.18318081 161.54800415]
[-2.52654743 153.49755859]
[10.13008595 145.44712830]
[14.13265038 139.12759399]
[23.21787071 137.35720825]
[36.07759094 129.63533020]
[48.93730927 121.91342926]
[61.79702759 114.19153595]
[59.40293121 103.56999969]
[59.90655899 92.69364166]
[63.27196503 82.33879089]
[69.25893402 73.24456024]
[59.94979095 61.48276138]
[50.64064789 49.72096634]
[35.76861954 52.97429276]
[21.01897049 49.46219254]
[9.30479908 39.93337631]
[2.91574168 26.31937790]
[3.07054567 11.34321499]
[9.68494701 -2.02522445]
[0.37580505 -13.78702164]
[-15.32927990 -17.06266975]
[-22.43132019 -31.44809914]
[-15.48224068 -45.90803909]
[0.18722165 -49.35005951]
[12.55679512 -39.13373947]
[12.13760185 -23.09616470]
[21.44674492 -11.33436680]
[35.97701645 -14.70136166]
[50.58834076 -11.41218567]
[62.37087250 -2.06697536]
[68.95433044 11.52266407]
[68.98471832 26.68465805]
[62.40244675 40.41182327]
[71.71158600 52.17362213]
[81.02072906 63.93541718]
[112.16493225 54.94685745]
[144.57847595 72.11882782]
[149.50660706 57.95148849]
[140.53620911 45.29006958]
[140.75485229 29.77453423]
[150.07849121 17.37092400]
[164.92196655 12.84867954]
[179.57768250 17.94669724]
[188.41020203 30.70468330]
[188.02323914 46.21693420]
[178.56561279 58.51866913]
[163.67395020 62.87962341]
[158.74580383 77.04695892]
[162.77102661 83.37528229]
[173.88806152 73.30494690]
[185.00509644 63.23460770]
[195.04484558 52.08995819]
[209.99272156 53.33937073]
[218.04304504 65.99607849]
[212.83776855 80.06394958]
[198.48826599 84.43239594]
[184.65486145 90.23215485]
[170.82147217 96.03191376]
[174.84669495 102.36022949]
[189.76719666 103.90254211]
[204.68768311 105.44486237]
[219.60818481 106.98717499]
[234.52868652 108.52948761]
[243.46995544 96.04151917]
[257.46392822 89.71187592]
[272.74627686 91.24320221]
[285.20617676 100.22357178]
[291.49191284 114.23731232]
[289.91268921 129.51480103]
[280.89331055 141.94647217]
[266.85995483 148.18826294]
[251.58747864 146.56115723]
[239.18414307 137.50285339]
[232.98637390 123.44998932]
[218.06587219 121.90766907]
[203.14537048 120.36535645]
[188.22488403 118.82304382]
[173.30438232 117.28072357]
[167.80023193 122.37527466]
[180.15478516 130.88204956]
[192.50932312 139.38882446]
[207.24192810 142.20849609]
[217.48295593 153.16848755]
[219.29808044 168.05825806]
[211.99000549 181.15756226]
[198.36625671 187.43400574]
[183.66073608 184.47634888]
[173.52290344 173.42083740]
[171.84783936 158.51280212]
[164.31990051 145.53858948]
[156.79196167 132.56437683]
[151.28781128 137.65892029]
[151.67404175 152.65396118]
[152.06025696 167.64898682]
[152.44647217 182.64401245]
[155.13243103 201.83868408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[8 32]
[9 31]
[10 30]
[11 29]
[12 27]
[13 26]
[14 25]
[15 24]
[36 60]
[37 59]
[38 58]
[44 52]
[45 51]
[62 73]
[63 72]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
