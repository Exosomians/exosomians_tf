%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCCCUUUUUUUUUUAUGGAGUGUGACCGUCGCCACCCUAAGCUUGGGUGCGGGGGCUUCUCUGACCUCGGAAUUAGGUCGCGGAAUCUGGCGAGCCGGUGCGAUGGUGGGUG\
) } def
/len { sequence length } bind def

/coor [
[-6.50970173 247.35209656]
[-16.15151596 258.84274292]
[-25.79332924 270.33343506]
[-35.43514252 281.82409668]
[-45.07695770 293.31475830]
[-37.73386765 306.59796143]
[-35.68896103 321.63732910]
[-39.21879578 336.39892578]
[-47.84598923 348.88635254]
[-60.40378571 357.41079712]
[-75.19384766 360.81939697]
[-90.21593475 358.65118408]
[-103.43844604 351.19934082]
[-113.07312775 339.47171021]
[-117.81697845 325.05435181]
[-117.02843475 309.89709473]
[-110.81413269 296.04980469]
[-100.01451111 285.38525391]
[-86.09012604 279.34573364]
[-70.92414093 278.74801636]
[-56.56762314 283.67294312]
[-46.92581177 272.18228149]
[-37.28399658 260.69161987]
[-27.64218330 249.20094299]
[-18.00036812 237.71028137]
[-16.43210983 217.20407104]
[3.55188751 209.71417236]
[4.61367893 194.85746765]
[18.91292953 188.08679199]
[27.59886360 175.85754395]
[36.28479767 163.62829590]
[44.97073364 151.39904785]
[53.65666580 139.16979980]
[62.34260178 126.94054413]
[71.02853394 114.71129608]
[79.71446991 102.48204041]
[78.90931702 87.50366974]
[68.96247864 76.27600861]
[59.01564026 65.04834747]
[49.06880188 53.82068634]
[39.12195969 42.59302139]
[23.49591827 43.19369888]
[11.17131901 33.56882095]
[7.96746302 18.26296234]
[15.39711189 4.50308084]
[29.95221329 -1.21382749]
[44.76029205 3.81158638]
[52.82942963 17.20647621]
[50.34962082 32.64618301]
[60.29646301 43.87384415]
[70.24330139 55.10150528]
[80.19013977 66.32917023]
[90.13697815 77.55683136]
[104.74798584 74.16294098]
[108.72744751 59.70044327]
[112.70690918 45.23794174]
[116.68636322 30.77544212]
[120.66582489 16.31294250]
[116.86692047 0.95459217]
[127.70348358 -9.26393509]
[119.67648315 -22.87800217]
[123.70797729 -38.15945053]
[137.40614319 -46.04206085]
[152.64411926 -41.84922791]
[160.38146973 -28.06848145]
[156.02775574 -12.87569332]
[142.16598511 -5.28447628]
[146.24951172 9.03941917]
[135.12832642 20.29240227]
[131.14886475 34.75490189]
[127.16940308 49.21740341]
[123.18994904 63.67990112]
[119.21048737 78.14240265]
[123.38772583 84.37142181]
[129.99938965 70.90717316]
[144.96559143 69.90082550]
[153.32029724 82.35871124]
[146.70887756 95.82308197]
[131.74220276 96.82946014]
[135.91943359 103.05848694]
[150.81007385 104.86653137]
[165.72363281 106.47451019]
[180.65744019 107.88212585]
[195.59124756 109.28974152]
[210.52505493 110.69735718]
[220.68212891 98.96648407]
[235.80221558 95.47898102]
[250.07133484 101.57586670]
[258.00271606 114.91277313]
[256.54656982 130.36137390]
[246.26283264 141.98136902]
[231.10580444 145.30464172]
[216.90367126 139.05331421]
[209.11744690 125.63116455]
[194.18363953 124.22354889]
[179.24981689 122.81593323]
[164.31600952 121.40831757]
[157.26963806 123.94651794]
[149.00201416 119.75716400]
[134.11138916 117.94911957]
[119.79911041 125.58578491]
[105.98239899 125.46474457]
[96.09064484 119.57777405]
[91.94371796 111.16797638]
[83.25778198 123.39722443]
[74.57185364 135.62648010]
[65.88591766 147.85572815]
[57.19998169 160.08497620]
[48.51404953 172.31422424]
[39.82811356 184.54347229]
[31.14217949 196.77272034]
[29.45911217 212.50415039]
[15.78113747 218.40010071]
[18.64467621 227.62783813]
[16.88670921 236.98709106]
[11.04285145 244.32939148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[27 113]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[60 67]
[80 100]
[81 99]
[82 97]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
