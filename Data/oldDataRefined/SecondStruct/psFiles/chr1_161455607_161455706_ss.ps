%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUUUCGUGCCGACGGAGGGGCAGCCCCUUAGCUUGGGGCCAGAGGGCGCACUGUCCGCCCCUAUGAGUGGUGAUAUGAUUGCUCCUGCUGCCGCUGC\
) } def
/len { sequence length } bind def

/coor [
[-5.45565128 279.25695801]
[-11.78317642 292.85705566]
[-18.11070251 306.45712280]
[-11.32626057 320.54632568]
[-15.23551178 335.68737793]
[-27.99262619 344.73117065]
[-43.57408524 343.40747070]
[-54.62279892 332.34130859]
[-55.92190552 316.75778198]
[-46.85800171 304.01495361]
[-31.71079063 300.12960815]
[-25.38326645 286.52951050]
[-19.05574036 272.92944336]
[-23.47232628 263.47586060]
[-21.82657242 252.94752502]
[-14.43443108 244.96711731]
[-3.63094783 242.41943359]
[-4.35383415 227.54238892]
[9.03289700 219.10995483]
[16.19369507 205.92955017]
[15.47080898 191.05249023]
[28.85754013 182.62005615]
[36.01833725 169.43965149]
[43.17913437 156.25926208]
[50.33993530 143.07885742]
[57.50073242 129.89845276]
[64.66152954 116.71805573]
[60.96734619 102.18006897]
[48.38305664 94.01700592]
[35.79876328 85.85394287]
[23.21446991 77.69087982]
[7.81142950 81.22950745]
[-5.53781462 72.76940918]
[-8.91339111 57.32981491]
[-0.31263119 44.07076263]
[15.16178703 40.85861206]
[28.32916641 49.59907150]
[31.37753296 65.10659027]
[43.96182632 73.26965332]
[56.54611588 81.43271637]
[69.13040924 89.59577179]
[77.03610229 79.42047119]
[87.75204468 73.60725403]
[99.21017456 72.65496826]
[102.90435791 58.11698532]
[101.98535156 48.84616852]
[106.94611359 43.18786621]
[111.09063721 28.77180099]
[115.23516083 14.35573769]
[119.37969208 -0.06032628]
[123.52421570 -14.47639084]
[114.63926697 -27.34463501]
[116.15601349 -42.90848923]
[127.35829163 -53.81917191]
[142.95672607 -54.92499542]
[155.58621216 -45.70382309]
[159.28349304 -30.50961304]
[152.30284119 -16.51660156]
[137.94027710 -10.33186436]
[133.79574585 4.08419991]
[129.65122986 18.50026321]
[125.50669861 32.91632843]
[121.36217499 47.33239365]
[117.44234467 61.81116867]
[113.74816132 76.34915161]
[119.97075653 81.30392456]
[124.50495148 87.83933258]
[126.96739960 95.40284729]
[141.87860107 97.03263092]
[156.78979492 98.66241455]
[171.70098877 100.29219818]
[186.61219788 101.92198181]
[201.52339172 103.55175781]
[216.43458557 105.18154144]
[228.59950256 95.09242249]
[244.32749939 96.64338684]
[254.28744507 108.91429138]
[252.57028198 124.62501526]
[240.19476318 134.45466614]
[224.50306702 132.57148743]
[214.80480957 120.09274292]
[199.89360046 118.46295929]
[184.98240662 116.83317566]
[170.07121277 115.20339203]
[155.16001892 113.57361603]
[140.24880981 111.94383240]
[125.33761597 110.31404877]
[114.96266937 124.95411682]
[96.80027008 130.66950989]
[77.84193420 123.87885284]
[70.68113708 137.05924988]
[63.52033615 150.23965454]
[56.35953522 163.42005920]
[49.19873810 176.60044861]
[42.03794098 189.78085327]
[42.24863815 205.60066223]
[29.37409592 213.09034729]
[22.21329880 226.27075195]
[22.42399597 242.09054565]
[9.54945278 249.58023071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[17 100]
[19 98]
[20 97]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 41]
[29 40]
[30 39]
[31 38]
[44 65]
[45 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
