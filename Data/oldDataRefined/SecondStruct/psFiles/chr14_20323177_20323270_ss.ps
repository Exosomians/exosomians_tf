%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAACAAACUGAGGCGUUUUUAGUCUUCCGUGAUUGCCUGUCGGUCGGGUAGGAGUACCACGGGACUCACUUCUAUUCGGUAAAAACUAUAU\
) } def
/len { sequence length } bind def

/coor [
[92.73457336 424.31063843]
[80.42169952 415.57589722]
[70.92293549 403.84234619]
[64.94313812 389.98071289]
[62.92604828 375.01965332]
[65.02135468 360.06930542]
[71.07356262 346.23916626]
[80.63356781 334.55545044]
[92.99194336 325.88522339]
[107.23162842 320.87182617]
[106.24027252 305.90463257]
[105.24890900 290.93740845]
[104.25755310 275.97021484]
[103.26618958 261.00302124]
[102.27483368 246.03581238]
[87.76725006 242.41766357]
[75.07112122 234.48176575]
[65.43647766 222.99465942]
[59.81652451 209.07319641]
[58.77330399 194.07604980]
[62.42153549 179.47106934]
[70.41614532 166.69160461]
[81.98487091 156.99588013]
[96.00282288 151.34306335]
[95.01146698 136.37585449]
[94.02010345 121.40864563]
[93.02874756 106.44144440]
[89.82484436 102.01744843]
[89.44477844 96.09370422]
[92.50000000 90.45828247]
[92.50000000 75.45828247]
[92.50000000 60.45828629]
[92.50000000 45.45828629]
[92.50000000 30.45828438]
[78.16323090 22.41308975]
[69.83729553 8.34570885]
[69.68451691 -7.90700531]
[77.65264130 -21.96623802]
[91.51403809 -30.09095955]
[91.01808929 -45.08275986]
[90.52214050 -60.07455826]
[90.02619171 -75.06635284]
[89.53023529 -90.05815887]
[89.03428650 -105.04995728]
[78.35095978 -117.01849365]
[81.18932343 -132.80847168]
[95.37203217 -140.30715942]
[110.01932526 -133.76220703]
[113.89505005 -118.19434357]
[104.02608490 -105.54590607]
[104.52203369 -90.55410767]
[105.01799011 -75.56230927]
[105.51393890 -60.57050705]
[106.00988770 -45.57870865]
[106.50583649 -30.58691025]
[119.03858948 -24.89990997]
[127.90818787 -14.28960323]
[131.31564331 -0.81804025]
[128.53089905 12.86381817]
[120.04830170 24.03774643]
[107.50000000 30.45828438]
[107.50000000 45.45828629]
[107.50000000 60.45828629]
[107.50000000 75.45828247]
[107.50000000 90.45828247]
[107.99594879 105.45008087]
[108.98731232 120.41728973]
[109.97866821 135.38449097]
[110.97002411 150.35169983]
[125.61108398 154.10627747]
[138.35752869 162.19148254]
[147.96781921 173.80487061]
[153.51045227 187.80110168]
[154.45436096 202.80482483]
[150.71963501 217.34588623]
[142.68421936 230.00338745]
[131.14567566 239.54446411]
[117.24204254 245.04444885]
[118.23339844 260.01165771]
[119.22475433 274.97885132]
[120.21611786 289.94607544]
[121.20747375 304.91326904]
[122.19882965 319.88046265]
[136.97534180 322.97195435]
[150.36929321 329.93646240]
[161.38677979 340.25723267]
[169.21020508 353.16833496]
[173.25903320 367.71170044]
[173.23281860 382.80810547]
[169.13349915 397.33734131]
[161.26527405 410.22119141]
[150.21202087 420.50360107]
[136.79394531 427.42153931]
[122.00679016 430.46170044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[24 69]
[25 68]
[26 67]
[27 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
