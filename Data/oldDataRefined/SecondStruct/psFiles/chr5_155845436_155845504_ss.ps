%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAUGCCGGUAUGGUGGGACUUGCGCGGACUAGAGCAGACUAGAGCCUUCGAUUCGUCCCAGCCCGG\
) } def
/len { sequence length } bind def

/coor [
[41.71533966 301.92788696]
[32.64918900 314.52090454]
[17.90201378 319.34796143]
[3.14439797 314.55291748]
[-5.94905138 301.97958374]
[-5.88171816 286.46264648]
[3.32050705 273.96871948]
[18.11918068 269.30194092]
[22.75443649 255.03608704]
[27.38969040 240.77023315]
[32.02494431 226.50439453]
[30.49672318 222.97750854]
[30.82131386 218.47770691]
[33.46143723 213.99833679]
[38.36066437 210.70965576]
[36.91175461 195.88569641]
[49.87049103 186.80926514]
[56.37874603 173.29472351]
[62.88700485 159.78019714]
[69.39526367 146.26565552]
[75.90351868 132.75112915]
[82.41177368 119.23659515]
[74.46422577 105.22650909]
[76.26826477 89.22053528]
[87.13496399 77.33100891]
[102.91455078 74.09830475]
[108.80992889 60.30538940]
[106.07228088 42.25164032]
[120.18395996 32.06042862]
[125.45458221 18.01690483]
[121.90971375 0.10415915]
[135.54995728 -10.70991135]
[140.18521118 -24.97575951]
[144.82046509 -39.24160767]
[149.45571899 -53.50745392]
[142.05830383 -67.47362518]
[146.78291321 -82.55519104]
[160.82650757 -89.80452728]
[175.85728455 -84.92073059]
[182.95774841 -70.80127716]
[177.91529846 -55.82297897]
[163.72157288 -48.87220001]
[159.08631897 -34.60635376]
[154.45104980 -20.34050369]
[149.81579590 -6.07465696]
[155.06132507 5.05172253]
[151.06454468 17.11287880]
[139.49810791 23.28752708]
[134.22747803 37.33105087]
[138.96855164 48.68156433]
[134.43466187 60.55126190]
[122.60284424 66.20076752]
[116.70747375 79.99368286]
[124.44476318 90.95313263]
[125.70648956 104.30915833]
[120.15840149 116.52365875]
[109.27022552 124.36093903]
[95.92630768 125.74485016]
[89.41805267 139.25938416]
[82.90979004 152.77391052]
[76.40153503 166.28845215]
[69.89328003 179.80297852]
[63.38502502 193.31752014]
[64.36842346 209.10812378]
[51.87519836 217.21791077]
[46.29079437 231.13964844]
[41.65553665 245.40548706]
[37.02028275 259.67132568]
[32.38502884 273.93719482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 69]
[9 68]
[10 67]
[11 66]
[15 65]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[26 53]
[27 52]
[29 49]
[30 48]
[32 45]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
