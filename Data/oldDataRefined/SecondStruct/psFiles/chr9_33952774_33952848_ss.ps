%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:37 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUGAGUCCAUCAAUUUAAGGUGUACCUUAGUAGUCUAUACACGAACCUUUAAUGGUGUAGUAACAAAAGACC\
) } def
/len { sequence length } bind def

/coor [
[113.79623413 128.22064209]
[103.38346863 131.22969055]
[92.56786346 130.52055359]
[82.63712311 126.17769623]
[71.60126495 136.33691406]
[60.56540680 146.49613953]
[49.52954865 156.65536499]
[47.43259430 172.56077576]
[33.61602402 180.71441650]
[18.67872047 174.86151123]
[14.07931137 159.49189758]
[23.34606743 146.39584351]
[39.37032700 145.61950684]
[50.40618515 135.46028137]
[61.44204330 125.30105591]
[72.47789764 115.14183807]
[68.75514984 103.24044800]
[69.95632172 90.82838440]
[57.07051086 83.15010834]
[44.18470383 75.47183990]
[31.29889297 67.79356384]
[18.41308403 60.11528397]
[5.52727509 52.43700790]
[-10.86884308 52.75220871]
[-19.10703659 38.57249832]
[-10.71255779 24.48474693]
[5.67907238 24.98122597]
[13.20555115 39.55120087]
[26.09136009 47.22947693]
[38.97716904 54.90775299]
[51.86297989 62.58602524]
[64.74878693 70.26430511]
[77.63459778 77.94258118]
[95.61349487 68.89533997]
[115.39321899 72.61770630]
[128.85345459 87.58150482]
[143.64888000 85.11258698]
[158.44429016 82.64366913]
[173.23971558 80.17475128]
[178.83363342 63.78135681]
[191.77897644 52.40388870]
[208.58433533 48.99557877]
[224.77429199 54.37573624]
[236.08114624 67.03489685]
[250.62216187 63.35261154]
[259.16098022 48.24511337]
[275.62503052 43.93157196]
[289.90310669 52.56608963]
[304.27951050 48.28604507]
[318.65591431 44.00600433]
[325.95657349 29.98900604]
[341.05529785 25.31957436]
[354.99432373 32.76800156]
[359.50387573 47.91526794]
[351.90847778 61.77476501]
[336.71438599 66.12390137]
[322.93597412 58.38241577]
[308.55957031 62.66245651]
[294.18313599 66.94250488]
[289.60028076 79.16357422]
[278.60089111 86.54835510]
[265.16189575 86.15178680]
[254.30444336 77.89361572]
[239.76342773 81.57589722]
[237.56210327 94.33348083]
[230.58779907 105.29666901]
[219.88760376 112.75141907]
[207.09439087 115.51554108]
[194.17768860 113.12608337]
[183.14047241 105.91640472]
[175.70863342 94.97016907]
[160.91322327 97.43908691]
[146.11779785 99.90800476]
[131.32237244 102.37692261]
[128.64991760 112.88111877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[36 74]
[37 73]
[38 72]
[39 71]
[44 64]
[45 63]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
