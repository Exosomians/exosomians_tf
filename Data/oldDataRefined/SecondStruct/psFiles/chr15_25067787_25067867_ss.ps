%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUCAGGGGGUAUUUUUGUAAGGAACCUUUUCGACUUGUUUUACUCACUCUUGAGUAUGGCAGCAAGAGU\
) } def
/len { sequence length } bind def

/coor [
[80.43042755 215.24815369]
[74.10952759 201.44921875]
[73.20411682 186.29847717]
[77.83665466 171.84497070]
[87.38061523 160.04338074]
[100.54526520 152.48980713]
[98.25552368 137.66560364]
[95.96578217 122.84140015]
[93.67604828 108.01719666]
[89.33226776 100.96222687]
[91.59385681 92.58235931]
[89.87360382 77.68132782]
[88.15335083 62.78029633]
[86.43310547 47.87926483]
[84.71285248 32.97823334]
[82.99259949 18.07720375]
[81.27234650 3.17617249]
[79.55209351 -11.72485924]
[77.83184814 -26.62589073]
[76.11159515 -41.52692032]
[61.24180984 -44.12875748]
[47.72131729 -50.80846405]
[36.64205933 -61.01704407]
[28.89613342 -73.92087555]
[25.10396385 -88.46981049]
[25.56460381 -103.48260498]
[30.23217964 -117.74284363]
[38.72029495 -130.09750366]
[50.33400726 -139.55017090]
[64.12671661 -145.34141541]
[62.40646744 -160.24244690]
[60.68621445 -175.14347839]
[58.96596146 -190.04450989]
[44.52882004 -194.99745178]
[33.67643738 -205.73005676]
[28.56357002 -220.11132812]
[30.20537567 -235.28588867]
[38.27587509 -248.24079895]
[51.17266846 -256.40386963]
[66.33508301 -258.15429688]
[80.75260925 -253.14453125]
[91.56263733 -242.36929321]
[96.61883545 -227.96798706]
[94.91728210 -212.80000305]
[86.79582977 -199.87696838]
[73.86699677 -191.76477051]
[75.58724213 -176.86373901]
[77.30749512 -161.96270752]
[79.02774811 -147.06167603]
[93.77719879 -144.56547546]
[107.23924255 -138.00767517]
[118.31913757 -127.91204834]
[126.11318207 -115.09044647]
[129.98242188 -100.57751465]
[129.60502625 -85.54722595]
[125.00303650 -71.21788788]
[116.54127502 -58.75339508]
[104.89842987 -49.16870117]
[91.01262665 -43.24717331]
[92.73287964 -28.34614182]
[94.45312500 -13.44511032]
[96.17337799 1.45592105]
[97.89363098 16.35695267]
[99.61388397 31.25798416]
[101.33413696 46.15901566]
[103.05438232 61.06004715]
[104.77463531 75.96107483]
[106.49488831 90.86210632]
[108.50025177 105.72745514]
[110.78999329 120.55165863]
[113.07972717 135.37586975]
[115.36946869 150.20007324]
[130.19966125 153.42958069]
[142.85961914 161.80154419]
[151.63719177 174.18374634]
[155.34526062 188.90158081]
[153.48236084 203.96458435]
[146.30043030 217.33560181]
[134.77076721 227.20632935]
[120.45265961 232.24182129]
[105.28250885 231.76107788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 72]
[7 71]
[8 70]
[9 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[30 49]
[31 48]
[32 47]
[33 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
