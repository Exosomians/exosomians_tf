%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACACGUUCUUUACUUCUUUGAUUUUAACCAGAAUCAUAACUUCACUUCUGUGACUCUAGGUUGAGACUAGAACG\
) } def
/len { sequence length } bind def

/coor [
[2.76145983 349.70697021]
[-8.01501751 361.03839111]
[-23.55970001 362.74041748]
[-36.53286362 354.00939941]
[-40.80897522 338.96780396]
[-34.36898804 324.71789551]
[-20.25366783 317.98797607]
[-16.66393280 303.42382812]
[-13.07419872 288.85971069]
[-9.48446369 274.29559326]
[-5.89472818 259.73147583]
[-2.30499339 245.16732788]
[-8.68083668 240.93659973]
[-13.89518452 235.31517029]
[-17.65089035 228.61259460]
[-19.73139954 221.20033264]
[-20.01323509 213.49114990]
[-18.47328758 205.91613770]
[-15.19053268 198.90060425]
[-10.34200573 192.84020996]
[-4.19327021 188.07865906]
[2.91611981 184.88818359]
[10.59137058 183.45399475]
[18.40436554 183.86355591]
[25.91755486 186.10127258]
[34.92868805 174.10963440]
[43.93982315 162.11799622]
[52.95095825 150.12634277]
[61.96208954 138.13470459]
[70.97322845 126.14306641]
[79.98435974 114.15142822]
[88.99549103 102.15978241]
[97.76332092 89.98912048]
[106.28429413 77.64435577]
[114.80526733 65.29959869]
[116.27698517 49.54699326]
[129.87457275 43.46794128]
[138.39553833 31.12318420]
[146.91651917 18.77842712]
[155.43748474 6.43366814]
[163.95845032 -5.91108990]
[157.30181885 -19.75250053]
[158.47369385 -35.06661987]
[167.15887451 -47.73402786]
[181.02108765 -54.34725189]
[196.33145142 -53.12737274]
[208.97157288 -44.40252686]
[215.54132080 -30.51965523]
[214.27345276 -15.21318340]
[205.50903320 -2.60047340]
[191.60563660 3.92571926]
[176.30320740 2.60988140]
[167.78224182 14.95463943]
[159.26127625 27.29939651]
[150.74029541 39.64415359]
[142.21932983 51.98891449]
[141.35708618 66.85854340]
[127.15002441 73.82057190]
[118.62905121 86.16532898]
[110.10807800 98.51008606]
[108.41158295 106.63891602]
[100.98713684 111.17092133]
[91.97599792 123.16255951]
[82.96486664 135.15420532]
[73.95373535 147.14584351]
[64.94259644 159.13748169]
[55.93146515 171.12911987]
[46.92033005 183.12077332]
[37.90919495 195.11241150]
[45.32822037 218.43138123]
[34.75642014 240.26528931]
[12.25913429 248.75706482]
[8.66939926 263.32119751]
[5.07966375 277.88531494]
[1.48992896 292.44946289]
[-2.09980607 307.01358032]
[-5.68954086 321.57769775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 60]
[34 59]
[35 58]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
