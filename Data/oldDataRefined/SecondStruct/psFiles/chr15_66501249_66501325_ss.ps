%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUAGUCUUGAAGGUGUUUUAGUAAACAAAGUCUUUGUGCCUGGAAUUCACCUUAGAGUAGUAUUGUUUUCGACU\
) } def
/len { sequence length } bind def

/coor [
[111.96394348 225.28762817]
[114.76468658 210.42118835]
[122.02411652 197.14881897]
[133.03102112 186.77081299]
[126.60063934 173.21905518]
[120.17024994 159.66729736]
[107.72389984 151.48576355]
[108.79813385 135.70106506]
[102.36774445 122.14930725]
[95.93735504 108.59754944]
[91.25192261 105.62285614]
[88.71147919 100.14863586]
[89.58437347 93.68654633]
[84.26529694 79.66130066]
[78.94622040 65.63605499]
[73.62715149 51.61081314]
[68.30807495 37.58556747]
[62.98900223 23.56032372]
[57.10950470 9.76063251]
[50.67911530 -3.79112363]
[44.24872971 -17.34288025]
[37.81834030 -30.89463615]
[31.38795090 -44.44639206]
[24.95756340 -57.99814987]
[11.68035698 -61.09823990]
[2.80998492 -71.19264984]
[1.48190546 -84.36762238]
[7.96423912 -95.68852997]
[2.08474016 -109.48822784]
[-3.79475904 -123.28791809]
[-9.67425823 -137.08760071]
[-15.55375767 -150.88729858]
[-27.32467651 -163.08901978]
[-18.85832596 -177.77769470]
[-2.39996862 -173.70843506]
[-1.75406575 -156.76679993]
[4.12543344 -142.96710205]
[10.00493240 -129.16741943]
[15.88443184 -115.36772156]
[21.76393127 -101.56803131]
[37.52742767 -96.08081055]
[44.70741272 -80.64360809]
[38.50931931 -64.42853546]
[44.93970871 -50.87678146]
[51.37009430 -37.32502365]
[57.80048370 -23.77326775]
[64.23087311 -10.22151184]
[70.66126251 3.33024454]
[75.03799438 5.81455183]
[77.74521637 11.21202087]
[77.01424408 18.24125099]
[82.33332062 32.26649475]
[87.65239716 46.29173660]
[92.97146606 60.31698227]
[98.29054260 74.34222412]
[103.60961151 88.36746979]
[109.48911285 102.16716003]
[115.91950226 115.71891785]
[122.34989166 129.27067566]
[135.25619507 138.42152405]
[133.72201538 153.23690796]
[140.15238953 166.78866577]
[146.58277893 180.34042358]
[161.58291626 178.37794495]
[176.45495605 181.14880371]
[189.74188232 188.38153076]
[200.14201355 199.36755371]
[206.63641357 213.03057861]
[208.58883667 228.03201294]
[205.80801392 242.90219116]
[198.56637573 256.18426514]
[187.57337952 266.57702637]
[173.90602112 273.06228638]
[158.90327454 275.00463867]
[144.03495789 272.21386719]
[130.75773621 264.96331787]
[120.37234497 253.96337891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[8 59]
[9 58]
[10 57]
[13 56]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
