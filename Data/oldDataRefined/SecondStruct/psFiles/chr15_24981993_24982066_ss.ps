%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAAGUACUACUGUGUCCUGGAACAGACUUGUAUUACUAAAGUUUUAAACUCGAAUUUUUACUGUGAGACUUU\
) } def
/len { sequence length } bind def

/coor [
[100.65286255 131.16746521]
[82.36980438 125.71018219]
[70.69105530 110.62180328]
[55.77322388 112.18973541]
[40.85539627 113.75765991]
[25.93756866 115.32558441]
[11.01973915 116.89351654]
[7.08362436 120.05693054]
[2.75645065 121.44369507]
[-1.28101158 121.17630005]
[-4.47827339 119.61011505]
[-6.48675585 117.26022339]
[-21.45715714 116.31836700]
[-36.42755890 115.37651062]
[-51.39795685 114.43464661]
[-61.18478012 126.47615051]
[-76.18891907 130.43283081]
[-90.64098358 124.78327942]
[-98.98385620 111.69984436]
[-98.00952911 96.21339417]
[-88.09265900 84.27877045]
[-73.04647827 80.48508453]
[-58.65655136 86.29108429]
[-50.45610046 99.46424866]
[-35.48569870 100.40610504]
[-20.51529884 101.34796143]
[-5.54489803 102.28982544]
[9.45181274 101.97568512]
[24.36964035 100.40776062]
[39.28746796 98.83982849]
[54.20529938 97.27190399]
[69.12312317 95.70397949]
[72.51074982 85.29699707]
[79.28648376 76.70220184]
[88.61521149 70.97891235]
[99.34713745 68.83253479]
[110.15953064 70.52761841]
[119.71973419 75.85524750]
[126.84944153 84.15876770]
[130.66989136 94.41475677]
[145.64028931 95.35661316]
[160.61068726 96.29846954]
[175.58110046 97.24033356]
[190.55149841 98.18218994]
[205.52189636 99.12404633]
[220.49229431 100.06590271]
[235.46269226 101.00775909]
[250.43310547 101.94962311]
[256.21963501 87.95696259]
[266.23794556 76.60299683]
[279.40127563 69.11933136]
[294.28179932 66.31773376]
[309.26538086 68.50209808]
[322.72668457 75.43547821]
[333.20556641 86.36579895]
[339.56533813 100.10741425]
[341.11611938 115.16973877]
[337.68975830 129.91893005]
[329.65783691 142.75509644]
[317.89166260 152.28587341]
[303.66751099 157.47744751]
[288.52832031 157.76663208]
[274.11627197 153.12210083]
[261.99468994 144.04765320]
[253.47842407 131.52758789]
[249.49124146 116.92002106]
[234.52084351 115.97816467]
[219.55044556 115.03630829]
[204.58003235 114.09444427]
[189.60963440 113.15258789]
[174.63923645 112.21073151]
[159.66883850 111.26887512]
[144.69844055 110.32701874]
[129.72802734 109.38515472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[12 27]
[13 26]
[14 25]
[15 24]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
