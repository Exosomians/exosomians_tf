%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGAGUCACUACAUUAAGGUUAUCUAGGAAGACUGGGAGGUGACACCUGAGUUAUCGUCCCUCUACUUCUCCUGUCACUGACUCUCUGG\
) } def
/len { sequence length } bind def

/coor [
[79.85720825 346.64843750]
[74.62446594 332.04028320]
[79.00984192 317.15579224]
[91.32707977 307.71835327]
[90.81496429 292.72711182]
[90.30284119 277.73583984]
[89.79072571 262.74459839]
[89.27861023 247.75334167]
[88.76649475 232.76208496]
[88.25437927 217.77082825]
[76.28213501 213.94223022]
[66.09074402 206.54272461]
[58.71437073 196.30398560]
[54.90753555 184.24673462]
[55.06793976 171.57899475]
[59.19498062 159.57508850]
[66.88825989 149.44738770]
[77.38636780 142.22392273]
[89.64221191 138.64404297]
[90.66584778 123.67901611]
[91.68948364 108.71398163]
[79.46598816 117.40801239]
[64.49376678 116.49551392]
[53.41654587 106.38140869]
[51.14968491 91.55368805]
[58.69906998 78.59194946]
[72.71477509 73.24777985]
[86.97751617 77.89259338]
[95.15800476 90.46367645]
[99.69572449 76.16650391]
[104.23343658 61.86933517]
[108.77115631 47.57216263]
[113.30887604 33.27499008]
[103.11636353 19.90349007]
[102.82694244 3.25763679]
[112.35785675 -10.19108295]
[127.84634399 -15.32973194]
[131.89329529 -29.77349091]
[135.94024658 -44.21725082]
[139.98719788 -58.66101074]
[143.78695679 -73.17176056]
[147.33842468 -87.74526215]
[150.88989258 -102.31877136]
[154.44136047 -116.89228058]
[157.99282837 -131.46578979]
[161.54429626 -146.03929138]
[153.11952209 -159.41085815]
[156.69886780 -174.80448914]
[170.15876770 -183.08741760]
[185.51368713 -179.34552002]
[193.65383911 -165.79881287]
[189.74981689 -150.48429871]
[176.11779785 -142.48782349]
[172.56632996 -127.91431427]
[169.01486206 -113.34081268]
[165.46339417 -98.76730347]
[161.91194153 -84.19379425]
[158.36047363 -69.62029266]
[159.86732483 -62.22179031]
[154.43095398 -54.61405945]
[150.38400269 -40.17029953]
[146.33705139 -25.72653961]
[142.29010010 -11.28278065]
[151.57154846 -1.52562809]
[154.79350281 11.66194916]
[150.99636841 24.80898857]
[141.08282471 34.39950562]
[127.60604858 37.81270981]
[123.06832886 52.10988235]
[118.53060913 66.40705109]
[113.99288940 80.70422363]
[109.45517731 95.00139618]
[106.65451813 109.73761749]
[105.63088226 124.70265198]
[104.60724640 139.66767883]
[120.27967072 147.90159607]
[130.87051392 162.02359009]
[134.36528015 179.27363586]
[130.13092041 196.30398560]
[119.03006744 209.82893372]
[103.24563599 217.25871277]
[103.75775146 232.24996948]
[104.26986694 247.24121094]
[104.78198242 262.23248291]
[105.29409790 277.22372437]
[105.80621338 292.21499634]
[106.31833649 307.20623779]
[119.25088501 315.78112793]
[124.64179993 330.33163452]
[120.41814423 345.26284790]
[108.20401001 354.83334351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[19 75]
[20 74]
[21 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[37 63]
[38 62]
[39 61]
[40 60]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
