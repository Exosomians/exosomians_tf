%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUUGUGCUACAAGGGUGCGUCAGAGCUUGGUCUCUGGAAAGUAUACACUUCGCUUGUAUUAUUGGUGAUGUGGUGUCUUUGACGUAUAC\
) } def
/len { sequence length } bind def

/coor [
[80.98838806 365.67327881]
[65.71282959 369.01861572]
[51.88478851 361.71661377]
[46.03343964 347.21502686]
[50.92161560 332.36108398]
[64.24126434 324.16836548]
[66.26193237 309.30508423]
[68.28260803 294.44180298]
[70.30327606 279.57852173]
[72.32395172 264.71527100]
[63.13034439 253.05279541]
[64.96786499 237.95053101]
[77.26287079 228.38650513]
[79.28353882 213.52323914]
[81.30421448 198.65995789]
[83.32488251 183.79669189]
[85.34555817 168.93341064]
[87.36622620 154.07014465]
[89.38690186 139.20686340]
[91.40756989 124.34359741]
[93.42824554 109.48032379]
[85.16296387 107.07469177]
[78.72013092 98.40584564]
[65.99047089 90.47138214]
[53.26080704 82.53691864]
[40.53114319 74.60246277]
[27.80147743 66.66799927]
[15.07181358 58.73354340]
[-0.26480797 62.54976654]
[-13.76466370 54.33213806]
[-17.41852760 38.95602417]
[-9.05862713 25.54380417]
[6.35525656 22.05271149]
[19.67833900 30.55394554]
[23.00627327 46.00387955]
[35.73593903 53.93833923]
[48.46560287 61.87279892]
[61.19526672 69.80725861]
[73.92492676 77.74172211]
[86.65459442 85.67617798]
[75.90489197 75.21463776]
[72.89079285 60.52058029]
[78.65390015 46.67187500]
[91.20262909 38.45425034]
[106.20049286 38.70748901]
[118.46463776 47.34407806]
[123.75691986 61.37945557]
[120.24846649 75.96337891]
[109.15138245 86.05619049]
[122.14176178 78.55619049]
[135.13214111 71.05619049]
[143.21479797 57.45540619]
[158.10559082 57.79246902]
[171.09596252 50.29246902]
[184.08634949 42.79246902]
[197.07673645 35.29246902]
[210.06710815 27.79246902]
[210.69844055 12.37802982]
[219.58192444 -0.23495230]
[233.88287354 -6.02171993]
[249.03788757 -3.13573599]
[260.21109009 7.50209188]
[263.83709717 22.49727249]
[258.75894165 37.06489563]
[246.59698486 46.55648804]
[231.23207092 47.94331741]
[217.56710815 40.78285217]
[204.57673645 48.28285217]
[191.58634949 55.78285217]
[178.59596252 63.28285217]
[165.60559082 70.78285217]
[158.45210266 83.84718323]
[142.63214111 84.04656982]
[129.64176941 91.54656982]
[116.65138245 99.04656982]
[108.29151917 111.50099182]
[106.27084351 126.36426544]
[104.25017548 141.22753906]
[102.22949982 156.09082031]
[100.20883179 170.95408630]
[98.18815613 185.81736755]
[96.16748810 200.68063354]
[94.14681244 215.54389954]
[92.12614441 230.40718079]
[101.42163086 242.90644836]
[99.16064453 257.95114136]
[87.18722534 266.73593140]
[85.16654968 281.59921265]
[83.14588165 296.46246338]
[81.12520599 311.32574463]
[79.10453796 326.18902588]
[89.75356293 337.64031982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[49 75]
[50 74]
[51 73]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
