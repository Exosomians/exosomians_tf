%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAUCACAAGAACAUCAACUUUAUGUUGCUACCAAAAAGUAUAGUGACCAGCACCAACAUCAGGUACGCUCUUAUUA\
) } def
/len { sequence length } bind def

/coor [
[77.17539978 114.22977448]
[62.73856735 118.30138397]
[48.30173874 122.37298584]
[33.86491013 126.44459534]
[19.42808342 130.51620483]
[4.99125481 134.58781433]
[-0.46373069 148.99438477]
[-13.20683479 157.32904053]
[-28.23644638 156.57092285]
[-39.79928207 147.22004700]
[-54.23611069 151.29165649]
[-68.67294312 155.36326599]
[-73.91712189 169.96730042]
[-86.76271057 178.67192078]
[-102.27031708 178.13002014]
[-114.47695923 168.54995728]
[-118.68891907 153.61546326]
[-113.28662109 139.06916809]
[-100.34735870 130.50440979]
[-84.84654236 131.21450806]
[-72.74454498 140.92643738]
[-58.30771637 136.85482788]
[-43.87088776 132.78321838]
[-38.89776993 118.76872253]
[-26.47904015 110.26936340]
[-11.25890541 110.71758270]
[0.91964787 120.15097809]
[15.35647678 116.07936859]
[29.79330444 112.00776672]
[44.23013306 107.93615723]
[58.66696167 103.86455536]
[73.10379028 99.79294586]
[74.77352142 90.66866302]
[79.44346619 82.65417480]
[86.55821228 76.70263672]
[95.27160645 73.52187347]
[104.54735565 73.49018097]
[113.28227997 76.61132812]
[120.43753052 82.51410675]
[125.16212463 90.49650574]
[140.11589050 89.31961823]
[155.06964111 88.14273071]
[170.02340698 86.96584320]
[184.78520203 76.16812134]
[200.35354614 84.01464844]
[215.24957275 82.25158691]
[230.14559937 80.48852539]
[245.04162598 78.72546387]
[259.90017700 76.67028046]
[274.71548462 74.32376862]
[289.53082275 71.97724915]
[293.43157959 57.25637817]
[302.98767090 45.39884949]
[316.54342651 38.45904922]
[331.75027466 37.63933563]
[345.97351074 43.08173752]
[356.74887085 53.84331894]
[362.20944214 68.05957031]
[361.40917969 83.26744843]
[354.48672485 96.83208466]
[342.64141846 106.40333557]
[327.92556763 110.32291412]
[312.88873291 107.91173553]
[300.13616943 99.58755493]
[291.87731934 86.79257202]
[277.06201172 89.13909149]
[262.24667358 91.48561096]
[255.96766663 95.75552368]
[246.80468750 93.62149048]
[231.90866089 95.38455200]
[217.01263428 97.14761353]
[202.11660767 98.91067505]
[194.24121094 108.31041718]
[181.65751648 109.76276398]
[171.20028687 101.91960907]
[156.24653625 103.09649658]
[141.29277039 104.27337646]
[126.33901215 105.45026398]
[114.59122467 122.59524536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[10 23]
[11 22]
[12 21]
[40 78]
[41 77]
[42 76]
[43 75]
[45 72]
[46 71]
[47 70]
[48 69]
[49 67]
[50 66]
[51 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
