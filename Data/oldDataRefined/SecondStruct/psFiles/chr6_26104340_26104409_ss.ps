%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAGCAAAUUUCUCGACUUUACGCAACGCUCUUACUCAAACCUACUGUCUUUAUUGGCACUGUAGGACG\
) } def
/len { sequence length } bind def

/coor [
[-6.14796019 164.10005188]
[-18.03290558 173.28871155]
[-31.03656769 180.81121826]
[-44.92688370 186.53334045]
[-59.45595932 190.35293579]
[-74.36450958 192.20185852]
[-89.38648224 192.04708862]
[-104.25377655 189.89141846]
[-118.70108032 185.77330017]
[-132.47055054 179.76622009]
[-145.31648254 171.97740173]
[-157.00959778 162.54582214]
[-167.34121704 151.63983154]
[-176.12698364 139.45402527]
[-183.21009827 126.20589447]
[-188.46414185 112.13185883]
[-191.79536438 97.48308563]
[-193.14430237 82.52101135]
[-192.48689270 67.51263428]
[-189.83485413 52.72581482]
[-185.23553467 38.42442322]
[-178.77101135 24.86369705]
[-170.55664062 12.28563881]
[-160.73902893 0.91471881]
[-149.49336243 -9.04613495]
[-137.02035522 -17.41915894]
[-123.54260254 -24.05492973]
[-109.30061340 -28.83501816]
[-94.54856873 -31.67412376]
[-79.54972076 -32.52157593]
[-64.57176208 -31.36225319]
[-49.88197327 -28.21684456]
[-35.74251938 -23.14148140]
[-22.40573502 -16.22674179]
[-10.10963154 -7.59602547]
[0.92635536 2.59664059]
[10.50527382 14.16935635]
[18.45617676 26.91559410]
[24.63717270 40.60788345]
[28.93795204 55.00186539]
[31.28176308 69.84066772]
[31.62677956 84.85946655]
[46.53509903 86.51537323]
[61.44341660 88.17128754]
[76.35173798 89.82719421]
[91.26005554 91.48310852]
[106.22702789 92.47795105]
[121.22335815 92.80978394]
[136.21968079 93.14161682]
[151.21601868 93.47344208]
[162.46112061 82.36835480]
[178.26435852 82.55090332]
[189.24993896 93.91279602]
[188.90031433 109.71321869]
[177.42291260 120.57806396]
[161.62707520 120.06140137]
[150.88418579 108.46977234]
[135.88784790 108.13793945]
[120.89152527 107.80611420]
[105.89519501 107.47428131]
[101.09526825 110.35630035]
[95.00893402 110.14776611]
[89.60414124 106.39142609]
[74.69582367 104.73551178]
[59.78750610 103.07960510]
[44.87918854 101.42369843]
[29.97086906 99.76778412]
[26.33856010 114.34481049]
[20.79567146 128.30761719]
[13.44112301 141.40701294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 60]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
