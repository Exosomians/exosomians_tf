%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAACAUGAGCAAUCAUAUCACCACGCAUAGGGGCAGACAGUGCGCCCUCUCGCCCCAAGCGAGAGGGCUGCCCCUCUAAUGU\
) } def
/len { sequence length } bind def

/coor [
[61.79359436 168.89068604]
[55.27797699 183.24751282]
[44.28953934 194.51638794]
[30.14932823 201.36846924]
[14.54853153 203.00430298]
[-0.65379351 199.24719238]
[-13.65225124 190.56190491]
[-25.62250900 199.60142517]
[-37.59276962 208.64094543]
[-49.56302643 217.68046570]
[-55.45341492 232.98521423]
[-71.69279480 235.26873779]
[-81.57549286 222.18193054]
[-74.93502808 207.18739319]
[-58.60254669 205.71020508]
[-46.63228607 196.67068481]
[-34.66202927 187.63116455]
[-22.69177055 178.59164429]
[-27.27608299 165.07066345]
[-27.42539787 150.77284241]
[-23.11144257 137.11787415]
[-14.74979496 125.46580505]
[-3.15987945 116.98160553]
[10.51530933 112.51862335]
[24.92193222 112.53285217]
[38.62932968 117.03632355]
[50.27209091 125.59458923]
[62.56819916 117.00356293]
[74.86430359 108.41253662]
[87.16041565 99.82151031]
[98.96158600 90.56233215]
[110.23156738 80.66346741]
[121.50154114 70.76459503]
[132.77153015 60.86573029]
[144.04150391 50.96686172]
[155.31147766 41.06799316]
[166.58145142 31.16912651]
[151.70959473 29.21264839]
[140.63549805 19.09512711]
[137.34709167 4.46001816]
[143.02857971 -9.42236900]
[155.63398743 -17.55279350]
[170.62391663 -17.00337791]
[182.60029602 -7.97197437]
[187.25027466 6.28908443]
[182.90014648 20.64296341]
[196.56547546 14.45761871]
[210.23081970 8.27227402]
[223.89616394 2.08692956]
[237.56150818 -4.09841537]
[251.22683716 -10.28376007]
[264.89218140 -16.46910477]
[278.55752563 -22.65444946]
[292.22286987 -28.83979416]
[305.88821411 -35.02513885]
[312.86788940 -49.47032547]
[328.54461670 -52.87914276]
[340.89251709 -42.63664246]
[340.43936157 -26.59999084]
[327.53274536 -17.07113647]
[312.07354736 -21.35979843]
[298.40820312 -15.17445469]
[284.74285889 -8.98910999]
[271.07751465 -2.80376506]
[257.41220093 3.38157988]
[243.74684143 9.56692410]
[230.08151245 15.75226974]
[216.41616821 21.93761444]
[202.75082397 28.12295914]
[189.08547974 34.30830383]
[176.48033142 42.43910217]
[165.21034241 52.33797073]
[153.94036865 62.23683929]
[142.67039490 72.13571167]
[131.40040588 82.03457642]
[120.13043213 91.93344116]
[108.86045837 101.83231354]
[108.07749176 105.88874054]
[105.38884735 109.52574158]
[101.05473328 111.84574127]
[95.75144196 112.11761475]
[83.45533752 120.70864105]
[71.15922546 129.29966736]
[58.86312103 137.89070129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 18]
[8 17]
[9 16]
[10 15]
[27 84]
[28 83]
[29 82]
[30 81]
[31 77]
[32 76]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
