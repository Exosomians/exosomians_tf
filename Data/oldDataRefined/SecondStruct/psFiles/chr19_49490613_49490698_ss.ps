%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCCGGCCACUACUCUUGAAGAGGGUGAGUGUAAGCUCAAAGGGCUGGUACUCUACUGAGGUGUACGUGAUGGUAGACUCCGGU\
) } def
/len { sequence length } bind def

/coor [
[237.09698486 196.92607117]
[222.31172180 190.21353149]
[212.82031250 176.92417908]
[211.24961853 160.57560730]
[197.52449036 154.52407837]
[183.79936218 148.47254944]
[170.07424927 142.42102051]
[156.34912109 136.36949158]
[142.62399292 130.31796265]
[128.89888000 124.26644135]
[121.33437347 124.45371246]
[114.79367828 117.74068451]
[101.29597473 111.19758606]
[86.59083557 108.23803711]
[71.61283875 109.05012512]
[56.63483429 109.86220551]
[41.65683365 110.67429352]
[26.67883301 111.48637390]
[11.70083237 112.29845428]
[-3.78772879 119.19344330]
[-14.70091629 106.21890259]
[-5.25449657 92.14049530]
[10.88874817 97.32045746]
[25.86674881 96.50836945]
[40.84474945 95.69628906]
[55.82275009 94.88420868]
[70.80075073 94.07212067]
[85.77875519 93.26004028]
[92.07708740 79.64640808]
[82.99948120 67.70500946]
[73.92186737 55.76361465]
[64.84425354 43.82221985]
[49.52080917 37.98062515]
[47.18556213 21.74860001]
[60.24081039 11.82425785]
[75.25643158 18.41691208]
[76.78564453 34.74460602]
[85.86325836 46.68600082]
[94.94087219 58.62739563]
[104.01848602 70.56879425]
[111.17180634 80.43950653]
[112.04291534 90.48564911]
[107.83906555 97.69989014]
[121.33676910 104.24298096]
[134.95039368 110.54132080]
[148.67552185 116.59284210]
[162.40065002 122.64437103]
[176.12577820 128.69589233]
[189.85089111 134.74742126]
[203.57601929 140.79895020]
[217.30114746 146.85047913]
[228.25418091 137.94998169]
[241.92031860 134.70211792]
[255.57643127 137.69461060]
[266.52716064 146.27761841]
[272.63681030 158.70373535]
[272.74591064 172.48356628]
[286.24359131 179.02665710]
[299.74130249 185.56974792]
[313.23901367 192.11283875]
[329.03210449 191.17018127]
[337.10964966 203.68428040]
[350.60733032 210.22737122]
[364.10504150 216.77046204]
[379.89813232 215.82778931]
[387.97567749 228.34188843]
[401.47338867 234.88497925]
[414.97106934 241.42808533]
[429.81784058 236.01062012]
[444.11138916 242.75379944]
[449.37158203 257.65701294]
[442.47763062 271.87844849]
[427.51965332 276.98080444]
[413.37188721 269.93688965]
[408.42797852 254.92578125]
[394.93029785 248.38269043]
[381.43258667 241.83959961]
[366.60491943 243.25025940]
[357.56195068 230.26815796]
[344.06423950 223.72506714]
[330.56655884 217.18197632]
[315.73889160 218.59265137]
[306.69592285 205.61053467]
[293.19821167 199.06744385]
[279.70050049 192.52435303]
[266.20281982 185.98126221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[12 44]
[13 43]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[29 40]
[30 39]
[31 38]
[32 37]
[57 86]
[58 85]
[59 84]
[60 83]
[62 81]
[63 80]
[64 79]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
