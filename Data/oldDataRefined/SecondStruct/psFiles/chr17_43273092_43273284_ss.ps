%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:45 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGGGCCUCCCCCACGUGGCAAGGACCUCCAUGACGUUAUGGUCCAGCUACGCACCUCACCUGCCUCGUUCGAGGAUAAGGUAGAGGGACGAGGUUUUUAGGUAAAUUAUAUAACAGGAGCCUAUCUCCUGCAUAGUCUAUAAUUUGACUAUUCUUGUCUAUGAUGUGAACUAGAAUCGGUUUUCCGGCUC\
) } def
/len { sequence length } bind def

/coor [
[136.52592468 150.84300232]
[121.52592468 150.84252930]
[121.52616119 135.84300232]
[114.02616119 135.84300232]
[109.48340607 150.13856506]
[104.94065857 164.43414307]
[100.39790344 178.72972107]
[104.43791962 194.62342834]
[92.50630951 205.87371826]
[76.87729645 200.90722656]
[73.62866974 184.83306885]
[86.10233307 174.18696594]
[90.64508057 159.89138794]
[95.18783569 145.59580994]
[99.73058319 131.30024719]
[88.52978516 125.43561554]
[81.77548981 116.37895966]
[68.08551025 122.50958252]
[54.39553833 128.64021301]
[40.70555878 134.77082825]
[27.01558304 140.90145874]
[13.32560635 147.03207397]
[8.00296211 158.79101562]
[-3.53708720 163.61172485]
[-14.89018059 159.41053772]
[-28.67763519 165.31866455]
[-42.46509171 171.22680664]
[-56.25254822 177.13494873]
[-70.04000092 183.04307556]
[-70.21153259 198.27102661]
[-76.56789398 212.10998535]
[-88.00782013 222.16224670]
[-102.54926300 226.68621826]
[-117.67283630 224.89807129]
[-130.75828552 217.10765076]
[-139.53848267 204.66465759]
[-142.49220276 189.72492981]
[-139.10769653 174.87686157]
[-129.97134399 162.69297791]
[-116.66608429 155.28421021]
[-101.49712372 153.93415833]
[-87.09259033 158.87673950]
[-75.94813538 169.25563049]
[-62.16068268 163.34748840]
[-48.37322617 157.43934631]
[-34.58577347 151.53121948]
[-20.79831696 145.62307739]
[-11.06643867 131.02702332]
[7.19498348 133.34210205]
[20.88496017 127.21147919]
[34.57493591 121.08085632]
[48.26491547 114.95023346]
[61.95489120 108.81961060]
[75.64486694 102.68898773]
[86.74102020 76.74509430]
[117.44165039 76.78710938]
[130.43261719 107.32350159]
[119.91223907 96.63137054]
[109.39186859 85.93923950]
[98.87149048 75.24710083]
[88.26489258 64.64050293]
[77.57275391 54.12012482]
[66.88062286 43.59975052]
[56.18849182 33.07937622]
[36.47300339 28.92162323]
[32.09898758 10.09513950]
[21.07179451 -0.07348646]
[10.04459763 -10.24211216]
[-0.98259825 -20.41073799]
[-17.09182930 -23.48071098]
[-22.23152161 -39.05362320]
[-11.11440182 -51.10939789]
[4.82319069 -47.24608612]
[9.18602753 -31.43793488]
[20.21322441 -21.26930809]
[31.24041939 -11.10068226]
[42.26761627 -0.93205661]
[52.41649628 -2.26218033]
[61.81607056 2.31644940]
[67.24900818 11.50571156]
[66.70886230 22.38724327]
[77.40100098 32.90761948]
[88.09313202 43.42799377]
[98.78526306 53.94836807]
[105.76807404 56.40216446]
[109.56362915 64.72673035]
[120.08399963 75.41886139]
[130.60437012 86.11099243]
[141.12475586 96.80313110]
[156.08494568 97.89524078]
[168.04658508 88.84432220]
[180.00822449 79.79340363]
[191.96986389 70.74248505]
[203.93150330 61.69157028]
[215.89315796 52.64065170]
[227.85479736 43.58973312]
[213.01821899 45.79794312]
[199.44282532 52.17826462]
[184.67495728 54.80701065]
[169.73173523 53.50313950]
[155.64231873 48.35644913]
[143.37709045 39.72140121]
[133.78076172 28.19271469]
[127.51428223 14.56439495]
[125.00920868 -0.22494672]
[126.43808746 -15.15673542]
[131.70251465 -29.20258522]
[140.43989563 -41.39512634]
[152.04849243 -50.89463425]
[165.72877502 -57.04685593]
[180.53855896 -59.42807007]
[195.45787048 -57.87428284]
[209.45916748 -52.49250412]
[221.57815552 -43.65339279]
[230.98019409 -31.96570969]
[237.01808167 -18.23312378]
[231.08229065 -4.45755434]
[242.89579773 -13.70098114]
[254.70932007 -22.94440842]
[266.52282715 -32.18783569]
[278.33633423 -41.43126297]
[290.14984131 -50.67469025]
[293.51300049 -66.36126709]
[307.93780518 -73.38300323]
[322.35876465 -66.35341644]
[325.71337891 -50.66500854]
[315.42825317 -38.35258484]
[299.39328003 -38.86117554]
[287.57977295 -29.61775017]
[275.76626587 -20.37432289]
[263.95272827 -11.13089657]
[252.13923645 -1.88746941]
[240.32571411 7.35595751]
[242.88452148 14.40595722]
[250.56095886 35.55595398]
[265.55310059 35.07022858]
[280.54522705 34.58449936]
[295.53735352 34.09877014]
[310.52947998 33.61304092]
[325.52163696 33.12731552]
[334.11926270 20.20987320]
[348.67926025 14.84458447]
[363.60296631 19.09451103]
[373.15197754 31.32546997]
[373.65444946 46.83440781]
[364.91717529 59.65782166]
[350.29983521 64.86484528]
[335.42309570 60.45327377]
[326.00735474 48.11944580]
[311.01522827 48.60517502]
[296.02307129 49.09090424]
[281.03094482 49.57663345]
[266.03881836 50.06236267]
[251.04667664 50.54808807]
[236.90571594 55.55137634]
[224.94406128 64.60229492]
[212.98242188 73.65321350]
[201.02078247 82.70413208]
[189.05914307 91.75505066]
[177.09750366 100.80596924]
[165.13586426 109.85688019]
[179.97242737 107.64867401]
[192.68748474 99.69082642]
[207.51239014 97.40565491]
[222.03361511 101.16517639]
[233.88705444 110.35734558]
[241.14294434 123.48564148]
[242.61997986 138.41275024]
[238.07772827 152.70848083]
[228.25564575 164.04544067]
[214.75282288 170.57795715]
[199.76756287 171.24252319]
[185.73948669 165.93092346]
[174.95240784 155.50790405]
[169.16203308 141.66787720]
[158.32173157 131.30024719]
[162.86448669 145.59580994]
[174.41780090 156.40466309]
[170.89831543 170.87748718]
[175.44107056 185.17306519]
[179.98382568 199.46862793]
[184.52658081 213.76420593]
[197.00024414 224.41032410]
[193.75160217 240.48446655]
[178.12258911 245.45095825]
[166.19097900 234.20066833]
[170.23100281 218.30696106]
[165.68824768 204.01138306]
[161.14549255 189.71580505]
[156.60275269 175.42024231]
[145.37434387 165.63389587]
[148.56890869 150.13856506]
[144.02615356 135.84300232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[57 89]
[58 88]
[59 87]
[60 86]
[61 84]
[62 83]
[63 82]
[64 81]
[66 77]
[67 76]
[68 75]
[69 74]
[90 161]
[91 160]
[92 159]
[93 158]
[94 157]
[95 156]
[96 155]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[135 154]
[136 153]
[137 152]
[138 151]
[139 150]
[140 149]
[176 193]
[177 192]
[179 190]
[180 189]
[181 188]
[182 187]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
