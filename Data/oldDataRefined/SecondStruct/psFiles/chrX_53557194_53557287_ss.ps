%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUUUCUGUCAUCUGACAUAUCAAUAGAGGUUCUACCCCAUACUGGGAUUUUGAUAUGUUAGAUGAUGGAGUAGGGUGUCUCGUGGUCACAG\
) } def
/len { sequence length } bind def

/coor [
[281.76660156 434.51397705]
[274.62738037 421.32186890]
[267.48818970 408.12979126]
[260.34896851 394.93768311]
[253.20976257 381.74557495]
[245.85340881 368.67330933]
[238.28192139 355.72445679]
[230.71043396 342.77560425]
[223.13896179 329.82675171]
[215.56747437 316.87789917]
[207.99598694 303.92907715]
[200.42449951 290.98022461]
[192.85302734 278.03137207]
[185.28153992 265.08251953]
[177.71005249 252.13368225]
[170.13858032 239.18482971]
[162.56709290 226.23597717]
[154.99560547 213.28713989]
[147.42411804 200.33828735]
[139.85264587 187.38943481]
[132.28115845 174.44059753]
[124.70967865 161.49174500]
[117.13819122 148.54289246]
[109.56671143 135.59405518]
[101.99522400 122.64520264]
[94.42374420 109.69635773]
[83.90518951 99.00242615]
[71.08329773 91.21788788]
[58.26140976 83.43334198]
[45.43951797 75.64879608]
[28.76247787 72.59713745]
[27.07821465 55.72705841]
[42.82275391 49.43851471]
[53.22406387 62.82690811]
[66.04595184 70.61145020]
[78.86784363 78.39599609]
[91.68973541 86.18054199]
[103.82552338 77.36336517]
[115.96024323 68.54698181]
[112.51888275 53.94708252]
[109.07752991 39.34718323]
[105.63616943 24.74728394]
[96.11723328 10.71781063]
[106.96332550 -2.31286931]
[122.48725891 4.50210190]
[120.23606873 21.30592537]
[123.67742920 35.90582657]
[127.11878204 50.50572205]
[130.56015015 65.10562134]
[130.93333435 80.23866272]
[125.93493652 92.38886261]
[117.35063934 99.95794678]
[107.37258911 102.12487030]
[114.94407654 115.07372284]
[122.51555634 128.02256775]
[130.08703613 140.97142029]
[137.65852356 153.92025757]
[145.23001099 166.86911011]
[152.80148315 179.81796265]
[160.37297058 192.76679993]
[167.94445801 205.71565247]
[175.51594543 218.66450500]
[183.08741760 231.61334229]
[190.65890503 244.56219482]
[198.23039246 257.51104736]
[205.80186462 270.45989990]
[213.37335205 283.40872192]
[220.94483948 296.35757446]
[228.51632690 309.30642700]
[236.08779907 322.25527954]
[243.65928650 335.20413208]
[251.23077393 348.15298462]
[258.80224609 361.10180664]
[265.97888184 367.07684326]
[266.40185547 374.60635376]
[273.54107666 387.79846191]
[280.68029785 400.99057007]
[287.81948853 414.18267822]
[294.95870972 427.37478638]
[309.94998169 425.13034058]
[324.80419922 428.15161133]
[337.72763062 436.07376099]
[347.15972900 447.94015503]
[351.96151733 462.31784058]
[351.55316162 477.47070312]
[345.98394775 491.56893921]
[335.92639160 502.91006470]
[322.59503174 510.12466431]
[307.59963989 512.34149170]
[292.75100708 509.29284668]
[279.84219360 501.34689331]
[270.43197632 489.46313477]
[265.65670776 475.07659912]
[266.09298706 459.92449951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[5 75]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 37]
[28 36]
[29 35]
[30 34]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
