%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGACUCUUCUGCCAGCUUGAACUGAUAGAUCUCCUUCAUUUUCAGCAUUGUUCCAAAGGCAUCCACUUGGACGCCUUCCUAGUAAUUGCCUCGGGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[95.03925323 147.75857544]
[84.38764954 145.40643311]
[77.35455322 158.65542603]
[70.32145691 171.90440369]
[76.35654449 186.33049011]
[71.65745544 201.24533081]
[58.44294739 209.60659790]
[42.95251846 207.46636963]
[32.50027084 195.83517456]
[32.02143478 180.20492554]
[41.74210358 167.95574951]
[57.07247543 164.87130737]
[64.10556793 151.62232971]
[71.13866425 138.37333679]
[58.62829590 124.36949158]
[52.44559479 106.63841248]
[53.53617859 87.89200592]
[39.78992462 81.88863373]
[26.04367065 75.88526154]
[10.30029869 77.45268250]
[1.73347008 65.26831818]
[-12.01278496 59.26494598]
[-25.75903893 53.26157379]
[-41.50241089 54.82899475]
[-50.06924057 42.64463425]
[-63.81549454 36.64126205]
[-77.56175232 30.63788986]
[-92.12460327 36.16608810]
[-105.97974396 29.88199615]
[-111.16029358 15.96447086]
[-127.38772583 18.33138466]
[-137.33752441 5.29552412]
[-130.77418518 -9.73293304]
[-114.44950104 -11.29399967]
[-105.15692139 2.21821618]
[-91.42687225 -3.44052458]
[-77.40069580 2.45192766]
[-71.55838013 16.89163399]
[-57.81212234 22.89500618]
[-44.06586838 28.89837837]
[-29.30572128 26.90155411]
[-19.75566673 39.51531982]
[-6.00941277 45.51869202]
[7.73684216 51.52206421]
[22.49699020 49.52524185]
[32.04704285 62.13900375]
[45.79329681 68.14237976]
[59.53955078 74.14575195]
[70.26131439 62.30250931]
[84.27516174 54.63239670]
[100.02974701 51.98448944]
[115.78104401 54.65191650]
[129.78536987 62.33938980]
[140.49246216 74.19590759]
[146.71701050 88.90894318]
[161.67341614 87.76627350]
[171.94425964 76.05527496]
[187.12846375 75.10949707]
[198.22982788 84.97335052]
[213.18623352 83.83067322]
[228.14265442 82.68799591]
[243.09906006 81.54531860]
[258.05548096 80.40264130]
[266.24609375 67.35580444]
[280.38333130 61.69966888]
[294.96780396 65.40873718]
[304.45803833 76.85746765]
[319.41445923 75.71479797]
[334.37084961 74.57212067]
[347.54150391 65.80603027]
[360.82122803 72.55130005]
[375.77764893 71.40863037]
[390.73403931 70.26595306]
[402.23022461 59.07590485]
[418.12802124 61.22998047]
[426.23196411 75.07575226]
[420.32543945 89.99193573]
[404.93942261 94.53610229]
[391.87670898 85.22236633]
[376.92031860 86.36504364]
[361.96389771 87.50771332]
[349.86303711 96.19207764]
[335.51354980 89.52853394]
[320.55712891 90.67121124]
[305.60070801 91.81388092]
[297.95983887 104.57144165]
[284.10812378 110.45304871]
[269.27569580 107.01020050]
[259.19815063 95.35905457]
[244.24174500 96.50173187]
[229.28532410 97.64440918]
[214.32891846 98.78708649]
[199.37249756 99.92976379]
[189.89845276 111.36557770]
[174.74679565 112.73747253]
[162.81610107 102.72268677]
[147.85968018 103.86535645]
[145.75218201 114.56804657]
[141.28335571 124.51886749]
[134.68383789 133.20423889]
[126.29425812 140.17588806]
[116.54759216 145.07402039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[17 48]
[18 47]
[19 46]
[21 44]
[22 43]
[23 42]
[25 40]
[26 39]
[27 38]
[30 35]
[55 97]
[56 96]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[67 85]
[68 84]
[69 83]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
