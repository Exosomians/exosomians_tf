%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUCACAAACUUACUACUGAAAUUAACAGCCUAUGGGGAAGUGAGGAAAAUACUCACUUUGUAUUCUCAGACUGUUUG\
) } def
/len { sequence length } bind def

/coor [
[46.79206467 212.93127441]
[41.30358124 226.94773865]
[33.10565948 239.57228088]
[22.53400421 250.28791809]
[10.02151489 258.65585327]
[-3.91942811 264.33346558]
[-18.71795273 267.08819580]
[-33.76806641 266.80728149]
[-48.45347977 263.50219727]
[-62.17283630 257.30831909]
[-74.36432648 248.47924805]
[-84.52873230 237.37655640]
[-92.24980927 224.45486450]
[-97.21140289 210.24334717]
[-99.21032715 195.32391357]
[-98.16472626 180.30754089]
[-94.11742401 165.80912781]
[-87.23415375 152.42236328]
[-77.79677582 140.69543457]
[-66.19174957 131.10855103]
[-52.89429092 124.05429840]
[-38.44892502 119.82153320]
[-23.44717979 118.58358765]
[-8.50336647 120.39115906]
[5.77057552 125.17022705]
[18.79013634 132.72508240]
[30.02217484 142.74638367]
[42.05401993 133.78900146]
[54.08586884 124.83161926]
[66.11771393 115.87423706]
[78.14956665 106.91686249]
[77.55572510 95.35897827]
[82.68474579 84.98445892]
[92.22882080 78.43862152]
[103.75438690 77.39051056]
[114.32266998 82.10738373]
[127.01246643 74.10932159]
[139.70225525 66.11125183]
[152.39205933 58.11318588]
[165.08184814 50.11511993]
[177.77165222 42.11705399]
[189.62753296 32.92804337]
[200.53814697 22.63442039]
[211.44874573 12.34079552]
[222.35935974 2.04717064]
[233.26995850 -8.24645424]
[244.18055725 -18.54007912]
[243.09075928 -34.13964081]
[252.32489014 -46.75965500]
[267.52288818 -50.44134140]
[281.50872803 -43.44631195]
[287.67871094 -29.07741356]
[283.11956787 -14.11919689]
[269.98397827 -5.63447475]
[254.47418213 -7.62947369]
[243.56358337 2.66415071]
[232.65298462 12.95777512]
[221.74237061 23.25139999]
[210.83177185 33.54502487]
[199.92115784 43.83864975]
[200.04150391 46.42469788]
[199.14343262 49.22011566]
[197.14443970 51.84297943]
[194.09848022 53.88937759]
[190.19952393 54.98008728]
[185.76971436 54.80685043]
[173.07992554 62.80491638]
[160.39012146 70.80297852]
[147.70033264 78.80104828]
[135.01052856 86.79911804]
[122.32073212 94.79718018]
[119.29457092 112.36948395]
[104.58981323 122.45480347]
[87.10694122 118.94870758]
[75.07509613 127.90608978]
[63.04324722 136.86346436]
[51.01140213 145.82084656]
[38.97955322 154.77822876]
[45.35845947 168.41253662]
[48.86188126 183.05189514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
