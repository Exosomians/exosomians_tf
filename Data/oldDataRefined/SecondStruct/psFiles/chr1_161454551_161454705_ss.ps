%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCCCCUCCACACUUCCCCGGACCGUCAACCGUCCGUCUCGGUUGCUUCCUUCCGAAGGGACUGGCCCUUAGCUUGGGCCCGGCGCCGCCACUCUCGCGGCUUAGGAUUGGUGAUCUGGUGGUCCCUCUCCGCCGAAGUCCCGGGCCGAACGC\
) } def
/len { sequence length } bind def

/coor [
[74.22479248 210.23492432]
[67.58380127 196.56138611]
[66.68595123 181.38699341]
[71.66815948 167.02572632]
[81.77067566 155.66757202]
[95.45294189 149.04457092]
[94.54726410 134.07194519]
[93.64158630 119.09931183]
[87.30265808 115.09081268]
[80.91920471 128.66474915]
[74.53575134 142.23866272]
[68.15229034 155.81259155]
[63.45968628 170.05967712]
[49.34040833 175.12385559]
[36.66240311 167.10711670]
[35.18424606 152.18013000]
[46.04431915 141.83236694]
[55.57115173 130.24618530]
[65.09797668 118.66000366]
[74.62480927 107.07382965]
[68.28588104 103.06533813]
[54.37059402 108.66575623]
[40.45530701 114.26618195]
[26.54001617 119.86660004]
[12.62472725 125.46702576]
[8.98136044 140.55030823]
[-2.85371971 150.58576965]
[-18.32968330 151.71456909]
[-31.49570656 143.50265503]
[-37.28918457 129.10768127]
[-33.48240662 114.06481171]
[-21.53915596 104.15832520]
[-6.05185890 103.19747925]
[7.02430582 111.55173492]
[20.93959427 105.95130920]
[34.85488510 100.35089111]
[48.77017212 94.75046539]
[62.68546295 89.15004730]
[62.83649063 81.65156555]
[63.13854599 66.65460968]
[63.28957367 59.15612793]
[49.61107635 52.99993515]
[35.93257904 46.84374619]
[22.25408173 40.68755341]
[7.63052225 46.05311584]
[-6.15372229 39.61500549]
[-11.17884731 25.64061356]
[-27.43165588 27.82653427]
[-37.23555756 14.68060112]
[-30.50513649 -0.27377918]
[-14.16407490 -1.65282118]
[-5.02265549 11.96211529]
[8.76960373 6.45673800]
[22.72924232 12.50513649]
[28.41027260 27.00905418]
[42.08877182 33.16524506]
[55.76726913 39.32143784]
[69.44576263 45.47763062]
[103.73996735 63.87645721]
[106.65976715 92.36254883]
[119.00452423 83.84158325]
[131.34927368 75.32061005]
[143.69404602 66.79963684]
[156.03880310 58.27866745]
[168.38356018 49.75769806]
[174.26304626 35.95800400]
[171.85688782 21.15225029]
[169.45071411 6.34649706]
[167.04454041 -8.45925713]
[164.63838196 -23.26501083]
[151.11036682 -31.10891151]
[145.83790588 -45.83084106]
[151.31048584 -60.47955322]
[164.94413757 -68.13837433]
[180.30146790 -65.19104004]
[190.13119507 -53.02920151]
[189.79203796 -37.39529419]
[179.44413757 -25.67118073]
[181.85029602 -10.86542606]
[184.25646973 3.94032788]
[186.66264343 18.74608231]
[189.06880188 33.55183411]
[201.74665833 41.56882477]
[216.15443420 37.39556122]
[230.56219482 33.22229767]
[244.96997070 29.04903793]
[257.48382568 20.77838135]
[266.97048950 9.15930653]
[276.45718384 -2.45976806]
[285.94384766 -14.07884216]
[295.43054199 -25.69791603]
[292.33105469 -41.02524948]
[299.85427856 -54.73418808]
[314.44799805 -60.35178757]
[329.22149658 -55.22558975]
[337.19915771 -41.77603149]
[334.61422729 -26.35357857]
[322.68716431 -16.24024582]
[307.04962158 -16.21123695]
[297.56292725 -4.59216166]
[288.07626343 7.02691269]
[278.58956909 18.64598656]
[269.10290527 30.26506233]
[271.90310669 37.22270584]
[286.75430298 39.33021164]
[277.50350952 51.13799667]
[280.30374146 58.09563828]
[295.19436646 59.90369034]
[310.08499146 61.71173859]
[322.45013428 52.23857117]
[337.52560425 54.28431320]
[346.48062134 66.13096619]
[361.37124634 67.93901825]
[370.32614136 65.85941315]
[376.54241943 69.93634033]
[391.39361572 72.04387665]
[406.24484253 74.15141296]
[421.09603882 76.25894928]
[436.09899902 69.63751984]
[449.17324829 79.53681183]
[446.86911011 95.77328491]
[431.55691528 101.64424896]
[418.98849487 91.11015320]
[404.13729858 89.00261688]
[389.28607178 86.89508057]
[374.43487549 84.78754425]
[359.56320190 82.82965088]
[344.67257690 81.02159882]
[333.14266968 90.38094330]
[318.01571655 88.75944519]
[308.27694702 76.60237122]
[293.38632202 74.79432678]
[278.49569702 72.98627472]
[249.14323425 43.45681000]
[234.73545837 47.63006973]
[220.32769775 51.80333328]
[205.91992188 55.97659302]
[191.98585510 65.68505096]
[176.90452576 62.10245514]
[164.55976868 70.62342834]
[152.21501160 79.14439392]
[139.87025452 87.66536713]
[127.52549744 96.18634033]
[115.18073273 104.70731354]
[108.61421967 118.19363403]
[109.51989746 133.16625977]
[110.42557526 148.13890076]
[124.80639648 153.06439209]
[136.20433044 163.12200928]
[142.88127136 176.77803040]
[143.81903076 191.95001221]
[138.87463379 206.32434082]
[128.80203247 217.70903015]
[115.13723755 224.36799622]
[99.96403503 225.28581238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 147]
[7 146]
[8 145]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[41 58]
[42 57]
[43 56]
[44 55]
[47 52]
[60 144]
[61 143]
[62 142]
[63 141]
[64 140]
[65 139]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[83 137]
[84 136]
[85 135]
[86 134]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[107 133]
[108 132]
[109 131]
[112 128]
[113 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
