%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGUAGGCACCUCUCGCCCGAAUUCUUCACCGCCAAGCCGGCCUCCAAGGUAGCAUAGGUUUUCCGAGAAAAGUCUCGGUGG\
) } def
/len { sequence length } bind def

/coor [
[11.36066818 191.55369568]
[-11.74883938 187.04934692]
[-22.64534187 197.35789490]
[-33.54184723 207.66644287]
[-44.43835068 217.97499084]
[-48.65560913 226.35591125]
[-55.93316650 228.45390320]
[-67.20314789 238.35276794]
[-67.97441101 254.13822937]
[-79.73774719 264.69284058]
[-95.51416779 263.75469971]
[-105.94380951 251.88044739]
[-104.83894348 236.11482239]
[-92.85507202 225.81130981]
[-77.10201263 227.08279419]
[-65.83203125 217.18392944]
[-54.74689865 207.07849121]
[-43.85039520 196.76994324]
[-32.95389175 186.46139526]
[-22.05739021 176.15284729]
[-25.04760551 169.04196167]
[-26.19315720 161.39474487]
[-25.41412544 153.68287659]
[-22.74959564 146.38441467]
[-18.35580635 139.95396423]
[-12.49701595 134.79452515]
[-5.52962017 131.23213196]
[2.11952066 129.49533081]
[9.97923088 129.70050049]
[17.56304359 131.84407043]
[24.39930725 135.80227661]
[30.06052017 141.33813477]
[43.72586060 135.15280151]
[57.39120102 128.96745300]
[71.05654144 122.78210449]
[84.72187805 116.59676361]
[72.04042053 103.33879852]
[71.93088531 81.24519348]
[89.35537720 62.10854340]
[94.77400208 48.12145996]
[90.26398468 35.86991501]
[95.24717712 24.24147224]
[106.48770142 19.37909889]
[112.41947174 5.60179424]
[118.35124207 -8.17551041]
[124.28300476 -21.95281601]
[124.99312592 -38.89188385]
[141.46679688 -42.89871597]
[149.87739563 -28.17805099]
[138.06031799 -16.02104759]
[132.12854004 -2.24374223]
[126.19677734 11.53356266]
[120.26500702 25.31086731]
[123.34391022 42.48200226]
[108.76108551 53.54008484]
[103.34246063 67.52716827]
[107.63797760 73.67522430]
[122.58220673 72.38291931]
[116.22900391 85.97132874]
[120.52451324 92.11938477]
[135.52195740 91.84220123]
[149.28327942 82.92268372]
[163.76344299 90.62054443]
[164.06648254 107.01689148]
[149.88066101 115.24456787]
[135.79913330 106.83963776]
[120.80169678 107.11682129]
[115.64246368 121.20164490]
[126.91244507 131.10050964]
[138.18241882 140.99938965]
[149.45240784 150.89825439]
[165.63119507 153.57759094]
[171.14613342 169.02160645]
[160.32392883 181.34280396]
[144.29754639 177.86621094]
[139.55352783 162.16822815]
[128.28355408 152.26936340]
[117.01358032 142.37049866]
[105.74359894 132.47163391]
[90.90722656 130.26210022]
[77.24188232 136.44744873]
[63.57654572 142.63279724]
[49.91120529 148.81813049]
[36.24586487 155.00347900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[7 16]
[8 15]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[39 56]
[40 55]
[43 53]
[44 52]
[45 51]
[46 50]
[60 67]
[61 66]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
