%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUCACUAGUCUAAAAGUGGUGAGUAGAAACACUCUACCCAGAGUCUCCCGGGGCAGGGACGACUGUGGUUGGUAAGAAUGGCCAUCGGACGGUUGUGUGU\
) } def
/len { sequence length } bind def

/coor [
[107.82044983 155.90779114]
[103.75434113 141.46940613]
[99.68824005 127.03102875]
[85.31354523 122.74521637]
[74.00458527 132.59951782]
[62.69562149 142.45382690]
[51.38666153 152.30813599]
[40.07769775 162.16244507]
[28.76873398 172.01675415]
[23.44740677 186.91621399]
[8.76887512 189.44404602]
[6.23869324 205.28633118]
[-7.79522324 213.05992126]
[-22.56725502 206.80158997]
[-26.74556160 191.31219482]
[-17.12490654 178.47387695]
[-1.08543158 178.13508606]
[3.42700315 163.94047546]
[18.91442680 160.70777893]
[30.22339058 150.85346985]
[41.53235245 140.99917603]
[52.84131622 131.14486694]
[64.15027618 121.29055786]
[75.45924377 111.43624878]
[72.95470428 96.64682007]
[59.03176117 91.06544495]
[45.10882187 85.48407745]
[31.18588066 79.90270233]
[17.26293945 74.32133484]
[2.00623727 79.28244019]
[-11.30502129 70.32756042]
[-12.45957851 54.32610321]
[-0.57175601 43.55302429]
[15.23912525 46.27250290]
[22.84431076 60.39839172]
[36.76725388 65.97976685]
[50.69019318 71.56113434]
[64.61313629 77.14250946]
[78.53607941 82.72387695]
[91.78505707 75.69078064]
[94.96337891 61.03137589]
[98.14169312 46.37196350]
[93.50416565 31.24569893]
[103.76254272 20.44685173]
[106.94085693 5.78744316]
[110.11917877 -8.87196636]
[113.29749298 -23.53137589]
[116.25189209 -38.23754883]
[118.98167419 -52.98706818]
[121.71145630 -67.73658752]
[124.44123840 -82.48610687]
[115.28089142 -95.36490631]
[117.99258423 -110.93482208]
[130.96751404 -119.95849609]
[146.50788879 -117.08234406]
[155.39387512 -104.01273346]
[152.35359192 -88.50363159]
[139.19076538 -79.75631714]
[136.46096802 -65.00680542]
[133.73118591 -50.25728607]
[131.00140381 -35.50776672]
[132.91163635 -28.23447609]
[127.95690155 -20.35305786]
[124.77858734 -5.69364882]
[121.60026550 8.96576118]
[118.42195129 23.62517166]
[123.28681183 37.70289612]
[112.80110931 49.55028152]
[109.62278748 64.20969391]
[106.44446564 78.86910248]
[120.13971710 77.63215637]
[135.08627319 85.13446808]
[150.00088501 86.73272705]
[164.91549683 88.33097839]
[179.83010864 89.92923737]
[190.97473145 78.95967865]
[206.56712341 77.77166748]
[219.24502563 86.92616272]
[223.02233887 102.10067749]
[216.11550903 116.13027954]
[201.78573608 122.39061737]
[186.79910278 117.92575073]
[178.23185730 104.84384918]
[163.31724548 103.24559021]
[148.40263367 101.64733124]
[133.48802185 100.04907227]
[128.64767456 105.77803802]
[140.10545349 115.45891571]
[130.42439270 126.91654205]
[118.96697235 117.23596191]
[114.12662506 122.96492767]
[118.19272614 137.40330505]
[122.25882721 151.84169006]
[137.16326904 155.55018616]
[148.20550537 166.22561646]
[152.41520691 180.99632263]
[148.66000366 195.88908386]
[137.95002747 206.89779663]
[123.16619110 211.06117249]
[108.28527832 207.25930786]
[97.31019592 196.51487732]
[93.19316864 181.71806335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[11 17]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[40 70]
[41 69]
[42 68]
[44 66]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
[51 58]
[72 86]
[73 85]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
