%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAGUACGGACACGAGGCCUAGAGUACGGACACGAGGCCUAGAGUACGGACACGAGGCCUAGAGUACGGACACGAGGCCUAGAGUAC\
) } def
/len { sequence length } bind def

/coor [
[45.48201752 374.63052368]
[32.58400345 383.76382446]
[17.01981735 381.01943970]
[8.02341366 368.02557373]
[10.93220043 352.49127197]
[24.02044487 343.63275146]
[26.62516785 328.86062622]
[29.22989082 314.08850098]
[31.83461380 299.31640625]
[22.80192757 293.35305786]
[16.33874893 284.62255859]
[13.25030327 274.16778564]
[13.93670940 263.24905396]
[18.34134293 253.19212341]
[25.95448875 245.22731018]
[35.87217712 240.33894348]
[46.90349197 239.14373779]
[51.53874588 224.87789917]
[56.17399979 210.61204529]
[60.80925369 196.34620667]
[65.44451141 182.08035278]
[70.07976532 167.81449890]
[61.19005585 155.89346313]
[61.02257156 140.84568787]
[69.85110474 128.43962097]
[84.46073151 123.55443573]
[89.09598541 109.28858948]
[86.37712097 95.57365417]
[96.63816833 86.07615662]
[101.27342224 71.81031036]
[98.17929840 56.29460526]
[109.47084808 46.58120728]
[114.10610199 32.31536102]
[105.15810394 19.77584267]
[105.30776978 4.54984617]
[114.28813934 -7.52562523]
[128.48707581 -11.94470596]
[133.12232971 -26.21055412]
[137.75758362 -40.47640228]
[142.39283752 -54.74224854]
[147.02809143 -69.00809479]
[151.66334534 -83.27394104]
[142.71534729 -95.81346130]
[142.86502075 -111.03945923]
[151.84538269 -123.11492920]
[166.04431152 -127.53401184]
[170.67956543 -141.79986572]
[166.74258423 -157.71940613]
[178.74682617 -168.89216614]
[194.34333801 -163.82455444]
[197.48777771 -147.72969055]
[184.94541931 -137.16459656]
[180.31016541 -122.89875793]
[189.19987488 -110.97772217]
[189.36735535 -95.92993164]
[180.53881836 -83.52387238]
[165.92919922 -78.63868713]
[161.29394531 -64.37284088]
[156.65869141 -50.10699463]
[152.02343750 -35.84114456]
[147.38816833 -21.57529831]
[142.75291443 -7.30945063]
[151.64262390 4.61158466]
[151.81011963 19.65937233]
[142.98158264 32.06543350]
[128.37194824 36.95061493]
[123.73670197 51.21646500]
[127.16236877 65.71177673]
[115.53926849 76.44556427]
[110.90401459 90.71141052]
[113.62287903 104.42634583]
[103.36183167 113.92384338]
[98.72657776 128.18969727]
[107.67458344 140.72921753]
[107.52490997 155.95520020]
[98.54454803 168.03068542]
[84.34561157 172.44975281]
[79.71035767 186.71560669]
[75.07510376 200.98146057]
[70.43984985 215.24729919]
[65.80459595 229.51315308]
[61.16933823 243.77899170]
[73.77384949 258.93930054]
[75.01360321 278.47723389]
[64.57509613 294.87551880]
[46.60672760 301.92111206]
[44.00200653 316.69323730]
[41.39728546 331.46536255]
[38.79256058 346.23745728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 89]
[7 88]
[8 87]
[9 86]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[26 73]
[27 72]
[29 70]
[30 69]
[32 67]
[33 66]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
