%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCCCCCUUUUUUUUUUUUUUGUGACACCGUACAAAGGCGGGCCAAAGCUUGGCCCCUGGAAAGCGCACAAUCCGCUUGCACUACUGGUGAUGUGAUGCCUUUGGGUGUGGAUGGAGACA\
) } def
/len { sequence length } bind def

/coor [
[16.79768753 372.46444702]
[15.65869141 357.50775146]
[14.51969433 342.55105591]
[13.38069820 327.59439087]
[1.94720852 318.11752319]
[0.57904011 302.96551514]
[10.59676647 291.03729248]
[9.45777035 276.08059692]
[1.90328526 289.03936768]
[-9.06668377 299.26971436]
[-22.52042580 305.90270996]
[-37.31527710 308.37503052]
[-52.19466782 306.47668457]
[-65.89485168 300.36889648]
[-77.25222778 290.57043457]
[-85.30219269 277.91351318]
[-89.36103058 263.47308350]
[-89.08401489 248.47563171]
[-84.49467468 234.19494629]
[-75.98279572 221.84391785]
[-64.27130890 212.47155762]
[-50.35491943 206.87388611]
[-35.41557312 205.52630615]
[-20.72211456 208.54330444]
[-7.52250099 215.66862488]
[3.06218791 226.29710388]
[10.13296413 239.52601624]
[13.08915043 254.22920227]
[19.00448799 240.44482422]
[24.91982651 226.66046143]
[30.83516312 212.87609863]
[36.75050354 199.09172058]
[35.71060181 195.60925293]
[36.37910461 191.43832397]
[39.06544113 187.42245483]
[43.67425919 184.51245117]
[50.61920929 171.21704102]
[57.56415939 157.92164612]
[64.50910950 144.62625122]
[71.45405579 131.33084106]
[78.39900970 118.03544617]
[85.34395599 104.74004364]
[84.77404785 89.75087738]
[76.83958435 77.02120972]
[68.90512848 64.29154968]
[60.97066498 51.56188202]
[53.03620529 38.83221817]
[45.10174561 26.10255623]
[37.16728592 13.37289238]
[23.65776253 3.12939954]
[29.76112747 -12.68784618]
[46.64981079 -11.20165253]
[49.89694977 5.43843222]
[57.83140945 18.16809654]
[65.76586914 30.89776039]
[73.70033264 43.62742233]
[81.63478851 56.35708618]
[89.56925201 69.08675385]
[97.50370789 81.81641388]
[105.00370789 81.81641388]
[100.36847687 67.55056000]
[112.50376129 58.73382187]
[124.63897705 67.55065918]
[120.00370789 81.81641388]
[127.50370789 81.81641388]
[135.43817139 69.08675385]
[143.37263489 56.35708618]
[151.30709839 43.62742233]
[159.24154663 30.89776039]
[154.22084045 16.08808517]
[159.94236755 1.53479981]
[173.70460510 -5.89047861]
[189.00944519 -2.68176126]
[198.63041687 9.64589405]
[198.02478027 25.27174377]
[187.47850037 36.81774139]
[171.97122192 38.83221817]
[164.03675842 51.56188202]
[156.10229492 64.29154968]
[148.16783142 77.02120972]
[140.23336792 89.75087738]
[149.11192322 101.84183502]
[157.98968506 113.93172455]
[172.51084900 110.17193604]
[187.03199768 106.41214752]
[201.55316162 102.65235901]
[215.37112427 92.82891846]
[228.63586426 103.38748169]
[222.16197205 119.05671692]
[205.31294250 117.17351532]
[190.79179382 120.93330383]
[176.27062988 124.69309235]
[161.74948120 128.45288086]
[158.00219727 142.97727966]
[148.30059814 154.41749573]
[134.58352661 160.48724365]
[119.59232330 159.97346497]
[106.32299042 152.97883606]
[97.42738342 140.90124512]
[94.68330383 126.15438080]
[98.63935852 111.68499756]
[91.69440460 124.98039246]
[84.74945831 138.27580261]
[77.80450439 151.57119751]
[70.85955811 164.86659241]
[63.91460800 178.16200256]
[56.96965790 191.45739746]
[50.53487015 205.00706482]
[44.61952972 218.79142761]
[38.70419312 232.57580566]
[32.78885651 246.36016846]
[26.87351799 260.14453125]
[24.41446304 274.94158936]
[25.55346107 289.89828491]
[37.26193237 300.17202759]
[38.20397568 315.35644531]
[28.33739090 326.45538330]
[29.47638893 341.41207886]
[30.61538506 356.36877441]
[31.75438118 371.32546997]
[41.45034790 384.55120850]
[34.59774780 399.44998169]
[18.24594688 400.69522095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[7 114]
[8 113]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
