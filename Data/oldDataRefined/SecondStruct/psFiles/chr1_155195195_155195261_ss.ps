%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUGCCCUGCGCCACGUCACAACAAAAAAGGGGGCGGUUAUAACGUGAGCAGGGCCGGAGGCCG\
) } def
/len { sequence length } bind def

/coor [
[120.24718475 279.49057007]
[117.49094391 264.74600220]
[114.73470306 250.00138855]
[111.97846222 235.25679016]
[102.04266357 227.98960876]
[99.78775024 215.47587585]
[107.00729370 204.51997375]
[104.93495178 189.66380310]
[102.86260223 174.80764771]
[100.79026031 159.95149231]
[98.71791077 145.09533691]
[96.64556885 130.23918152]
[94.57321930 115.38302612]
[85.58845520 107.64164734]
[84.22169495 95.86086273]
[91.19541931 86.26803589]
[89.81139374 71.33202362]
[88.42736816 56.39601517]
[87.04334259 41.46000290]
[85.65931702 26.52398872]
[72.48192596 18.54510307]
[66.59825134 4.50103617]
[70.07134247 -10.14142418]
[81.36534882 -19.81527710]
[79.98132324 -34.75128937]
[78.59729767 -49.68730164]
[64.15933228 -54.53138351]
[52.94425583 -64.83390045]
[46.89513779 -78.80988312]
[47.06003189 -94.03790283]
[53.41036606 -107.87962341]
[64.84590912 -117.93687439]
[79.38538361 -122.46717834]
[94.50972748 -120.68563080]
[107.59857178 -112.90090179]
[116.38419342 -100.46173859]
[119.34442139 -85.52330017]
[115.96638489 -70.67375946]
[106.83534241 -58.48589706]
[93.53330994 -51.07132721]
[94.91733551 -36.13531494]
[96.30136108 -21.19930267]
[109.18063354 -13.76543331]
[115.28513336 -0.01046720]
[112.08222961 14.87559414]
[100.59532928 25.13996315]
[101.97935486 40.07597733]
[103.36338043 55.01198959]
[104.74740601 69.94799805]
[106.13143158 84.88401031]
[116.20350647 98.12013245]
[109.42938232 113.31068420]
[111.50172424 128.16683960]
[113.57406616 143.02299500]
[115.64641571 157.87915039]
[117.71875763 172.73530579]
[119.79110718 187.59146118]
[121.86344910 202.44761658]
[133.52932739 216.48640442]
[126.72305298 232.50054932]
[129.47929382 247.24514771]
[132.23553467 261.98974609]
[134.99179077 276.73434448]
[147.36140442 286.95062256]
[146.94227600 302.98818970]
[134.05593872 312.54440308]
[118.58766174 308.28857422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[24 42]
[25 41]
[26 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
