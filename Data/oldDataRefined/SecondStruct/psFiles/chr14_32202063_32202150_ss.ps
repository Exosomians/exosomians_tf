%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUAUGAUUUUAACCUUGCUAUGUCUCUUCUAAUCGUACCGGGGACGCGUUCCUACUGUGCGUUUAAGCACUUCGCAAGGUAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[59.93056488 356.26443481]
[53.61895752 370.34161377]
[40.68611908 378.75265503]
[25.25887680 378.81356812]
[12.26000309 370.50497437]
[5.83739471 356.47808838]
[8.04048061 341.20883179]
[18.16626549 329.56958008]
[32.98364639 325.27438354]
[37.16342926 310.86849976]
[41.34320831 296.46261597]
[45.52299118 282.05673218]
[49.70277405 267.65084839]
[53.62766266 253.17344666]
[57.29643631 238.62902832]
[60.96520996 224.08460999]
[64.63397980 209.54019165]
[68.30275726 194.99577332]
[71.97152710 180.45135498]
[75.64030457 165.90693665]
[65.97166443 154.60847473]
[64.79608917 139.60574341]
[72.77335358 126.63590240]
[87.02274323 120.78260803]
[90.69151306 106.23818970]
[94.10302734 91.63128662]
[97.25622559 76.96645355]
[95.55393219 72.40435791]
[95.54933929 68.01277924]
[96.94602966 64.34838867]
[99.28559875 61.79598999]
[102.02568054 60.52822113]
[107.21122742 46.45306015]
[112.39677429 32.37789917]
[109.90728760 16.75378418]
[121.56739044 7.48603344]
[126.75293732 -6.58912563]
[131.93847656 -20.66428566]
[137.12402344 -34.73944473]
[142.30957031 -48.81460571]
[137.80967712 -68.30970764]
[152.74887085 -80.37364960]
[156.92864990 -94.77952576]
[161.10844421 -109.18540955]
[165.28822327 -123.59129333]
[169.46800232 -137.99717712]
[165.02734375 -153.78364563]
[176.67063904 -165.33206177]
[192.42024231 -160.76240540]
[196.07432556 -144.77554321]
[183.87388611 -133.81739807]
[179.69410706 -119.41151428]
[175.51431274 -105.00563049]
[171.33453369 -90.59974670]
[167.15475464 -76.19386292]
[172.98554993 -67.47345734]
[172.93049622 -56.76103973]
[166.75962830 -47.73366547]
[156.38473511 -43.62905884]
[151.19918823 -29.55389786]
[146.01364136 -15.47873974]
[140.82809448 -1.40357983]
[135.64254761 12.67157936]
[138.50294495 27.28894615]
[126.47193146 37.56344604]
[121.28638458 51.63860703]
[116.10083771 65.71376801]
[111.92105865 80.11964417]
[108.76786804 94.78448486]
[110.30438995 102.89614105]
[105.23593140 109.90695953]
[101.56716156 124.45137787]
[111.33541107 136.36303711]
[112.20648956 151.56483459]
[104.05558014 164.21499634]
[90.18472290 169.57571411]
[86.51594543 184.12013245]
[82.84717560 198.66455078]
[79.17839813 213.20896912]
[75.50962830 227.75338745]
[71.84085083 242.29780579]
[68.17208099 256.84222412]
[69.10715485 266.15887451]
[64.10865784 271.83062744]
[59.92887115 286.23651123]
[55.74909210 300.64239502]
[51.56930923 315.04827881]
[47.38952637 329.45416260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 88]
[10 87]
[11 86]
[12 85]
[13 84]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[24 72]
[25 71]
[26 69]
[27 68]
[32 67]
[33 66]
[34 65]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
