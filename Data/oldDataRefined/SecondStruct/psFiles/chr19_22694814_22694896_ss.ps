%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUAAUAGCCUUAAUUGGUCUGUUUAGCGAGGUGGUUGAUUUGCGGUGAACAGGGAGAUUCUUCAACCCCCUGCGGCUGGC\
) } def
/len { sequence length } bind def

/coor [
[72.92021179 190.82543945]
[59.93001556 198.32575989]
[44.98497772 197.04284668]
[33.46308517 187.43836975]
[29.51049995 172.96850586]
[34.55030823 158.83926392]
[20.58720207 164.31938171]
[6.62409687 169.79949951]
[-7.33900928 175.27961731]
[-21.30211639 180.75971985]
[-35.16030884 186.49998474]
[-48.90874100 192.49835205]
[-54.44866562 207.29986572]
[-68.86665344 213.77267456]
[-83.60876465 208.07656860]
[-89.92877197 193.59095764]
[-84.07712555 178.90989685]
[-69.52550507 172.74339294]
[-54.90712357 178.74992371]
[-41.15868759 172.75154114]
[-36.16589737 167.05134583]
[-26.78223038 166.79661560]
[-12.81912518 161.31649780]
[1.14398134 155.83639526]
[15.10708714 150.35627747]
[29.07019424 144.87615967]
[42.06057358 137.37615967]
[53.78804779 128.02380371]
[65.51551819 118.67146301]
[77.24298859 109.31911469]
[88.79353333 99.74911499]
[99.97816467 89.75391388]
[110.97394562 79.55132294]
[121.96972656 69.34873199]
[126.82326508 54.29039001]
[141.41571045 51.30548859]
[152.41149902 41.10289764]
[163.40727234 30.90030670]
[174.40304565 20.69771576]
[185.39883423 10.49512482]
[196.39460754 0.29253408]
[206.38980103 -10.89209843]
[215.29710388 -22.96106529]
[224.20440674 -35.03003311]
[226.17381287 -50.72818375]
[239.95693970 -56.37395477]
[235.14421082 -71.12580872]
[239.95358276 -85.87876129]
[252.53575134 -94.95999908]
[268.05261230 -94.87760162]
[280.53759766 -85.66324615]
[285.19003296 -70.86004639]
[280.22088623 -56.16013718]
[267.54095459 -47.21592712]
[252.02590942 -47.46665192]
[250.69361877 -32.63175201]
[236.27337646 -26.12272835]
[227.36607361 -14.05376244]
[218.45877075 -1.98479557]
[219.02050781 0.52676189]
[218.63002014 3.41626096]
[217.14247131 6.33053350]
[214.53929138 8.87205791]
[210.93962097 10.64246368]
[206.59719849 11.28831196]
[195.60142517 21.49090385]
[184.60563660 31.69349480]
[173.60986328 41.89608383]
[162.61408997 52.09867477]
[151.61830139 62.30126572]
[147.55125427 76.62985229]
[132.17231750 80.34451294]
[121.17653656 90.54710388]
[110.18075562 100.74969482]
[106.77547455 108.29284668]
[98.57784271 111.11869049]
[93.96794891 119.29591370]
[86.59533691 121.04659271]
[74.86786652 130.39894104]
[63.14039230 139.75128174]
[51.41292191 149.10363770]
[66.16802216 151.80307007]
[76.72352600 162.46052551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 20]
[12 19]
[27 81]
[28 80]
[29 79]
[30 78]
[31 76]
[32 74]
[33 73]
[34 72]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 59]
[43 58]
[44 57]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
