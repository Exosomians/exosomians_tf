%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCGACAAUGAUGCUCCCGAUACACCGACUAACUUCUCAUACGUUACUCGCUAAAAUCCAGACAAACAG\
) } def
/len { sequence length } bind def

/coor [
[86.15264893 248.82241821]
[72.22529602 254.69779968]
[57.18472290 256.20535278]
[42.36833954 253.21099854]
[29.09359932 245.98101807]
[18.54088593 235.15827942]
[11.64853954 221.70513916]
[9.02942371 206.81784058]
[10.91642761 191.82014465]
[17.14175987 178.04565430]
[27.15186882 166.71917725]
[40.05665970 158.84785461]
[54.70865250 155.13160706]
[69.80500031 155.90086365]
[74.93530273 141.80548096]
[74.24051666 134.20718384]
[80.60906982 127.21540833]
[86.34931946 113.35721588]
[80.90153503 99.93082428]
[86.44643402 86.54425812]
[99.79248810 80.90253448]
[105.53273773 67.04434204]
[111.27298737 53.18614960]
[101.12647247 40.32194901]
[98.77425385 24.20132828]
[104.75337982 9.14668179]
[117.37947845 -0.85211390]
[133.22007751 -3.19504786]
[138.35038757 -17.29043770]
[143.48068237 -31.38582611]
[140.92993164 -47.00005722]
[152.55360413 -56.31346893]
[157.68389893 -70.40885925]
[162.81420898 -84.50424957]
[167.94450378 -98.59963989]
[158.51992798 -110.81359863]
[157.21760559 -126.18589783]
[164.45309448 -139.81127930]
[177.91758728 -147.34194946]
[193.31460571 -146.37489319]
[205.73103333 -137.21868896]
[211.20481873 -122.79505157]
[207.98928833 -107.70651245]
[197.11053467 -96.76776886]
[182.03990173 -93.46933746]
[176.90959167 -79.37394714]
[171.77929688 -65.27855682]
[166.64898682 -51.18316650]
[169.56669617 -36.57713318]
[157.57606506 -26.25552368]
[152.44577026 -12.16013527]
[147.31546021 1.93525445]
[156.85729980 11.93753815]
[161.11463928 25.15942764]
[159.18325806 38.98234940]
[151.39068604 50.64202118]
[139.24237061 57.78125381]
[125.13118744 58.92639923]
[119.39093018 72.78459167]
[113.65068054 86.64278412]
[119.09846497 100.06917572]
[113.55356598 113.45574188]
[100.20751190 119.09746552]
[94.46726227 132.95565796]
[89.03069305 146.93577576]
[83.90039062 161.03117371]
[95.95932770 170.14561462]
[104.79464722 182.41055298]
[109.62070465 196.73538208]
[110.00836945 211.84634399]
[105.92317963 226.39978027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 66]
[15 65]
[17 64]
[18 63]
[21 60]
[22 59]
[23 58]
[28 52]
[29 51]
[30 50]
[32 48]
[33 47]
[34 46]
[35 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
