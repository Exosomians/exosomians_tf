%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAGGCCCGAGGAGCCCCACGCGCCGACCCCCAAGGGAGCGUCCCGGGCGGCCCCCGGGAGGCAGGGGGAUUCGCGUCUGGGCCGCCGCAGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[69.09979248 115.91606140]
[63.91931152 129.99308777]
[58.73883820 144.07011414]
[62.06065369 160.12930298]
[49.63561249 170.83212280]
[34.24552917 165.16842651]
[31.72240448 148.96453857]
[44.66181183 138.88963318]
[49.84228516 124.81260681]
[55.02276230 110.73558044]
[45.22621918 99.37654877]
[43.56735229 84.46855164]
[50.62726593 71.23384094]
[63.93288422 64.30848694]
[78.82328796 66.11843109]
[90.08240509 76.02965546]
[93.76628113 90.56861877]
[94.72733307 75.59943390]
[95.68839264 60.63025284]
[96.64944458 45.66107178]
[89.81221771 31.39352417]
[98.34906006 19.18813133]
[99.31011200 4.21895075]
[100.27117157 -10.75022984]
[101.23222351 -25.71941185]
[94.39499664 -39.98696136]
[102.93183899 -52.19235229]
[103.89289856 -67.16152954]
[104.61389923 -82.14419556]
[105.09467316 -97.13648987]
[105.57544708 -112.12878418]
[106.05622101 -127.12107086]
[106.53699493 -142.11337280]
[99.87821960 -146.55825806]
[95.30955505 -153.04826355]
[93.40470123 -160.68176270]
[94.37145233 -168.41996765]
[98.03028107 -175.22824097]
[103.84510803 -180.21443176]
[111.00131226 -182.74572754]
[113.86869049 -197.46911621]
[108.91209412 -212.49385071]
[118.93964386 -223.50737000]
[121.80702209 -238.23075867]
[124.67440033 -252.95414734]
[127.54177856 -267.67752075]
[130.40916443 -282.40090942]
[133.27653503 -297.12429810]
[136.14392090 -311.84768677]
[128.40591431 -325.90127563]
[134.70166016 -340.65737915]
[150.20158386 -344.79641724]
[163.01548767 -335.14328003]
[163.31362915 -319.10299683]
[150.86730957 -308.98031616]
[147.99992371 -294.25692749]
[145.13255310 -279.53353882]
[142.26516724 -264.81015015]
[139.39778137 -250.08676147]
[136.53041077 -235.36337280]
[133.66302490 -220.63999939]
[138.82472229 -206.66836548]
[128.59207153 -194.60173035]
[125.72470093 -179.87834167]
[135.80012512 -159.84167480]
[121.52928925 -141.63259888]
[121.04851532 -126.64029694]
[120.56774139 -111.64801025]
[120.08696747 -96.65571594]
[119.60619354 -81.66342163]
[122.59391785 -74.74832153]
[118.86207581 -66.20047760]
[117.90102386 -51.23129654]
[124.80698395 -38.03444672]
[116.20140076 -24.75835800]
[115.24034882 -9.78917694]
[114.27929688 5.18000412]
[113.31824493 20.14918518]
[120.22420502 33.34603882]
[111.61862183 46.62212753]
[110.65756989 61.59130859]
[109.69651794 76.56048584]
[108.73546600 91.52967072]
[112.07328033 106.15358734]
[119.43404388 119.22336578]
[126.79480743 132.29315186]
[134.15556335 145.36293030]
[141.51632690 158.43270874]
[154.55715942 169.26660156]
[147.75672913 184.79690552]
[130.95080566 182.56144714]
[128.44654846 165.79347229]
[121.08578491 152.72369385]
[113.72502136 139.65391541]
[106.36425781 126.58412933]
[99.00349426 113.51435089]
[91.52757263 114.11477661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[17 83]
[18 82]
[19 81]
[20 80]
[22 78]
[23 77]
[24 76]
[25 75]
[27 73]
[28 72]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
