%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAAAAAAACUACAGUAAAACACAUUCCCGCGUCUGACGACGCUUGUCUCACCACUAUCGCGGAU\
) } def
/len { sequence length } bind def

/coor [
[14.49044228 195.07099915]
[5.99305439 207.48837280]
[-4.70096493 218.07299805]
[-17.20503426 226.44227600]
[-31.06713867 232.29365540]
[-45.78617096 235.41558838]
[-60.83005142 235.69526672]
[-75.65494537 233.12252808]
[-89.72495270 227.79042053]
[-102.53144073 219.89166260]
[-113.61147308 209.71180725]
[-122.56450653 197.61885071]
[-129.06689453 184.04994202]
[-132.88359070 169.49557495]
[-133.87660217 154.48190308]
[-132.01005554 139.55165100]
[-127.35140991 125.24452972]
[-120.06907654 112.07775116]
[-110.42630768 100.52727509]
[-98.77168274 91.01064301]
[-85.52651215 83.87187958]
[-71.16960144 79.36904144]
[-56.21994019 77.66490936]
[-41.21794510 78.82107544]
[-26.70593834 82.79576111]
[-13.20851421 89.44527435]
[-1.21359646 98.52924347]
[8.84520531 109.71928406]
[16.60427094 122.61088562]
[30.68624878 117.44387817]
[44.76822662 112.27687836]
[58.85020447 107.10987854]
[72.93218231 101.94287109]
[79.43266296 82.29615021]
[97.89330292 72.94443512]
[117.57901764 79.32586670]
[130.07542419 71.02890015]
[142.57183838 62.73192978]
[148.23411560 55.11095428]
[155.85417175 54.35503006]
[168.72575378 46.65291595]
[181.59732056 38.95080185]
[189.09683228 24.36692238]
[205.48750305 23.84010696]
[213.90805054 37.91229630]
[205.69612122 52.10723114]
[189.29943848 51.82238007]
[176.42787170 59.52449036]
[163.55628967 67.22660828]
[150.86880493 75.22834778]
[138.37239075 83.52531433]
[125.87598419 91.82228088]
[127.10887909 101.24514008]
[125.01739502 110.51530457]
[119.85800934 118.49597168]
[112.26342773 124.20847321]
[103.16497040 126.95226288]
[93.67839050 126.39088440]
[84.96703339 122.59317780]
[78.09918213 116.02484894]
[64.01720428 121.19185638]
[49.93523026 126.35885620]
[35.85325241 131.52586365]
[21.77127457 136.69285583]
[24.19145012 151.54342651]
[23.75713158 166.58363342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[36 52]
[37 51]
[38 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
