%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:53 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACGAGUCUUAUCAAAAGAAAGUAUCAAUAAGGUUUCCACAGGAUUCUAUCAGUAGUGUCGUUGGUGUUUAGAA\
) } def
/len { sequence length } bind def

/coor [
[126.50952911 245.97981262]
[137.15794373 234.98571777]
[132.40791321 220.75767517]
[127.65789795 206.52963257]
[122.90787506 192.30157471]
[118.15785980 178.07353210]
[113.40783691 163.84548950]
[108.65781403 149.61744690]
[76.59322357 144.59788513]
[54.24744797 121.06067657]
[39.83967590 125.23394012]
[25.43190193 129.40719604]
[11.02413082 133.58045959]
[2.05570173 146.88259888]
[-13.94691944 148.02085876]
[-24.70789146 136.12208557]
[-21.97231865 120.31398010]
[-7.83869553 112.72317505]
[6.85086918 119.17269135]
[21.25864029 114.99942780]
[35.66641235 110.82616425]
[50.07418442 106.65290070]
[49.63639450 99.40396118]
[50.24561691 92.16740417]
[51.88919067 85.09368896]
[54.53294373 78.32985687]
[58.12192154 72.01652527]
[62.58150482 66.28495026]
[67.81898499 61.25428391]
[73.72548676 57.02910233]
[80.17820740 53.69725037]
[87.04299927 51.32799149]
[94.17716217 49.97058105]
[101.43238068 49.65323639]
[108.65781403 50.38256073]
[113.40783691 36.15451431]
[106.59946442 22.14438248]
[111.61933899 7.78278542]
[125.01781464 1.37837875]
[129.76783752 -12.84966755]
[134.51785278 -27.07771492]
[133.79843140 -44.01639175]
[149.87597656 -49.39679337]
[159.49682617 -35.43700790]
[148.74591064 -22.32769394]
[143.99588013 -8.09964752]
[139.24586487 6.12839890]
[146.10978699 19.29738617]
[141.49526978 33.79431534]
[127.63588715 40.90453339]
[122.88586426 55.13257980]
[131.33714294 60.56864166]
[138.54109192 67.57419586]
[144.21098328 75.87040710]
[148.12113953 85.12705231]
[150.11590576 94.97569275]
[150.11590576 105.02430725]
[148.12113953 114.87294769]
[144.21098328 124.12959290]
[138.54109192 132.42579651]
[131.33714294 139.43136597]
[122.88586426 144.86741638]
[127.63588715 159.09547424]
[132.38591003 173.32351685]
[137.13592529 187.55155945]
[141.88594055 201.77960205]
[146.63597107 216.00765991]
[151.38598633 230.23570251]
[166.50338745 232.62789917]
[178.77055359 241.78079224]
[185.36854553 255.59111023]
[184.78123474 270.88534546]
[177.14353943 284.14898682]
[164.21058655 292.33416748]
[148.95423889 293.55996704]
[134.88031006 287.54470825]
[125.22288513 275.67068481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[10 22]
[11 21]
[12 20]
[13 19]
[35 51]
[36 50]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
