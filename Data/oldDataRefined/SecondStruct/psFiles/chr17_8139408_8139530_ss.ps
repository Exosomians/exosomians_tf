%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCACAUGAACGUCGUUAUUAUAUAGUGAGGGGCGAUUGAGUCCGUGGCGACCCUAAGCUUGGGUCCUAGAGGACAAAUGAUCUGUCCGCGAAAUUGGUCGAUUCGGUGCCGCGGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[90.39793396 116.35581207]
[78.30751038 125.23396301]
[66.21708679 134.11212158]
[54.12665939 142.99028015]
[42.03623581 151.86843872]
[29.94581223 160.74658203]
[17.85538864 169.62474060]
[5.76496410 178.50289917]
[10.92615604 192.69934082]
[11.87730789 207.77487183]
[8.54131603 222.50741577]
[1.18861198 235.70266724]
[-9.58475208 246.29092407]
[-22.90542793 253.41386414]
[-37.69356918 256.49404907]
[-52.75036621 255.28179932]
[-66.85523224 249.87538147]
[-78.86474609 240.71305847]
[-87.80535889 228.53758240]
[-92.95228577 214.33596802]
[-93.88829041 199.25947571]
[-90.53749847 184.53028870]
[-83.17154694 171.34243774]
[-72.38755035 160.76499939]
[-59.05972290 153.65545654]
[-44.26849747 150.59011841]
[-29.21292496 151.81748962]
[-15.11349773 157.23808289]
[-3.11319160 166.41247559]
[8.97723198 157.53431702]
[21.06765556 148.65615845]
[33.15808105 139.77799988]
[45.24850464 130.89985657]
[57.33892822 122.02169800]
[69.42935181 113.14353943]
[81.51977539 104.26538086]
[86.18280792 83.52072144]
[109.41039276 77.87329102]
[109.41039276 62.87329102]
[109.41039276 47.87329102]
[109.41039276 32.87329102]
[109.41039276 17.87329292]
[98.49831390 1.01388597]
[108.60984802 -15.38879395]
[107.85011292 -30.36954117]
[107.09037018 -45.35028839]
[106.33063507 -60.33103561]
[95.96113586 -75.48377991]
[104.42123413 -90.80311584]
[103.28223419 -105.75980377]
[102.14323425 -120.71649933]
[98.33396149 -129.14730835]
[101.16973877 -136.06568909]
[100.41000366 -151.04643250]
[99.65026855 -166.02717590]
[98.89052582 -181.00791931]
[98.13079071 -195.98867798]
[85.54967499 -205.27574158]
[81.93186951 -220.48907471]
[88.98558807 -234.44540405]
[103.38027954 -240.55497742]
[118.31921387 -235.93302917]
[126.74868011 -222.76191711]
[124.68854523 -207.26063538]
[113.11153412 -196.74841309]
[113.87127686 -181.76766968]
[114.63101196 -166.78691101]
[115.39074707 -151.80616760]
[116.15048981 -136.82542419]
[117.09992981 -121.85549927]
[118.23892975 -106.89880371]
[119.37792206 -91.94210815]
[128.38836670 -83.76462555]
[129.39759827 -71.23490143]
[121.31138611 -61.09077454]
[122.07112122 -46.11002731]
[122.83085632 -31.12927818]
[123.59059906 -16.14853096]
[131.85763550 -9.90875340]
[135.33973694 0.08029313]
[132.63255310 10.53505993]
[124.41039276 17.87329292]
[124.41039276 32.87329102]
[124.41039276 47.87329102]
[124.41039276 62.87329102]
[124.41039276 77.87329102]
[131.68992615 90.98849487]
[144.41958618 98.92295074]
[160.22377014 99.65653229]
[166.93194580 112.95501709]
[179.66160583 120.88947296]
[192.39128113 128.82392883]
[205.12094116 136.75839233]
[217.85060120 144.69285583]
[233.06149292 141.33627319]
[245.85815430 149.56428528]
[248.96440125 164.08622742]
[261.69406128 172.02069092]
[274.42373657 179.95515442]
[287.15338135 187.88961792]
[299.88305664 195.82406616]
[315.77297974 193.61282349]
[327.30935669 204.76142883]
[325.64245605 220.71765137]
[312.05099487 229.24124146]
[296.96115112 223.79360962]
[291.94860840 208.55374146]
[279.21893311 200.61927795]
[266.48925781 192.68481445]
[253.75959778 184.75035095]
[241.02993774 176.81590271]
[226.62409973 180.42247009]
[213.60137939 172.55714417]
[209.91613770 157.42251587]
[197.18647766 149.48805237]
[184.45681763 141.55360413]
[171.72715759 133.61914062]
[158.99748230 125.68467712]
[144.10380554 125.51862335]
[136.48512268 111.65261841]
[123.75546265 103.71815491]
[118.24245453 113.63506317]
[109.20546722 119.43555450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[44 78]
[45 77]
[46 76]
[47 75]
[49 72]
[50 71]
[51 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[87 121]
[88 120]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
