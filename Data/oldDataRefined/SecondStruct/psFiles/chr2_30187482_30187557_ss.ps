%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAGUCCCUCCGUCUCUUUCCGAGAGGAUUACGUGCUGUCUGGGCGGGUCUUACCGGAGAGACAAGGAUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[67.95294189 386.54336548]
[52.81102753 386.57714844]
[38.47938538 381.69015503]
[26.51260757 372.41247559]
[18.20875740 359.75054932]
[14.46857452 345.07778931]
[15.69776821 329.98580933]
[21.76300240 316.11166382]
[32.00637054 304.96035767]
[45.31674194 297.74142456]
[60.25031281 295.23797607]
[62.68745422 280.43728638]
[65.12459564 265.63662720]
[54.54322052 255.18804932]
[52.11464691 240.33657837]
[58.97706604 226.74391174]
[72.68587494 219.71719360]
[75.12301636 204.91650391]
[77.56015778 190.11582947]
[79.99729919 175.31513977]
[82.43444061 160.51445007]
[84.87158203 145.71376038]
[87.30873108 130.91307068]
[89.74587250 116.11238861]
[81.38655090 104.27735138]
[83.74075317 89.98036194]
[95.45344543 81.45046997]
[97.89058685 66.64978027]
[100.32772827 51.84909439]
[102.76486969 37.04840851]
[105.20201111 22.24772072]
[107.63915253 7.44703388]
[105.92169952 -1.82063603]
[110.48942566 -7.90253019]
[113.52823639 -22.59149361]
[116.56705475 -37.28045654]
[111.78593445 -52.36194992]
[121.94117737 -63.25783157]
[114.36752319 -77.40065002]
[120.83484650 -92.08238220]
[136.38197327 -96.04045868]
[149.08247375 -86.23858643]
[149.19361877 -70.19591522]
[136.63014221 -60.21901703]
[141.62861633 -46.18817520]
[131.25601196 -34.24164200]
[128.21719360 -19.55267906]
[125.17839050 -4.86371756]
[122.43984222 9.88417625]
[120.00270081 24.68486214]
[117.56555939 39.48554993]
[115.12841797 54.28623581]
[112.69126892 69.08692169]
[110.25412750 83.88761139]
[118.61344910 95.72264862]
[116.25924683 110.01963806]
[104.54655457 118.54953003]
[102.10941315 133.35021973]
[99.67227173 148.15090942]
[97.23513031 162.95159912]
[94.79798889 177.75227356]
[92.36084747 192.55296326]
[89.92370605 207.35365295]
[87.48656464 222.15434265]
[98.21857452 233.20558167]
[100.36040497 248.28092957]
[93.29816437 261.56961060]
[79.92528534 268.07376099]
[77.48814392 282.87445068]
[75.05099487 297.67514038]
[88.39343262 304.83462524]
[98.68642426 315.94015503]
[104.81346893 329.78710938]
[106.10995483 344.87344360]
[102.43524170 359.56274414]
[94.18793488 372.26159668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 70]
[12 69]
[13 68]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[34 48]
[35 47]
[36 46]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
