%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUACAAAGAAGGUUGACUUAACCGUUAAGCGUGACCUUAUGACUUAUCGGUUGUCUGGUGUUCCUUCUGUAGUGAGAAUCGAGGACAAACUUUGGUUGUCGAUGUCGUUUGGUAACCAGAACUAAGUCCCGGAU\
) } def
/len { sequence length } bind def

/coor [
[173.24923706 146.22538757]
[160.03326416 142.94804382]
[150.09971619 133.47727966]
[146.13380432 120.22461700]
[131.65237427 116.31465149]
[117.17092896 112.40468597]
[103.10051727 120.95480347]
[87.15701294 116.84561157]
[78.97226715 102.55957794]
[64.40498352 98.98268890]
[49.83769226 95.40580750]
[35.27040482 91.82891846]
[20.70311737 88.25202942]
[6.13582945 84.67514038]
[-5.71392488 94.51838684]
[-20.90991974 95.48540497]
[-33.61128616 87.41451263]
[-39.05945969 73.57777405]
[-53.62674713 70.00088501]
[-68.19403839 66.42399597]
[-82.87571716 63.35019684]
[-97.65441895 60.78311920]
[-112.43312836 58.21604538]
[-127.21183014 55.64896774]
[-141.99053955 53.08189392]
[-156.76924133 50.51481628]
[-171.68997192 55.77622986]
[-182.90531921 45.97495270]
[-197.68403625 43.40787506]
[-212.46273804 40.84080124]
[-227.24143982 38.27372360]
[-242.04859924 35.87626266]
[-256.88229370 33.64872742]
[-271.71597290 31.42119026]
[-286.54965210 29.19365501]
[-301.60565186 35.69357681]
[-314.59942627 25.68890762]
[-312.16412354 9.47159386]
[-296.80496216 3.72461677]
[-284.32211304 14.35997391]
[-269.48843384 16.58750916]
[-254.65475464 18.81504440]
[-239.82107544 21.04257965]
[-232.67654419 18.90633583]
[-224.67436218 23.49501991]
[-209.89566040 26.06209564]
[-195.11695862 28.62917137]
[-180.33825684 31.19624710]
[-166.47459412 25.75122070]
[-154.20216370 35.73611069]
[-139.42346191 38.30318832]
[-124.64475250 40.87026215]
[-109.86605072 43.43733978]
[-95.08734131 46.00441742]
[-80.30863953 48.57149124]
[-77.17696381 46.77721024]
[-72.99898529 46.46301270]
[-68.50486755 48.11339951]
[-64.61714935 51.85670853]
[-50.04985809 55.43359756]
[-35.48257065 59.01048660]
[-24.24536133 49.27071762]
[-9.25034714 48.00046158]
[3.76958752 55.89569473]
[9.71271801 70.10784912]
[24.28000641 73.68473816]
[38.84729385 77.26162720]
[53.41458130 80.83851624]
[67.98186493 84.41540527]
[82.54915619 87.99229431]
[92.57879639 80.15956879]
[105.28680420 79.48740387]
[116.08676147 86.21837616]
[121.08089447 97.92324066]
[135.56233215 101.83320618]
[150.04377747 105.74317932]
[163.01950073 94.95862579]
[179.69926453 94.00997162]
[193.53694153 103.07230377]
[199.21891785 118.43036652]
[213.78620911 122.00725555]
[228.35350037 125.58414459]
[241.76336670 117.65866852]
[256.48571777 121.49365997]
[263.95880127 134.32676697]
[278.52609253 137.90365601]
[293.09338379 141.48052979]
[307.66067505 145.05741882]
[318.94161987 133.02604675]
[334.65335083 128.32746887]
[350.50546265 132.14649963]
[362.21844482 143.35531616]
[366.67895508 158.84432983]
[381.32443237 162.08625793]
[395.96990967 165.32818604]
[410.61538696 168.57011414]
[425.26086426 171.81204224]
[439.90634155 175.05397034]
[454.55181885 178.29589844]
[469.19726562 181.53782654]
[483.84274292 184.77975464]
[498.48822021 188.02169800]
[513.13372803 191.26362610]
[527.77917480 194.50555420]
[540.96923828 185.79939270]
[556.43524170 189.05181885]
[565.00146484 202.33322144]
[561.58569336 217.76397705]
[548.21447754 226.18928528]
[532.82073975 222.61058044]
[524.53723145 209.15103149]
[509.89175415 205.90908813]
[495.24630737 202.66716003]
[480.60083008 199.42523193]
[465.95535278 196.18330383]
[451.30987549 192.94137573]
[436.66439819 189.69944763]
[422.01892090 186.45751953]
[407.37344360 183.21559143]
[392.72799683 179.97366333]
[378.08251953 176.73171997]
[363.43704224 173.48979187]
[354.86163330 184.17906189]
[342.44958496 190.14239502]
[328.61297607 190.15727234]
[316.06835938 184.16348267]
[307.30346680 173.28607178]
[304.08377075 159.62471008]
[289.51647949 156.04782104]
[274.94918823 152.47093201]
[260.38192749 148.89404297]
[247.81492615 156.80645752]
[232.99066162 153.38650513]
[224.77661133 140.15142822]
[210.20932007 136.57453918]
[195.64202881 132.99765015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[6 74]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[18 61]
[19 60]
[20 59]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[28 48]
[29 47]
[30 46]
[31 45]
[32 43]
[33 42]
[34 41]
[35 40]
[80 136]
[81 135]
[82 134]
[85 131]
[86 130]
[87 129]
[88 128]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
