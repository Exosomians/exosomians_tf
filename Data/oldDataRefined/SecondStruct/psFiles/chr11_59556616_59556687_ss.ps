%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAAUGGCCUUCUUCACUUUGCACACCUUUUACGGUUCUUUGAAAUAGAAGGUUAUCGUCCGAAAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[144.04048157 348.42498779]
[140.39161682 333.76681519]
[141.02162170 318.67443848]
[145.87940979 304.37133789]
[154.57121277 292.01702881]
[166.39241028 282.61297607]
[160.72679138 268.72409058]
[155.06117249 254.83523560]
[149.39555359 240.94636536]
[143.72993469 227.05749512]
[138.06431580 213.16862488]
[132.39869690 199.27975464]
[126.73307037 185.39086914]
[121.06745148 171.50199890]
[115.40183258 157.61312866]
[101.00505066 159.62783813]
[86.54854584 158.09947205]
[72.89132690 153.11882019]
[60.84490585 144.98185730]
[51.12507629 134.17208862]
[44.30939484 121.33180237]
[40.80284119 107.22398376]
[40.81378174 92.68692017]
[44.34156418 78.58439636]
[51.17656708 65.75438690]
[60.91265488 54.95925140]
[72.97131348 46.84043121]
[67.90847015 32.72067261]
[62.84562683 18.60091400]
[48.44896698 12.08080769]
[42.95766830 -2.73881412]
[49.62961960 -17.06573296]
[64.50646973 -22.40004349]
[78.76204681 -15.57699108]
[83.93877411 -0.64457434]
[76.96538544 13.53806973]
[82.02822876 27.65782928]
[87.09107208 41.77758789]
[102.41893005 40.41276932]
[117.58572388 43.01551437]
[131.58158875 49.41252518]
[143.47462463 59.17786407]
[152.47293091 71.66130829]
[157.97737122 86.03166199]
[159.62142944 101.33209229]
[157.29565430 116.54382324]
[151.15489197 130.65399170]
[141.60801697 142.72309875]
[129.29071045 151.94750977]
[134.95632935 165.83638000]
[140.62194824 179.72525024]
[146.28756714 193.61412048]
[151.95318604 207.50300598]
[157.61880493 221.39187622]
[163.28442383 235.28074646]
[168.95004272 249.16961670]
[174.61566162 263.05847168]
[180.28128052 276.94735718]
[195.30731201 275.39974976]
[210.16044617 278.14950562]
[223.63659668 284.97372437]
[234.64332581 295.31918335]
[242.28837585 308.34722900]
[245.95196533 323.00173950]
[245.33712769 338.09472656]
[240.49369812 352.40270996]
[231.81431580 364.76574707]
[220.00257874 374.18167114]
[206.01600647 379.88714600]
[190.98841858 381.41964722]
[176.13806152 378.65496826]
[162.66876221 371.81723022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[27 38]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
