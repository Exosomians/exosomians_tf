%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUCGCCUUCGCGAACAGAGACACCGCGUUAGCCAAUCGCGCAAGCCGACAAUUGGCUUUCUAACCACCAAGCUCGGGUGGGUCCCUGCGAAUAACCUUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[149.82687378 262.47949219]
[141.44145203 250.04226685]
[136.79371643 235.78047180]
[136.24133301 220.78768921]
[127.56768036 233.02566528]
[118.89402771 245.26362610]
[110.22037506 257.50158691]
[101.54671478 269.73953247]
[100.56377411 286.10922241]
[85.77674866 293.19976807]
[72.39727783 283.71707153]
[74.18900299 267.41610718]
[89.30875397 261.06588745]
[97.98240662 248.82792664]
[106.65606689 236.58996582]
[115.32971954 224.35200500]
[124.00337219 212.11404419]
[128.76409912 197.88957214]
[129.20445251 182.89604187]
[129.64479065 167.90251160]
[122.28446198 154.95358276]
[130.42355347 141.38648987]
[130.86389160 126.39295959]
[131.30424500 111.39942169]
[107.06929779 129.20755005]
[81.80732727 119.66082001]
[76.77793884 96.25389099]
[63.50397491 89.26805115]
[50.23001480 82.28221130]
[36.95605469 75.29637146]
[23.58180428 82.98616028]
[8.17439651 82.20174408]
[-4.34972048 73.19341278]
[-9.99414635 58.83569336]
[-6.95776510 43.71009064]
[3.79052520 32.64311981]
[18.82098389 29.16621780]
[33.33744812 34.38884735]
[42.70776367 46.64448929]
[43.94189835 62.02240753]
[57.21585846 69.00824738]
[70.48981476 75.99409485]
[83.76377869 82.97993469]
[94.13715363 72.19259644]
[111.30609131 68.66192627]
[110.86574554 53.66839218]
[110.42539978 38.67485809]
[109.98505402 23.68132401]
[109.54470062 8.68778801]
[109.10435486 -6.30574656]
[108.66400909 -21.29928207]
[102.15529633 -36.95409012]
[115.39651489 -47.54212189]
[129.23629761 -37.74943542]
[123.65754700 -21.73962784]
[124.09789276 -6.74609375]
[124.53823853 8.24744129]
[124.97858429 23.24097633]
[125.41893005 38.23451233]
[125.85928345 53.22804642]
[126.29962921 68.22158051]
[132.41860962 72.55841064]
[136.88618469 58.23916245]
[151.88514709 58.06337738]
[156.68708801 72.27398682]
[144.65657043 81.23206329]
[150.77555847 85.56889343]
[165.06837463 81.01748657]
[179.36119080 76.46607971]
[193.65400696 71.91468048]
[207.94683838 67.36327362]
[213.72206116 52.83121109]
[227.51162720 45.45679855]
[242.80450439 48.72200394]
[252.37989807 61.08509827]
[251.71656799 76.70860291]
[241.12773132 88.21558380]
[225.61311340 90.17279053]
[212.49824524 81.65608978]
[198.20541382 86.20749664]
[183.91259766 90.75890350]
[169.61978149 95.31030273]
[155.32695007 99.86170959]
[146.29777527 111.83976746]
[145.85743713 126.83330536]
[145.41708374 141.82684326]
[152.74592590 155.84820557]
[144.63833618 168.34284973]
[144.19798279 183.33638000]
[143.75764465 198.32992554]
[153.22138977 186.69215393]
[165.51710510 178.10058594]
[179.69944763 173.21578979]
[194.67796326 172.41333008]
[209.30102539 175.75491333]
[222.44430542 182.98361206]
[233.09729004 193.54364014]
[240.44087219 206.62306213]
[243.91046143 221.21627808]
[243.23928833 236.20126343]
[238.47895813 250.42585754]
[229.99545288 262.79641724]
[218.44107056 272.36175537]
[204.70416260 278.38650513]
[189.84092712 280.40737915]
[174.99412537 278.26904297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[18 90]
[19 89]
[20 88]
[22 86]
[23 85]
[24 84]
[27 43]
[28 42]
[29 41]
[30 40]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
