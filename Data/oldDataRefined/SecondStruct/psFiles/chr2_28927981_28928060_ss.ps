%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACGACACUACUGAUAGUAACCCAAAGCGUACAACGACUCAAGGUCACUACGGAGAAAAGAGAACCGACAGACUCGUU\
) } def
/len { sequence length } bind def

/coor [
[138.56779480 236.35491943]
[129.95706177 231.50932312]
[122.63632202 224.85850525]
[116.97743988 216.73408508]
[113.26921082 207.54273987]
[111.70267487 197.74578857]
[112.36124420 187.83599854]
[115.21630096 178.31289673]
[120.12838745 169.65751648]
[126.85401917 162.30812073]
[119.10353088 149.46562195]
[112.78764343 145.25776672]
[111.31266022 135.97143555]
[104.06597137 122.83805847]
[96.81928253 109.70468903]
[90.31150818 104.56994629]
[89.55751038 95.91855621]
[82.82552338 82.51406860]
[76.09353638 69.10958099]
[69.36154938 55.70508957]
[56.25373840 46.84529877]
[57.45605469 31.99930000]
[50.72406769 18.59481049]
[43.99208069 5.19032049]
[28.81314278 2.56238270]
[18.21599770 -8.37168980]
[16.11408424 -23.27289581]
[23.10595703 -36.39736557]
[16.37397003 -49.80185699]
[9.38331699 -63.07328033]
[2.13662839 -76.20665741]
[-5.11006069 -89.34002686]
[-18.05606651 -100.28704834]
[-11.12067223 -115.75756073]
[5.66515112 -113.37586212]
[8.02331257 -96.58671570]
[15.27000237 -83.45334625]
[22.51669121 -70.31996918]
[28.66466713 -65.87038422]
[29.77845955 -56.53384399]
[36.51044846 -43.12935257]
[51.21314621 -40.90030670]
[61.91057205 -30.31592941]
[64.35287476 -15.28633976]
[57.39656830 -1.54166710]
[64.12855530 11.86282253]
[70.86054230 25.26731300]
[83.48683929 33.16832352]
[82.76603699 48.97310257]
[89.49802399 62.37759018]
[96.23001099 75.78208160]
[102.96200562 89.18656921]
[109.95265198 102.45800018]
[117.19934082 115.59136963]
[124.44602966 128.72474670]
[131.94602966 141.71511841]
[139.69651794 154.55763245]
[161.05412292 151.92855835]
[181.07705688 159.64093018]
[195.07147217 175.82434082]
[199.78614807 196.62992859]
[194.16778564 217.14572144]
[205.84326172 226.56291199]
[217.51873779 235.98008728]
[231.81770325 230.37338257]
[247.00190735 232.68318176]
[258.98690796 242.28816223]
[264.54876709 256.60461426]
[262.19137573 271.78152466]
[252.54888916 283.73635864]
[238.21505737 289.25329590]
[223.04560852 286.84835815]
[211.12107849 277.16845703]
[205.64907837 262.81738281]
[208.10154724 247.65556335]
[196.42607117 238.23838806]
[184.75061035 228.82119751]
[176.70533752 234.46836853]
[167.59378052 238.18284607]
[157.87319946 239.77331543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 57]
[11 56]
[13 55]
[14 54]
[15 53]
[17 52]
[18 51]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[28 41]
[29 40]
[30 38]
[31 37]
[32 36]
[62 77]
[63 76]
[64 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
