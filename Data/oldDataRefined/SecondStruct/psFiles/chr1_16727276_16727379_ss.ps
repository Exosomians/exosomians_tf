%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAUCUCCGGAACCACCACGUCACCAUCUUAAGAGCGGAGGGUGCACCCUCUGGGCCCAAGUUAAGGGCCGGUUACGUCGUCCAUGAAGAAGUAAAGUAAUA\
) } def
/len { sequence length } bind def

/coor [
[130.39323425 441.27114868]
[137.25900269 427.63940430]
[149.36465454 418.34341431]
[146.24597168 403.67120361]
[136.03160095 392.83071899]
[140.73060608 377.72344971]
[137.61193848 363.05123901]
[134.49325562 348.37899780]
[124.27889252 337.53854370]
[128.97789001 322.43124390]
[125.85922241 307.75903320]
[113.98896790 304.44747925]
[104.64086914 296.30609131]
[99.67239380 284.86959839]
[100.10633087 272.33514404]
[105.92092896 261.14041138]
[116.04196930 253.48933411]
[113.80633545 238.65687561]
[104.25855255 227.22494507]
[109.85263062 212.42572021]
[107.61699677 197.59326172]
[105.38136292 182.76080322]
[103.14572906 167.92832947]
[93.59794617 156.49639893]
[99.19201660 141.69717407]
[96.95638275 126.86471558]
[94.72074890 112.03225708]
[94.46817017 127.03012848]
[87.37272644 140.24581909]
[75.01120758 148.74246216]
[60.13067627 150.63186646]
[46.03798676 145.49415588]
[35.86491013 134.47106934]
[31.87217712 120.01222229]
[34.94707870 105.33077240]
[44.40628815 93.68932343]
[58.14772034 87.67491913]
[73.11662292 88.62379456]
[67.84600067 74.58026886]
[62.57538223 60.53675079]
[57.30475998 46.49322510]
[52.03413773 32.44970322]
[46.76351547 18.40617943]
[41.49289322 4.36265707]
[28.48915672 -5.62908602]
[30.90834236 -21.84881401]
[46.26179504 -27.61106110]
[58.75519943 -16.98812294]
[55.53641510 -0.90796518]
[60.80703735 13.13555813]
[66.07765961 27.17908096]
[71.34828186 41.22260284]
[76.61890411 55.26612854]
[81.88952637 69.30964661]
[87.16014862 83.35317230]
[101.95750427 85.81044006]
[111.48424530 74.22418976]
[121.01097870 62.63793182]
[130.53771973 51.05167770]
[140.06445312 39.46542358]
[137.01789856 24.12748146]
[144.58840942 10.44459820]
[159.20143127 4.87741327]
[173.95713806 10.05458260]
[181.88835144 23.53160286]
[179.25016785 38.94503784]
[167.28826904 49.01713943]
[151.65071106 48.99216080]
[142.12397766 60.57841492]
[132.59722900 72.16467285]
[123.07049561 83.75092316]
[113.54376221 95.33718109]
[109.55320740 109.79662323]
[111.78884125 124.62908173]
[114.02447510 139.46154785]
[123.73217010 151.95439148]
[117.97818756 165.69270325]
[120.21382141 180.52516174]
[122.44945526 195.35762024]
[124.68508911 210.19009399]
[134.39277649 222.68293762]
[128.63879395 236.42124939]
[130.87443542 251.25370789]
[147.11880493 258.99301147]
[155.50520325 274.73742676]
[152.90948486 292.22946167]
[140.53143311 304.64035034]
[143.65011597 319.31259155]
[154.08755493 331.20251465]
[149.16548157 345.26034546]
[152.28414917 359.93255615]
[155.40283203 374.60476685]
[165.84027100 386.49468994]
[160.91819763 400.55252075]
[164.03686523 415.22473145]
[178.87696838 418.79324341]
[190.69367981 428.45388794]
[197.14077759 442.28854370]
[196.93821716 457.55032349]
[190.12619019 471.20898438]
[178.05723572 480.55258179]
[163.12765503 483.72598267]
[148.30171204 480.09902954]
[136.52314758 470.39193726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[6 92]
[7 91]
[8 90]
[10 88]
[11 87]
[17 83]
[18 82]
[20 80]
[21 79]
[22 78]
[23 77]
[25 75]
[26 74]
[27 73]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
