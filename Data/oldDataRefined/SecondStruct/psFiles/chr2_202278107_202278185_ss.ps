%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGUUACAACAGUUACUACGUAAGAAUAACCUUGACUUAAAUUCACUAGACUGAGUAAGCAGUGAUGGUGACUCUGUU\
) } def
/len { sequence length } bind def

/coor [
[68.06458282 106.25103760]
[53.07614517 105.66213989]
[38.08771133 105.07324982]
[23.09927559 104.48435211]
[8.11083984 103.89545441]
[-6.87759590 103.30655670]
[-21.86603165 102.71765900]
[-29.07670021 116.12540436]
[-41.34368515 125.03652191]
[-56.20242310 127.72688293]
[-70.69622803 123.71557617]
[-81.96462250 113.84984589]
[-87.80786133 100.12679291]
[-102.79629517 99.53789520]
[-117.78473663 98.94899750]
[-126.75203705 101.79537201]
[-133.34671021 98.03126526]
[-148.30046082 96.85437775]
[-161.38442993 106.13820648]
[-176.76002502 101.55885315]
[-182.63241577 86.62920380]
[-174.49681091 72.80200195]
[-158.59414673 70.68430328]
[-147.12358093 81.90061951]
[-132.16981506 83.07750702]
[-117.19583893 83.96056366]
[-102.20739746 84.54946136]
[-87.21896362 85.13835907]
[-80.31703949 71.91606903]
[-68.30932617 62.96485519]
[-53.54547882 60.10308456]
[-38.94362640 63.95095825]
[-27.41361427 73.79706573]
[-21.27713394 87.72922516]
[-6.28869820 88.31811523]
[8.69973755 88.90701294]
[23.68817329 89.49591064]
[38.67660904 90.08480835]
[53.66504288 90.67370605]
[68.65348053 91.26260376]
[79.56517792 74.67482758]
[98.08425903 67.51498413]
[117.31652069 72.44850922]
[130.10226440 87.63877869]
[144.91760254 85.29226685]
[159.73292542 82.94574738]
[174.54824829 80.59922791]
[189.36357117 78.25271606]
[204.17889404 75.90619659]
[218.04800415 63.98355484]
[234.18399048 70.58441925]
[248.89576721 67.65806580]
[263.60754395 64.73171234]
[278.31933594 61.80535507]
[286.89022827 48.52697754]
[302.35736084 45.28000641]
[315.54440308 53.99080658]
[318.62765503 69.49142456]
[309.77792358 82.58560944]
[294.24557495 85.50481415]
[281.24566650 76.51713562]
[266.53390503 79.44348907]
[251.82212830 82.36984253]
[237.11033630 85.29620361]
[229.99673462 95.28485870]
[217.56576538 97.72003174]
[206.52540588 90.72151947]
[191.71008301 93.06803894]
[176.89476013 95.41455078]
[162.07943726 97.76107025]
[147.26411438 100.10758972]
[132.44879150 102.45410919]
[130.03956604 112.51283264]
[124.59552765 121.30742645]
[116.66667938 127.94938660]
[107.05403900 131.76770020]
[96.72875214 132.37661743]
[86.73394775 129.71461487]
[78.07937622 124.05062866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[13 28]
[14 27]
[15 26]
[17 25]
[18 24]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
