%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACUCCGGAAUUUCAUGACAUCGUCGUGUAGUACCAAAUGUACGAUGUCAGUUCUACGCUUAGUAAUAAACGACGAGAUCUUUAAAUUCCUUUAAGUAAGUUUUGAUACAAAAGUAGUAGUC\
) } def
/len { sequence length } bind def

/coor [
[176.58537292 337.49645996]
[170.20549011 328.17764282]
[165.53491211 317.89059448]
[162.71623230 306.94586182]
[161.83610535 295.67413330]
[162.92260742 284.41619873]
[165.94432068 273.51275635]
[170.81121826 263.29394531]
[177.37744141 254.06950378]
[185.44554138 246.11927795]
[177.30734253 233.51889038]
[169.16914368 220.91850281]
[161.03096008 208.31809998]
[152.89276123 195.71771240]
[144.75456238 183.11732483]
[136.61637878 170.51693726]
[121.75904083 169.88633728]
[109.98263550 160.51722717]
[105.93387604 145.83863831]
[111.36746979 131.42399597]
[103.22927856 118.82360077]
[89.08638763 115.67320251]
[81.22515106 103.50163269]
[84.17033386 89.31459045]
[76.03214264 76.71420288]
[67.89394379 64.11381531]
[59.75575256 51.51342392]
[51.61755753 38.91303635]
[43.47936630 26.31264687]
[35.34117126 13.71225739]
[20.06007576 14.37209892]
[6.58936119 7.34098053]
[-1.49958396 -5.40403175]
[-2.11891103 -20.38643456]
[4.79765749 -33.57835007]
[-3.34053659 -46.17874146]
[-11.47873020 -58.77912903]
[-25.46549606 -66.17378998]
[-25.87109566 -81.06287384]
[-34.00928879 -93.66326141]
[-47.99605560 -101.05791473]
[-48.40165710 -115.94699860]
[-56.53984833 -128.54739380]
[-64.67804718 -141.14778137]
[-72.81623840 -153.74816895]
[-86.80300140 -161.14282227]
[-87.20860291 -176.03190613]
[-95.34679413 -188.63229370]
[-103.48499298 -201.23268127]
[-118.31703186 -208.22857666]
[-119.40459442 -224.59162903]
[-105.62888336 -233.48892212]
[-91.16117859 -225.76770020]
[-90.88460541 -209.37088013]
[-82.74640656 -196.77049255]
[-74.60821533 -184.17010498]
[-61.20354843 -177.67671204]
[-60.21585083 -161.88636780]
[-52.07765579 -149.28596497]
[-43.93946075 -136.68557739]
[-35.80126572 -124.08519745]
[-22.39660072 -117.59179688]
[-21.40890121 -101.80145264]
[-13.27070713 -89.20106506]
[0.13395917 -82.70767212]
[1.12165833 -66.91732025]
[9.25985241 -54.31693649]
[17.39804649 -41.71654510]
[32.26725006 -42.59537506]
[45.66907883 -35.86878204]
[53.95935440 -23.25380325]
[54.82792664 -8.08335972]
[47.94155884 5.57406378]
[56.07975388 18.17445183]
[64.21794891 30.77484131]
[72.35614014 43.37522888]
[80.49433899 55.97562027]
[88.63253021 68.57601166]
[96.77072144 81.17639923]
[110.91361237 84.32679749]
[118.77484894 96.49836731]
[115.82966614 110.68540955]
[123.96785736 123.28579712]
[139.34167480 124.26160431]
[151.05609131 133.98918152]
[154.75259399 148.57684326]
[149.21676636 162.37875366]
[157.35494995 174.97914124]
[165.49314880 187.57952881]
[173.63134766 200.17991638]
[181.76953125 212.78030396]
[189.90773010 225.38069153]
[198.04592896 237.98107910]
[216.50343323 232.14152527]
[235.84774780 231.98660278]
[254.36898804 237.52160645]
[270.43255615 248.24923706]
[282.62326050 263.21429443]
[289.87017822 281.08880615]
[291.54052734 300.28964233]
[287.49508667 319.11904907]
[278.09960938 335.91445923]
[293.38116455 340.01138306]
[297.08972168 354.43688965]
[307.82772827 364.91046143]
[318.56573486 375.38400269]
[329.30374146 385.85757446]
[340.04174805 396.33111572]
[355.60223389 403.06219482]
[353.44177246 419.87792969]
[336.68511963 422.45697021]
[329.56820679 407.06912231]
[318.83020020 396.59555054]
[308.09219360 386.12200928]
[297.35418701 375.64846802]
[286.61618042 365.17489624]
[272.10269165 361.82714844]
[267.62606812 346.65246582]
[258.31570435 352.97784424]
[248.04640198 357.59622192]
[237.12817383 360.36651611]
[225.89093018 361.20358276]
[214.67443848 360.08062744]
[203.81811523 357.03018188]
[193.65071106 352.14312744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[20 83]
[21 82]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[35 68]
[36 67]
[37 66]
[39 64]
[40 63]
[42 61]
[43 60]
[44 59]
[45 58]
[47 56]
[48 55]
[49 54]
[102 118]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
