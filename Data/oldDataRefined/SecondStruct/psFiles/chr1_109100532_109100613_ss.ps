%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGUCUUCACUACUUAACUAGUCUAUCUGCUCCGGCCCGAACAGGGGCCGGUGACUAAUAGCUCCGCUAAGACUAGACCC\
) } def
/len { sequence length } bind def

/coor [
[68.40826416 276.07482910]
[58.83198166 287.71777344]
[46.74720764 296.73007202]
[32.85653687 302.58779907]
[17.96755409 304.95031738]
[2.94588304 303.68035889]
[-11.33513451 298.85168457]
[-24.04521942 290.74508667]
[-34.44542313 279.83181763]
[-41.93109131 266.74639893]
[-46.06702042 252.24958801]
[-46.61274719 237.18420410]
[-43.53654861 222.42614746]
[-37.01726913 208.83340454]
[-27.43393326 197.19627380]
[-15.34369850 188.19128418]
[-1.44947886 182.34201050]
[13.44093418 179.98849487]
[28.46183205 181.26757812]
[42.73992157 186.10488892]
[50.80606461 173.45826721]
[58.87220764 160.81163025]
[66.93835449 148.16499329]
[75.00449371 135.51835632]
[83.07064056 122.87172699]
[91.13677979 110.22509766]
[86.63005066 107.09065247]
[83.38173676 101.98069763]
[82.23381805 95.45655823]
[83.76393890 88.42443848]
[88.15066528 82.00965118]
[95.09767914 77.38106537]
[89.53029633 62.57178497]
[99.09866333 51.15708160]
[101.36103058 36.32867050]
[103.62339020 21.50026321]
[105.88575745 6.67185354]
[108.14812469 -8.15655518]
[110.41048431 -22.98496437]
[112.67285156 -37.81337357]
[103.11013031 -50.39629364]
[105.32849121 -66.04412079]
[118.01181030 -75.47327423]
[133.63529968 -73.08959961]
[142.92984009 -60.30729675]
[140.38111877 -44.70987701]
[127.50125885 -35.55101013]
[125.23889923 -20.72259903]
[122.97653198 -5.89419079]
[120.71416473 8.93421841]
[118.45180511 23.76262665]
[116.18943787 38.59103394]
[113.92707062 53.41944504]
[119.65628052 67.16809845]
[109.92609406 79.64343262]
[117.08430481 66.46162415]
[131.64443970 62.85575867]
[144.12707520 71.17345428]
[146.40530396 85.99943542]
[136.99591064 97.68117523]
[122.02530670 98.61338043]
[136.42495728 102.81459808]
[150.82460022 107.01582336]
[165.22424316 111.21704102]
[182.12289429 109.84894562]
[188.11553955 125.70846558]
[174.53474426 135.85726929]
[161.02301025 125.61668396]
[146.62336731 121.41546631]
[132.22372437 117.21424103]
[117.82408905 113.01302338]
[103.78341675 118.29123688]
[95.71726990 130.93786621]
[87.65113068 143.58450317]
[79.58498383 156.23114014]
[71.51883698 168.87777710]
[63.45269775 181.52439880]
[55.38655472 194.17103577]
[65.79337311 205.07798767]
[73.28697205 218.15885925]
[77.43168640 232.65316772]
[77.98654938 247.71821594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[32 55]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
