%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGUCGUUUGUAGACUGACUUUCGAAUCGACACAGAAUGUCGAAGGUCAGCCCCUACAAAUGUUGUUGUCUGAAAGACUUGU\
) } def
/len { sequence length } bind def

/coor [
[157.56101990 273.24612427]
[153.12304688 262.35992432]
[151.76008606 250.66714478]
[153.58009338 239.02064514]
[158.45860291 228.27220154]
[166.04710388 219.21025085]
[158.06661987 206.50938416]
[150.08613586 193.80851746]
[142.10565186 181.10766602]
[134.12516785 168.40679932]
[126.14469147 155.70593262]
[118.16421509 143.00506592]
[110.18373108 130.30421448]
[102.20324707 117.60334778]
[85.34195709 109.99369049]
[84.41844177 91.51782990]
[75.51113892 79.44886017]
[66.60383606 67.37989807]
[57.69653702 55.31092834]
[48.78923416 43.24196243]
[39.88193130 31.17299461]
[30.97462845 19.10402870]
[22.06732559 7.03506136]
[13.16002178 -5.03390551]
[4.25271940 -17.10287285]
[-4.65458345 -29.17183876]
[-23.40637589 -36.10239792]
[-25.32674026 -55.19365311]
[-35.11104965 -66.56323242]
[-50.88789749 -67.49420166]
[-61.32291031 -79.36374664]
[-60.22518539 -95.12986755]
[-48.24597931 -105.43880463]
[-32.49234772 -104.17445374]
[-22.31063652 -92.08692932]
[-23.74147606 -76.34754181]
[-13.95716476 -64.97796631]
[-3.43971300 -65.09548950]
[5.51780748 -59.16866684]
[9.69203854 -49.03094864]
[7.41438341 -38.07914352]
[16.32168579 -26.01017570]
[25.22898865 -13.94120789]
[34.13629150 -1.87224162]
[43.04359436 10.19672489]
[51.95089722 22.26569176]
[60.85820007 34.33465958]
[69.76550293 46.40362549]
[78.67280579 58.47259140]
[87.58010864 70.54155731]
[96.48741150 82.61052704]
[106.68802643 83.56825256]
[114.65804291 90.00630951]
[117.73929596 99.77748108]
[114.90411377 109.62286377]
[122.88459015 122.32373047]
[130.86508179 135.02459717]
[138.84555054 147.72544861]
[146.82603455 160.42631531]
[154.80651855 173.12718201]
[162.78700256 185.82804871]
[170.76748657 198.52890015]
[178.74795532 211.22976685]
[197.33876038 208.11679077]
[215.46713257 213.10862732]
[229.77287292 225.23937988]
[237.62141418 242.22369385]
[237.58905029 260.88720703]
[229.72094727 277.75985718]
[239.92353821 288.75561523]
[250.12612915 299.75140381]
[260.32870483 310.74719238]
[275.53433228 318.24554443]
[272.53836060 334.93267822]
[255.67401123 336.67324829]
[249.33294678 320.94976807]
[239.13035583 309.95401001]
[228.92776489 298.95822144]
[218.72517395 287.96243286]
[208.18843079 292.95718384]
[196.68339539 294.95104980]
[185.04873657 293.79003906]
[174.13493347 289.55047607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[28 37]
[29 36]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
