%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUUUUAUACCUUGCGAAGUGCUUAAACGCACAGUAGGAACGCGUCCCCGGUACGAUUAGAAGAGACAUAGCAAGGUUAAAAUCAUAUAC\
) } def
/len { sequence length } bind def

/coor [
[102.28884888 342.74285889]
[103.14178467 327.50360107]
[110.52983093 314.14770508]
[122.98609924 305.32705688]
[120.43743896 290.54516602]
[117.88878632 275.76327515]
[115.34012604 260.98138428]
[112.79147339 246.19947815]
[108.46179199 240.01382446]
[110.41716766 230.87007141]
[108.37466431 216.00978088]
[106.33216858 201.14949036]
[104.28966522 186.28919983]
[102.24716949 171.42890930]
[100.20466614 156.56861877]
[98.16217041 141.70832825]
[75.46669006 133.77987671]
[60.90615845 114.65041351]
[59.30867004 90.66305542]
[71.20392609 69.77171326]
[62.97714996 57.22898483]
[54.75037384 44.68625259]
[46.52359390 32.14352036]
[38.29681778 19.60078812]
[21.49201965 19.06864357]
[8.39699173 8.78815365]
[3.97951436 -7.09241104]
[9.76800537 -22.34994698]
[1.11780059 -34.60449600]
[-7.53240442 -46.85904312]
[-16.18260956 -59.11359024]
[-31.34781647 -57.04596329]
[-45.73285675 -62.27369308]
[-56.03215790 -73.59548950]
[-59.87900925 -88.40968323]
[-56.38943863 -103.31208038]
[-46.36531830 -114.87821960]
[-32.11012268 -120.45029449]
[-16.89958763 -118.74787140]
[-4.22898579 -110.16216278]
[2.99007344 -96.66609192]
[3.09870267 -81.36096954]
[-3.92806077 -67.76379395]
[4.72214413 -55.50924683]
[13.37234879 -43.25469971]
[22.02255440 -31.00015068]
[35.44869232 -32.04224777]
[47.71178055 -26.21903229]
[55.51376343 -14.97661781]
[56.69692230 -1.23411155]
[50.83955002 11.37400913]
[59.06632614 23.91674042]
[67.29310608 36.45947266]
[75.51988220 49.00220490]
[83.74665833 61.54493713]
[91.28794861 59.17031479]
[99.14168549 58.26001740]
[107.02620697 58.84668350]
[114.65873718 60.90927887]
[121.76554108 64.37383270]
[128.09175110 69.11608124]
[133.41047668 74.96595764]
[137.53096008 81.71365356]
[140.30541992 89.11717987]
[141.63436890 96.91100311]
[141.47013855 104.81561279]
[139.81861877 112.54751587]
[136.73904419 119.82940674]
[132.34185791 126.40014648]
[126.78474426 132.02406311]
[120.26702881 136.49945068]
[113.02245331 139.66583252]
[115.06495667 154.52612305]
[117.10745239 169.38641357]
[119.14995575 184.24670410]
[121.19245148 199.10699463]
[123.23495483 213.96728516]
[125.27745056 228.82757568]
[127.57336426 243.65081787]
[130.12202454 258.43270874]
[132.67068481 273.21459961]
[135.21932983 287.99649048]
[137.76799011 302.77838135]
[152.45890808 306.91842651]
[163.89299011 317.02902222]
[169.79998779 331.10275269]
[169.00708008 346.34527588]
[161.67167664 359.73013306]
[149.25024414 368.59979248]
[134.20906067 371.19314575]
[119.53456116 366.99533081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[6 81]
[7 80]
[8 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[28 46]
[29 45]
[30 44]
[31 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
