%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGUACUUACCUACUUGCUCUAAGGGUGACAGGGAUGGAUGAUAGGUCGCUUUGGUGUCGGUUCCCUUGCCUGAACCGCCUUAGUCGCCCCUUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[-2.20140362 319.55422974]
[-13.10976315 317.60632324]
[-23.18835449 313.03240967]
[-33.02728271 324.35476685]
[-42.86621094 335.67709351]
[-36.78274155 349.67547607]
[-37.38396835 364.92672729]
[-44.55051422 378.40277100]
[-56.85945892 387.42788696]
[-71.86685181 390.21011353]
[-86.59296417 386.19711304]
[-98.11391449 376.18557739]
[-104.14221191 362.16336060]
[-103.48093414 346.91458130]
[-96.26137543 333.46688843]
[-83.91698456 324.49032593]
[-68.89875031 321.76718140]
[-54.18855667 325.83816528]
[-44.34962845 314.51583862]
[-34.51070023 303.19348145]
[-43.29574203 286.02905273]
[-44.00345612 266.71472168]
[-36.46289444 248.86991882]
[-22.05238152 235.85485840]
[-3.44775391 230.13787842]
[15.87447834 232.82731628]
[23.44172096 219.87599182]
[31.00896454 206.92466736]
[38.57620621 193.97334290]
[46.14345169 181.02201843]
[53.71069336 168.07069397]
[61.27793503 155.11936951]
[68.64284515 142.05192566]
[75.80364227 128.87152100]
[82.96444702 115.69111633]
[90.12524414 102.51071930]
[90.93058777 94.33474731]
[97.71923065 89.03682709]
[105.28646851 76.08550262]
[112.85371399 63.13417816]
[107.58325195 52.24335480]
[108.30218506 40.28687286]
[114.70893860 30.30972290]
[125.06855011 24.79486847]
[136.68089294 25.04571152]
[145.03868103 12.58989143]
[153.39645386 0.13407201]
[161.75424194 -12.32174778]
[170.11203003 -24.77756691]
[176.22727966 -38.47441483]
[179.92146301 -53.01240158]
[183.61564636 -67.55038452]
[178.64793396 -83.17900848]
[189.89727783 -95.11150360]
[205.79132080 -91.07273865]
[209.97962952 -75.21745300]
[198.15364075 -63.85620117]
[194.45945740 -49.31821823]
[190.76527405 -34.78023148]
[203.16467285 -43.22149277]
[218.04370117 -45.12260818]
[232.16720581 -40.07020950]
[242.46427917 -29.16285133]
[246.69599915 -14.77214146]
[243.94226074 -0.02707642]
[234.80181885 11.86629772]
[221.26210022 18.32198334]
[206.26704407 17.93630791]
[193.07708740 10.79313087]
[184.56013489 -1.55439460]
[182.56785583 -16.41978264]
[174.21006775 -3.96396375]
[165.85227966 8.49185562]
[157.49449158 20.94767570]
[149.13671875 33.40349579]
[153.83013916 50.96243286]
[144.18710327 66.73859406]
[125.80503845 70.70142365]
[118.23780060 83.65274811]
[110.67055511 96.60407257]
[103.30564117 109.67151642]
[96.14484406 122.85191345]
[88.98404694 136.03231812]
[81.82324982 149.21272278]
[80.43074799 158.42431641]
[74.22926331 162.68659973]
[66.66201782 175.63793945]
[59.09477615 188.58926392]
[51.52753448 201.54058838]
[43.96028900 214.49191284]
[36.39304733 227.44323730]
[28.82580376 240.39456177]
[36.43223572 248.63040161]
[41.76513672 258.47702026]
[44.50037384 269.32241821]
[44.47502136 280.49438477]
[41.69707108 291.30203247]
[36.34452820 301.07870483]
[28.75402069 309.22283936]
[19.39962769 315.23519897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[33 84]
[34 83]
[35 82]
[36 81]
[38 80]
[39 79]
[40 78]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
