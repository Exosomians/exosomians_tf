%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCGGGGGGUGAUGGUGUUUAAUACGUCAGCUCAAAGGGUGUAAACCCCUUUAGCGUCCCCAGUCGUGUAGGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[123.52798462 197.26216125]
[122.03772736 190.67187500]
[122.44267273 183.89416504]
[124.72922516 177.46578979]
[128.73402405 171.90100098]
[121.84456635 158.57676697]
[114.95510864 145.25251770]
[108.06564331 131.92828369]
[101.17618561 118.60404205]
[83.23351288 113.96122742]
[75.75268555 93.93191528]
[60.77936554 93.03768921]
[45.80604553 92.14346313]
[30.83272171 91.24923706]
[15.85940075 90.35501099]
[7.46774864 103.21875000]
[-6.23875237 110.14892578]
[-21.57312202 109.28136444]
[-34.41049194 100.84943390]
[-41.29767609 87.12127686]
[-40.38205338 71.78970337]
[-31.90992355 58.97882462]
[-18.16024780 52.13470459]
[-2.83161712 53.09838104]
[9.95264149 61.61062622]
[16.75362778 75.38169098]
[31.72694969 76.27591705]
[46.70027161 77.17014313]
[61.67359161 78.06436920]
[76.64691162 78.95859528]
[89.05647278 70.53227997]
[93.74842072 56.28497696]
[98.44037628 42.03767395]
[98.17277527 32.62766647]
[103.61246490 27.32376099]
[108.86712646 13.27425957]
[114.12178802 -0.77524334]
[119.37644958 -14.82474613]
[124.63111115 -28.87424850]
[129.88577271 -42.92375183]
[122.02999115 -56.44487381]
[124.75424957 -71.84333038]
[136.77223206 -81.84844208]
[152.40940857 -81.73609924]
[164.28239441 -71.55934906]
[166.78511047 -56.12333679]
[158.73588562 -42.71648407]
[143.93527222 -37.66908646]
[138.68061829 -23.61958504]
[133.42594910 -9.57008266]
[128.17129517 4.47941923]
[122.91662598 18.52892113]
[117.66196442 32.57842255]
[112.68767548 46.72962570]
[107.99572754 60.97692490]
[103.30377960 75.22422791]
[120.26696014 91.92033386]
[114.50042725 111.71458435]
[121.38988495 125.03881836]
[128.27934265 138.36306763]
[135.16880798 151.68730164]
[142.05825806 165.01153564]
[165.15940857 174.79313660]
[167.06625366 199.19360352]
[177.77777100 209.69424438]
[188.48930359 220.19487000]
[204.48129272 221.47381592]
[213.33239746 234.85430908]
[208.25280762 250.07197571]
[193.13914490 255.45312500]
[179.58531189 246.86979675]
[177.98866272 230.90638733]
[167.27714539 220.40576172]
[156.56561279 209.90513611]
[150.39189148 212.11685181]
[143.81346130 212.52479553]
[137.34913635 211.07830811]
[131.51385498 207.87374878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[31 56]
[32 55]
[33 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
