%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACCCUACCCAAAUCUGGAUUGACUUCAUUUUGAAGACUUCAAGCGGACUUGUCCCUGAACUUGGGACCUGGGAGUCUAAUUUUCAGACUACGAGAUGGCUGACUCGAUAGGUCCGAGAGAUGUGACCCGAGA\
) } def
/len { sequence length } bind def

/coor [
[153.45314026 130.27848816]
[160.37345886 143.58671570]
[163.11323547 158.33438110]
[161.43440247 173.24014282]
[155.48284912 187.00889587]
[145.77565002 198.44438171]
[133.15621948 206.55302429]
[118.72099304 210.63031006]
[103.72415924 210.32196045]
[89.46871948 205.65480042]
[77.19324493 197.03433228]
[67.96427917 185.20951843]
[62.58368301 171.20776367]
[61.51894379 156.24559021]
[64.86257172 141.62300110]
[72.32272339 128.61213684]
[57.33872604 129.30490112]
[42.35473251 129.99765015]
[27.37073898 130.69039917]
[18.07000542 139.71113586]
[5.51722622 139.93165588]
[-3.49744153 131.78157043]
[-18.49343872 132.12803650]
[-33.48943710 132.47450256]
[-48.48543549 132.82096863]
[-63.46043015 133.68673706]
[-78.39644623 135.07077026]
[-93.33245850 136.45478821]
[-108.26847076 137.83882141]
[-123.20448303 139.22283936]
[-138.41816711 146.70484924]
[-149.81932068 134.15693665]
[-140.91795349 119.72773743]
[-124.58850861 124.28683472]
[-109.65249634 122.90280914]
[-94.71648407 121.51878357]
[-79.78047180 120.13475800]
[-64.84445190 118.75073242]
[-62.28980637 116.19860840]
[-58.33677292 114.80292511]
[-53.56460571 115.22327423]
[-48.83190536 117.82497406]
[-33.83590698 117.47850800]
[-18.83990860 117.13204193]
[-3.84390998 116.78557587]
[10.57834148 106.85472107]
[26.67798615 115.70640564]
[41.66197968 115.01364899]
[56.64597702 114.32089996]
[71.62996674 113.62815094]
[76.01027679 107.54022217]
[69.84570312 93.86550140]
[84.77089691 95.36435699]
[89.15120697 89.27642822]
[85.04626465 74.84904480]
[80.94132233 60.42166138]
[76.83637238 45.99427795]
[72.73143005 31.56689262]
[58.38590240 25.34276009]
[51.44366837 11.33064365]
[55.18264389 -3.85336471]
[67.83739471 -13.03983974]
[83.43273163 -11.89120865]
[94.60502625 -0.94982034]
[96.07904816 14.61813641]
[87.15881348 27.46194839]
[91.26376343 41.88933182]
[95.36870575 56.31671906]
[99.47364807 70.74410248]
[103.57859802 85.17148590]
[115.44364929 94.34865570]
[130.43965149 94.69512177]
[144.41485596 87.27864075]
[156.96002197 95.30785370]
[171.95600891 95.65431976]
[180.69776917 92.70348358]
[187.29328918 96.18596649]
[202.27728271 96.87872314]
[217.26127625 97.57147217]
[228.88568115 87.20271301]
[244.07171631 88.11871338]
[253.88510132 99.26469421]
[268.86911011 99.95744324]
[283.85308838 100.65019989]
[298.83709717 101.34294891]
[313.82809448 101.86259460]
[328.82406616 102.20906067]
[342.79928589 94.79257965]
[355.34445190 102.82179260]
[370.34045410 103.16825867]
[385.33645630 103.51472473]
[400.33242798 103.86119843]
[417.46618652 93.35363007]
[433.61032104 103.89982605]
[448.60632324 103.55335999]
[463.60232544 103.20688629]
[478.59832764 102.86042023]
[487.31555176 90.02338409]
[501.92474365 84.79355621]
[516.80834961 89.18190002]
[526.24334717 101.50102234]
[526.60174561 117.01395416]
[517.74578857 129.75567627]
[503.08071899 134.82670593]
[488.24557495 130.27716064]
[478.94479370 117.85642242]
[463.94879150 118.20288849]
[448.95278931 118.54935455]
[433.95678711 118.89582825]
[427.51336670 126.96706390]
[417.46618652 130.18025208]
[407.11044312 127.22496033]
[399.98596191 118.85719299]
[384.98999023 118.51072693]
[369.99398804 118.16426086]
[354.99798584 117.81778717]
[342.09539795 125.25904846]
[328.47760010 117.20506287]
[313.48162842 116.85858917]
[306.66079712 119.87602234]
[298.14434814 116.32694244]
[283.16033936 115.63419342]
[268.17633057 114.94144440]
[253.19235229 114.24868774]
[242.39239502 124.44165802]
[227.18663025 123.95256042]
[216.56852722 112.55546570]
[201.58453369 111.86271667]
[186.60054016 111.16996765]
[171.60954285 110.65032196]
[156.61354065 110.30384827]
[143.71095276 117.74511719]
[130.09318542 109.69112396]
[115.09718323 109.34465790]
[129.78688049 112.37989807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 50]
[17 49]
[18 48]
[19 47]
[22 45]
[23 44]
[24 43]
[25 42]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[71 134]
[72 133]
[74 131]
[75 130]
[77 129]
[78 128]
[79 127]
[82 124]
[83 123]
[84 122]
[85 121]
[86 119]
[87 118]
[89 116]
[90 115]
[91 114]
[92 113]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
