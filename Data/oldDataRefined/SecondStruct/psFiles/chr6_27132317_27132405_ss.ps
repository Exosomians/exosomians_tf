%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCGAGAAUUUUCUCGGCAAUCCCAACUCUCAAACGUUGGUUGAGUGACAAAUGAAUCGCGACCACAUGAACCACUGCCGGAAUCA\
) } def
/len { sequence length } bind def

/coor [
[90.24540710 171.38536072]
[100.84275055 159.88621521]
[98.75515747 145.03219604]
[83.85574341 142.05723572]
[70.79267883 134.29840088]
[59.30201340 143.94021606]
[47.81134796 153.58203125]
[36.32068253 163.22384644]
[24.83001518 172.86566162]
[13.33934879 182.50747681]
[8.24201679 198.09429932]
[-7.85880613 201.20806885]
[-18.39997482 188.64559937]
[-12.53763866 173.33007812]
[3.69753432 171.01681519]
[15.18820095 161.37500000]
[26.67886734 151.73318481]
[38.16953278 142.09136963]
[49.66020203 132.44955444]
[61.15086746 122.80773926]
[57.39073944 114.62528229]
[55.33316040 105.85844421]
[55.06034470 96.85751343]
[56.58319092 87.98214722]
[59.84085464 79.58699036]
[64.70317078 72.00746918]
[54.66621017 60.86029816]
[44.62924957 49.71312714]
[34.59229279 38.56595230]
[24.55533218 27.41878128]
[9.13791847 29.17462349]
[-4.35047817 21.50371933]
[-10.72329426 7.35568571]
[-7.53005123 -7.82926798]
[4.00138283 -18.21221733]
[19.43693733 -19.80070877]
[32.84132385 -11.98393059]
[39.06028748 2.23240256]
[35.70250320 17.38182259]
[45.73946381 28.52899551]
[55.77642059 39.67616653]
[65.81338501 50.82334137]
[75.85034180 61.97051239]
[93.17935944 55.46993256]
[111.65964508 56.48562622]
[128.17187500 64.84615326]
[139.92895508 79.14032745]
[154.19480896 74.50507355]
[168.46066284 69.86981964]
[182.72650146 65.23456573]
[186.00694275 50.29515457]
[196.25703430 39.07763672]
[210.65003967 34.52706528]
[225.29034424 37.77008057]
[236.26776123 47.83795547]
[250.53361511 43.20269775]
[264.79946899 38.56744385]
[267.31335449 23.46979904]
[276.56475830 11.27676868]
[290.42779541 4.79022503]
[305.71679688 5.50072670]
[318.91848755 13.24500561]
[326.99920654 26.24348450]
[328.10208130 41.50920486]
[321.97366333 55.53422165]
[310.02221680 65.09568024]
[294.99411011 67.99643707]
[280.34268188 63.56991196]
[269.43472290 52.83329010]
[255.16886902 57.46854782]
[240.90301514 62.10380173]
[237.93984985 76.70124054]
[228.00178528 87.93025970]
[213.68283081 92.70876312]
[198.79685974 89.65844727]
[187.36175537 79.50041199]
[173.09591675 84.13566589]
[158.83006287 88.77091980]
[144.56422424 93.40617371]
[144.09870911 109.20605469]
[138.20405579 123.87254333]
[127.60594940 135.59999084]
[113.60917664 142.94459534]
[115.69676971 157.79861450]
[129.05319214 165.93127441]
[134.00820923 180.76306152]
[128.22224426 195.29084778]
[114.42723083 202.65505981]
[99.13675690 199.37854004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[47 79]
[48 78]
[49 77]
[50 76]
[55 71]
[56 70]
[57 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
