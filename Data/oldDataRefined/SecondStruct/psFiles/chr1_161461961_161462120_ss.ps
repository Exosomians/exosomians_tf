%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUCCCCUCCACACUUCCCCGGACCGUCAACCGUCCGUCUCGGUUGCUUCCUUCCGAAGGGACUGGCCCUUAGCUUGGGCCCGGCGCCGCCACUCUCGCGGCUUAGGAUUGGUGAUCUGGUGGUCCCUCUCCGCCGAAGUCCCGGGCCGAACGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[97.85021973 312.72052002]
[93.36190796 327.48056030]
[81.59143829 337.45349121]
[66.29473114 339.45703125]
[52.35289764 332.85180664]
[44.21473312 319.74554443]
[44.47710037 304.32043457]
[53.05627060 291.49850464]
[67.21466827 285.37124634]
[69.54673004 270.55364990]
[71.87879181 255.73603821]
[74.21085358 240.91844177]
[68.54635620 227.14299011]
[78.33509827 214.71354675]
[70.05058289 197.27458191]
[82.83533478 181.73187256]
[73.43280029 170.23718262]
[74.99752045 155.10423279]
[87.11795807 145.31993103]
[88.87011719 130.42260742]
[90.62228394 115.52529907]
[78.71456146 106.40355682]
[64.78739166 111.97437286]
[50.86022568 117.54519653]
[36.93305969 123.11601257]
[23.00589371 128.68682861]
[19.33046150 143.76234436]
[7.47406912 153.77261353]
[-8.00426006 154.86849976]
[-21.15279007 146.62861633]
[-26.91564560 132.22135925]
[-23.07688904 117.18660736]
[-11.11260223 107.30554199]
[4.37670422 106.37762451]
[17.43507385 114.75966644]
[31.36224174 109.18885040]
[45.28940964 103.61802673]
[59.21657562 98.04721069]
[73.14373779 92.47638702]
[73.21691132 84.97674561]
[73.36325836 69.97746277]
[73.43643188 62.47781754]
[59.62061310 56.63631439]
[45.80479431 50.79481125]
[31.98897552 44.95331192]
[17.49205589 50.65217590]
[3.56406498 44.53125000]
[-1.77959359 30.67553329]
[-17.97811317 33.23287964]
[-28.08033180 20.31478500]
[-21.69395447 5.21027517]
[-5.38873768 3.45757604]
[4.06190872 16.85971451]
[17.72454643 11.04009914]
[31.81896591 16.76740074]
[37.83047867 31.13749123]
[51.64629745 36.97899246]
[65.46211243 42.82049561]
[79.27793121 48.66199875]
[100.17149353 68.28636932]
[103.09973145 92.55361176]
[114.64248657 82.97422028]
[126.18524933 73.39482880]
[137.72801208 63.81543732]
[149.27076721 54.23604584]
[160.81352234 44.65665817]
[165.69857788 30.47440720]
[162.50360107 15.81862068]
[159.30862427 1.16283309]
[156.11364746 -13.49295425]
[152.91867065 -28.14874268]
[138.99029541 -35.25751877]
[132.93762207 -49.67622757]
[137.61851501 -64.59678650]
[150.82281494 -72.97417450]
[166.31584167 -70.85284424]
[176.78227234 -59.23441315]
[177.28018188 -43.60475540]
[167.57444763 -31.34372139]
[170.76943970 -16.68793297]
[173.96441650 -2.03214622]
[177.15939331 12.62364101]
[180.35437012 27.27942848]
[193.60469055 34.31001282]
[207.53186035 28.73919487]
[221.45901489 23.16837502]
[235.38618469 17.59755516]
[247.11366272 8.24520779]
[255.64389038 -4.09315109]
[264.17413330 -16.43151093]
[272.70434570 -28.76987076]
[281.23458862 -41.10823059]
[276.92309570 -56.13969803]
[283.32952881 -70.40474701]
[297.42898560 -77.16785431]
[312.56411743 -73.23569489]
[321.58856201 -60.46490479]
[320.24130249 -44.88546753]
[309.15841675 -33.85351562]
[293.57293701 -32.57799530]
[285.04272461 -20.23963737]
[276.51248169 -7.90127707]
[267.98223877 4.43708229]
[259.45202637 16.77544212]
[262.90249634 23.43458176]
[277.88696289 24.11698914]
[269.80346680 36.75286102]
[273.25396729 43.41199875]
[288.25326538 43.55834198]
[303.25253296 43.70468903]
[314.49142456 32.91927338]
[329.70074463 33.28135681]
[339.91372681 44.06238556]
[354.91302490 44.20872879]
[363.57534790 41.15097809]
[370.20278931 44.50711823]
[385.19638062 44.94609833]
[400.18994141 45.38507843]
[415.18353271 45.82405853]
[429.35491943 37.57154846]
[443.45114136 45.95179749]
[442.97122192 62.34392166]
[428.40884399 69.88510895]
[414.74453735 60.81763077]
[399.75097656 60.37865067]
[384.75738525 59.93967056]
[369.76382446 59.50069427]
[354.76666260 59.20801544]
[339.76739502 59.06167221]
[329.34600830 69.64137268]
[314.13250732 69.70662689]
[303.10620117 58.70397568]
[288.10690308 58.55762863]
[273.10763550 58.41128540]
[240.95700073 31.52472115]
[227.02984619 37.09554291]
[213.10267639 42.66636276]
[199.17550659 48.23717880]
[185.61709595 58.83617020]
[170.39291382 56.19941711]
[158.85015869 65.77880859]
[147.30738831 75.35820007]
[135.76463318 84.93758392]
[124.22187805 94.51697540]
[112.67911530 104.09636688]
[105.51959229 117.27745819]
[103.76743317 132.17477417]
[102.01527405 147.07208252]
[111.53477478 159.40159607]
[109.54561615 174.48463440]
[97.73265076 183.48403931]
[104.99324799 191.66816711]
[106.49168396 202.28329468]
[101.96958160 211.75978088]
[93.15270233 217.04560852]
[98.65039825 231.88090515]
[89.02845764 243.25050354]
[86.69639587 258.06811523]
[84.36433411 272.88571167]
[82.03227997 287.70330811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 160]
[10 159]
[11 158]
[12 157]
[14 155]
[16 151]
[19 148]
[20 147]
[21 146]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[42 59]
[43 58]
[44 57]
[45 56]
[48 53]
[61 145]
[62 144]
[63 143]
[64 142]
[65 141]
[66 140]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[84 138]
[85 137]
[86 136]
[87 135]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[108 134]
[109 133]
[110 132]
[113 129]
[114 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
