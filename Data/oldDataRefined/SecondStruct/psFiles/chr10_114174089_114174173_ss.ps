%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCAGGUUGGUCGGUUCUCACCCUCCUUUUCUGGCGCCACUCUUUGUGUCGGCUGCGGAGUGAGUCGCCGGCAAAGGGGUUU\
) } def
/len { sequence length } bind def

/coor [
[78.90261078 321.75500488]
[87.05200195 307.52407837]
[86.50417328 292.53408813]
[85.95634460 277.54409790]
[85.40851593 262.55410767]
[84.86067963 247.56410217]
[74.24331665 243.01538086]
[66.13571930 234.71516418]
[61.79866791 223.89714050]
[61.92836380 212.19068909]
[66.54496765 201.37548828]
[74.98348999 193.11096191]
[85.98927307 188.68173218]
[87.08420563 173.72174072]
[88.17913055 158.76176453]
[89.27406311 143.80177307]
[90.36898804 128.84179688]
[91.46392059 113.88180542]
[83.72816467 99.10749054]
[93.03340149 85.26786804]
[93.58123016 70.27787781]
[94.12905884 55.28788376]
[94.67688751 40.29788971]
[95.22472382 25.30789948]
[92.31011963 18.94476700]
[93.11085510 13.01350307]
[96.39962769 9.25517654]
[98.04019928 -5.65483809]
[99.68076324 -20.56485176]
[87.41155243 -29.69795799]
[81.40082550 -43.65388870]
[83.17087555 -58.64499664]
[92.14688110 -70.65695953]
[105.83798981 -76.52373505]
[107.47856140 -91.43374634]
[109.11912537 -106.34376526]
[110.75969696 -121.25377655]
[112.40026855 -136.16378784]
[114.04083252 -151.07380676]
[115.68140411 -165.98382568]
[104.11051178 -176.32278442]
[100.85946655 -191.49546814]
[107.17836761 -205.66766357]
[120.63745117 -213.38987732]
[136.06144714 -211.69276428]
[147.51948547 -201.22888184]
[150.60574341 -186.02182007]
[144.13348389 -171.91900635]
[130.59141541 -164.34326172]
[128.95085144 -149.43324280]
[127.31027985 -134.52322388]
[125.66970825 -119.61321259]
[124.02914429 -104.70319366]
[122.38857269 -89.79318237]
[120.74800873 -74.88316345]
[132.83595276 -66.17988586]
[138.98545837 -52.50364685]
[137.45364380 -37.48632431]
[128.55227661 -25.17119026]
[114.59078217 -18.92428398]
[112.95021057 -4.01426983]
[111.30964661 10.89574528]
[110.21471405 25.85573006]
[109.66688538 40.84572220]
[109.11904907 55.83571625]
[108.57122040 70.82570648]
[108.02339172 85.81569672]
[115.49205780 94.94378662]
[114.84611511 106.72026825]
[106.42390442 114.97673798]
[105.32897949 129.93672180]
[104.23404694 144.89669800]
[103.13911438 159.85668945]
[102.04418945 174.81666565]
[100.94925690 189.77665710]
[115.98723602 201.18923950]
[121.33957672 219.14109802]
[115.10420990 236.65133667]
[99.85067749 247.01628113]
[100.39850616 262.00625610]
[100.94633484 276.99627686]
[101.49416351 291.98626709]
[102.04199982 306.97625732]
[111.20844269 320.57434082]
[103.77318573 335.19107056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[27 62]
[28 61]
[29 60]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
