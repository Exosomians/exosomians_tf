%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUGUCACAUACGUUCUCAUUACACCUCAAACACGAUUGAGAUCGGUCGAAUUAAUCACUGACCUAUUUAACGUGUUGAGAGUGUAAGA\
) } def
/len { sequence length } bind def

/coor [
[31.25811386 286.50341797]
[27.00595856 300.96658325]
[19.41549683 313.99148560]
[8.92802906 324.82092285]
[-3.84671569 332.82525635]
[-18.16603088 337.53912354]
[-33.19741058 338.68847656]
[-48.06695175 336.20651245]
[-61.91015625 330.23748779]
[-73.92220306 321.12847900]
[-83.40471649 309.40902710]
[-89.80641174 295.76052856]
[-92.75508881 280.97647095]
[-92.07932281 265.91635132]
[-87.81839752 251.45578003]
[-80.22003937 238.43547058]
[-69.72600555 227.61241150]
[-56.94641113 219.61582947]
[-42.62424088 214.91062927]
[-27.59216690 213.77038574]
[-12.72413349 216.26136780]
[1.11545014 222.23876953]
[10.17899609 210.28669739]
[19.24254227 198.33462524]
[28.30608749 186.38255310]
[37.36963272 174.43046570]
[46.43317795 162.47839355]
[55.29134750 150.37332153]
[63.94155121 138.11877441]
[72.59175873 125.86421967]
[81.24195862 113.60967255]
[89.89216614 101.35512543]
[91.65541077 93.30106354]
[99.05280304 88.83670807]
[108.11634827 76.88462830]
[117.17989349 64.93254852]
[126.24343872 52.98047638]
[129.02046204 44.05187988]
[135.82612610 40.78210831]
[145.29244995 29.14644051]
[154.75877380 17.51077080]
[164.22508240 5.87510157]
[173.69140625 -5.76056767]
[170.77778625 -19.03923416]
[176.03079224 -31.36524582]
[187.29298401 -38.25559998]
[200.26821899 -37.34815979]
[210.12628174 -48.65385437]
[219.98432922 -59.95954895]
[229.84239197 -71.26524353]
[239.70043945 -82.57093811]
[234.64628601 -97.07442474]
[237.53675842 -112.15888214]
[247.59434509 -123.76665497]
[262.11358643 -128.77532959]
[277.18890381 -125.83758545]
[288.76510620 -115.74366760]
[293.72824097 -101.20878601]
[290.74325562 -86.14274597]
[280.61309814 -74.59824371]
[266.06274414 -69.68069458]
[251.00613403 -72.71288300]
[241.14808655 -61.40719223]
[231.29002380 -50.10149384]
[221.43197632 -38.79579926]
[211.57391357 -27.49010468]
[213.48880005 -10.87799263]
[202.66236877 2.30271077]
[185.32707214 3.70575142]
[175.86076355 15.34142113]
[166.39443970 26.97709084]
[156.92811584 38.61275864]
[147.46180725 50.24842834]
[138.19551086 62.04402161]
[129.13197327 73.99610138]
[120.06842804 85.94817352]
[111.00488281 97.90025330]
[102.14671326 110.00532532]
[93.49650574 122.25988007]
[84.84630585 134.51441956]
[76.19609833 146.76896667]
[67.54589081 159.02352905]
[65.07531738 168.04171753]
[58.38525772 171.54194641]
[49.32170868 183.49401855]
[40.25816345 195.44609070]
[31.19461823 207.39816284]
[22.13107300 219.35025024]
[13.06752682 231.30232239]
[22.55714798 243.01600647]
[28.96711159 256.66064453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 82]
[29 81]
[30 80]
[31 79]
[32 78]
[34 77]
[35 76]
[36 75]
[37 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
