%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGUUCCACUAAGGGAGAGGUUCCCCUGUAGUCACGGAGAGUCCUUUCAUCGUCGAACCUUAUCUUAGACCGUACGGAUUCCGGAAACCCCUUGACCCUACGAAUAAAGGAGACGGAAGGAACCGACGGGUGUACCUA\
) } def
/len { sequence length } bind def

/coor [
[59.80492401 145.85844421]
[51.01528168 136.31994629]
[44.44182968 125.13823700]
[40.38197327 112.81921387]
[25.44067192 114.14491272]
[10.49936867 115.47061157]
[-4.44193316 116.79631805]
[-19.38323593 118.12201691]
[-34.32453918 119.44771576]
[-47.38688278 128.37440491]
[-60.74817657 121.79222107]
[-75.68947601 123.11791992]
[-80.68951416 134.67338562]
[-90.09490967 142.93461609]
[-102.05943298 146.36242676]
[-114.26947021 144.35842896]
[-124.39134979 137.36842346]
[-130.51739502 126.78511810]
[-145.50270081 127.44862366]
[-160.48802185 128.11212158]
[-175.47334290 128.77561951]
[-190.45866394 129.43911743]
[-205.44398499 130.10261536]
[-220.42103577 130.93183899]
[-235.38801575 131.92668152]
[-250.35498047 132.92153931]
[-265.31002808 134.08187866]
[-280.25134277 135.40757751]
[-293.31369019 144.33425903]
[-306.67498779 137.75207520]
[-321.61627197 139.07777405]
[-334.71990967 148.93817139]
[-349.70309448 142.27217102]
[-351.15246582 125.93719482]
[-337.57699585 116.73725891]
[-322.94198608 124.13647461]
[-308.00067139 122.81077576]
[-296.00704956 113.97891235]
[-281.57705688 120.46627808]
[-266.63574219 119.14057159]
[-260.20022583 115.38659668]
[-251.34983826 117.95455933]
[-236.38285828 116.95971680]
[-221.41589355 115.96487427]
[-214.89891052 112.35417938]
[-206.10748291 115.11730194]
[-191.12216187 114.45380402]
[-176.13684082 113.79029846]
[-161.15151978 113.12680054]
[-146.16619873 112.46330261]
[-131.18089294 111.79980469]
[-122.20336151 96.66484833]
[-105.81687927 89.83339691]
[-88.44395447 94.18519592]
[-77.01518250 108.17661285]
[-62.07387543 106.85091400]
[-50.08023453 98.01905823]
[-35.65023804 104.50641632]
[-20.70893669 103.18071747]
[-5.76763487 101.85501099]
[9.17366791 100.52931213]
[24.11496925 99.20361328]
[39.05627060 97.87790680]
[42.02842331 81.08076477]
[49.53675842 65.76402283]
[60.99375916 53.12618637]
[75.50293732 44.15615463]
[91.92897797 39.55581284]
[108.98655701 39.68513489]
[125.34095001 44.53399658]
[139.71246338 53.72298813]
[150.97653198 66.53308105]
[158.25177002 81.96190643]
[173.01744080 79.32087708]
[187.78311157 76.67984772]
[202.54876709 74.03881836]
[210.51959229 69.41387177]
[217.67004395 71.50647736]
[232.49052429 69.19274139]
[247.31100464 66.87901306]
[255.38218689 62.43152237]
[262.48458862 64.68180084]
[277.35263062 62.69649124]
[292.22067261 60.71118546]
[307.08871460 58.72587585]
[311.05300903 44.07800674]
[320.29843140 32.09614182]
[333.39147949 24.58710480]
[348.32150269 22.66813850]
[362.80938721 26.60078049]
[374.65560913 35.75570297]
[382.07400513 48.71319962]
[396.91915894 46.56354523]
[411.73965454 44.24981308]
[426.56011963 41.93607712]
[441.38061523 39.62234497]
[445.31393433 24.91014099]
[454.89624023 13.07378197]
[468.46731567 6.16398764]
[483.67593384 5.37792253]
[497.88708496 10.85177612]
[508.63861084 21.63717079]
[514.06774902 35.86547089]
[513.23382568 51.07153702]
[506.28137207 64.62082672]
[494.41491699 74.16584778]
[479.69042969 78.05286407]
[464.65896606 75.60842133]
[451.92486572 67.25604248]
[443.69433594 54.44282532]
[428.87387085 56.75655746]
[414.05337524 59.07029343]
[399.23291016 61.38402557]
[393.06054688 65.55655670]
[384.05932617 63.58123779]
[380.30059814 78.03119659]
[371.27148438 89.97357178]
[358.32299805 97.56975555]
[343.41256714 99.63533783]
[328.80801392 95.82472229]
[316.74270630 86.68844604]
[309.07403564 73.59391785]
[294.20599365 75.57922363]
[279.33795166 77.56452942]
[264.46990967 79.54983521]
[249.62474060 81.69949341]
[234.80426025 84.01322174]
[219.98377991 86.32695770]
[205.18980408 88.80448914]
[190.42413330 91.44551849]
[175.65846252 94.08654785]
[160.89279175 96.72757721]
[160.20742798 109.68022156]
[156.79812622 122.19491577]
[150.81912231 133.70544434]
[142.54093933 143.69107056]
[132.33810425 151.69998169]
[120.67219543 157.36987305]
[108.07102203 160.44418335]
[95.10470581 160.78385925]
[82.35985565 158.37350464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[11 56]
[12 55]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 44]
[25 43]
[26 42]
[27 40]
[28 39]
[30 37]
[31 36]
[73 132]
[74 131]
[75 130]
[76 129]
[78 128]
[79 127]
[80 126]
[82 125]
[83 124]
[84 123]
[85 122]
[92 115]
[93 113]
[94 112]
[95 111]
[96 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
