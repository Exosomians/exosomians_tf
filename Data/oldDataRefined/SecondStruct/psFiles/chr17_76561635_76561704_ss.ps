%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCGGAUACUACCAAUCAAUAGGGACAGACUUUUAGACCUGACUCCCUUUAUUAGAUAAGACUCCGAAU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 298.46572876]
[92.50000000 283.46572876]
[92.50000000 268.46572876]
[92.50000000 253.46572876]
[92.50000000 238.46572876]
[92.50000000 223.46572876]
[92.50000000 208.46572876]
[81.81912994 198.14804077]
[81.60544586 182.93591309]
[92.50000000 171.80278015]
[92.50000000 156.80278015]
[78.05754089 152.92764282]
[65.10964203 145.44743347]
[54.53823090 134.87167358]
[47.06335068 121.92070770]
[43.19413757 107.47665405]
[43.19413757 92.52334595]
[47.06335068 78.07929230]
[54.53823090 65.12832642]
[65.10964203 54.55256653]
[78.05754089 47.07236481]
[92.50000000 43.19721603]
[92.50000000 28.19721603]
[92.50000000 13.19721508]
[92.50000000 -1.80278468]
[92.50000000 -16.80278397]
[91.83650208 -31.78810310]
[90.51079559 -46.72940445]
[89.18509674 -61.67070770]
[75.22361755 -68.07169342]
[66.34619904 -80.60513306]
[64.94083405 -95.89958954]
[71.38555145 -109.84094238]
[83.94675446 -118.67902374]
[99.24554443 -120.03644562]
[113.16661835 -113.54806519]
[121.96528625 -100.95922089]
[123.27474976 -85.65625000]
[116.74275970 -71.75557709]
[104.12639618 -62.99641037]
[105.45210266 -48.05510712]
[106.77780151 -33.11380386]
[110.05545044 -29.24077797]
[110.70913696 -23.18078232]
[107.50000000 -16.80278397]
[107.50000000 -1.80278468]
[107.50000000 13.19721508]
[107.50000000 28.19721603]
[107.50000000 43.19721603]
[121.94245911 47.07236481]
[134.89035034 54.55256653]
[145.46177673 65.12832642]
[152.93664551 78.07929230]
[156.80586243 92.52334595]
[156.80586243 107.47665405]
[152.93664551 121.92070770]
[145.46177673 134.87167358]
[134.89035034 145.44743347]
[121.94245911 152.92764282]
[107.50000000 156.80278015]
[107.50000000 171.80278015]
[118.39455414 182.93591309]
[118.18087006 198.14804077]
[107.50000000 208.46572876]
[107.50000000 223.46572876]
[107.50000000 238.46572876]
[107.50000000 253.46572876]
[107.50000000 268.46572876]
[107.50000000 283.46572876]
[107.50000000 298.46572876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[10 61]
[11 60]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 42]
[28 41]
[29 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
