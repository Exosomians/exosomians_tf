%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCUCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCUCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCUCCCCCCCCCCCCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.51654816 91.72772980]
[62.59271622 90.18515778]
[47.76808548 87.87636566]
[33.08196259 84.80747986]
[18.57329369 80.98663330]
[4.28055620 76.42397308]
[-9.75834942 71.13158417]
[-23.50619507 65.12350464]
[-36.92652512 58.41566849]
[-49.98374557 51.02586365]
[-62.64323807 42.97368622]
[-74.87142181 34.28049088]
[-86.63588715 24.96932793]
[-97.90541840 15.06489086]
[-108.65013885 4.59344244]
[-118.84155273 -6.41724730]
[-128.45263672 -17.93798065]
[-137.45791626 -29.93820572]
[-145.83348083 -42.38610077]
[-153.55714417 -55.24865341]
[-160.60841370 -68.49176025]
[-166.96859741 -82.08029938]
[-172.62081909 -95.97823334]
[-177.55010986 -110.14870453]
[-181.74337769 -124.55415344]
[-185.18949890 -139.15635681]
[-187.87936401 -153.91661072]
[-189.80581665 -168.79574585]
[-190.96374512 -183.75434875]
[-191.35009766 -198.75271606]
[-190.96383667 -213.75108337]
[-189.80598450 -228.70967102]
[-187.87962341 -243.58883667]
[-185.18984985 -258.34909058]
[-181.74380493 -272.95132446]
[-177.55061340 -287.35678101]
[-172.62141418 -301.52728271]
[-166.96926880 -315.42526245]
[-160.60916138 -329.01382446]
[-153.55796814 -342.25698853]
[-145.83438110 -355.11956787]
[-137.45887756 -367.56753540]
[-128.45367432 -379.56781006]
[-118.84265900 -391.08859253]
[-108.65130615 -402.09933472]
[-97.90664673 -412.57086182]
[-86.63716888 -422.47534180]
[-74.87276459 -431.78659058]
[-62.64462280 -440.47985840]
[-49.98517990 -448.53210449]
[-36.92799759 -455.92196655]
[-23.50770950 -462.62988281]
[-9.75989819 -468.63803101]
[4.27897739 -473.93051147]
[18.57168961 -478.49325562]
[33.08033371 -482.31417847]
[47.76644135 -485.38314819]
[62.59106064 -487.69204712]
[77.51487732 -489.23468018]
[92.49832916 -490.00704956]
[107.50167084 -490.00704956]
[122.48512268 -489.23468018]
[137.40893555 -487.69204712]
[152.23356628 -485.38314819]
[166.91966248 -482.31417847]
[181.42831421 -478.49325562]
[195.72102356 -473.93051147]
[209.75990295 -468.63803101]
[223.50770569 -462.62988281]
[236.92799377 -455.92196655]
[249.98518372 -448.53210449]
[262.64462280 -440.47985840]
[274.87277222 -431.78659058]
[286.63717651 -422.47534180]
[297.90664673 -412.57086182]
[308.65130615 -402.09933472]
[318.84265137 -391.08859253]
[328.45367432 -379.56781006]
[337.45886230 -367.56753540]
[345.83438110 -355.11956787]
[353.55795288 -342.25698853]
[360.60916138 -329.01382446]
[366.96926880 -315.42526245]
[372.62139893 -301.52728271]
[377.55059814 -287.35678101]
[381.74380493 -272.95132446]
[385.18984985 -258.34909058]
[387.87960815 -243.58883667]
[389.80596924 -228.70967102]
[390.96383667 -213.75108337]
[391.35009766 -198.75271606]
[390.96374512 -183.75434875]
[389.80581665 -168.79574585]
[387.87936401 -153.91661072]
[385.18951416 -139.15635681]
[381.74337769 -124.55415344]
[377.55010986 -110.14870453]
[372.62081909 -95.97823334]
[366.96859741 -82.08029938]
[360.60839844 -68.49176025]
[353.55712891 -55.24865341]
[345.83346558 -42.38610077]
[337.45791626 -29.93820572]
[328.45263672 -17.93798065]
[318.84155273 -6.41724730]
[308.65014648 4.59344244]
[297.90542603 15.06489086]
[286.63589478 24.96932793]
[274.87142944 34.28049088]
[262.64324951 42.97368622]
[249.98374939 51.02586365]
[236.92652893 58.41566849]
[223.50619507 65.12350464]
[209.75834656 71.13158417]
[195.71943665 76.42397308]
[181.42671204 80.98663330]
[166.91804504 84.80747986]
[152.23191833 87.87636566]
[137.40728760 90.18515778]
[122.48345184 91.72772980]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
