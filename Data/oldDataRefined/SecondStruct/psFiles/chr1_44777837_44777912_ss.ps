%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGAAGAGCACUACUUUUGAGACAGGUCAAGACGAUGACUUCCCUCUCUCUACUCUCGGAAAAUCCGACUCCUU\
) } def
/len { sequence length } bind def

/coor [
[153.08842468 265.04568481]
[150.04962158 250.35671997]
[147.01080322 235.66775513]
[143.97198486 220.97880554]
[140.93318176 206.28984070]
[137.89436340 191.60087585]
[132.79602051 177.49389648]
[125.74194336 164.25607300]
[118.68786621 151.01824951]
[111.63378906 137.78042603]
[101.01068115 139.51814270]
[90.31262970 138.32571411]
[80.33287048 134.29153442]
[71.81137085 127.71473694]
[65.37998199 119.08296967]
[61.51556778 109.03625488]
[60.50466919 98.31952667]
[62.42223358 87.72740173]
[67.12608337 78.04524994]
[74.26744080 69.99098969]
[83.31680298 64.16180420]
[79.68137360 49.60901642]
[76.04594421 35.05622864]
[72.41052246 20.50343895]
[57.70978546 6.99429321]
[63.11599731 -11.39131165]
[58.30648041 -25.59935760]
[53.49696350 -39.80740356]
[48.68744659 -54.01544571]
[43.87792969 -68.22349548]
[39.06841278 -82.43154144]
[24.79066086 -89.20806885]
[19.56527328 -104.12352753]
[26.49238014 -118.32883453]
[41.46224976 -123.39623260]
[55.59352493 -116.31932831]
[60.50237274 -101.29672241]
[53.27645493 -87.24105835]
[58.08597183 -73.03301239]
[62.89548874 -58.82496262]
[67.70500946 -44.61692047]
[72.51452637 -30.40887451]
[77.32404327 -16.20082855]
[87.15847778 -12.34506607]
[93.24461365 -3.43967319]
[93.26560211 7.56988144]
[86.96331024 16.86801338]
[90.59873962 31.42080307]
[94.23416138 45.97359085]
[97.86959076 60.52638245]
[117.16217804 64.38869476]
[132.20326233 77.07283020]
[139.26678467 95.43660736]
[136.60293579 114.93084717]
[124.87161255 130.72634888]
[131.92568970 143.96417236]
[138.97976685 157.20199585]
[146.03384399 170.43981934]
[152.29557800 156.80931091]
[165.70501709 150.08718872]
[180.37301636 153.22566223]
[189.85766602 164.84638977]
[189.99351501 179.84577942]
[180.72090149 191.63639832]
[166.11216736 195.04003906]
[152.58332825 188.56205750]
[155.62214661 203.25102234]
[158.66094971 217.93998718]
[161.69976807 232.62895203]
[164.73858643 247.31791687]
[167.77738953 262.00686646]
[181.12094116 270.47595215]
[184.48614502 285.91778564]
[175.87648010 299.17105103]
[160.39990234 302.37280273]
[147.23840332 293.62350464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 58]
[8 57]
[9 56]
[10 55]
[21 50]
[22 49]
[23 48]
[24 47]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
