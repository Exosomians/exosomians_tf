%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCCCCGCGGCGCCCUGGCGGGAGCACAGACACCGCCACCCUAGGGCGCCGGCACAAAAGGACCACCGGGCCGGCACGGACUCCAAAGAGGGGC\
) } def
/len { sequence length } bind def

/coor [
[98.40314484 225.17193604]
[83.20024872 230.29554749]
[69.79419708 221.48321533]
[68.46896362 205.49499512]
[80.24114990 194.59567261]
[82.15930939 179.71882629]
[84.07746887 164.84197998]
[85.99562836 149.96511841]
[87.91378021 135.08827209]
[66.82606506 116.63591766]
[64.65088654 88.69939423]
[51.58110428 81.33863068]
[38.51132584 73.97786713]
[25.44154358 66.61710358]
[12.37176323 59.25634003]
[-0.69801730 51.89557648]
[-13.76779747 44.53481293]
[-26.83757782 37.17404938]
[-39.90736008 29.81328583]
[-52.97713852 22.45252228]
[-66.04692078 15.09175968]
[-75.24662018 13.55622768]
[-79.41217041 7.27982187]
[-92.23931122 -0.49606642]
[-107.40737915 3.04900265]
[-120.30515289 -5.01958179]
[-123.59136200 -19.50186157]
[-136.41850281 -27.27775002]
[-150.23336792 -20.41093445]
[-165.56512451 -22.12579155]
[-177.52146912 -31.87511444]
[-182.28717041 -46.54793167]
[-178.34152222 -61.46220016]
[-166.94355774 -71.85883331]
[-151.73033142 -74.42029572]
[-137.55632019 -68.32924652]
[-128.94439697 -55.52930450]
[-128.64260864 -40.10489273]
[-115.81546783 -32.32900238]
[-101.45549774 -36.11406326]
[-88.33618164 -28.41093445]
[-84.46342468 -13.32320786]
[-71.63628387 -5.54731941]
[-58.68615723 2.02197886]
[-45.61637497 9.38274193]
[-32.54659653 16.74350548]
[-19.47681427 24.10426903]
[-6.40703440 31.46503258]
[6.66274595 38.82579422]
[19.73252678 46.18655777]
[32.80230713 53.54732132]
[45.87208939 60.90808487]
[58.94186783 68.26884460]
[72.01165009 75.62960815]
[79.14192200 69.30465698]
[87.64801025 65.00440216]
[96.96884918 63.01249313]
[106.48963165 63.46031952]
[115.58234406 66.31834412]
[123.64723206 71.39804077]
[130.15232849 78.36435699]
[134.66853333 86.75778961]
[136.89797974 96.02468872]
[151.82865906 97.46503448]
[166.75935364 98.90538025]
[176.19223022 89.13481903]
[189.34988403 86.67703247]
[201.31851196 92.21914673]
[207.76138306 103.50308228]
[222.63822937 105.42124176]
[237.51509094 107.33939362]
[248.06790161 95.96320343]
[263.29852295 92.99549103]
[277.35049438 99.57741547]
[284.82055664 113.17807770]
[282.83627319 128.56776428]
[272.16067505 139.82881165]
[256.89874268 142.63111877]
[242.91897583 135.89715576]
[235.59692383 122.21624756]
[220.72007751 120.29808807]
[205.84323120 118.37992859]
[193.08036804 129.20069885]
[176.09751892 127.49954987]
[165.31900024 113.83605957]
[150.38832092 112.39572144]
[135.45762634 110.95537567]
[132.58659363 117.75887299]
[128.42533875 123.85923767]
[123.13864136 129.01493835]
[116.93580627 133.02185059]
[110.06242371 135.72129822]
[102.79063416 137.00643921]
[100.87247467 151.88328552]
[98.95431519 166.76013184]
[97.03616333 181.63697815]
[95.11800385 196.51383972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[23 43]
[24 42]
[27 39]
[28 38]
[63 87]
[64 86]
[65 85]
[69 82]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
