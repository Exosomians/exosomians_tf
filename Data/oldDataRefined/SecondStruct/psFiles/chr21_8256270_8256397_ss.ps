%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGGUCCAUGGAUCGCGCAAGGCCGCGCCUCCAAAUUUCUGGGGAACCCCCCUAGCGGGCAGGCGGGCACCCAGCCCCCGCCACCACCCGGGCGCCCCCUCAGGGCAGCCCUCCCCGGGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[-2.22877312 245.18211365]
[6.09330177 231.05146790]
[5.72803640 216.05592346]
[5.36277103 201.06036377]
[4.99750566 186.06481934]
[-1.20662522 181.85070801]
[-8.07532501 195.18565369]
[-13.73496151 209.07696533]
[-28.73488617 209.02946472]
[-34.30642319 195.10258484]
[-23.47937202 184.72256470]
[-13.61488724 173.42247009]
[-19.81901741 169.20835876]
[-33.89346695 174.39582825]
[-47.96791840 179.58329773]
[-62.04236603 184.77076721]
[-68.18889618 196.18695068]
[-80.09911346 200.18536377]
[-91.15732574 195.12452698]
[-105.35391998 199.96774292]
[-119.55052185 204.81094360]
[-133.74711609 209.65414429]
[-140.48976135 223.94793701]
[-155.39277649 229.20869446]
[-169.61448669 222.31529236]
[-174.71737671 207.35748291]
[-167.67401123 193.20947266]
[-152.66308594 188.26499939]
[-138.59031677 195.45755005]
[-124.39372253 190.61434937]
[-110.19712830 185.77114868]
[-96.00053406 180.92793274]
[-85.24404144 167.11798096]
[-67.22983551 170.69631958]
[-53.15538788 165.50885010]
[-39.08094025 160.32138062]
[-25.00648880 155.13391113]
[-16.64010239 150.83718872]
[-8.08650208 148.99645996]
[0.00111872 149.43713379]
[7.06639290 151.82348633]
[12.68682289 155.69515991]
[16.59896469 160.51159668]
[28.12867165 150.91650391]
[39.65837860 141.32141113]
[51.18808365 131.72631836]
[62.71779251 122.13121796]
[74.24749756 112.53612518]
[85.77720642 102.94103241]
[72.48394775 109.89007568]
[57.48429489 109.78778839]
[44.28704834 102.65808868]
[35.97937012 90.16879272]
[34.50463486 75.24146271]
[40.20782471 61.36797333]
[51.75481415 51.79368591]
[66.44448090 48.75826263]
[80.84053040 52.97176743]
[91.57383728 63.44605255]
[86.79450989 48.62054062]
[93.77610779 35.10343933]
[107.93941498 30.63844872]
[114.63510895 17.21579170]
[121.33080292 3.79313421]
[122.38400269 -5.38707304]
[128.35646057 -9.87186813]
[135.37702942 -23.12749863]
[136.65345764 -32.27933502]
[142.73335266 -36.61736679]
[150.07463074 -49.69810867]
[157.41589355 -62.77884674]
[164.75715637 -75.85958862]
[161.81823730 -91.63115692]
[172.42509460 -103.66752625]
[188.44104004 -102.73543549]
[197.58003235 -89.54988861]
[192.83140564 -74.22572327]
[177.83790588 -68.51831818]
[170.49664307 -55.43758011]
[163.15536499 -42.35683823]
[155.81410217 -29.27609825]
[148.63265991 -16.10693550]
[141.61209106 -2.85130668]
[134.75346375 10.48882580]
[128.05776978 23.91148186]
[121.36207581 37.33414078]
[126.31418610 51.33457565]
[119.71501160 65.04244232]
[104.99649048 70.14174652]
[107.67572784 77.14686584]
[121.68605804 71.78863525]
[127.04405212 85.79904938]
[113.03418732 91.15710449]
[115.71341705 98.16222382]
[129.65737915 103.69088745]
[143.60133362 109.21955109]
[157.54528809 114.74820709]
[171.55552673 120.10667419]
[185.62997437 125.29414368]
[199.70442200 130.48161316]
[213.77888489 135.66908264]
[228.88996887 130.28073120]
[242.44789124 138.85758972]
[244.05215454 154.82022095]
[232.47210693 165.92347717]
[216.59098816 163.64987183]
[208.59140015 149.74353027]
[194.51695251 144.55606079]
[180.44250488 139.36859131]
[166.36805725 134.18112183]
[158.92713928 134.82650757]
[152.01663208 128.69216919]
[138.07267761 123.16350555]
[124.12871552 117.63484192]
[110.18476105 112.10618591]
[95.37229919 114.47074127]
[83.84259796 124.06583405]
[72.31288910 133.66093445]
[60.78318024 143.25602722]
[49.25347519 152.85112000]
[37.72376633 162.44621277]
[26.19405937 172.04130554]
[19.99305725 185.69955444]
[20.35832214 200.69509888]
[20.72358894 215.69065857]
[21.08885384 230.68620300]
[30.08904648 244.39491272]
[22.47636223 258.92004395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[13 37]
[14 36]
[15 35]
[16 34]
[19 32]
[20 31]
[21 30]
[22 29]
[43 122]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
[49 116]
[59 89]
[62 86]
[63 85]
[64 84]
[66 83]
[67 82]
[69 81]
[70 80]
[71 79]
[72 78]
[94 115]
[95 114]
[96 113]
[97 112]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
