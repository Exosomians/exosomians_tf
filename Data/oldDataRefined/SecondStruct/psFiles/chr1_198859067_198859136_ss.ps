%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAUGUUAGUUGCCAGCUACCAAAACUAAAAUUAAGGUUUGAGUGGCUGUCGCAACUUACAAGUGACU\
) } def
/len { sequence length } bind def

/coor [
[102.27399445 210.48977661]
[100.94829559 195.54847717]
[92.11643219 183.55482483]
[98.60379791 169.12483215]
[89.77193451 157.13119507]
[96.25930023 142.70120239]
[94.93359375 127.75989532]
[93.60789490 112.81859589]
[85.73210907 101.26595306]
[91.45080566 88.50710297]
[90.12509918 73.56580353]
[88.79940033 58.62450027]
[87.47369385 43.68319702]
[86.14799500 28.74189568]
[84.82229614 13.80059433]
[82.83699036 -1.06744373]
[80.19596100 -15.83311272]
[77.55493164 -30.59878159]
[74.91390228 -45.36444855]
[72.27287292 -60.13011932]
[69.63185120 -74.89579010]
[66.99082184 -89.66145325]
[54.30627060 -98.70246887]
[51.83823395 -113.71458435]
[60.53562927 -125.75164032]
[57.89460373 -140.51731873]
[55.25357437 -155.28297424]
[52.61254883 -170.04864502]
[49.97151947 -184.81431580]
[35.94997787 -191.46081543]
[28.54258728 -205.09570312]
[30.59764671 -220.47608948]
[41.32493973 -231.68791199]
[56.59960938 -234.41998291]
[70.54822540 -227.62176514]
[77.80726624 -213.90731812]
[75.58547974 -198.55012512]
[64.73719025 -187.45535278]
[67.37821960 -172.68968201]
[70.01924133 -157.92401123]
[72.66027069 -143.15834045]
[75.30130005 -128.39266968]
[87.63193512 -120.11673737]
[90.52065277 -105.17987061]
[81.75649261 -92.30248260]
[84.39751434 -77.53681183]
[87.03854370 -62.77114487]
[89.67957306 -48.00547791]
[92.32060242 -33.23980713]
[94.96162415 -18.47414017]
[97.60265350 -3.70847154]
[101.20977020 -0.14027835]
[102.39648438 5.83823013]
[99.76359558 12.47489262]
[101.08930206 27.41619492]
[102.41500092 42.35749817]
[103.74069977 57.29880142]
[105.06640625 72.24010468]
[106.39210510 87.18140411]
[114.26789093 98.73404694]
[108.54919434 111.49289703]
[109.87490082 126.43419647]
[111.20059967 141.37550354]
[120.12728119 154.43785095]
[113.54509735 167.79913330]
[122.47178650 180.86148071]
[115.88959503 194.22277832]
[117.21530151 209.16407776]
[124.63784027 224.40684509]
[112.04552460 235.75894165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[4 65]
[6 63]
[7 62]
[8 61]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
