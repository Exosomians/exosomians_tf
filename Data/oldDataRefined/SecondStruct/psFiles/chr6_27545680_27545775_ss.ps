%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCCAUCCAUCAGCACCGGCUCACCAAUUCCGCUACCUGAACUUUAGGUAACCCCAAAGGGGCGCGUCCAAGCUUAGGACGGCUGAUGCCAAAA\
) } def
/len { sequence length } bind def

/coor [
[102.79110718 312.55722046]
[87.70424652 311.08670044]
[74.03151703 304.54205322]
[63.42396927 293.71359253]
[57.16251755 279.90887451]
[56.00326157 264.79492188]
[60.08618546 250.19679260]
[68.91825867 237.87727356]
[81.43296051 229.32403564]
[96.11908722 225.56990051]
[97.57423401 210.64065552]
[99.02938080 195.71139526]
[100.48452759 180.78215027]
[101.93968201 165.85289001]
[103.39482880 150.92364502]
[104.84997559 135.99440002]
[86.42896271 131.89123535]
[73.37983704 119.49909973]
[68.80739594 103.00177002]
[53.96642303 100.82334137]
[39.12545395 98.64491272]
[29.65876389 110.73942566]
[15.40712261 116.46535492]
[0.20414601 114.28244781]
[-11.86064053 104.77790070]
[-17.54187012 90.50837708]
[-15.31131935 75.31231689]
[-5.76899719 63.27738571]
[8.51826096 57.64091110]
[23.70725441 59.91908264]
[35.71221924 69.49908447]
[41.30388260 83.80393982]
[56.14485168 85.98236847]
[70.98582458 88.16079712]
[76.28711700 79.51371002]
[84.07262421 73.01281738]
[79.76196289 58.64556122]
[75.45129395 44.27830124]
[71.14062500 29.91104126]
[66.82996368 15.54378128]
[62.51929474 1.17652106]
[58.20862961 -13.19073868]
[47.86552429 -26.62415123]
[57.91069794 -40.28178024]
[73.81536102 -34.40998459]
[72.57588959 -17.50140572]
[76.88655090 -3.13414526]
[81.19721985 11.23311424]
[85.50788879 25.60037422]
[89.81855011 39.96763611]
[94.12921906 54.33489227]
[98.43988800 68.70215607]
[106.05126190 69.25310516]
[113.30377197 71.62750244]
[122.73728180 59.96521378]
[132.17079163 48.30293274]
[141.60430908 36.64064789]
[146.86460876 20.52340508]
[163.80818176 21.11643410]
[167.92877197 37.56201172]
[153.26658630 46.07416153]
[143.83308411 57.73644257]
[134.39956665 69.39872742]
[124.96605682 81.06101227]
[131.45451355 90.02693939]
[134.63757324 101.20944977]
[133.77116394 113.36514282]
[148.61213684 115.54357147]
[163.45310974 117.72200012]
[178.29408264 119.90042877]
[193.13505554 122.07885742]
[204.69880676 111.55206299]
[220.32566833 110.97276306]
[232.63708496 120.61449432]
[235.81999207 135.92472839]
[228.37152100 149.67442322]
[213.80862427 155.37141418]
[199.00743103 150.32574463]
[190.95661926 136.91983032]
[176.11564636 134.74139404]
[161.27468872 132.56297302]
[146.43371582 130.38453674]
[131.59274292 128.20611572]
[119.77922821 137.44953918]
[118.32408142 152.37879944]
[116.86892700 167.30804443]
[115.41378021 182.23728943]
[113.95863342 197.16654968]
[112.50348663 212.09579468]
[111.04833984 227.02505493]
[124.73310852 233.54447937]
[135.36059570 244.35337830]
[141.64747620 258.14651489]
[142.83457947 273.25833130]
[138.77856445 287.86395264]
[129.96920776 300.19973755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[19 34]
[20 33]
[21 32]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[54 64]
[55 63]
[56 62]
[57 61]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
