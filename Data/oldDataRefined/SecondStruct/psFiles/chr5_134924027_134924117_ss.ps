%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAAAACGCAUAACCCCAGUAAUCACAAGAACAUCAACUUUAUGUUACUACCAAAAAGUAUAGUAACCAGCACCAACAUCGGGCACGUU\
) } def
/len { sequence length } bind def

/coor [
[115.62625885 187.03941345]
[107.79931641 188.08638000]
[99.91019440 188.43093872]
[92.02178192 188.07034302]
[84.19698334 187.00749207]
[76.49820709 185.25082397]
[68.98683167 182.81437683]
[61.72275162 179.71757507]
[54.76389694 175.98509216]
[48.16575623 171.64669800]
[41.98094177 166.73699951]
[36.25877380 161.29513550]
[31.04487610 155.36451721]
[26.38082886 148.99241638]
[22.30382156 142.22964478]
[18.84636307 135.13012695]
[16.03602600 127.75048828]
[13.89521790 120.14956665]
[12.44101048 112.38796997]
[11.68499947 104.52759552]
[11.63321209 96.63111877]
[12.28606319 88.76150513]
[13.63834572 80.98150635]
[15.67927742 73.35315704]
[18.39258194 65.93729401]
[21.75662613 58.79304504]
[25.74458504 51.97738266]
[30.32465553 45.54465103]
[35.46031952 39.54615021]
[41.11062241 34.02970886]
[47.23050690 29.03931236]
[53.77117920 24.61475754]
[60.68048096 20.79132652]
[67.90331268 17.59950638]
[75.38208771 15.06474781]
[83.05716705 13.20726395]
[90.86734772 12.04186630]
[98.75035095 11.57784843]
[106.64331818 11.81890869]
[114.48331451 12.76312637]
[122.20781708 14.40297127]
[129.75523376 16.72536850]
[137.06538391 19.71179771]
[144.07998657 23.33844566]
[150.74307251 27.57639503]
[157.00154114 32.39184952]
[167.60815430 21.78524780]
[178.21475220 11.17864609]
[188.82135010 0.57204449]
[199.42794800 -10.03455734]
[210.03456116 -20.64115906]
[220.64115906 -31.24776077]
[216.58853149 -46.06234360]
[220.50167847 -60.91437531]
[231.32795715 -71.80873871]
[246.15516663 -75.81491089]
[260.99487305 -71.85523987]
[271.85522461 -60.99486160]
[275.81491089 -46.15516663]
[271.80874634 -31.32795334]
[260.91436768 -20.50167274]
[246.06234741 -16.58853531]
[231.24775696 -20.64115906]
[220.64115906 -10.03455734]
[210.03456116 0.57204449]
[199.42794800 11.17864609]
[188.82135010 21.78524780]
[178.21475220 32.39184952]
[167.60815430 42.99845123]
[185.28257751 76.61366272]
[187.22705078 114.54237366]
[173.08291626 149.78881836]
[184.71858215 159.25514221]
[193.54716492 162.33537292]
[196.58267212 169.24870300]
[207.88836670 179.10676575]
[223.63673401 177.77832031]
[235.65777588 188.03843689]
[236.81964111 203.79995728]
[226.43299866 215.71186829]
[210.66006470 216.70701599]
[198.85865784 206.19502258]
[198.03031921 190.41246033]
[186.72462463 180.55439758]
[175.25225830 170.89080811]
[163.61659241 161.42448425]
[157.88337708 166.85470581]
[151.68861389 171.75183105]
[145.08166504 176.07681274]
[138.11524963 179.79515076]
[130.84489441 182.87719727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[72 86]
[73 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
