%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCUCCUCUACCGCGUCCCCUGUGCCCGUUUCUGAACCCCCAAGGACCCUGGGAGUCUGCACACAGGAGAAGAGGGAGGAGGGUCC\
) } def
/len { sequence length } bind def

/coor [
[81.12404633 333.36724854]
[75.87448883 318.76513672]
[80.24272919 303.87561035]
[92.54909515 294.42401123]
[92.01972198 279.43334961]
[91.49034882 264.44268799]
[90.96097565 249.45202637]
[90.43160248 234.46138000]
[89.90223694 219.47071838]
[89.37286377 204.48007202]
[86.38258362 200.49592590]
[86.01995850 194.53932190]
[89.37286377 188.42132568]
[89.90223694 173.43066406]
[78.07454681 164.41712952]
[73.77147675 149.99673462]
[78.84406281 135.63978577]
[91.54462433 126.92186737]
[92.07398987 111.93121338]
[85.68497467 99.49448395]
[92.93534851 87.53941345]
[93.46472168 72.54875946]
[93.99409485 57.55810547]
[94.52346802 42.56744766]
[95.05284119 27.57679367]
[95.58221436 12.58613682]
[87.53364563 4.85911083]
[85.23994446 -5.83256721]
[89.24474335 -15.76838493]
[97.94306183 -21.63208008]
[99.52854156 -36.54805374]
[91.09774017 -42.29679108]
[85.48336029 -50.74701691]
[83.47423553 -60.63130951]
[85.32244110 -70.48702240]
[90.71254730 -78.87270355]
[98.81446838 -84.57892609]
[108.41098022 -86.80263519]
[112.07975769 -101.34705353]
[107.95276642 -116.62050629]
[118.56797028 -127.06880188]
[122.23674011 -141.61322021]
[125.90551758 -156.15763855]
[129.57429504 -170.70205688]
[120.27146149 -183.27151489]
[121.27616882 -198.87678528]
[132.11402893 -210.14953613]
[147.66772461 -211.76712036]
[160.59327698 -202.96575928]
[164.78764343 -187.90118408]
[158.27037048 -173.68644714]
[144.11871338 -167.03327942]
[140.44993591 -152.48886108]
[136.78115845 -137.94444275]
[133.11238098 -123.40002441]
[137.50178528 -109.16688538]
[126.62417603 -97.67827606]
[122.95539856 -83.13385773]
[135.03538513 -66.90089417]
[131.63369751 -46.66915894]
[114.44451141 -34.96257401]
[112.85903168 -20.04660225]
[122.11869812 -3.22468185]
[110.57286835 13.11550903]
[110.04349518 28.10616493]
[109.51412201 43.09682083]
[108.98474884 58.08747864]
[108.45537567 73.07813263]
[107.92601013 88.06878662]
[114.31502533 100.50551605]
[107.06465149 112.46058655]
[106.53527832 127.45124054]
[118.58924103 137.04331970]
[122.63647461 151.72233582]
[117.32691956 165.80326843]
[104.89289093 173.96003723]
[104.36351776 188.95069885]
[104.36351776 203.95069885]
[104.89289093 218.94134521]
[105.42226410 233.93200684]
[105.95163727 248.92265320]
[106.48100281 263.91333008]
[107.01037598 278.90396118]
[107.53974915 293.89462280]
[120.48216248 302.45462036]
[125.88981628 316.99893188]
[121.68335724 331.93496704]
[109.48024750 341.51953125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[13 77]
[14 76]
[18 72]
[19 71]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[30 62]
[31 61]
[38 58]
[39 57]
[41 55]
[42 54]
[43 53]
[44 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
