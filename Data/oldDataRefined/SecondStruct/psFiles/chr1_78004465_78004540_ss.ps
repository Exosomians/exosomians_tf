%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAUUUAAUGAACCUUUAGGAUUAAAUUUGUUGGACGCAAAACCAUAAUAUAUGAAUUGUCUGUUUAUCGAAUUU\
) } def
/len { sequence length } bind def

/coor [
[-43.10958481 239.08287048]
[-44.70566940 254.06784058]
[-49.71507645 268.28060913]
[-57.86764526 280.95468140]
[-68.72372437 291.40658569]
[-81.69786072 299.07266235]
[-96.09037018 303.53945923]
[-111.12508392 304.56613159]
[-125.99120331 302.09725952]
[-139.88700867 296.26605225]
[-152.06312561 287.38693237]
[-161.86291504 275.93872070]
[-168.75787354 262.53887939]
[-172.37617493 247.90997314]
[-172.52267456 232.84095764]
[-169.18949890 218.14447021]
[-162.55636597 204.61308289]
[-152.98101807 192.97653198]
[-140.97984314 183.86235046]
[-127.20003510 177.76205444]
[-112.38472748 175.00462341]
[-97.33289337 175.73876953]
[-82.85625458 179.92491150]
[-69.73551941 187.33726501]
[-58.67827988 197.57612610]
[-46.22752762 189.21078491]
[-33.77677536 180.84545898]
[-21.32602119 172.48013306]
[-8.87526703 164.11479187]
[3.57548571 155.74946594]
[16.02623940 147.38414001]
[22.27550888 133.86393738]
[38.04534912 132.59008789]
[50.49610138 124.22475433]
[62.94685745 115.85942078]
[75.39760590 107.49409485]
[87.84836578 99.12876129]
[99.94754028 90.26255035]
[111.67501831 80.91020203]
[123.40248871 71.55785370]
[135.12995911 62.20550537]
[135.12010193 48.56779861]
[142.92875671 37.62725067]
[155.45788574 33.33161163]
[167.96049500 37.06712341]
[180.05967712 28.20090485]
[192.15885925 19.33468819]
[204.25804138 10.46847153]
[213.46020508 -3.77079153]
[229.69039917 1.12992311]
[229.47416687 18.08249092]
[213.12425232 22.56765366]
[201.02507019 31.43387032]
[188.92590332 40.30008698]
[176.82672119 49.16630554]
[175.07353210 65.76255035]
[161.68077087 76.26973724]
[144.48231506 73.93297577]
[132.75483704 83.28532410]
[121.02736664 92.63767242]
[109.29988861 101.99002075]
[107.47093964 107.23674774]
[102.71317291 110.96122742]
[96.21369171 111.57952118]
[83.76293945 119.94484711]
[71.31218719 128.31018066]
[58.86143112 136.67550659]
[46.41067886 145.04083252]
[39.27084732 159.15937805]
[24.39156914 159.83489990]
[11.94081593 168.20022583]
[-0.50993741 176.56555176]
[-12.96069050 184.93087769]
[-25.41144371 193.29621887]
[-37.86219788 201.66154480]
[-50.31295013 210.02687073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 61]
[39 60]
[40 59]
[41 58]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
