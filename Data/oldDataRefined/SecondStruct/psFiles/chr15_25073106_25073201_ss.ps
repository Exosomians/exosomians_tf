%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUCAGGGGGUAUUUUUGUAAGGAACCUUUUCGACUUGUUUUACUCACUCUUGAGUAUGGCAGCAAGAGUAGCCUUGACUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[44.70803070 137.18716431]
[43.38458252 122.24566650]
[48.97298813 108.32554626]
[60.26075745 98.44696808]
[74.79885864 94.75323486]
[89.43395996 98.04619598]
[80.77513123 85.79774475]
[72.11630249 73.54928589]
[63.45746994 61.30083466]
[55.79863739 55.97129822]
[54.72414780 48.51260376]
[46.46648788 35.99018097]
[38.20882416 23.46776009]
[29.95116234 10.94534016]
[21.69350052 -1.57708085]
[13.43583965 -14.09950161]
[5.17817783 -26.62192154]
[-3.07948375 -39.14434433]
[-11.33714581 -51.66676331]
[-19.59480667 -64.18918610]
[-34.03919601 -59.80288696]
[-49.11908722 -59.66461563]
[-63.61229706 -63.77703857]
[-76.34658813 -71.79864502]
[-86.29449463 -83.07211304]
[-92.65622711 -96.67815399]
[-94.92395782 -111.51049042]
[-92.92235565 -126.36576843]
[-86.82210541 -140.04122925]
[-77.12538910 -151.43206787]
[-85.38304901 -163.95448303]
[-93.64070892 -176.47689819]
[-101.89837646 -188.99932861]
[-117.01732635 -186.90646362]
[-131.54446411 -191.58889771]
[-142.59539795 -202.11692810]
[-147.97596741 -216.40020752]
[-146.61787415 -231.60278320]
[-138.79074097 -244.70617676]
[-126.04866028 -253.10868835]
[-110.92158508 -255.14199829]
[-96.41300201 -250.40238953]
[-85.40361023 -239.83091736]
[-80.07932281 -225.52655029]
[-81.49728394 -210.32945251]
[-89.37595367 -197.25698853]
[-81.11829376 -184.73455811]
[-72.86063385 -172.21214294]
[-64.60296631 -159.68972778]
[-50.31362915 -164.11601257]
[-35.34090042 -164.33671570]
[-20.89808273 -160.32537842]
[-8.15794563 -152.39886475]
[1.84250355 -141.19230652]
[8.28642559 -127.60820007]
[10.64386654 -112.74378967]
[8.71533108 -97.80237579]
[2.64863515 -83.99594879]
[-7.07238674 -72.44684601]
[1.18527520 -59.92442703]
[9.44293690 -47.40200424]
[17.70059776 -34.87958527]
[25.95825958 -22.35716248]
[34.21592331 -9.83474255]
[42.47358322 2.68767810]
[50.73124695 15.21009922]
[58.98890686 27.73251915]
[67.24656677 40.25494003]
[75.70592499 52.64200211]
[84.36475372 64.89045715]
[93.02358246 77.13891602]
[101.68241882 89.38736725]
[112.37454987 99.90774536]
[124.76161194 108.36709595]
[137.28402710 116.62475586]
[149.93852234 124.67855835]
[162.59301758 132.73236084]
[175.24752808 140.78616333]
[190.61935425 137.11431885]
[204.04133606 145.45851135]
[207.55046082 160.86830139]
[199.06481934 174.20132446]
[183.61878967 177.54733276]
[170.37623596 168.92120361]
[167.19372559 153.44065857]
[154.53921509 145.38685608]
[141.88471985 137.33305359]
[129.23022461 129.27925110]
[121.75511169 128.32568359]
[116.30225372 120.75415802]
[103.91519165 112.29480743]
[107.44470978 126.87364197]
[103.98734283 141.46975708]
[94.29321289 152.91632080]
[80.46559143 158.72984314]
[65.50458527 157.64898682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 72]
[7 71]
[8 70]
[9 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[30 49]
[31 48]
[32 47]
[33 46]
[73 91]
[74 90]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
