%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUUUCAUUGUCAACUCGGUUAGAUUCCUACGAUCUAUAAGUCAUCCAGUCACCUUUUUUAGUCACCAAGAG\
) } def
/len { sequence length } bind def

/coor [
[118.54759216 270.76058960]
[110.82871246 257.84490967]
[105.69389343 243.70170593]
[103.32874298 228.84226990]
[103.81877899 213.80377197]
[107.14626312 199.12983704]
[113.19093323 185.35092163]
[121.73426056 172.96513367]
[132.46742249 162.42018127]
[124.16654205 149.92636108]
[115.86566925 137.43254089]
[107.56479645 124.93872833]
[91.44544983 124.61678314]
[78.60018158 114.87326050]
[73.94525909 99.43730927]
[79.26226044 84.21670532]
[70.44548035 72.08145142]
[61.62870026 59.94619751]
[49.39819717 60.38408661]
[38.64891052 54.79265976]
[32.11864471 44.73130417]
[31.40364456 32.87982178]
[36.56992340 22.32511711]
[28.79951859 9.49465275]
[21.02911377 -3.33581114]
[13.25870895 -16.16627502]
[5.48830366 -28.99673843]
[-2.28210139 -41.82720184]
[-17.45637894 -47.03497314]
[-22.70985603 -62.19348526]
[-14.01251602 -75.67443085]
[1.96378744 -77.13637543]
[12.96340084 -65.45784760]
[10.54836273 -49.59760666]
[18.31876755 -36.76714325]
[26.08917236 -23.93667984]
[33.85957718 -11.10621643]
[41.62998199 1.72424769]
[49.40038681 14.55471134]
[67.22544861 17.60962486]
[77.57962799 32.81524658]
[73.76395416 51.12942123]
[82.58073425 63.26467514]
[91.39751434 75.39993286]
[104.75607300 74.37684631]
[116.85764313 80.12574768]
[124.50388336 91.12724304]
[125.67395782 104.47373199]
[120.05861664 116.63785553]
[128.35948181 129.13166809]
[136.66036987 141.62548828]
[144.96124268 154.11930847]
[158.84149170 148.31114197]
[173.57017517 145.23504639]
[188.61485291 145.00224304]
[203.43167114 147.62112427]
[217.48500061 152.99703979]
[230.26683044 160.93563843]
[241.31509399 171.14994812]
[250.23042297 183.27073669]
[256.69052124 196.85983276]
[260.46185303 211.42601013]
[261.40811157 226.44270325]
[259.49508667 241.36708069]
[254.79190063 255.65960693]
[247.46859741 268.80364990]
[237.78990173 280.32403564]
[226.10569763 289.80432129]
[212.83834839 296.90179443]
[198.46748352 301.35989380]
[183.51258850 303.01745605]
[168.51426697 301.81457520]
[154.01470947 297.79470825]
[140.53805542 291.10321045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 52]
[10 51]
[11 50]
[12 49]
[16 44]
[17 43]
[18 42]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
