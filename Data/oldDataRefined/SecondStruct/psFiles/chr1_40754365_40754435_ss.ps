%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAUGACAUUUGUAGGAACUGACCUUCGACAUUCCACAAGUCUCCUCGAAAGUCAGCCUACAAAUGUCGC\
) } def
/len { sequence length } bind def

/coor [
[79.29824066 317.87951660]
[63.91391373 315.85412598]
[52.68142700 305.14846802]
[49.91989517 289.87911987]
[56.69118881 275.91738892]
[70.39160156 268.63192749]
[72.34949493 253.76025391]
[74.30738831 238.88858032]
[76.26528168 224.01690674]
[78.22317505 209.14523315]
[80.18106842 194.27355957]
[82.13896179 179.40188599]
[84.09685516 164.53021240]
[86.05474854 149.65853882]
[88.01264191 134.78686523]
[89.97053528 119.91519165]
[91.92842865 105.04351807]
[89.58830261 99.96566772]
[90.45179749 93.94589996]
[94.76038361 88.98269653]
[98.00697327 74.33825684]
[101.25357056 59.69382095]
[104.50016022 45.04938126]
[107.74675751 30.40493965]
[103.17976379 15.25722790]
[113.48834991 4.50630140]
[116.73493958 -10.13813877]
[119.98153687 -24.78257942]
[123.22812653 -39.42701721]
[126.47472382 -54.07146072]
[113.67697144 -62.19508362]
[104.43191528 -74.20777893]
[99.85595703 -88.65895081]
[100.50164795 -103.80355072]
[106.29103088 -117.81279755]
[116.52500153 -128.99499512]
[129.96775818 -135.99984741]
[144.99603271 -137.98149109]
[159.79507446 -134.70062256]
[172.57783508 -126.55342865]
[181.80073547 -114.52371216]
[186.35005188 -100.06413269]
[185.67645264 -84.92075348]
[179.86126709 -70.92220306]
[169.60670471 -59.75887680]
[156.15106201 -52.77880478]
[141.11917114 -50.82486343]
[137.87257385 -36.18042374]
[134.62597656 -21.53598404]
[131.37937927 -6.89154434]
[128.13278198 7.75289536]
[132.93199158 21.85313797]
[122.39119720 33.65153503]
[119.14459991 48.29597473]
[115.89801025 62.94041443]
[112.65141296 77.58485413]
[109.40482330 92.22929382]
[106.80009460 107.00141144]
[104.84220123 121.87308502]
[102.88431549 136.74475098]
[100.92642212 151.61642456]
[98.96852875 166.48809814]
[97.01063538 181.35977173]
[95.05274200 196.23144531]
[93.09484863 211.10311890]
[91.13695526 225.97479248]
[89.17906189 240.84646606]
[87.22116852 255.71813965]
[85.26327515 270.58981323]
[96.61123657 281.17297363]
[99.53824615 296.41149902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
