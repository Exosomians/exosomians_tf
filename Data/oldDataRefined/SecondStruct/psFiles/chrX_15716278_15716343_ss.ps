%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUCUCCAUGGGUAAAGUAAGGGUCGAACGAGUCAUCGACCACUAACCUUCUUUGAGACGUUGU\
) } def
/len { sequence length } bind def

/coor [
[105.88411713 314.70748901]
[107.27432251 299.13183594]
[118.38755035 288.13046265]
[116.98292542 273.19638062]
[115.57830811 258.26226807]
[114.17368317 243.32818604]
[112.76905823 228.39410400]
[111.36444092 213.46000671]
[95.94104004 205.46104431]
[88.10295868 189.78436279]
[91.00845337 172.34507751]
[103.72348785 159.84222412]
[100.92658234 145.10528564]
[98.12968445 130.36834717]
[95.33278656 115.63141632]
[85.97691345 108.33528900]
[84.03852081 96.63022614]
[90.54293060 86.70760345]
[88.43985748 71.85575867]
[86.33678436 57.00392532]
[82.63376617 52.34882736]
[81.48075867 47.23884583]
[82.56816864 42.82905197]
[85.13447571 39.93793869]
[85.13447571 24.93793869]
[85.13447571 9.93793774]
[85.13447571 -5.06206226]
[85.13447571 -20.06206131]
[85.13447571 -35.06206131]
[72.50222015 -44.07347870]
[67.61122131 -58.79957199]
[72.34217834 -73.57785797]
[84.87593842 -82.72577667]
[100.39301300 -82.72577667]
[112.92677307 -73.57785797]
[117.65773010 -58.79957199]
[112.76673889 -44.07347870]
[100.13447571 -35.06206131]
[100.13447571 -20.06206131]
[100.13447571 -5.06206226]
[100.13447571 9.93793774]
[100.13447571 24.93793869]
[100.13447571 39.93793869]
[101.18862152 54.90085220]
[103.29169464 69.75268555]
[105.39476776 84.60453033]
[116.09411621 97.33477783]
[110.06972504 112.83451843]
[112.86662292 127.57145691]
[115.66352081 142.30839539]
[118.46042633 157.04533386]
[130.73437500 161.00415039]
[140.00770569 169.86058044]
[144.47500610 181.80187988]
[143.30516052 194.42381287]
[136.79524231 205.21473694]
[126.29853058 212.05538940]
[127.70314789 226.98947144]
[129.10777283 241.92356873]
[130.51239014 256.85766602]
[131.91702271 271.79174805]
[133.32164001 286.72583008]
[146.29129028 295.46209717]
[150.56134033 310.50540161]
[144.11563110 324.75271606]
[129.99758911 331.47695923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[12 51]
[13 50]
[14 49]
[15 48]
[18 46]
[19 45]
[20 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
