%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUGCCUGCGACACGCACGGGACGACCUCGUCGUUCAUGGGUGUCACGCCAUCGUGCCUCUCCUGGUGAUAGACGUGACAGUCGUGAAAUCGGGGCCGU\
) } def
/len { sequence length } bind def

/coor [
[40.22292328 206.70594788]
[32.41577530 209.11889648]
[24.27264786 209.25238037]
[16.44328499 207.11103821]
[9.54812813 202.88037109]
[-2.61396194 211.66009521]
[-9.27446747 226.01098633]
[-24.12257385 227.18699646]
[-36.28466415 235.96672058]
[-48.31145096 244.93089294]
[-60.20013809 254.07743835]
[-72.08882141 263.22396851]
[-83.97750854 272.37051392]
[-92.84439850 286.82092285]
[-109.18469238 282.30084229]
[-109.36468506 265.34783936]
[-93.12404633 260.48181152]
[-81.23535919 251.33528137]
[-69.34667206 242.18875122]
[-57.45798874 233.04220581]
[-54.01758194 226.35540771]
[-45.06438828 223.80462646]
[-32.90229797 215.02490234]
[-27.11170578 201.30200195]
[-11.39368629 199.49800110]
[0.76840425 190.71827698]
[1.39520574 168.27148438]
[18.15377426 152.94934082]
[41.06915665 154.36204529]
[51.09477997 143.20468140]
[61.12039948 132.04730225]
[71.14601898 120.88993835]
[81.17163849 109.73256683]
[78.99806976 97.14537811]
[84.45246887 85.59499359]
[95.55377960 79.27655792]
[108.26996613 80.48493958]
[118.63118744 69.63850403]
[128.99240112 58.79206467]
[139.35360718 47.94562531]
[149.71482849 37.09918594]
[160.07604980 26.25274849]
[170.43725586 15.40630913]
[174.37487793 0.08293925]
[188.76103210 -3.77557707]
[199.12223816 -14.62201595]
[209.48345947 -25.46845436]
[219.84466553 -36.31489182]
[230.20588684 -47.16133118]
[240.56709290 -58.00777054]
[250.92831421 -68.85420990]
[261.12292480 -79.85739136]
[264.59140015 -95.29371643]
[278.85317993 -99.58916473]
[288.87881470 -110.74653625]
[298.90441895 -121.90390778]
[300.71588135 -128.55128479]
[305.03784180 -132.56750488]
[309.89761353 -133.41189575]
[320.58477783 -143.93731689]
[331.27194214 -154.46272278]
[331.14181519 -170.26647949]
[342.28414917 -181.47468567]
[358.08837891 -181.43772888]
[369.17816162 -170.17752075]
[368.97412109 -154.37454224]
[357.59729004 -143.40443420]
[341.79736328 -143.77555847]
[331.11019897 -133.25013733]
[320.42300415 -122.72472382]
[310.06179810 -111.87828827]
[300.03619385 -100.72091675]
[290.01055908 -89.56354523]
[287.25915527 -74.92527008]
[272.28027344 -69.83177185]
[270.11422729 -62.63052750]
[261.77474976 -58.49299622]
[251.41354370 -47.64655685]
[241.05232239 -36.80011749]
[230.69111633 -25.95367813]
[220.32989502 -15.10723972]
[209.96867371 -4.26080132]
[199.60746765 6.58563757]
[196.41094971 21.13319778]
[181.28369141 25.76752472]
[170.92248535 36.61396408]
[160.56126404 47.46039963]
[150.20005798 58.30683899]
[139.83883667 69.15328217]
[129.47761536 79.99971771]
[119.11640930 90.84615326]
[119.91497803 107.25420380]
[108.75021362 119.30449677]
[92.32901001 119.75818634]
[82.30339050 130.91555786]
[72.27777100 142.07292175]
[62.25215149 153.23030090]
[52.22652817 164.38766479]
[55.69480896 171.96720886]
[56.90166855 180.18716431]
[55.76596069 188.38966370]
[52.39339447 195.92260742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 26]
[6 25]
[8 23]
[9 22]
[10 20]
[11 19]
[12 18]
[13 17]
[29 98]
[30 97]
[31 96]
[32 95]
[33 94]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 75]
[54 73]
[55 72]
[56 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
