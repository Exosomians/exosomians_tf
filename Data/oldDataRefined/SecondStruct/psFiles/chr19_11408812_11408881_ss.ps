%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCAAUGUCUAGCUUGAGGAACAAGAUGAGAAAGGGGGGAAGAGUGAUGACGUGAACUGAACAGAAAUU\
) } def
/len { sequence length } bind def

/coor [
[98.88347626 143.97866821]
[108.60243988 132.29063416]
[101.58642578 119.03259277]
[87.76963806 114.66882324]
[80.99238586 101.86198425]
[85.15553284 87.98342133]
[78.13951874 74.72538757]
[71.12350464 61.46735001]
[64.10749054 48.20931244]
[57.09147644 34.95127487]
[40.40602875 30.23937225]
[32.30780792 15.28698349]
[37.27970886 -0.62548655]
[29.68411446 -13.56020546]
[22.08852005 -26.49492455]
[14.49292564 -39.42964172]
[0.13261148 -34.87671661]
[-14.88082314 -33.63393402]
[-29.79431152 -35.76362610]
[-43.85979843 -41.15897751]
[-56.37176895 -49.54935074]
[-66.70262146 -60.51389694]
[-74.33416748 -73.50263214]
[-78.88361359 -87.86404419]
[-80.12275696 -102.87778473]
[-77.98944855 -117.79075623]
[-72.59069061 -131.85493469]
[-64.19728851 -144.36486816]
[-53.23023987 -154.69306946]
[-40.23965836 -162.32147217]
[-25.87714005 -166.86743164]
[-10.86310387 -168.10293579]
[4.04935026 -165.96601868]
[18.11222267 -160.56385803]
[30.62012291 -152.16741943]
[40.94565964 -141.19786072]
[48.57091141 -128.20542908]
[53.11339951 -113.84181213]
[54.34526825 -98.82748413]
[52.20473480 -83.91554260]
[46.79916000 -69.85398102]
[38.39969254 -57.34811783]
[27.42764282 -47.02523804]
[35.02323914 -34.09051895]
[42.61883163 -21.15579987]
[50.21442795 -8.22108078]
[63.19466782 -6.68891191]
[73.00055695 2.24727511]
[75.81039429 15.41427231]
[70.34951782 27.93526077]
[77.36553192 41.19329834]
[84.38154602 54.45133591]
[91.39756012 67.70937347]
[98.41357422 80.96740723]
[112.23036194 85.33117676]
[119.00761414 98.13801575]
[114.84446716 112.01657867]
[121.86048126 125.27461243]
[136.99093628 123.81259155]
[151.52769470 128.25682068]
[163.25399780 137.92958069]
[170.38166809 151.35585022]
[171.82377625 166.48823547]
[167.36044312 181.01913452]
[157.67225647 192.73269653]
[144.23661804 199.84269714]
[129.10235596 201.26489258]
[114.57734680 196.78244019]
[102.87653351 187.07885742]
[95.78421783 173.63388062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[13 46]
[14 45]
[15 44]
[16 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
