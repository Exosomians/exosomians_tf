%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAAGACUCUAGACGAAAAUCACUUCACCUAGUUACUACUUUGAUCGGUUUAGACUCGUAGUCUUCAGAAAGGU\
) } def
/len { sequence length } bind def

/coor [
[127.45426941 282.10501099]
[114.56739044 274.72506714]
[110.62588501 260.03085327]
[118.45404816 246.56394958]
[114.77176666 232.02294922]
[111.08948517 217.48194885]
[107.40720367 202.94094849]
[103.72492218 188.39994812]
[100.04264069 173.85893250]
[97.37049866 172.31683350]
[95.24825287 169.46856689]
[94.24209595 165.56025696]
[94.79965973 161.06364441]
[97.16595459 156.61991882]
[95.92726898 141.67115784]
[94.68857574 126.72238922]
[93.44988251 111.77362061]
[90.98096466 96.97820282]
[87.29868317 82.43720245]
[83.61640167 67.89619446]
[79.93412018 53.35519028]
[76.25183868 38.81418610]
[63.82141113 33.19578552]
[57.07639313 21.56530571]
[58.33597946 8.37685776]
[66.90288544 -1.47024310]
[63.82465744 -16.15099525]
[60.74642944 -30.83174896]
[51.01280975 -36.45277786]
[46.22867584 -46.37664795]
[47.82777405 -57.05116653]
[55.00694275 -64.80960083]
[53.15155411 -79.69440460]
[51.29616547 -94.57921600]
[40.97672272 -107.32445526]
[47.10650635 -122.53490448]
[63.37971497 -124.56336212]
[73.05587006 -111.32312012]
[66.18097687 -96.43460846]
[68.03636169 -81.54979706]
[69.89175415 -66.66498566]
[82.76471710 -52.47343445]
[75.42717743 -33.90997696]
[78.50540924 -19.22922516]
[81.58364105 -4.54847336]
[95.97309113 3.89915013]
[100.01546478 20.43186951]
[90.79283905 35.13190460]
[94.47512817 49.67290878]
[98.15740967 64.21391296]
[101.83969116 78.75492096]
[105.52197266 93.29592133]
[108.34003448 95.15950012]
[110.44771576 98.20689392]
[111.35876465 102.13670349]
[110.72276306 106.45446777]
[108.39865112 110.53493500]
[109.63734436 125.48370361]
[110.87603760 140.43246460]
[112.11472321 155.38124084]
[114.58364105 170.17665100]
[118.26592255 184.71765137]
[121.94820404 199.25866699]
[125.63049316 213.79966736]
[129.31277466 228.34066772]
[132.99505615 242.88166809]
[146.28926086 250.99967957]
[149.81646729 265.79876709]
[141.99526978 278.42272949]
[156.15310669 285.06274414]
[162.68359375 299.27142334]
[158.50321960 314.33990479]
[145.58584595 323.15325928]
[130.03065491 321.55014038]
[119.18232727 310.28744507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[26 45]
[27 44]
[28 43]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
