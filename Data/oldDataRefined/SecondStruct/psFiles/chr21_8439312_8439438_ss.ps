%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGGUCCAUGGAUCGCGCAAGGCCGCGCCUCCAAAUUUCUGGGGAACCCCCCUAGCGGGCAGGCGGGCACCCAGCCCCCGCCACCACCCGGGCGCCCCCUCAGGGCAGCCCUCCCCGGGCCGG\
) } def
/len { sequence length } bind def

/coor [
[-3.72944212 244.04507446]
[2.31689763 228.20593262]
[2.31689763 213.20593262]
[2.31689763 198.20593262]
[2.31689763 183.20593262]
[-3.81498861 178.88737488]
[-11.00637150 192.05111694]
[-16.81259918 205.88179016]
[-31.81018639 205.61270142]
[-37.11653137 191.58264160]
[-26.05029678 181.45599365]
[-16.07876015 170.25025940]
[-22.21064758 165.93168640]
[-36.33380890 170.98504639]
[-50.45697021 176.03839111]
[-64.58013153 181.09173584]
[-70.83588409 192.44998169]
[-82.78520966 196.33422852]
[-93.79512787 191.16612244]
[-108.03805542 195.87133789]
[-122.28097534 200.57656860]
[-136.52389526 205.28179932]
[-143.40492249 219.50949097]
[-158.35829163 224.62538147]
[-172.51242065 217.59431458]
[-177.46994019 202.58770752]
[-170.28962708 188.50869751]
[-155.23143005 183.71011353]
[-141.22912598 191.03887939]
[-126.98620605 186.33364868]
[-112.74327850 181.62841797]
[-98.50035858 176.92320251]
[-87.61169434 163.21835327]
[-69.63347626 166.96858215]
[-55.51031494 161.91522217]
[-41.38715744 156.86187744]
[-27.26399422 151.80853271]
[-18.75219536 147.54098511]
[-10.07010841 145.78627014]
[-1.89059281 146.35774231]
[5.21649647 148.90179443]
[10.82288837 152.93681335]
[14.66766739 157.90061951]
[26.49286270 148.67214966]
[38.31806183 139.44367981]
[50.14325714 130.21520996]
[61.96845245 120.98673248]
[73.79364777 111.75825500]
[85.61884308 102.52978516]
[72.09159088 109.01155090]
[57.10478973 108.38233948]
[44.16844559 100.78951263]
[36.31231308 88.01136017]
[35.37634659 73.04059601]
[41.57975006 59.38344193]
[53.46965790 50.23849106]
[68.26138306 47.74753952]
[82.49062347 52.49398041]
[92.82500458 63.36650085]
[88.46498871 48.41230392]
[95.82438660 35.09712982]
[110.10779572 31.03267670]
[117.17874908 17.80385780]
[124.24969482 4.57503843]
[125.56147003 -4.57395887]
[131.65997314 -8.88853455]
[139.05343628 -21.93984032]
[140.58934021 -31.05388832]
[146.79188538 -35.21750259]
[154.50343323 -48.08343124]
[162.21498108 -60.94935989]
[169.92651367 -73.81528473]
[167.43884277 -89.66429901]
[178.38482666 -101.39309692]
[194.36766052 -100.00436401]
[203.12667847 -86.56340790]
[197.94270325 -71.38098145]
[182.79244995 -66.10374451]
[175.08090210 -53.23781967]
[167.36936951 -40.37188721]
[159.65782166 -27.50596046]
[152.10475159 -14.54636669]
[144.71127319 -1.49506211]
[137.47851562 11.64598942]
[130.40756226 24.87480736]
[123.33661652 38.10362625]
[127.89257812 52.23793793]
[120.91007996 65.75457001]
[106.05382538 70.43745422]
[108.49365234 77.52951050]
[122.67784119 72.65008545]
[127.55702209 86.83435822]
[113.37330627 91.71361542]
[115.81313324 98.80567169]
[129.52627563 104.88429260]
[143.23942566 110.96291351]
[156.95257568 117.04153442]
[170.73927307 122.95141602]
[184.59747314 128.69166565]
[198.45565796 134.43191528]
[212.31385803 140.17216492]
[227.62631226 135.38587952]
[240.83427429 144.49243164]
[241.80574036 160.50604248]
[229.79547119 171.14245605]
[214.01672363 168.24230957]
[206.57360840 154.03036499]
[192.71540833 148.29011536]
[178.85722351 142.54985046]
[164.99902344 136.80960083]
[157.53683472 137.16021729]
[150.87394714 130.75468445]
[137.16081238 124.67605591]
[123.44766235 118.59744263]
[109.73451233 112.51882172]
[94.84732056 114.35498047]
[83.02212524 123.58345032]
[71.19692993 132.81192017]
[59.37173080 142.04040527]
[47.54653549 151.26887512]
[35.72133636 160.49734497]
[23.89614105 169.72583008]
[17.31689835 183.20593262]
[17.31689835 198.20593262]
[17.31689835 213.20593262]
[17.31689835 228.20593262]
[23.36323738 244.04507446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[13 37]
[14 36]
[15 35]
[16 34]
[19 32]
[20 31]
[21 30]
[22 29]
[43 122]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
[49 116]
[59 89]
[62 86]
[63 85]
[64 84]
[66 83]
[67 82]
[69 81]
[70 80]
[71 79]
[72 78]
[94 115]
[95 114]
[96 113]
[97 112]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
