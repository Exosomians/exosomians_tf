%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUAACAGCGUGAGGAUCCUUGUCUCUCCGGUAAGACCCGCCCAGACAGCACGUAAUCCUCUCGGAAAGAGACGGAGGGACUUUU\
) } def
/len { sequence length } bind def

/coor [
[77.95805359 137.14971924]
[71.56852722 132.52076721]
[66.12755585 126.80683136]
[61.81666183 120.19855499]
[58.77967072 112.91638947]
[57.11790085 105.20330048]
[56.88679886 97.31661987]
[58.09407043 89.51945496]
[60.69944000 82.07196045]
[64.61598206 75.22258759]
[54.00938416 64.61598206]
[43.40278244 54.00938416]
[32.79618073 43.40278244]
[22.18957710 32.79618073]
[20.58368874 47.70996857]
[9.97575474 58.31523895]
[-4.93843794 59.91738129]
[-17.55686378 51.80718231]
[-22.29375839 37.57476425]
[-17.05225563 23.52034569]
[-4.15259409 15.86536407]
[10.69389915 17.99786949]
[3.03984904 5.09765625]
[-4.61420155 -7.80255747]
[-12.26825237 -20.70277023]
[-19.92230225 -33.60298538]
[-27.57635307 -46.50319672]
[-42.90204239 -48.06185150]
[-54.23878479 -58.22707367]
[-57.37892532 -72.94452667]
[-51.32319260 -86.52635956]
[-58.97724152 -99.42657471]
[-66.63129425 -112.32678223]
[-82.00471497 -115.99195099]
[-90.21241760 -129.49784851]
[-86.38492584 -144.83164978]
[-72.79301453 -152.89610291]
[-57.50052261 -148.90670776]
[-49.58021927 -135.23028564]
[-53.73107910 -119.98083496]
[-46.07703018 -107.08061981]
[-38.42297745 -94.18041229]
[-23.60028839 -92.98632050]
[-12.18799496 -83.17695618]
[-8.69931602 -68.35527039]
[-14.67613983 -54.15724945]
[-7.02208900 -41.25703430]
[0.63196158 -28.35682106]
[8.28601170 -15.45660782]
[15.94006252 -2.55639410]
[23.59411240 10.34381962]
[32.79618073 22.18957710]
[43.40278244 32.79618073]
[54.00938416 43.40278244]
[64.61598206 54.00938416]
[75.22258759 64.61598206]
[98.37207794 56.83405685]
[122.04194641 62.85028458]
[138.66601562 80.74155426]
[142.93035889 104.78886414]
[157.32275391 109.01484680]
[171.71514893 113.24083710]
[186.10754395 117.46682739]
[195.45782471 116.89131165]
[200.93321228 122.10903931]
[215.16560364 126.84603119]
[227.70513916 117.70601654]
[243.22221375 117.71581268]
[255.75019836 126.87164307]
[260.47183228 141.65290833]
[255.57153320 156.37591553]
[242.93359375 165.37934875]
[227.41754150 165.20123291]
[214.98962402 155.91003418]
[210.42861938 141.07841492]
[196.19622803 136.34143066]
[181.88154602 131.85922241]
[167.48916626 127.63323212]
[153.09677124 123.40724182]
[138.70437622 119.18125916]
[134.56982422 125.90128326]
[129.28192139 131.75717163]
[123.01710510 136.55354309]
[115.98437500 140.13040161]
[108.41835785 142.36839294]
[100.57147980 143.19285583]
[92.70553589 142.57627869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[31 42]
[32 41]
[33 40]
[60 80]
[61 79]
[62 78]
[63 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
