%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGGGGUCUUACAGAGUGUUAUGUCGAUUUAUAUGGAGACAUUUCUGUCUUCCAUUUUAUUACGAUCAAGACACUUAAGAGAGAAGAAGAGCACGCUUAGGUAUUUGACGGUGACUAUCUGUCUUUCCUCGAGUUACUCUUCUGU\
) } def
/len { sequence length } bind def

/coor [
[191.54769897 166.53900146]
[184.52323914 166.90934753]
[177.58843994 165.62591553]
[171.12826538 162.75123596]
[165.50334167 158.43641663]
[161.02987671 152.91319275]
[157.96182251 146.48155212]
[156.47654724 139.49336243]
[156.66453552 132.33319092]
[142.86804199 126.44618988]
[129.07154846 120.55918121]
[115.27506256 114.67217255]
[104.12064362 120.77547455]
[91.48118591 119.39149475]
[81.91182709 111.01898956]
[78.86128235 98.67534637]
[65.19285583 92.49682617]
[51.52442551 86.31830597]
[37.85599899 80.13978577]
[24.18757057 73.96126556]
[10.51914406 67.78275299]
[-3.14928365 61.60423279]
[-18.91139793 62.97037125]
[-27.32184601 50.67754364]
[-40.99027252 44.49902344]
[-54.72350693 38.46591949]
[-68.51999664 32.57891083]
[-82.31648254 26.69190216]
[-93.70449829 37.99588394]
[-108.51750183 44.06297302]
[-124.48624420 43.99553680]
[-139.17657471 37.83330917]
[-150.36048889 26.54279900]
[-156.35403442 11.86585808]
[-156.27079773 -3.94903064]
[-170.18913269 -9.54187775]
[-184.10746765 -15.13472462]
[-198.02580261 -20.72757149]
[-211.94413757 -26.32041931]
[-225.92105103 -31.76523209]
[-239.95495605 -37.06139755]
[-253.98886108 -42.35756302]
[-268.02276611 -47.65372849]
[-284.10876465 -44.46420288]
[-294.70895386 -56.97691727]
[-288.91879272 -72.31986237]
[-272.69467163 -74.70953369]
[-262.72662354 -61.68763733]
[-248.69270325 -56.39147186]
[-234.65878296 -51.09530640]
[-220.62487793 -45.79914093]
[-213.20495605 -46.38416672]
[-206.35128784 -40.23875427]
[-192.43295288 -34.64590836]
[-178.51461792 -29.05306053]
[-164.59628296 -23.46021271]
[-150.67794800 -17.86736679]
[-141.22195435 -28.28437424]
[-128.74639893 -34.85196686]
[-114.74715424 -36.75951385]
[-100.91074371 -33.75654602]
[-88.91113281 -26.18542099]
[-80.20723724 -14.94242191]
[-75.86555481 -1.37170005]
[-76.42947388 12.89541340]
[-62.63298798 18.78242302]
[-48.83649826 24.66943169]
[-41.39842606 24.39984512]
[-34.81175613 30.83059692]
[-21.14332771 37.00911713]
[-6.35887146 35.20104599]
[3.02923489 47.93580246]
[16.69766235 54.11432266]
[30.36608887 60.29284286]
[44.03451538 66.47135925]
[57.70294571 72.64987946]
[71.37136841 78.82839966]
[85.03980255 85.00691223]
[100.30746460 78.82204437]
[115.38915253 85.44753265]
[121.16207123 100.87567902]
[134.95855713 106.76268768]
[148.75505066 112.64969635]
[162.55154419 118.53670502]
[183.67330933 107.01039124]
[206.31027222 114.40675354]
[216.34089661 135.73278809]
[231.00422668 138.89297485]
[245.66755676 142.05316162]
[260.33087158 145.21336365]
[274.99420166 148.37355042]
[289.65753174 151.53373718]
[304.32086182 154.69392395]
[314.75875854 146.11589050]
[328.03924561 145.15220642]
[339.27218628 151.93206787]
[344.45123291 163.77449036]
[359.04418945 167.24520874]
[373.63714600 170.71591187]
[388.23010254 174.18663025]
[402.85903931 177.50225830]
[417.52236938 180.66246033]
[432.18569946 183.82264709]
[440.37643433 174.27485657]
[451.79476929 169.17066956]
[464.22683716 169.43196106]
[475.29095459 174.94676208]
[482.89401245 184.60261536]
[485.62722778 196.51043701]
[500.14324951 200.29010010]
[514.65924072 204.06977844]
[529.17523193 207.84944153]
[543.69122314 211.62911987]
[556.33129883 202.42248535]
[571.92846680 203.54626465]
[583.11816406 214.46984863]
[584.61700439 230.03543091]
[575.71722412 242.89344788]
[560.62109375 246.97271729]
[546.45648193 240.34713745]
[539.91156006 226.14511108]
[525.39556885 222.36543274]
[510.87954712 218.58576965]
[496.36355591 214.80609131]
[481.84756470 211.02642822]
[468.80148315 222.84750366]
[451.12069702 224.53799438]
[435.80364990 215.24098206]
[429.02551270 198.48597717]
[414.36218262 195.32577515]
[399.69885254 192.16558838]
[392.44729614 193.84263611]
[384.75936890 188.77957153]
[370.16644287 185.30886841]
[355.57348633 181.83815002]
[340.98052979 178.36744690]
[327.08697510 187.78854370]
[310.34201050 184.20863342]
[301.16067505 169.35725403]
[286.49734497 166.19706726]
[271.83401489 163.03688049]
[257.17068481 159.87667847]
[242.50737000 156.71649170]
[227.84403992 153.55630493]
[213.18070984 150.39611816]
[209.39268494 156.23599243]
[204.33247375 161.04257202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 84]
[10 83]
[11 82]
[12 81]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[24 70]
[25 69]
[26 67]
[27 66]
[28 65]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 51]
[41 50]
[42 49]
[43 48]
[87 145]
[88 144]
[89 143]
[90 142]
[91 141]
[92 140]
[93 139]
[97 136]
[98 135]
[99 134]
[100 133]
[101 131]
[102 130]
[103 129]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
