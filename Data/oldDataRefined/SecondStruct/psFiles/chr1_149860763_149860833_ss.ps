%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAGCCGGGAUUUUUCCCGGAAACCCUAGCUUUGCACGUUUCGACCUCGCCGCCGGAUCGGAGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[93.50798798 199.04891968]
[75.17020416 196.10574341]
[57.70167923 189.79803467]
[41.71397018 180.34657288]
[27.76679039 168.08229065]
[16.34841537 153.43450928]
[7.85858917 136.91604614]
[-6.44716501 141.42663574]
[-20.75292015 145.93721008]
[-35.05867386 150.44779968]
[-49.36442947 154.95838928]
[-63.67018127 159.46897888]
[-74.34432220 171.91867065]
[-90.41113281 168.63389587]
[-95.34244537 152.99374390]
[-84.06536102 141.08747864]
[-68.18077087 145.16322327]
[-53.87501526 140.65263367]
[-39.56925964 136.14204407]
[-25.26350594 131.63146973]
[-10.95775223 127.12088013]
[3.34800220 122.61029053]
[1.24550712 110.01918030]
[0.77631718 97.26236725]
[1.94819224 84.55082703]
[4.74175072 72.09481049]
[9.11078930 60.10030746]
[14.98304939 48.76571274]
[22.26140785 38.27848434]
[30.82548904 28.81207275]
[40.53365326 20.52303886]
[51.22533035 13.54847908]
[62.72369385 8.00374508]
[74.83857727 3.98054099]
[87.36959839 1.54540718]
[100.10951996 0.73861843]
[112.84762573 1.57351816]
[125.37325287 4.03629827]
[137.47921753 8.08622551]
[148.96531677 13.65631962]
[159.64158630 20.65445709]
[169.33143616 28.96489143]
[177.87460327 38.45018005]
[185.12980652 48.95344543]
[190.97703552 60.30096817]
[195.31959534 72.30507660]
[198.08566284 84.76723480]
[199.22947693 97.48133087]
[198.73214722 110.23707581]
[196.60186768 122.82351685]
[192.87388611 135.03247070]
[206.46850586 141.37174988]
[220.06312561 147.71101379]
[235.84025574 146.53085327]
[244.10514832 158.92199707]
[257.69976807 165.26127625]
[271.29440308 171.60055542]
[288.20480347 172.81460571]
[291.71945190 189.40025330]
[276.75494385 197.36891174]
[264.95510864 185.19515991]
[251.36050415 178.85589600]
[237.76588440 172.51661682]
[222.96113586 174.15022278]
[213.72384644 161.30563354]
[200.12924194 154.96636963]
[186.53462219 148.62709045]
[175.96133423 163.89608765]
[162.72872925 176.92816162]
[147.30004883 187.26705933]
[130.21545410 194.55082703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[51 67]
[52 66]
[53 65]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
