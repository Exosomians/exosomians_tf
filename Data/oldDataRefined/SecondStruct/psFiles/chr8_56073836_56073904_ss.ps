%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCGAGUCUUAUCGCAUAUUUUAAUAGUGGCAAUGAGUUGUGUUAUCCAUGGAGGAGUAGCGGUCGA\
) } def
/len { sequence length } bind def

/coor [
[101.51351166 300.19143677]
[100.84053802 285.20654297]
[100.16757202 270.22164917]
[99.49459839 255.23674011]
[98.82162476 240.25184631]
[98.14865112 225.26695251]
[85.63704681 217.22967529]
[80.19282532 203.20027161]
[84.09922791 188.48315430]
[96.06074524 178.77601624]
[95.38777161 163.79112244]
[94.71479797 148.80622864]
[86.41428375 136.43890381]
[93.52465057 122.30549622]
[92.85167694 107.32060242]
[89.27507019 99.77696228]
[92.50000000 91.65140533]
[92.50000000 76.65140533]
[92.50000000 61.65140533]
[80.63781738 54.27633667]
[74.09665680 42.05856705]
[74.52906036 28.31610107]
[81.71026611 16.71963501]
[93.62750244 10.31207943]
[94.30047607 -4.67281628]
[94.97344971 -19.65771294]
[95.64642334 -34.64260864]
[96.31939697 -49.62750626]
[88.11052704 -59.85116196]
[89.17570496 -72.51257324]
[98.37206268 -80.68196106]
[99.71665192 -95.62157440]
[101.06124115 -110.56118774]
[91.92478943 -123.74848938]
[96.67636871 -139.07174683]
[111.67096710 -144.77626038]
[125.40601349 -136.48602295]
[127.34516144 -120.56060028]
[116.00085449 -109.21659851]
[114.65626526 -94.27698517]
[113.31167603 -79.33737183]
[121.60405731 -64.03257751]
[111.30429077 -48.95453262]
[110.63131714 -33.96963501]
[109.95834351 -18.98473930]
[109.28536987 -3.99984407]
[108.61240387 10.98505211]
[121.68778992 20.65691948]
[126.58330536 36.33842087]
[121.22682953 52.04199982]
[107.50000000 61.65140533]
[107.50000000 76.65140533]
[107.50000000 91.65140533]
[107.83657074 106.64762878]
[108.50954437 121.63252258]
[116.85819244 135.07167053]
[109.69969177 148.13325500]
[110.37266541 163.11814880]
[111.04563904 178.10304260]
[123.82913971 186.69888306]
[129.03904724 201.00657654]
[124.87432861 215.46752930]
[113.13354492 224.59397888]
[113.80651855 239.57887268]
[114.47949219 254.56376648]
[115.15246582 269.54867554]
[115.82543945 284.53356934]
[116.49841309 299.51846313]
[119.55103302 318.65823364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[10 59]
[11 58]
[12 57]
[14 55]
[15 54]
[17 53]
[18 52]
[19 51]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[31 41]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
