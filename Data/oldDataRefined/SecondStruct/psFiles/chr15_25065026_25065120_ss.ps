%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCUACUACUCAGGAGGUUUUUUUUGUAAGGAACCUUUUCGACUUGUUUUACUCACUUUUGAGUAUGGCAGUAAGAGUAGCCUUGACUCCAG\
) } def
/len { sequence length } bind def

/coor [
[90.44052887 251.10191345]
[89.62967682 235.96525574]
[94.04773712 221.46502686]
[103.16120148 209.35220337]
[115.86957550 201.08946228]
[112.46343231 186.48130798]
[109.05728912 171.87315369]
[105.65114594 157.26499939]
[102.24500275 142.65684509]
[98.83885956 128.04869080]
[84.84835052 123.63270569]
[74.99597168 112.76228333]
[71.97255707 98.40629578]
[57.76860809 93.58470154]
[43.48766708 88.99616241]
[29.13356209 84.64189148]
[14.77945709 80.28762054]
[0.42535231 75.93334961]
[-13.92875290 71.57907867]
[-28.28285789 67.22480774]
[-42.63696289 62.87053680]
[-56.99106598 58.51626968]
[-71.34517670 54.16199875]
[-85.69927979 49.80772781]
[-100.05338287 45.45345688]
[-114.40748596 41.09918976]
[-130.24667358 45.34796906]
[-141.65296936 33.56541443]
[-136.89254761 17.87240791]
[-120.86252594 14.41257000]
[-110.05321503 26.74508286]
[-95.69911194 31.09935379]
[-81.34500885 35.45362473]
[-66.99090576 39.80789185]
[-52.63679886 44.16216278]
[-38.28269196 48.51643372]
[-23.92858696 52.87070465]
[-9.57448292 57.22497559]
[4.77962255 61.57924271]
[19.13372803 65.93351746]
[33.48783112 70.28778076]
[47.84193802 74.64205170]
[55.30091476 73.54990387]
[62.59019852 79.38075256]
[76.79415131 84.20234680]
[94.07352448 72.55998993]
[114.61756134 76.03327179]
[125.56552887 65.77938843]
[136.51348877 55.52550125]
[147.46144104 45.27161789]
[158.40940857 35.01773071]
[163.19250488 19.93686295]
[177.77084351 16.88377571]
[188.71879578 6.62989140]
[199.66676331 -3.62399316]
[210.61471558 -13.87787724]
[221.56268311 -24.13176155]
[232.51063538 -34.38564682]
[236.75068665 -50.22717667]
[252.65782166 -54.21403885]
[263.86816406 -42.24488831]
[258.84945679 -26.63256454]
[242.76452637 -23.43768501]
[231.81655884 -13.18380070]
[220.86860657 -2.92991662]
[209.92063904 7.32396793]
[198.97268677 17.57785225]
[188.02471924 27.83173752]
[184.02470398 42.17918015]
[168.66329956 45.96569443]
[157.71533203 56.21957779]
[146.76736450 66.47346497]
[135.81941223 76.72734833]
[124.87145233 86.98123169]
[127.66076660 95.20839691]
[127.80127716 103.89440155]
[125.27953339 112.20748138]
[120.33701324 119.35157013]
[113.44701385 124.64254761]
[116.85315704 139.25070190]
[120.25930023 153.85885620]
[123.66544342 168.46701050]
[127.07158661 183.07516479]
[130.47773743 197.68331909]
[145.53004456 199.47317505]
[159.06103516 206.30606079]
[169.43675232 217.35685730]
[175.40429688 231.29113770]
[176.24304199 246.42628479]
[171.85171509 260.93463135]
[162.76058960 273.06420898]
[150.06745911 281.35037231]
[135.30508423 284.79248047]
[120.25608826 282.97488403]
[106.73771667 276.11706543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[13 45]
[14 44]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
