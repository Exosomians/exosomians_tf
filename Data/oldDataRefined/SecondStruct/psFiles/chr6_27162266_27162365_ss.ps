%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCCCGGGACACCGAAUCGACCAGUUUCGCGGACAGAUCAUUUGUCCUCUAGGACCCAAGCUUAGGGUCGCCCCGGAAUGCACAAGUUAAAAUAUAAA\
) } def
/len { sequence length } bind def

/coor [
[116.08020782 257.90893555]
[116.00610352 242.85275269]
[119.06436157 228.11027527]
[125.12127686 214.32595825]
[133.91207886 202.10240173]
[145.05247498 191.97395325]
[137.48522949 179.02262878]
[129.91798401 166.07130432]
[122.35073853 153.11997986]
[114.78350067 140.16864014]
[101.33447266 142.78190613]
[87.74872589 141.01193237]
[75.41818237 135.04006958]
[65.60617828 125.47816467]
[59.31800079 113.30589294]
[44.46469879 115.39862823]
[29.61140251 117.49135590]
[14.75810337 119.58408356]
[2.17236996 129.17105103]
[-11.50990009 123.28507233]
[-22.27021790 135.18444824]
[-38.27289963 134.04705811]
[-47.24206161 120.74541473]
[-42.29732895 105.48339844]
[-27.23187637 99.96872711]
[-13.60263062 108.43177032]
[-2.07930422 98.99449158]
[12.66537285 104.73078918]
[27.51867104 102.63805389]
[42.37197113 100.54532623]
[57.22526932 98.45259857]
[60.91584778 82.55003357]
[70.29200745 69.18592072]
[61.93422318 56.73010635]
[53.57643890 44.27428436]
[45.21865463 31.81846428]
[36.86087036 19.36264610]
[28.50308800 6.90682554]
[20.14530373 -5.54899406]
[6.29915953 -15.33268642]
[11.86750698 -31.34611320]
[28.79659462 -30.42833710]
[32.60112381 -13.90677834]
[40.95890808 -1.45095861]
[49.31669235 11.00486088]
[57.67447662 23.46068001]
[66.03225708 35.91650009]
[74.39004517 48.37232208]
[82.74782562 60.82814026]
[89.59845734 58.48036575]
[96.74682617 57.32109451]
[103.98832703 57.38351059]
[111.11565399 58.66582108]
[117.92479706 61.13132858]
[124.22084045 64.70944977]
[134.74464417 54.02069092]
[145.26844788 43.33193207]
[155.79225159 32.64317322]
[166.31605530 21.95441437]
[164.65203857 6.40561771]
[173.41476440 -6.54616308]
[188.46675110 -10.78549385]
[202.70089722 -4.31069136]
[209.39627075 9.82104015]
[205.39154053 24.93712807]
[192.57760620 33.90021896]
[177.00480652 32.47821808]
[166.48100281 43.16697693]
[155.95721436 53.85573578]
[145.43341064 64.54449463]
[134.90960693 75.23325348]
[142.48072815 94.75981140]
[139.88172913 115.54089355]
[127.73482513 132.60140991]
[135.30206299 145.55273438]
[142.86930847 158.50405884]
[150.43655396 171.45538330]
[158.00379944 184.40670776]
[172.29718018 179.67462158]
[187.26213074 178.01809692]
[202.24443054 179.50955200]
[216.58912659 184.08378601]
[229.66911316 191.54083252]
[240.91259766 201.55470276]
[249.82807922 213.68762207]
[256.02578735 227.40922546]
[259.23480225 242.11962891]
[259.31481934 257.17575073]
[256.26235962 271.91943359]
[250.21087646 285.70614624]
[241.42488098 297.93316650]
[230.28848267 308.06597900]
[217.28849792 315.66165161]
[202.99325562 320.38812256]
[188.02764893 322.03875732]
[173.04594421 320.54141235]
[158.70304871 315.96154785]
[145.62599182 308.49935913]
[134.38644409 298.48104858]
[125.47574615 286.34460449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[15 31]
[16 30]
[17 29]
[18 28]
[20 26]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
