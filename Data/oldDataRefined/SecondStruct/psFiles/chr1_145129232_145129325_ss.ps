%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGUACAGAGACACCGCGUUAGCCGAUCGCGCAAACCGACAAUUGAUUUUCCAACCGCCAAGCUUGGGUGGGUCUCCGCAGCGACUAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[136.66003418 288.11990356]
[133.21867371 273.51998901]
[129.77731323 258.92010498]
[126.33595276 244.32020569]
[115.88509369 233.70753479]
[120.24992371 218.50033569]
[109.79906464 207.88766479]
[114.16389465 192.68046570]
[103.71303558 182.06779480]
[108.07786560 166.86059570]
[104.63650513 152.26069641]
[101.19514465 137.66079712]
[97.75378418 123.06090546]
[94.31243134 108.46100616]
[89.45619202 101.81098175]
[91.00713348 93.32160187]
[88.05037689 78.61589813]
[85.09362030 63.91020203]
[82.13686371 49.20450211]
[71.83112335 37.20024490]
[76.90785980 23.19752693]
[66.60211182 11.19326782]
[71.67884827 -2.80944777]
[68.72209167 -17.51514816]
[65.76533508 -32.22084808]
[53.60582733 -35.97724915]
[44.30586624 -44.55766678]
[39.63867569 -56.24054718]
[40.45717621 -68.72143555]
[46.53882980 -79.56748199]
[56.64133072 -86.69166565]
[54.66294861 -101.56063080]
[52.68456650 -116.42958832]
[37.69848633 -118.06690216]
[23.53994751 -123.24369812]
[11.03211117 -131.65901184]
[0.90216696 -142.82357788]
[-6.26094341 -156.08831787]
[-10.04076672 -170.68202209]
[-10.21754932 -185.75625610]
[-6.78101254 -200.43458557]
[0.06904792 -213.86366272]
[9.93437767 -225.26274109]
[22.24142075 -233.96905518]
[36.27465820 -239.47647095]
[51.21822357 -241.46478271]
[66.20330811 -239.81838989]
[80.35870361 -234.63301086]
[92.86143494 -226.21011353]
[102.98461151 -215.03939819]
[110.13967896 -201.77032471]
[113.91065216 -187.17433167]
[114.07830048 -172.10000610]
[110.63285828 -157.42375183]
[103.77465820 -143.99882507]
[93.90242004 -132.60574341]
[81.59010315 -123.90687561]
[67.55352783 -118.40797424]
[69.53191376 -103.53900909]
[71.51029205 -88.67005157]
[87.31331635 -81.15171051]
[95.64505005 -65.58635712]
[93.09291077 -47.96054459]
[80.47103119 -35.17760086]
[83.42778778 -20.47190285]
[86.38454437 -5.76620340]
[96.47879791 5.18620539]
[91.61355591 20.24077225]
[101.70780945 31.19318008]
[96.84256744 46.24774551]
[99.79932404 60.95344543]
[102.75608063 75.65914917]
[105.71282959 90.36484528]
[108.91233063 105.01964569]
[112.35368347 119.61954498]
[115.79504395 134.21945190]
[119.23640442 148.81935120]
[122.67776489 163.41925049]
[133.37477112 175.07620239]
[128.76379395 189.23910522]
[139.46080017 200.89605713]
[134.84982300 215.05897522]
[145.54682922 226.71592712]
[140.93585205 240.87884521]
[144.37721252 255.47874451]
[147.81857300 270.07864380]
[151.25993347 284.67852783]
[165.62268066 290.55145264]
[173.76173401 303.76263428]
[172.54745483 319.23211670]
[162.44676208 331.01159668]
[147.34358215 334.57156372]
[133.04539490 328.54321289]
[125.05013275 315.24450684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[6 82]
[8 80]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[16 73]
[17 72]
[18 71]
[19 70]
[21 68]
[23 66]
[24 65]
[25 64]
[31 60]
[32 59]
[33 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
