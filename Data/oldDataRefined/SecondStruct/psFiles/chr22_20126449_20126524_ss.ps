%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGACGGUCUAUUUGUAAGGUCCCACGACACCGGCGGAGUGCAUAGGUCUCACUACGUCGAGGGACCCCUGUGUC\
) } def
/len { sequence length } bind def

/coor [
[101.71549988 173.76226807]
[99.88408661 158.87449646]
[98.05267334 143.98672485]
[96.22126007 129.09893799]
[82.33396912 123.42944336]
[70.60649872 132.78178406]
[58.87902832 142.13414001]
[47.15155411 151.48648071]
[43.93370056 167.20350647]
[29.57449532 174.35842896]
[15.08909130 167.46258545]
[11.58945084 151.80589294]
[21.76019859 139.39881897]
[37.79920578 139.75900269]
[49.52667999 130.40666199]
[61.25415039 121.05431366]
[72.98162079 111.70196533]
[74.38779449 92.65560913]
[86.46611786 80.36770630]
[101.77472687 79.02900696]
[108.28298187 65.51447296]
[114.79123688 51.99994278]
[121.29949188 38.48540878]
[127.80774689 24.97087479]
[134.31600952 11.45634270]
[133.33261108 -4.33427191]
[145.82583618 -12.44405842]
[152.33409119 -25.95859146]
[158.84234619 -39.47312546]
[165.35060120 -52.98765945]
[159.42453003 -65.27053070]
[161.71296692 -78.51567078]
[171.13751221 -87.82209015]
[184.02275085 -89.88119507]
[191.07682800 -103.11901855]
[188.06529236 -115.85018921]
[194.43820190 -126.80983734]
[206.21620178 -130.26103210]
[213.80435181 -143.20010376]
[221.39251709 -156.13919067]
[223.11666870 -165.40560913]
[229.56330872 -169.44224548]
[237.67292786 -182.06105042]
[237.91233826 -198.45845032]
[252.36250305 -206.21244812]
[266.15835571 -197.34640503]
[265.10787964 -180.98092651]
[250.29173279 -173.95143127]
[242.18211365 -161.33262634]
[234.33160400 -148.55102539]
[226.74343872 -135.61195374]
[219.15527344 -122.67286682]
[220.10812378 -105.27236176]
[204.31465149 -96.06494141]
[197.26057434 -82.82711792]
[202.88185120 -67.11373138]
[195.37429810 -51.83618927]
[178.86512756 -46.47940063]
[172.35687256 -32.96487045]
[165.84861755 -19.45033646]
[159.34036255 -5.93580294]
[160.78927612 8.88816166]
[147.83053589 17.96459961]
[141.32228088 31.47913170]
[134.81402588 44.99366379]
[128.30577087 58.50819778]
[121.79751587 72.02272797]
[115.28926086 85.53726196]
[124.67351532 105.34020996]
[111.10903931 127.26752472]
[112.94045258 142.15530396]
[114.77186584 157.04307556]
[116.60327911 171.93086243]
[126.90218353 184.69270325]
[120.74790955 199.89326477]
[104.47145844 201.89550781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 17]
[6 16]
[7 15]
[8 14]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[27 61]
[28 60]
[29 59]
[30 58]
[34 55]
[35 54]
[38 52]
[39 51]
[40 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
