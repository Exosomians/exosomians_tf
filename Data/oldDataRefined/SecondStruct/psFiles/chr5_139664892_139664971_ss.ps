%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGUACUACGGAUGGAGACACCCAACGACACUGGUAGUUUGUUCUACUACACCUGUCUCGUGUACCGUGUCUUGACUAU\
) } def
/len { sequence length } bind def

/coor [
[60.19028091 318.98315430]
[48.92351151 329.22909546]
[34.46136093 334.00048828]
[19.30948257 332.47061157]
[6.09303284 324.90454102]
[-2.89815903 312.61315918]
[-6.10631466 297.72598267]
[-2.97560239 282.82235718]
[5.95156336 270.48437500]
[19.12849808 262.84970093]
[34.27221680 261.24108887]
[38.85210419 246.95735168]
[37.86962128 239.43199158]
[43.89644241 232.21472168]
[40.97874451 217.60868835]
[52.96936417 207.28707886]
[58.09966660 193.19168091]
[63.22996902 179.09629822]
[68.36026764 165.00091553]
[73.49057007 150.90551758]
[78.62087250 136.81013489]
[83.75117493 122.71474457]
[73.48767090 108.77952576]
[73.40544128 91.47280121]
[83.53606415 77.44068909]
[99.98918152 72.07181549]
[104.01176453 57.62125015]
[108.03435516 43.17068863]
[112.05694580 28.72012329]
[108.30388641 13.35050774]
[119.17088318 3.16435647]
[123.19346619 -11.28620625]
[113.22441864 -27.14940453]
[117.67632294 -45.02685928]
[133.37921143 -54.05107880]
[136.26989746 -68.76990509]
[139.16058350 -83.48873901]
[142.05126953 -98.20756531]
[144.94195557 -112.92639923]
[134.98431396 -124.98374176]
[135.15832520 -140.62034607]
[145.38182068 -152.45310974]
[160.82757568 -154.89494324]
[174.20259094 -146.79289246]
[179.19157410 -131.97250366]
[173.43888855 -117.43150330]
[159.66078186 -110.03571320]
[156.77009583 -95.31688690]
[153.87940979 -80.59805298]
[150.98872375 -65.87922668]
[148.09803772 -51.16039658]
[156.55099487 -43.05349350]
[159.95960999 -31.72134972]
[157.32820129 -20.05930138]
[149.22052002 -11.10865211]
[137.64402771 -7.26361752]
[133.62144470 7.18694592]
[137.66223145 21.52296066]
[126.50750732 32.74271393]
[122.48491669 47.19327545]
[118.46233368 61.64384079]
[114.43974304 76.09440613]
[123.33762360 84.65924072]
[127.67174530 96.22401428]
[126.59455872 108.52719879]
[120.31670380 119.16286469]
[110.06584167 126.05115509]
[97.84656525 127.84504700]
[92.71626282 141.94042969]
[87.58596039 156.03582764]
[82.45565796 170.13121033]
[77.32535553 184.22660828]
[72.19505310 198.32199097]
[67.06475067 212.41737366]
[69.61550140 228.03161621]
[57.99183273 237.34501648]
[53.13582230 251.53724670]
[48.55593491 265.82095337]
[59.94073486 275.93560791]
[66.22135162 289.80911255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 78]
[12 77]
[14 76]
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[26 62]
[27 61]
[28 60]
[29 59]
[31 57]
[32 56]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
