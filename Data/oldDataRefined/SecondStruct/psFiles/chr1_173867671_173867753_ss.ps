%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGUGGUAGUCUCGCCAACCGUAAGUAGUAAUGAGAGUCUACAGGGAUGGUUGUGUCCGAAGUAGUCUCCGUCCCGUGCUC\
) } def
/len { sequence length } bind def

/coor [
[26.93735695 178.41326904]
[16.80869484 175.57763672]
[4.41511393 184.02743530]
[-7.97846746 192.47723389]
[-20.37204933 200.92703247]
[-32.76562881 209.37683105]
[-44.99904251 218.05690002]
[-57.06801224 226.96420288]
[-69.13697815 235.87150574]
[-71.24435425 251.53466797]
[-83.86051941 261.05349731]
[-99.50051880 258.78063965]
[-108.88542175 246.06454468]
[-106.44733429 230.44944763]
[-93.63272858 221.19950867]
[-78.04428101 223.80255127]
[-65.97531128 214.89524841]
[-53.90634537 205.98794556]
[-50.30715179 199.31965637]
[-41.21543121 196.98326111]
[-28.82184982 188.53346252]
[-16.42826843 180.08364868]
[-4.03468657 171.63385010]
[8.35889530 163.18405151]
[15.15500450 145.24034119]
[35.06160736 143.39926147]
[46.78907776 134.04690552]
[58.51655197 124.69456482]
[70.24402618 115.34221649]
[81.79456329 105.77221680]
[82.98200226 91.33142853]
[93.96465302 81.88009644]
[108.42111969 82.85820770]
[119.79069519 73.07389832]
[131.16027832 63.28958893]
[135.77017212 55.11236572]
[143.14277649 53.36169052]
[154.87025452 44.00934219]
[166.59773254 34.65699387]
[172.56300354 20.00346375]
[187.33772278 18.11740494]
[199.06518555 8.76505661]
[210.79266357 -0.58728999]
[222.52012634 -9.93963718]
[224.08085632 -27.24405098]
[237.33638000 -37.95198059]
[253.91816711 -35.92065048]
[265.28775024 -45.70496368]
[276.65731812 -55.48927307]
[288.02688599 -65.27358246]
[299.39648438 -75.05789948]
[304.29910278 -90.70706177]
[320.35986328 -94.02130127]
[331.05682373 -81.59120941]
[325.38586426 -66.20379639]
[309.18078613 -63.68832016]
[297.81121826 -53.90401077]
[286.44161987 -44.11969757]
[275.07205200 -34.33538818]
[263.70248413 -24.55107498]
[264.52182007 -11.54948997]
[257.53359985 -0.32341525]
[245.14360046 4.83150291]
[231.87248230 1.78783524]
[220.14500427 11.14018250]
[208.41754150 20.49252892]
[196.69006348 29.84487534]
[191.56361389 43.82946396]
[175.95007324 46.38446808]
[164.22259521 55.73681259]
[152.49513245 65.08916473]
[140.94458008 74.65916443]
[129.57501221 84.44347382]
[118.20543671 94.22778320]
[117.01799774 108.66857147]
[106.03534698 118.11990356]
[91.57888031 117.14179230]
[86.96897888 125.31901550]
[79.59636688 127.06968689]
[67.86889648 136.42204285]
[56.14142609 145.77438354]
[44.41395187 155.12672424]
[43.77946472 166.29486084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 18]
[8 17]
[9 16]
[26 82]
[27 81]
[28 80]
[29 79]
[30 77]
[33 74]
[34 73]
[35 72]
[37 71]
[38 70]
[39 69]
[41 67]
[42 66]
[43 65]
[44 64]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
