%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUCGCCGAGCAACCAGAUCCCCAUACUAAGAGCGAAGCCCACGCUCUCCAGGGCCCAAGUUUAGGGCCUGCUCGGGUCCGAAAAUGGGUGGGGUGUGGGCUUUAAAUUUUUGUCUAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[-87.29364014 511.27227783]
[-104.03530121 508.21765137]
[-109.86182404 522.03979492]
[-115.68834686 535.86193848]
[-121.51486969 549.68408203]
[-116.82412720 565.02606201]
[-126.01282501 578.17700195]
[-142.03218079 579.04864502]
[-152.59352112 566.97229004]
[-149.59507751 551.21197510]
[-135.33700562 543.85754395]
[-129.51049805 530.03540039]
[-123.68396759 516.21325684]
[-117.85744476 502.39114380]
[-128.73104858 495.10391235]
[-138.12705994 485.98468018]
[-145.74076843 475.32711792]
[-151.32492065 463.47485352]
[-154.69769287 450.81033325]
[-155.74867249 437.74252319]
[-154.44242859 424.69363403]
[-150.81973267 412.08560181]
[-144.99627686 400.32632446]
[-137.15898132 389.79653931]
[-127.55995941 380.83740234]
[-116.50848389 373.73959351]
[-104.36095428 368.73370361]
[-91.50943756 365.98294067]
[-78.36899567 365.57757568]
[-65.36430359 367.53219604]
[-52.91589355 371.78509521]
[-45.41589355 358.79470825]
[-37.91589355 345.80432129]
[-30.41589546 332.81393433]
[-22.91589546 319.82354736]
[-15.41589546 306.83319092]
[-16.94180298 287.62213135]
[0.46037465 277.59234619]
[7.30353451 264.24426270]
[14.14669418 250.89617920]
[20.98985481 237.54811096]
[27.83301353 224.20002747]
[34.67617416 210.85194397]
[41.51933289 197.50387573]
[48.36249542 184.15579224]
[55.20565414 170.80772400]
[62.04881287 157.45964050]
[68.89197540 144.11155701]
[75.73513031 130.76348877]
[82.57829285 117.41541290]
[89.42145538 104.06732941]
[74.48849487 105.48394775]
[63.88827896 94.87096405]
[65.32285309 79.93972015]
[77.74987793 71.53917694]
[92.13993073 75.77311707]
[98.03730774 89.56481934]
[106.48710632 77.17123413]
[114.93691254 64.77765656]
[123.38671112 52.38407135]
[131.83651733 39.99048996]
[129.10652161 24.65475082]
[137.85237122 12.20626831]
[152.48948669 9.69814873]
[160.93928528 -2.69543266]
[169.38908386 -15.08901405]
[171.67665100 -24.04852104]
[178.20724487 -27.68264961]
[186.96339417 -39.86172104]
[195.71954346 -52.04079056]
[204.47570801 -64.21985626]
[213.23185730 -76.39892578]
[221.98802185 -88.57800293]
[223.08155823 -104.94064331]
[237.91615295 -111.93112183]
[251.23124695 -102.35822296]
[249.32940674 -86.06972504]
[234.16708374 -79.82184601]
[225.41093445 -67.64277649]
[216.65476990 -55.46370316]
[207.89862061 -43.28463364]
[199.14247131 -31.10556412]
[190.38630676 -18.92649460]
[181.78266907 -6.63921356]
[173.33287048 5.75436831]
[164.88305664 18.14794922]
[167.89585876 32.68956757]
[159.50311279 45.37879181]
[144.23008728 48.44029236]
[135.78028870 60.83387375]
[127.33049011 73.22745514]
[118.88069153 85.62104034]
[110.43089294 98.01461792]
[102.76953125 110.91049194]
[95.92636871 124.25856781]
[89.08321381 137.60664368]
[82.24005127 150.95472717]
[75.39688873 164.30279541]
[68.55373383 177.65087891]
[61.71057129 190.99896240]
[54.86741257 204.34703064]
[48.02425003 217.69511414]
[41.18109131 231.04318237]
[34.33793259 244.39126587]
[27.49477196 257.73934937]
[20.65161133 271.08743286]
[13.80845165 284.43548584]
[17.77579117 294.71130371]
[15.41931534 305.24505615]
[7.77116871 312.54556274]
[-2.42551422 314.33319092]
[-9.92551422 327.32354736]
[-17.42551422 340.31393433]
[-24.92551422 353.30432129]
[-32.42551422 366.29470825]
[-39.92551422 379.28509521]
[-27.35801125 390.88198853]
[-17.82980537 405.07308960]
[-11.85848236 421.08123779]
[-9.76696205 438.03076172]
[-11.66603661 454.99539185]
[-17.44850731 471.04879761]
[-26.79522705 485.31524658]
[-39.19271469 497.01733398]
[-53.96136856 505.51837158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[31 116]
[32 115]
[33 114]
[34 113]
[35 112]
[36 111]
[38 107]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[51 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[64 86]
[65 85]
[66 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
