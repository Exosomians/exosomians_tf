%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUGAGACCAAAGAGAAGUCUAGCAUAUUUAGAAAGCGGAAAAUGAUUUCUAAAGGCACCUCUCCUUGUUGAGACUCAGAAUUCGAUUAAAAAACUCCGGAACAAGGCUGUUCCGAUAUAUUUC\
) } def
/len { sequence length } bind def

/coor [
[204.81031799 217.29292297]
[203.21496582 200.33099365]
[205.03967285 183.38742065]
[210.21279907 167.14503479]
[197.03947449 159.97122192]
[183.86614990 152.79742432]
[170.69282532 145.62361145]
[155.81506348 146.33180237]
[147.39585876 132.93675232]
[134.13412476 125.92772675]
[120.78604889 119.08456421]
[107.43797302 112.24140167]
[93.46526337 112.74647522]
[85.71887207 101.10667419]
[72.37079620 94.26351166]
[59.02271652 87.42034912]
[43.21249390 88.00977325]
[35.41669083 75.31825256]
[22.06861305 68.47509003]
[9.16471863 76.68707275]
[-6.01682281 77.33330536]
[-19.39456177 70.34027863]
[-27.42211533 57.67479706]
[-28.02815056 42.79197693]
[-41.37622833 35.94881821]
[-51.65203094 39.91615677]
[-62.18577957 37.55968094]
[-69.48628235 29.91153526]
[-71.27391052 19.71485138]
[-84.26428986 12.21485138]
[-97.25466919 4.71485186]
[-110.24504852 -2.78514838]
[-123.23543549 -10.28514862]
[-136.22581482 -17.78514862]
[-149.21620178 -25.28514862]
[-162.20657349 -32.78514862]
[-178.02651978 -32.98453522]
[-185.18002319 -46.04887009]
[-198.17039490 -53.54887009]
[-213.97657776 -50.80221176]
[-225.88290405 -61.55483246]
[-224.75585938 -77.55825043]
[-211.46002197 -86.53601074]
[-196.19480896 -81.60113525]
[-190.67039490 -66.53925323]
[-177.68002319 -59.03925323]
[-162.78923035 -59.37631607]
[-154.70657349 -45.77552795]
[-141.71620178 -38.27552795]
[-128.72581482 -30.77552986]
[-115.73543549 -23.27552986]
[-102.74504852 -15.77552986]
[-89.75466919 -8.27552986]
[-76.76428986 -0.77552944]
[-63.77390671 6.72447062]
[-44.56285477 5.19856215]
[-34.53306580 22.60074043]
[-21.18498993 29.44390106]
[-8.74729443 21.24821091]
[6.22232246 20.37269592]
[19.70940018 27.15245056]
[28.04683113 39.85615540]
[28.91177368 55.12701416]
[42.25984955 61.97017288]
[57.11532974 60.89128494]
[65.86587524 74.07227325]
[79.21395111 80.91543579]
[92.56202698 87.75859833]
[106.53473663 87.25352478]
[114.28112793 98.89332581]
[127.62920380 105.73648834]
[140.97727966 112.57965088]
[150.15170288 113.73539734]
[154.56967163 119.76342773]
[170.38966370 119.56835175]
[177.86663818 132.45028687]
[191.03996277 139.62409973]
[204.21328735 146.79791260]
[217.38661194 153.97171021]
[225.55038452 143.58602905]
[235.22406006 134.59370422]
[246.17303467 127.21171570]
[258.13195801 121.61801910]
[270.81115723 117.94719696]
[283.90368652 116.28731537]
[297.09265137 116.67771912]
[310.05899048 119.10817719]
[322.48913574 123.51909637]
[334.08264160 129.80299377]
[344.55941772 137.80715942]
[353.66641235 147.33728027]
[361.18392944 158.16224670]
[366.93069458 170.01969910]
[370.76846313 182.62242126]
[372.60507202 195.66526794]
[372.39694214 208.83255005]
[370.14987183 221.80574036]
[365.91903687 234.27108765]
[359.80755615 245.92727661]
[371.76452637 254.98434448]
[383.72152710 264.04141235]
[395.67852783 273.09848022]
[407.63549805 282.15554810]
[419.59249878 291.21261597]
[431.54946899 300.26968384]
[447.87976074 301.77081299]
[454.49822998 316.77508545]
[444.59637451 329.84738159]
[428.36035156 327.54003906]
[422.49240112 312.22665405]
[410.53543091 303.16958618]
[398.57843018 294.11251831]
[386.62145996 285.05548096]
[374.66445923 275.99841309]
[362.70745850 266.94134521]
[350.75048828 257.88427734]
[338.14663696 269.26913452]
[323.51898193 277.91000366]
[307.45581055 283.45712280]
[290.60372925 285.68521118]
[273.64141846 284.50262451]
[257.25238037 279.95507812]
[242.09744263 272.22396851]
[228.78800964 261.61911011]
[217.86149597 248.56623840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[7 76]
[9 74]
[10 72]
[11 71]
[12 70]
[14 68]
[15 67]
[16 66]
[18 64]
[19 63]
[24 58]
[25 57]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[38 46]
[39 45]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
