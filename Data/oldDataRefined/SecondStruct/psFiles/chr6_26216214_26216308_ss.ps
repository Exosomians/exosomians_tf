%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCGAGACUUUUCUCGGAAACUCAAAAUUUCGUGGAUUCGUGUGUAAAUGAACCUCGAACAUAUGAACCACUGUCGGAACCAUGGAAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[11.68783283 340.01684570]
[-0.55875975 336.14196777]
[-12.22298431 330.76547241]
[-23.12156677 323.97216797]
[-33.08330917 315.86917114]
[-44.03127289 326.12304688]
[-54.97923279 336.37692261]
[-65.92719269 346.63079834]
[-76.87515259 356.88470459]
[-87.82312012 367.13858032]
[-92.06315613 382.98010254]
[-107.97029877 386.96697998]
[-119.18062592 374.99783325]
[-114.16192627 359.38549805]
[-98.07700348 356.19061279]
[-87.12904358 345.93673706]
[-76.18107605 335.68286133]
[-65.23311615 325.42895508]
[-54.28515625 315.17507935]
[-43.33719635 304.92120361]
[-53.26388168 290.21163940]
[-60.50352478 274.00634766]
[-64.83774567 256.79153442]
[-66.13534546 239.08380127]
[-64.35626984 221.41474915]
[-59.55284500 204.31503296]
[-51.86825180 188.29838562]
[-41.53224182 173.84622192]
[-28.85427666 161.39311218]
[-14.21426582 151.31375122]
[1.94882774 143.91168213]
[19.15014267 139.41017151]
[36.87346268 137.94543457]
[54.58670807 139.56254578]
[71.75792694 144.21403503]
[77.94853210 130.55107117]
[84.13913727 116.88811493]
[90.32974243 103.22515869]
[90.54473114 94.99684906]
[96.95293427 89.22158813]
[103.58726501 75.76850128]
[110.22159576 62.31541061]
[116.85592651 48.86231613]
[123.49025726 35.40922546]
[130.12458801 21.95613480]
[136.75891113 8.50304413]
[143.39324951 -4.95004654]
[150.02757263 -18.40313721]
[145.86909485 -28.71850586]
[148.13891602 -39.37955093]
[155.81951904 -46.79759216]
[166.11579895 -48.61775208]
[173.61579895 -61.60813522]
[181.11579895 -74.59851837]
[183.79908752 -91.33877563]
[200.62794495 -93.39452362]
[207.26203918 -77.79243469]
[194.10618591 -67.09851837]
[186.60618591 -54.10813522]
[179.10618591 -41.11775208]
[180.71765137 -21.96585274]
[163.48066711 -11.76880741]
[156.84632874 1.68428361]
[150.21200562 15.13737488]
[143.57768250 28.59046555]
[136.94334412 42.04355621]
[130.30902100 55.49664688]
[123.67468262 68.94973755]
[117.04035187 82.40283203]
[110.40602112 95.85591888]
[103.99269867 109.41576385]
[97.80209351 123.07872009]
[91.61148834 136.74166870]
[85.42088318 150.40463257]
[96.31455994 157.26573181]
[106.26296234 165.43540955]
[115.10985565 174.78495789]
[122.71636963 185.16714478]
[128.96315002 196.41851807]
[133.75225830 208.36203003]
[137.00869751 220.80976868]
[138.68154907 233.56590271]
[138.74485779 246.42984009]
[137.19790649 259.19927979]
[134.06536865 271.67352295]
[129.39678955 283.65646362]
[123.26589203 294.95980835]
[115.76934814 305.40600586]
[107.02528381 314.83093262]
[97.17143250 323.08666992]
[86.36293030 330.04360962]
[74.76991272 335.59265137]
[62.57479095 339.64682007]
[49.96942520 342.14266968]
[37.15208435 343.04125977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[35 74]
[36 73]
[37 72]
[38 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
