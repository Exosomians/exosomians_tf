%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACCACGUCACCACGCUUAGUUGAGUUUUGUCGAUUUUUAAGUCGUCAAUAAGAGGUUGUUAAUGUUUCAUU\
) } def
/len { sequence length } bind def

/coor [
[158.43515015 226.42488098]
[151.76562500 212.98921204]
[145.09609985 199.55352783]
[138.42657471 186.11785889]
[131.47712708 172.82479858]
[124.25082397 159.68020630]
[111.33916473 152.25468445]
[111.47113037 136.43402100]
[96.66920471 138.05168152]
[82.37342834 133.88700867]
[70.75618744 124.57283783]
[63.58284760 111.52458191]
[61.94346619 96.72504425]
[66.08716583 82.42317200]
[75.38426971 70.79228210]
[68.15796661 57.64767838]
[60.93166351 44.50307846]
[53.43166351 31.51269722]
[45.66125488 18.68223381]
[37.89085007 5.85176945]
[30.12044716 -6.97869444]
[21.55974197 -19.29593277]
[12.24252605 -31.05133438]
[2.92530942 -42.80673599]
[-6.39190722 -54.56213760]
[-15.70912361 -66.31754303]
[-31.43550682 -67.88484192]
[-41.38270569 -80.16607666]
[-39.64922714 -95.87500763]
[-27.26350784 -105.69181061]
[-11.57378006 -103.79234314]
[-1.88847888 -91.30352783]
[-3.95372224 -75.63475800]
[5.36349440 -63.87935638]
[14.68071079 -52.12395477]
[23.99792862 -40.36854935]
[33.31514359 -28.61314964]
[37.06338120 -27.92393303]
[40.59781647 -25.19298744]
[42.86667633 -20.57870483]
[42.95090866 -14.74909973]
[50.72131348 -1.91863549]
[58.49172211 10.91182804]
[66.26212311 23.74229240]
[72.60665894 27.95415497]
[74.07626343 37.27677155]
[81.30256653 50.42137527]
[88.52886963 63.56597519]
[103.33079529 61.94831467]
[117.62657166 66.11299896]
[129.24382019 75.42716217]
[136.41716003 88.47541809]
[138.05653381 103.27495575]
[133.91282654 117.57682800]
[124.61573029 129.20771790]
[138.04426575 137.57342529]
[137.39541626 152.45390320]
[144.62171936 165.59849548]
[151.70561218 171.83464050]
[151.86224365 179.44833374]
[158.53176880 192.88400269]
[165.20129395 206.31968689]
[171.87083435 219.75535583]
[187.13214111 219.52117920]
[200.98011780 225.93962097]
[210.66522217 237.73629761]
[214.26446533 252.56896973]
[211.06321716 267.49261475]
[201.69709778 279.54409790]
[188.02574158 286.33062744]
[172.76361084 286.50469971]
[158.94102478 280.03176880]
[149.30245972 268.19705200]
[145.76164246 253.35031128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 58]
[6 57]
[8 55]
[15 48]
[16 47]
[17 46]
[18 44]
[19 43]
[20 42]
[21 41]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
