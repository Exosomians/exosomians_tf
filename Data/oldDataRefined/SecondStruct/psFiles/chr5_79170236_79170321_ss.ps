%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAAUCAGUUCACUUCGUCACCCUCACCUCUUCCUUGUUUCUUUAGACAUUGACCAACACUAGUUAAUCAACAUUUGUGGUGAC\
) } def
/len { sequence length } bind def

/coor [
[23.74337769 253.30662537]
[24.10672569 268.41818237]
[19.99811554 282.96502686]
[11.78288555 295.65368652]
[0.19152564 305.35583496]
[-13.74526691 311.20880127]
[-28.78824234 312.69213867]
[-43.59978867 309.67395020]
[-56.86287689 302.42260742]
[-67.39815521 291.58288574]
[-74.26884460 278.11868286]
[-76.86399841 263.22717285]
[-74.95285797 248.23255920]
[-68.70536804 234.46809387]
[-58.67704010 223.15774536]
[-45.75959396 215.30720520]
[-31.10164261 211.61453247]
[-16.00655365 212.40808105]
[-1.81657696 217.61730957]
[7.26103640 205.67590332]
[16.33864975 193.73451233]
[25.41626358 181.79312134]
[34.49387741 169.85171509]
[43.57148743 157.91032410]
[42.27489090 145.73783875]
[49.94013214 135.68061829]
[62.81794357 133.57226562]
[72.32075500 121.96636963]
[67.34830475 114.76753998]
[64.24292755 106.45717621]
[63.24876022 97.51825714]
[64.48535156 88.48605347]
[67.93685913 79.91609192]
[73.44944763 72.34999084]
[80.73732758 66.28131866]
[89.39715576 62.12356949]
[98.93019104 60.18237686]
[108.77096558 60.63376999]
[109.85333252 45.67287064]
[110.93569946 30.71197319]
[112.01806641 15.75107384]
[113.10043335 0.79017574]
[105.46402740 -13.72248459]
[114.44180298 -27.44587708]
[130.79820251 -26.26255035]
[137.70715332 -11.38981152]
[128.06132507 1.87254214]
[126.97896576 16.83344078]
[125.89659882 31.79433823]
[124.81423187 46.75523758]
[123.73186493 61.71613693]
[134.98712158 71.63175201]
[149.69224548 68.67220306]
[164.39738464 65.71264648]
[179.10252380 62.75310135]
[187.86726379 49.87610245]
[202.82252502 47.08417892]
[215.04476929 55.51937866]
[229.74989319 52.55982971]
[244.45503235 49.60027695]
[256.39575195 38.35966873]
[272.02075195 43.33881378]
[275.25634766 59.41559601]
[262.77404785 70.05159760]
[247.41458130 64.30541229]
[232.70945740 67.26496887]
[218.00431824 70.22451782]
[209.99682617 82.73114014]
[195.12588501 85.94202423]
[182.06207275 77.45823669]
[167.35693359 80.41778564]
[152.65179443 83.37733459]
[137.94667053 86.33689117]
[138.98971558 105.18135071]
[131.42341614 121.95502472]
[117.34710693 133.05963135]
[100.19995880 136.33488464]
[83.92664337 131.46917725]
[74.42383575 143.07507324]
[71.97997284 161.21696472]
[55.51288605 166.98794556]
[46.43527222 178.92933655]
[37.35765839 190.87072754]
[28.28004456 202.81213379]
[19.20243263 214.75352478]
[10.12481880 226.69491577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[27 79]
[28 78]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[52 73]
[53 72]
[54 71]
[55 70]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
