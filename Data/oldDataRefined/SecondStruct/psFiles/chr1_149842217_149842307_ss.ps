%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCACCGAGACUUUUCUCGGAAAACUCAAGUGUCCACGGGGAAGCUCUGCGCCCGGCCCGACCCGGGUGAACCCGGCCUGCAGUCGGAG\
) } def
/len { sequence length } bind def

/coor [
[99.40689087 166.62461853]
[89.80197906 165.84217834]
[80.41040039 163.68232727]
[71.42864227 160.19026184]
[63.04457855 155.43904114]
[55.43361664 149.52806091]
[48.75496674 142.58096313]
[36.21223450 150.80773926]
[23.66950417 159.03451538]
[11.12677193 167.26129150]
[-1.41596031 175.48806763]
[-13.95869255 183.71484375]
[-20.84990311 198.59580994]
[-37.20487976 199.79864502]
[-46.19902039 186.08596802]
[-38.57992935 171.56422424]
[-22.18547058 171.17211914]
[-9.64273834 162.94534302]
[2.89999342 154.71855164]
[15.44272518 146.49177551]
[27.98545647 138.26499939]
[40.52819061 130.03822327]
[36.40918350 119.88465118]
[34.01004028 109.19328308]
[33.39564514 98.25328064]
[34.58261108 87.36051941]
[37.53884125 76.80959320]
[42.18437958 66.88587952]
[48.39358139 57.85775375]
[55.99851990 49.96939850]
[64.79351044 43.43415833]
[58.35125732 29.88803864]
[51.90900803 16.34191895]
[38.99470139 7.20237350]
[40.51590729 -7.61434650]
[34.07365799 -21.16046715]
[27.63140488 -34.70658875]
[13.82739162 -43.55990601]
[14.86276340 -59.92633820]
[29.67241859 -66.96949768]
[43.02145386 -57.44399261]
[41.17752457 -41.14884186]
[47.61977768 -27.60271835]
[54.06203079 -14.05659771]
[66.51554108 -5.88596296]
[65.45512390 9.89966679]
[71.89737701 23.44578743]
[78.33963013 36.99190903]
[99.20764160 33.37745667]
[120.15571594 36.49457932]
[139.06724548 46.02832413]
[154.03140259 61.01539612]
[167.10630798 53.66374207]
[180.18121338 46.31208801]
[193.25611877 38.96043396]
[206.33102417 31.60878181]
[219.40592957 24.25712776]
[232.48083496 16.90547562]
[236.50291443 1.62154615]
[250.19621277 -6.26951218]
[265.43676758 -2.08607507]
[273.18261719 11.68989849]
[268.83828735 26.88536835]
[254.98118591 34.48513031]
[239.83248901 29.98038292]
[226.75758362 37.33203506]
[213.68267822 44.68368912]
[200.60777283 52.03534317]
[187.53286743 59.38699722]
[174.45796204 66.73864746]
[161.38305664 74.09030151]
[166.25471497 92.96405029]
[165.45561218 112.44000244]
[159.05415344 130.85121155]
[147.59825134 146.62185669]
[157.06455994 158.25753784]
[166.53088379 169.89320374]
[175.99720764 181.52886963]
[185.46351624 193.16453552]
[201.21119690 196.22889709]
[208.50585938 210.51762390]
[201.75167847 225.06961060]
[186.12986755 228.72183228]
[173.62416077 218.67262268]
[173.82785034 202.63085938]
[164.36152649 190.99519348]
[154.89521790 179.35952759]
[145.42889404 167.72384644]
[135.96257019 156.08818054]
[127.49525452 160.68939209]
[118.45275116 164.02099609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
