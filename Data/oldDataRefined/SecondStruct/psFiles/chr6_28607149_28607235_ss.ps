%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCAACCCCCACAUCGAGUCACCAUCUCGCGCACGAAUCGUACAUGCUCCAGGGCCCAAGUUAGGGGCCGUGGAGGUGGUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[100.79245758 247.86491394]
[85.65438080 248.20753479]
[71.22603607 243.61390686]
[59.07249451 234.58227539]
[50.51208496 222.09236145]
[46.47338104 207.49894714]
[47.39446259 192.38504028]
[53.17542267 178.39006042]
[63.18918610 167.03210449]
[76.34953308 159.54318237]
[91.22892761 156.73564148]
[93.36365509 141.88832092]
[95.49837494 127.04100037]
[97.63310242 112.19367218]
[90.03152466 119.63298798]
[78.49737549 123.17803955]
[64.75239563 121.35820770]
[49.90507126 119.22348022]
[35.05775070 117.08876038]
[20.21043015 114.95404053]
[8.67771435 125.51483917]
[-6.94736242 126.14014435]
[-19.28711700 116.53469849]
[-22.51509285 101.23390961]
[-15.10714149 87.46233368]
[-0.56106865 81.72249603]
[14.25491333 86.72456360]
[22.34515190 100.10671234]
[37.19247437 102.24143982]
[52.03979492 104.37615967]
[66.88711548 106.51088715]
[71.59313202 100.67107391]
[66.18401337 86.68031311]
[81.00517273 88.99144745]
[85.71118927 83.15163422]
[80.46922302 69.09738922]
[75.22726440 55.04314423]
[64.02693939 42.31565475]
[73.15647125 28.02972031]
[89.41141510 32.84773254]
[89.28150940 49.80118179]
[94.52346802 63.85543060]
[99.76543427 77.90967560]
[99.67906189 62.90992355]
[110.69512177 52.72923279]
[125.64155579 53.99578857]
[134.78741455 65.88499451]
[132.17825317 80.65632629]
[119.51321411 88.69277954]
[134.17041016 85.50429535]
[148.82762146 82.31581879]
[163.48481750 79.12734222]
[178.14202881 75.93885803]
[189.98213196 65.44494629]
[204.06323242 70.30004883]
[218.72042847 67.11156464]
[233.37763977 63.92308807]
[248.03483582 60.73460770]
[262.69204712 57.54612732]
[269.80700684 43.62091827]
[284.22839355 37.57463455]
[299.14688110 42.26214981]
[307.51840210 55.47015762]
[305.39019775 70.96224213]
[293.76712036 81.42352295]
[278.13726807 81.91448975]
[265.88052368 72.20333099]
[251.22331238 75.39180756]
[236.56611633 78.58029175]
[221.90892029 81.76876831]
[207.25170898 84.95724487]
[196.45997620 95.22310638]
[181.33050537 90.59606171]
[166.67329407 93.78453827]
[152.01609802 96.97302246]
[137.35888672 100.16149902]
[122.70169067 103.34998322]
[112.48042297 114.32839966]
[110.34569550 129.17572021]
[108.21097565 144.02304077]
[106.07625580 158.87036133]
[119.56195068 165.75619507]
[130.07934570 176.64945984]
[136.48756409 190.36854553]
[138.09152222 205.42530823]
[134.71720886 220.18649292]
[126.73066711 233.05093384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 81]
[12 80]
[13 79]
[14 78]
[17 31]
[18 30]
[19 29]
[20 28]
[35 43]
[36 42]
[37 41]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
