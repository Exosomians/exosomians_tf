%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACCAACAUCCCUUGAUCGAUACACGGAAGAUAAUCCGGUACUGUCAGUUUGACUAUUCUAGACUAACGA\
) } def
/len { sequence length } bind def

/coor [
[93.42758942 124.04682922]
[84.24314117 119.31755829]
[71.70426178 127.55020142]
[59.16537476 135.78285217]
[51.87602234 149.82478333]
[36.99040985 150.34225464]
[24.45152664 158.57489014]
[11.91264534 166.80754089]
[8.95022392 182.33169556]
[-4.16853762 191.14495850]
[-19.66051102 188.01858521]
[-28.33458328 174.80737305]
[-25.04458237 159.34931946]
[-11.74240494 150.81541443]
[3.68000102 154.26866150]
[16.21888351 146.03601074]
[28.75776482 137.80337524]
[35.15025330 124.35028839]
[50.93273163 123.24396515]
[63.47161484 115.01132202]
[76.01049805 106.77867889]
[76.53405762 91.58594513]
[85.78373718 79.52209473]
[81.33304596 65.19759369]
[76.88235474 50.87308884]
[71.18243408 43.33474731]
[72.56268311 35.83575058]
[68.73238373 21.33303452]
[64.90208435 6.83031654]
[61.07178497 -7.67240095]
[47.28892136 -15.40597630]
[43.09191513 -30.64279747]
[50.97077942 -44.34312820]
[66.25112152 -48.37880325]
[79.86738586 -40.35553360]
[83.74128723 -25.03337669]
[75.57450104 -11.50269985]
[79.40480042 3.00001693]
[83.23509979 17.50273514]
[87.06539917 32.00545120]
[91.20685577 46.42239761]
[95.65754700 60.74689865]
[100.10823822 75.07140350]
[117.43668365 82.18402863]
[124.92050171 99.35542297]
[139.33744812 103.49687195]
[153.75439453 107.63832855]
[169.15438843 104.01196289]
[179.25071716 114.96247864]
[193.66766357 119.10392761]
[208.08460999 123.24538422]
[222.50155640 127.38684082]
[236.91850281 131.52828979]
[251.33544922 135.66975403]
[264.20178223 126.78205872]
[279.76596069 128.29548645]
[290.67904663 139.49543762]
[291.78817749 155.09364319]
[282.56970215 167.72509766]
[267.37628174 171.42561340]
[253.38179016 164.44793701]
[247.19398499 150.08670044]
[232.77703857 145.94523621]
[218.36009216 141.80378723]
[203.94314575 137.66233826]
[189.52619934 133.52087402]
[175.10925293 129.37942505]
[160.74044800 133.30201721]
[149.61294556 122.05527496]
[135.19599915 117.91381836]
[120.77904510 113.77236938]
[113.41143799 121.01380920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[6 17]
[7 16]
[8 15]
[23 43]
[24 42]
[25 41]
[27 40]
[28 39]
[29 38]
[30 37]
[45 71]
[46 70]
[47 69]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
