%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAUAUGAUUUUAACCUUGCUAUGUCUCUUCUAAUCGUACCGGGGACGCGUUCCUACUGUGCGUUUAAGCACUUCGCAAGGUAUAAAAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[84.28749084 426.01403809]
[69.54499054 422.55899048]
[56.72444916 414.50216675]
[47.21655273 402.71749878]
[42.05264664 388.48327637]
[41.79286575 373.34356689]
[46.46539688 358.94055176]
[55.56339264 346.83663940]
[68.09997559 338.34469604]
[82.71526337 334.38592529]
[83.68621063 319.41738892]
[84.65715790 304.44882202]
[85.62810516 289.48028564]
[86.59905243 274.51174927]
[87.32749176 259.52944946]
[87.81321716 244.53730774]
[88.29894257 229.54518127]
[88.78467560 214.55303955]
[89.27040100 199.56091309]
[89.75613403 184.56877136]
[90.24185944 169.57664490]
[78.38798523 160.59757996]
[74.04294586 146.18977356]
[79.07371521 131.81811523]
[91.74884033 123.06326294]
[92.23456573 108.07112885]
[92.47746277 93.07309723]
[92.47746277 78.07309723]
[89.90210724 74.03284454]
[88.97463226 69.80787659]
[89.53063965 65.98059845]
[91.22085571 63.00755692]
[93.57411194 61.16673279]
[95.51193237 46.29243088]
[97.44975281 31.41812897]
[91.56011200 16.73403358]
[100.87678528 5.11298180]
[102.81460571 -9.76132011]
[104.75243378 -24.63562202]
[106.69025421 -39.50992203]
[108.62807465 -54.38422394]
[99.93905640 -72.43129730]
[111.90739441 -87.47252655]
[112.87834167 -102.44107056]
[113.84928894 -117.40961456]
[114.82023621 -132.37815857]
[115.79118347 -147.34669495]
[108.04693604 -161.80209351]
[116.92229462 -175.59194946]
[133.28704834 -174.53044128]
[140.30654907 -159.70954895]
[130.75973511 -146.37574768]
[129.78878784 -131.40721130]
[128.81784058 -116.43866730]
[127.84688568 -101.47012329]
[126.87593842 -86.50157928]
[134.42784119 -79.27652740]
[136.70150757 -68.84807587]
[132.67889404 -58.72243118]
[123.50237274 -52.44640350]
[121.56455231 -37.57210159]
[119.62673187 -22.69779968]
[117.68891144 -7.82349777]
[115.75109100 7.05080414]
[121.77933502 20.67098999]
[112.32405853 33.35594940]
[110.38623810 48.23025131]
[108.44841003 63.10455322]
[107.47746277 78.07309723]
[107.47746277 93.07309723]
[110.67655945 100.65357208]
[107.22669983 108.55685425]
[106.74097443 123.54898834]
[118.82281494 133.10594177]
[122.91275787 147.77310181]
[117.64421844 161.86943054]
[105.23399353 170.06237793]
[104.74826813 185.05450439]
[104.26253510 200.04664612]
[103.77680969 215.03877258]
[103.29107666 230.03091431]
[102.80535126 245.02304077]
[102.31962585 260.01516724]
[105.21128845 268.88647461]
[101.56759644 275.48269653]
[100.59664917 290.45123291]
[99.62570190 305.41976929]
[98.65475464 320.38833618]
[97.68380737 335.35687256]
[111.66519928 341.17059326]
[122.99967194 351.21093750]
[130.45774841 364.38879395]
[133.23042297 379.27471924]
[131.01693726 394.25402832]
[124.05741882 407.70184326]
[113.10675812 418.15945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[25 73]
[26 72]
[27 70]
[28 69]
[33 68]
[34 67]
[35 66]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
