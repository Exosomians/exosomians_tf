%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGACUGUAUGAACAAGGUGAGAUCGUCGUGCAUUUAUAACCGCAUCACUUUAUAUAUAAUUUGUGGUUAUAAUGACACGACGAAAUCAC\
) } def
/len { sequence length } bind def

/coor [
[60.88700867 167.95671082]
[51.82346344 179.90878296]
[42.75991821 191.86085510]
[33.69637299 203.81294250]
[39.72850037 217.93769836]
[37.87416077 233.18424988]
[28.63216591 245.45132446]
[14.48856258 251.43914795]
[-0.75209039 249.53701782]
[-12.99013424 240.25662231]
[-18.93359566 226.09431458]
[-16.98371506 210.85969543]
[-7.66499853 198.65080261]
[6.51586485 192.75177002]
[21.74429512 194.74938965]
[30.80784035 182.79731750]
[39.87138748 170.84524536]
[48.93493271 158.89315796]
[57.79309845 146.78808594]
[66.44330597 134.53353882]
[75.09350586 122.27899170]
[83.74371338 110.02443695]
[81.38528442 95.72814178]
[89.74111176 83.89064026]
[104.00173950 81.32535553]
[112.65194702 69.07080841]
[121.30214691 56.81625748]
[129.95234680 44.56171036]
[138.60255432 32.30716324]
[147.25276184 20.05261421]
[155.90296936 7.79806519]
[164.55317688 -4.45648336]
[172.99288940 -16.85693169]
[181.21966553 -29.39966202]
[189.44645691 -41.94239426]
[197.67323303 -54.48512650]
[199.83447266 -63.58242035]
[206.40113831 -67.30899811]
[215.05133057 -79.56355286]
[223.70153809 -91.81809998]
[232.35174561 -104.07264709]
[241.00195312 -116.32719421]
[249.65216064 -128.58174133]
[258.30236816 -140.83628845]
[266.95257568 -153.09083557]
[275.60278320 -165.34538269]
[266.72064209 -177.60859680]
[262.30401611 -192.09211731]
[262.83197021 -207.22485352]
[268.24725342 -221.36535645]
[277.96243286 -232.97973633]
[290.92367554 -240.80816650]
[305.72509766 -244.00148010]
[320.76107788 -242.21330261]
[334.40066528 -235.63757324]
[345.16433716 -224.98759460]
[351.88455200 -211.41859436]
[353.83227539 -196.40243530]
[350.79632568 -181.56796265]
[343.10595703 -168.52429199]
[331.59539795 -158.68634033]
[317.51321411 -153.12121582]
[302.38690186 -152.43260193]
[287.85733032 -156.69519043]
[279.20712280 -144.44062805]
[270.55691528 -132.18608093]
[261.90670776 -119.93154144]
[253.25650024 -107.67698669]
[244.60629272 -95.42243958]
[235.95608521 -83.16789246]
[227.30589294 -70.91334534]
[218.65568542 -58.65879440]
[210.21595764 -46.25834656]
[201.98918152 -33.71561813]
[193.76240540 -21.17288399]
[185.53562927 -8.63015270]
[184.47787476 -1.15421581]
[176.80772400 4.19372129]
[168.15751648 16.44827080]
[159.50730896 28.70281792]
[150.85710144 40.95736694]
[142.20690918 53.21191406]
[133.55670166 65.46646118]
[124.90649414 77.72100830]
[116.25628662 89.97556305]
[118.61471558 104.27185822]
[110.25888824 116.10935974]
[95.99826050 118.67464447]
[87.34805298 130.92919922]
[78.69785309 143.18374634]
[70.04764557 155.43829346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[19 91]
[20 90]
[21 89]
[22 88]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[32 78]
[33 76]
[34 75]
[35 74]
[36 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
