%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAACAGACAGUGUCCCAAGAAGUCACAAUGGAAACAGAUGUACGAGUAAAGUCCAGUCUGUAAACUAGUUGUAGUAAUGUGUUUGGGGCA\
) } def
/len { sequence length } bind def

/coor [
[25.80831909 322.65969849]
[24.45034790 337.82794189]
[17.03462601 351.12933350]
[4.84597158 360.25930786]
[-10.00385761 363.63607788]
[-24.94203949 360.67453003]
[-37.38044357 351.88784790]
[-45.16403961 338.79833984]
[-46.94427490 323.67382812]
[-42.41271210 309.13473511]
[-32.35446930 297.70007324]
[-18.51220131 291.35095215]
[-3.28416324 291.18737793]
[2.63117456 277.40298462]
[8.54651260 263.61862183]
[14.46185017 249.83425903]
[20.37718773 236.04989624]
[26.29252625 222.26553345]
[32.20786285 208.48115540]
[38.12320328 194.69679260]
[44.03853989 180.91242981]
[42.93756485 178.11882019]
[42.99688721 174.67913818]
[44.48553848 171.08172607]
[47.47146606 167.90869141]
[51.79347229 165.75585938]
[59.51180267 152.89399719]
[67.23013306 140.03215027]
[74.94846344 127.17028809]
[67.28453064 117.19016266]
[63.41332245 105.21717834]
[63.78363800 92.63935089]
[68.35254669 80.91485596]
[76.59037018 71.40291595]
[87.54209137 65.20626068]
[99.93806458 63.04326630]
[102.95754242 48.35031891]
[105.97702026 33.65736771]
[108.99649811 18.96442032]
[112.01597595 4.27147055]
[115.03545380 -10.42147923]
[105.15197754 -24.73460197]
[108.51051331 -41.45965958]
[122.58954620 -50.48582077]
[125.11106110 -65.27236938]
[114.85486603 -77.07678986]
[114.63758850 -92.71286774]
[124.56182861 -104.79771423]
[139.94165039 -107.62523651]
[153.51518250 -99.86036682]
[158.87342834 -85.16944122]
[153.48635864 -70.48905945]
[139.89759827 -62.75085449]
[137.37609863 -47.96430588]
[146.28475952 -38.49035645]
[148.07278442 -25.41154671]
[141.85214233 -13.54710197]
[129.72840881 -7.40200090]
[126.70893097 7.29094791]
[123.68945312 21.98389816]
[120.66997528 36.67684555]
[117.65049744 51.36979675]
[114.63101959 66.06274414]
[125.62728119 73.37207794]
[133.35223389 84.08045197]
[136.81979370 96.82094574]
[151.71507263 98.59030151]
[166.61036682 100.35964966]
[181.50564575 102.12899780]
[196.35418701 95.16819000]
[209.65011597 104.76767731]
[207.71572876 121.05233765]
[192.54093933 127.26990509]
[179.73629761 117.02428436]
[164.84100342 115.25492859]
[149.94572449 113.48558044]
[135.05044556 111.71623230]
[124.37133789 127.78204346]
[107.05152893 136.27781677]
[87.81031799 134.88861084]
[80.09198761 147.75047302]
[72.37365723 160.61233521]
[64.65532684 173.47418213]
[57.82290649 186.82775879]
[51.90756989 200.61213684]
[45.99222946 214.39649963]
[40.07689285 228.18086243]
[34.16155624 241.96524048]
[28.24621773 255.74960327]
[22.33087921 269.53396606]
[16.41554260 283.31832886]
[10.50020409 297.10269165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 92]
[14 91]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[26 83]
[27 82]
[28 81]
[29 80]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[44 54]
[45 53]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
