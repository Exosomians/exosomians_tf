%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGUGCCCUUAUUCACUACUUUUUUCAAAGCCAGGGUCUACUACCGGUCACUAUUGUUGUAAAAAGACUACAA\
) } def
/len { sequence length } bind def

/coor [
[46.70863724 235.35795593]
[38.71526337 235.24809265]
[31.02311516 233.14099121]
[24.12188911 229.18048096]
[12.56418991 238.74183655]
[1.00649107 248.30319214]
[2.11517930 263.78060913]
[-6.11383247 276.93594360]
[-20.51632118 282.71072388]
[-35.55423737 278.88439941]
[-45.44519424 266.92828369]
[-46.38591385 251.43975830]
[-38.01467896 238.37445068]
[-23.55039024 232.75627136]
[-8.55486870 236.74549866]
[3.00282979 227.18414307]
[14.56052876 217.62277222]
[12.67692661 194.18731689]
[27.65352440 175.78022766]
[51.41709518 172.80386353]
[58.64339828 159.65925598]
[65.86970520 146.51464844]
[73.09600830 133.37005615]
[80.32231140 120.22545624]
[87.54862213 107.08085632]
[87.44783020 93.09938812]
[99.30677795 85.69284058]
[106.53308868 72.54824066]
[113.75939178 59.40364075]
[109.39508820 35.31093216]
[128.31961060 20.78898239]
[131.43829346 6.11676836]
[134.55696106 -8.55544567]
[133.26931763 -17.90493393]
[138.12570190 -23.77080154]
[141.85604858 -38.29954910]
[131.86169434 -50.16937256]
[130.78659058 -65.64915466]
[139.04412842 -78.78661346]
[153.45912170 -84.53012085]
[168.48869324 -80.67118073]
[178.35368347 -68.69363403]
[179.26080322 -53.20309830]
[170.86123657 -40.15599442]
[156.38479614 -34.56920242]
[152.65444946 -20.04045296]
[149.22918701 -5.43676996]
[146.11050415 9.23544407]
[142.99183655 23.90765762]
[148.39747620 28.30380440]
[152.23524475 34.16866302]
[154.12158203 40.96191406]
[153.85406494 48.04851532]
[151.43289185 54.75803375]
[147.06315613 60.44810104]
[141.13774109 64.56587982]
[134.20207214 66.70175171]
[126.90399170 66.62994385]
[119.67768860 79.77454376]
[112.45137787 92.91914368]
[112.55216980 106.90061188]
[100.69322205 114.30715942]
[93.46691132 127.45175934]
[86.24060822 140.59635925]
[79.01430511 153.74096680]
[71.78800201 166.88555908]
[64.56169128 180.03016663]
[69.80759430 186.28248596]
[73.30887604 193.63427734]
[74.84994507 201.61114502]
[74.34136200 209.70092773]
[71.82498932 217.38661194]
[67.47069550 224.17938232]
[61.56494522 229.64962769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[27 60]
[28 59]
[29 58]
[31 49]
[32 48]
[33 47]
[35 46]
[36 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
