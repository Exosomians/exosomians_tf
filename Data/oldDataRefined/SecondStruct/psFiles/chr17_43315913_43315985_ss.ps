%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUGUUUAAAAAGGUCUAGAGACAAACACCACUCCACAUUAAUACACACAAAAAGGAUCGAAUCACACACG\
) } def
/len { sequence length } bind def

/coor [
[90.11540222 216.13560486]
[75.93827820 209.53686523]
[69.36642456 195.34727478]
[73.50286865 180.26669312]
[86.39450836 171.41572571]
[87.66659546 156.46975708]
[88.93869019 141.52380371]
[75.41170502 135.24194336]
[64.84665680 124.71479797]
[58.51622391 111.21047974]
[57.18297195 96.35573578]
[61.00751114 81.93997955]
[69.52912903 69.69976044]
[81.72130585 61.10954285]
[96.11534882 57.20411301]
[97.38743591 42.25814819]
[98.65953064 27.31218719]
[99.93161774 12.36622429]
[101.20370483 -2.57973766]
[86.62255859 -6.23846817]
[72.81719208 -12.18892574]
[60.14519119 -20.27697945]
[48.93479538 -30.29312897]
[39.47638321 -41.97793198]
[32.01494980 -55.02872467]
[26.74376297 -69.10746002]
[23.79935646 -83.84945679]
[23.25800323 -98.87287903]
[25.13372040 -113.78856659]
[29.37792397 -128.21018982]
[35.88068008 -141.76416016]
[44.47355270 -154.09942627]
[54.93395996 -164.89646912]
[66.99095917 -173.87559509]
[80.33224487 -180.80426025]
[94.61223602 -185.50297546]
[109.46105957 -187.85003662]
[124.49408722 -187.78465271]
[139.32192993 -185.30850220]
[153.56050110 -180.48574829]
[166.84100342 -173.44128418]
[178.81944275 -164.35758972]
[189.18553162 -153.46997070]
[197.67076111 -141.06042480]
[204.05535889 -127.45038605]
[208.17395020 -112.99240112]
[209.91984558 -98.06095123]
[209.24781799 -83.04281616]
[206.17527771 -68.32698059]
[200.78181458 -54.29463577]
[193.20712280 -41.30924606]
[183.64743042 -29.70716858]
[172.35032654 -19.78891945]
[159.60844421 -11.81140900]
[145.75183105 -5.98127317]
[131.13940430 -2.44952607]
[116.14966583 -1.30764890]
[114.87757874 13.63831329]
[113.60549164 28.58427620]
[112.33340454 43.53023911]
[111.06130981 58.47620010]
[124.58829498 64.75805664]
[135.15333557 75.28520203]
[141.48377991 88.78952026]
[142.81703186 103.64426422]
[138.99249268 118.06002045]
[130.47087097 130.30023193]
[118.27869415 138.89045715]
[103.88465118 142.79588318]
[102.61256409 157.74185181]
[101.34046936 172.68782043]
[112.55085754 183.59016418]
[114.07917023 199.15289307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
