%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAUGCCGGUAUGGUGGGACUUGCGCGGGCUAGAGCAGACUAGAGCCUUCGAUUCGUCCCAGCCCGGACCAAUCAUGAACCUACCCUCU\
) } def
/len { sequence length } bind def

/coor [
[146.61735535 366.80993652]
[141.94499207 352.50415039]
[140.15362549 337.56170654]
[141.31211853 322.55688477]
[145.37593079 308.06649780]
[152.18887329 294.64746094]
[161.48905945 282.81561279]
[172.91902161 273.02572632]
[165.56736755 259.95080566]
[158.21571350 246.87590027]
[150.86405945 233.80099487]
[147.36344910 232.51991272]
[144.37606812 229.35525513]
[142.84027100 224.60215759]
[143.50820923 218.99119568]
[131.34091187 210.40014648]
[132.93965149 194.65992737]
[126.96363068 180.90176392]
[120.98761749 167.14358521]
[115.01160431 153.38542175]
[109.03558350 139.62725830]
[103.05957031 125.86907959]
[87.21258545 122.69476318]
[76.28787994 110.78451538]
[74.49072266 94.72296143]
[82.51289368 80.69270325]
[76.07064056 67.14658356]
[63.15633774 58.00704193]
[64.67754364 43.19031906]
[58.23529434 29.64419937]
[51.79304123 16.09807968]
[45.35079193 2.55195808]
[38.90853882 -10.99416256]
[24.28845024 -16.36917686]
[17.94806099 -30.19864273]
[23.16241264 -44.10353851]
[16.72016144 -57.64965820]
[2.91614747 -66.50297546]
[3.95151925 -82.86940765]
[18.76117516 -89.91256714]
[32.11021042 -80.38706207]
[30.26628304 -64.09191132]
[36.70853424 -50.54578781]
[50.78543472 -45.81541061]
[57.51176071 -32.16948700]
[52.45465851 -17.43641472]
[58.89691162 -3.89029360]
[65.33916473 9.65582752]
[71.78141785 23.20194817]
[78.22366333 36.74806976]
[90.67717743 44.91870499]
[89.61676788 60.70433426]
[96.05901337 74.25045776]
[109.33374023 75.68022156]
[120.15646362 83.49887085]
[125.68402100 95.65241241]
[124.46430206 108.94808960]
[116.81774139 119.89306641]
[122.79375458 133.65122986]
[128.76977539 147.40940857]
[134.74578857 161.16757202]
[140.72180176 174.92575073]
[146.69781494 188.68391418]
[159.29255676 198.25903320]
[157.26638794 213.01518250]
[163.93896484 226.44934082]
[171.29061890 239.52424622]
[178.64227295 252.59915161]
[185.99392700 265.67407227]
[200.29743958 260.99475098]
[215.23902893 259.19613647]
[230.24438477 260.34732056]
[244.73675537 264.40411377]
[258.15908813 271.21054077]
[269.99545288 280.50497437]
[279.79089355 291.93017578]
[287.16891479 305.04699707]
[291.84591675 319.35128784]
[293.64212036 334.29315186]
[292.48849487 349.29833984]
[288.42935181 363.79003906]
[281.62075806 377.21127319]
[272.32440186 389.04614258]
[260.89761353 398.83972168]
[247.77960205 406.21563721]
[233.47457886 410.89031982]
[218.53240967 412.68408203]
[203.52742004 411.52804565]
[189.03636169 407.46655273]
[175.61624146 400.65579224]
[163.78288269 391.35751343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 69]
[9 68]
[10 67]
[11 66]
[15 65]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[26 53]
[27 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
