%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUUUUUUUGUGCGUGUGGGAUUCCGGGGCGACCCUAAGCUUGGGUCCUAGAGGACAAAUGCUCUGUCCGCGAAAUCGGUUGAUUCGGUGUCUCGGUCGGCACGACUAAGACAC\
) } def
/len { sequence length } bind def

/coor [
[60.13331223 475.77954102]
[44.82422638 474.54364014]
[32.19322586 465.80560303]
[25.63799477 451.91586304]
[26.92185402 436.61074829]
[35.69945145 424.00720215]
[49.60965729 417.49554443]
[50.81665421 402.54415894]
[52.02365112 387.59280396]
[53.23065186 372.64144897]
[46.54256058 359.33285522]
[55.36522293 346.20001221]
[56.57222366 331.24865723]
[53.93965149 324.23699951]
[58.01763153 315.91387939]
[59.62561035 301.00030518]
[61.23358536 286.08676147]
[62.84156418 271.17318726]
[64.44953918 256.25961304]
[58.12117004 242.77626038]
[67.29324341 229.88504028]
[68.90122223 214.97148132]
[66.86965179 211.93870544]
[66.28276825 207.73352051]
[67.69222260 203.08302307]
[71.28615570 198.93992615]
[74.08895874 184.20410156]
[76.89176178 169.46829224]
[79.69457245 154.73246765]
[82.49737549 139.99665833]
[85.30018616 125.26084137]
[88.10298920 110.52502441]
[82.59610748 96.57245636]
[70.48456573 87.72312164]
[58.37303162 78.87379456]
[46.26149368 70.02445984]
[34.14995956 61.17512894]
[19.01108932 65.09287262]
[4.91809416 58.31633377]
[-1.47474873 44.04518890]
[2.85106683 29.01783562]
[15.85302258 20.32973099]
[31.39199257 22.08313179]
[42.13095093 33.45013809]
[42.99929047 49.06359100]
[55.11082458 57.91292572]
[67.22236633 66.76225281]
[79.33390045 75.61158752]
[91.44543457 84.46092224]
[98.49313354 81.89576721]
[89.25823212 70.07559204]
[97.64616394 57.64005661]
[112.06507111 61.77468491]
[112.58852386 76.76546478]
[119.63621521 74.20031738]
[123.22595215 59.63618851]
[126.81568909 45.07205963]
[130.40542603 30.50793266]
[133.99516296 15.94380569]
[124.62420654 3.42504716]
[125.54415894 -12.18545246]
[136.32063293 -23.51689339]
[151.86531067 -25.21891594]
[164.83847046 -16.48787689]
[169.11459351 -1.44630480]
[162.67460632 12.80362797]
[148.55928040 19.53354073]
[144.96954346 34.09766769]
[141.37980652 48.66179657]
[137.79008484 63.22592163]
[134.20034790 77.79004669]
[145.29345703 87.88672638]
[159.45645142 82.94612122]
[166.37995911 68.99253082]
[180.81362915 64.18380737]
[194.07357788 70.87030792]
[208.23657227 65.92970276]
[222.39956665 60.98909760]
[236.56256104 56.04849243]
[246.85581970 43.28209305]
[263.01449585 46.08010101]
[268.41595459 61.56417084]
[257.50363159 73.80561829]
[241.50317383 70.21148682]
[227.34017944 75.15209198]
[213.17718506 80.09269714]
[199.01419067 85.03330231]
[192.79023743 98.51655579]
[178.49732971 103.72879028]
[164.39704895 97.10911560]
[150.23405457 102.04972076]
[102.83880615 113.32783508]
[100.03600311 128.06364441]
[97.23319244 142.79946899]
[94.43038940 157.53527832]
[91.62757874 172.27110291]
[88.82477570 187.00691223]
[86.02196503 201.74272156]
[83.81478882 216.57945251]
[82.20681000 231.49301147]
[88.42016602 246.04309082]
[79.36310577 257.86761475]
[77.75512695 272.78115845]
[76.14714813 287.69473267]
[74.53917694 302.60830688]
[72.93119812 317.52185059]
[71.52358246 332.45565796]
[70.31658173 347.40701294]
[76.91834259 361.78503418]
[68.18201447 373.84844971]
[66.97501373 388.79980469]
[65.76801300 403.75115967]
[64.56101227 418.70251465]
[77.24654388 427.36120605]
[83.88871765 441.20956421]
[82.70083618 456.52246094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 113]
[8 112]
[9 111]
[10 110]
[12 108]
[13 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[21 100]
[22 99]
[26 98]
[27 97]
[28 96]
[29 95]
[30 94]
[31 93]
[32 92]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[72 91]
[73 90]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
