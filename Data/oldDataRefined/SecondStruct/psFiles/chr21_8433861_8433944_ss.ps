%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCCCCGCCCGGCCGCCCCAGGAGACUGCGCCGUCUGUCGGGAGCGACAGCGGAGGUCACCAACAGCUGAACGCCCGCCGG\
) } def
/len { sequence length } bind def

/coor [
[76.18271637 182.77214050]
[73.15223694 185.95295715]
[69.61161041 187.21191406]
[62.19176865 200.24824524]
[54.77193069 213.28459167]
[52.19181824 230.04106140]
[35.37594986 232.20042419]
[28.64587212 216.63951111]
[41.73559952 205.86474609]
[49.15543365 192.82841492]
[56.57527161 179.79208374]
[63.26134872 166.36462402]
[69.19311523 152.58732605]
[75.12488556 138.81002808]
[81.05665588 125.03271484]
[86.98841858 111.25540924]
[84.77889252 96.41903687]
[75.08997345 84.96806335]
[65.40105438 73.51708984]
[55.50218582 62.24711227]
[45.39675140 51.16197586]
[35.29131699 40.07684326]
[20.27626610 35.09097672]
[17.41989326 20.47282600]
[2.40484262 15.48696041]
[-0.45153111 0.86880749]
[-10.55696583 -10.21632671]
[-20.66240120 -21.30146027]
[-30.76783562 -32.38659286]
[-46.56484985 -32.86603165]
[-57.33501816 -44.43231964]
[-56.68859100 -60.22338486]
[-45.00907898 -70.87066650]
[-29.22573280 -70.05731964]
[-18.70253181 -58.26589203]
[-19.68270111 -42.49202728]
[-9.57726669 -31.40689468]
[0.52816802 -20.32176018]
[10.63360310 -9.23662758]
[24.92584419 -5.04364538]
[28.50502586 10.36739063]
[42.79726791 14.56037235]
[46.37644958 29.97140884]
[56.48188400 41.05654144]
[66.58731842 52.14167786]
[73.58803558 55.03206635]
[76.85202789 63.82816696]
[86.54094696 75.27914429]
[96.22986603 86.73011780]
[105.50832367 84.19056702]
[115.98417664 88.50540924]
[130.77719116 86.02210236]
[145.57020569 83.53879547]
[160.36320496 81.05548096]
[175.10780334 78.29924011]
[183.81228638 65.38142395]
[198.75433350 62.51964569]
[211.01585388 70.89763641]
[225.70700073 67.86940002]
[239.99934387 58.74991608]
[252.71896362 69.95919037]
[245.46888733 85.28475189]
[228.73522949 82.56054688]
[214.04408264 85.58878326]
[206.09512329 98.13269806]
[191.23934937 101.41304016]
[178.13604736 92.99038696]
[172.07609558 97.53368378]
[162.84652710 95.84849548]
[148.05351257 98.33180237]
[133.26049805 100.81510925]
[118.46748352 103.29841614]
[133.24957275 105.84594727]
[143.37921143 116.90896606]
[144.61730957 131.85778809]
[136.44575500 144.43655396]
[122.28419495 149.38128662]
[108.05902100 144.62266541]
[99.72323608 132.15211487]
[100.76572418 117.18717957]
[94.83395386 130.96447754]
[88.90219116 144.74179077]
[82.97042084 158.51908875]
[77.03865051 172.29640198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 49]
[18 48]
[19 47]
[20 45]
[21 44]
[22 43]
[24 41]
[26 39]
[27 38]
[28 37]
[29 36]
[51 72]
[52 71]
[53 70]
[54 69]
[55 67]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
