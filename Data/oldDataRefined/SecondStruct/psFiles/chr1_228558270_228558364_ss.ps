%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCGGUUUCUUUUUCGGAUGUCGUGGGCCAUAAGGGUCCGCCAGAGGGUAGGUUCAUGAUUGGUCCGGGCUGGGACGAAUCGAAGGCUCUAG\
) } def
/len { sequence length } bind def

/coor [
[111.40491486 140.69203186]
[98.68761444 142.23968506]
[86.09091949 139.90551758]
[74.77246857 133.90405273]
[63.82450485 144.15792847]
[52.87654495 154.41181946]
[41.92858505 164.66571045]
[30.98062134 174.91958618]
[33.03882599 190.29956055]
[25.63422775 203.93595886]
[11.61404324 210.58532715]
[-3.63067842 207.69084167]
[-14.23803139 196.36547852]
[-16.12927246 180.96409607]
[-8.57717991 167.40881348]
[5.51431227 160.91192627]
[20.72673798 163.97163391]
[31.67469788 153.71774292]
[42.62266159 143.46385193]
[53.57062149 133.20997620]
[64.51858521 122.95608521]
[60.31798935 114.53447723]
[58.08533859 105.39205933]
[57.93135834 95.98223877]
[59.86368179 86.77165985]
[63.78647614 78.21712494]
[52.50888062 68.32693481]
[41.23128128 58.43674850]
[29.95368576 48.54656219]
[18.67608833 38.65637207]
[7.39849138 28.76618576]
[-3.87910557 18.87599945]
[-19.91742325 18.48624992]
[-29.49724197 5.61742449]
[-25.26974106 -9.85861492]
[-10.47790146 -16.06997681]
[3.53124619 -8.25183392]
[6.01108170 7.59840155]
[17.28867912 17.48858833]
[28.56627655 27.37877655]
[39.84387207 37.26896286]
[51.12147141 47.15914917]
[62.39906693 57.04933929]
[73.67666626 66.93952179]
[92.40210724 58.42855453]
[112.92748260 59.76576996]
[130.39036560 70.63439178]
[140.65382385 88.45965576]
[155.58160400 86.98940277]
[170.50936890 85.51914215]
[185.43713379 84.04888916]
[200.36491394 82.57862854]
[206.92877197 73.60002136]
[217.18078613 69.89780426]
[227.53607178 72.50296021]
[234.51890564 80.28542328]
[249.51086426 79.79463959]
[264.50283813 79.30384827]
[270.58862305 75.98921204]
[276.50918579 76.34556580]
[280.48440552 79.30384827]
[295.47637939 79.79463959]
[310.46835327 80.28542328]
[325.46032715 80.77620697]
[339.50625610 73.49458313]
[351.97357178 81.64416504]
[366.96551514 82.13494873]
[381.95748901 82.62573242]
[396.94946289 83.11652374]
[408.31167603 72.13126373]
[424.11209106 72.48133087]
[434.97659302 83.95903778]
[434.45950317 99.75486755]
[422.86755371 110.49742889]
[407.07809448 109.81335449]
[396.45867920 98.10848999]
[381.46670532 97.61770630]
[366.47473145 97.12691498]
[351.48278809 96.63613129]
[338.50915527 103.95286560]
[324.96954346 95.76818085]
[309.97756958 95.27738953]
[294.98559570 94.78660583]
[279.99362183 94.29582214]
[264.99362183 94.29582214]
[250.00166321 94.78660583]
[235.00968933 95.27738953]
[219.59681702 106.75935364]
[201.83515930 97.50640106]
[186.90739441 98.97666168]
[171.97962952 100.44691467]
[157.05184937 101.91717529]
[142.12408447 103.38742828]
[139.17344666 115.85413361]
[132.62278748 126.86385345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[56 87]
[57 86]
[58 85]
[61 84]
[62 83]
[63 82]
[64 81]
[66 79]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
