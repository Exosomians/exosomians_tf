%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGUGCAUGUGCAGGGAAGCUAUCGAGUCGACCAUCUCGCCUCCUGACAUCGAUGAAGGAGUCGUCCUCUGUAGGAAUCCAGCGACCAAGCUAAGGCCGAGCUUCCUCUGUUCACGCCAAAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[97.33696747 514.81518555]
[97.73591614 499.51486206]
[105.20970154 486.15817261]
[118.04089355 477.81439209]
[116.58200073 462.88549805]
[112.76086426 456.46810913]
[115.27388763 447.57598877]
[114.17896271 432.61599731]
[105.53327179 420.48745728]
[112.24258423 406.15933228]
[111.14765167 391.19934082]
[102.50196075 379.07080078]
[109.21127319 364.74267578]
[108.11634064 349.78268433]
[107.02141571 334.82269287]
[105.92648315 319.86270142]
[104.64947510 304.91717529]
[103.19058228 289.98828125]
[101.73168182 275.05938721]
[100.27278900 260.13052368]
[98.81389618 245.20162964]
[97.35499573 230.27273560]
[94.21897888 226.54629517]
[93.45970917 220.78213501]
[96.20674133 214.58416748]
[95.47642517 199.60195923]
[94.74611664 184.61975098]
[91.24195862 178.02395630]
[94.18494415 169.26470947]
[93.81967926 154.26916504]
[93.45441437 139.27360535]
[81.61602020 137.19407654]
[70.48473358 131.49497986]
[61.17697906 122.43161774]
[54.71346664 110.60467529]
[51.91262054 96.92387390]
[53.29770279 82.53894043]
[59.02767944 68.74296570]
[68.85977173 56.85647202]
[82.14894867 48.10234070]
[74.17951202 35.39454269]
[60.29261017 27.81401443]
[60.08560562 12.92084694]
[52.11617279 0.21304752]
[44.14673996 -12.49475193]
[36.17731094 -25.20255089]
[28.20787811 -37.91035080]
[12.95252132 -36.67235184]
[-1.12620866 -42.67634964]
[-10.79312134 -54.54265976]
[-13.82683086 -69.54450226]
[-9.53021240 -84.23455048]
[1.10940087 -95.23715210]
[15.64710522 -100.02398682]
[30.74224281 -97.49506378]
[42.92605972 -88.23152161]
[49.39880371 -74.36206055]
[48.67309189 -59.07376480]
[40.91567993 -45.87978363]
[48.88510895 -33.17198181]
[56.85454178 -20.46418381]
[64.82397461 -7.75638390]
[72.79340363 4.95141554]
[86.11028290 11.62299728]
[86.88731384 27.42511177]
[94.85674286 40.13291168]
[109.80228424 38.85590363]
[115.50032806 24.98030090]
[121.19836426 11.10469723]
[126.89640045 -2.77090621]
[124.17135620 -18.94205856]
[136.98408508 -29.17758369]
[152.15394592 -22.94805336]
[154.07550049 -6.66187191]
[140.77200317 2.92713213]
[135.07397461 16.80273438]
[129.37593079 30.67833900]
[123.67789459 44.55393982]
[129.01338196 49.82485580]
[139.55538940 39.15404892]
[150.22601318 49.69623184]
[139.68435669 60.36668396]
[145.01985168 65.63759613]
[158.82504272 59.77102661]
[172.63023376 53.90445709]
[178.31152344 39.15662384]
[192.79077148 32.82205200]
[207.47772217 38.65893555]
[213.65884399 53.20435333]
[207.66700745 67.82876587]
[193.05705261 73.85576630]
[178.49681091 67.70964813]
[164.69161987 73.57621765]
[150.88642883 79.44279480]
[148.90162659 109.72753143]
[131.98109436 131.42633057]
[108.44996643 138.90834045]
[108.81523132 153.90388489]
[109.18049622 168.89944458]
[109.72832489 183.88943481]
[110.45864105 198.87164307]
[111.18894958 213.85385132]
[112.28388214 228.81384277]
[113.74277496 243.74272156]
[115.20167542 258.67160034]
[116.66056824 273.60049438]
[118.11946869 288.52938843]
[119.57836151 303.45828247]
[123.56350708 311.79516602]
[120.88646698 318.76779175]
[121.98139954 333.72775269]
[123.07632446 348.68774414]
[124.17125702 363.64773560]
[132.89526367 376.84631348]
[126.10763550 390.10440063]
[127.20256805 405.06439209]
[135.92657471 418.26296997]
[129.13894653 431.52105713]
[130.23387146 446.48104858]
[131.51087952 461.42660522]
[132.96977234 476.35546875]
[147.17355347 482.05734253]
[157.09176636 493.71444702]
[160.44526672 508.64804077]
[156.46343994 523.42651367]
[146.06130981 534.65393066]
[131.62918091 539.75024414]
[116.48345947 537.54437256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 121]
[5 120]
[7 119]
[8 118]
[10 116]
[11 115]
[13 113]
[14 112]
[15 111]
[16 110]
[17 108]
[18 107]
[19 106]
[20 105]
[21 104]
[22 103]
[25 102]
[26 101]
[27 100]
[29 99]
[30 98]
[31 97]
[40 66]
[41 65]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[67 78]
[68 77]
[69 76]
[70 75]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
