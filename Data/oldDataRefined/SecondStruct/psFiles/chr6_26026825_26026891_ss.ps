%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUCGGCUCAUUUCGGUAACUCUACAAUGGUAGGCUUUCUUAUGUUAGUGUCGAGAAAGACUCUC\
) } def
/len { sequence length } bind def

/coor [
[88.93525696 123.17897797]
[82.70790863 118.21657562]
[69.60357666 125.51564026]
[56.49923706 132.81471252]
[43.39490128 140.11376953]
[30.29056740 147.41284180]
[17.18623161 154.71191406]
[4.08189535 162.01097107]
[-0.00154461 177.27862549]
[-13.72644520 185.11460876]
[-28.95006752 180.86997986]
[-36.64050674 167.06300354]
[-32.23515701 151.88510132]
[-18.34764099 144.34107971]
[-3.21717191 148.90664673]
[9.88716412 141.60757446]
[22.99149895 134.30850220]
[36.09583664 127.00943756]
[49.20017242 119.71037292]
[62.30450821 112.41130829]
[75.40884399 105.11223602]
[77.64940643 83.68632507]
[96.83812714 69.94073486]
[90.77931213 56.21882629]
[84.72049713 42.49691772]
[78.66168213 28.77500916]
[72.60286713 15.05310059]
[59.05324554 5.81514263]
[60.54840088 -10.51570415]
[75.55023956 -17.13966370]
[88.62615967 -7.24257517]
[86.32477570 8.99428558]
[92.38359070 22.71619415]
[98.44240570 36.43810272]
[104.50122070 50.16001129]
[110.56003571 63.88191605]
[123.82946777 70.87635803]
[138.57406616 68.12010956]
[153.31866455 65.36386871]
[168.06326294 62.60762787]
[182.80784607 59.85138321]
[197.55244446 57.09514236]
[212.29704285 54.33889771]
[216.73751831 39.69168854]
[227.48452759 28.79396057]
[242.06848145 24.14993286]
[257.13809204 26.82676888]
[269.23046875 36.20935059]
[275.56689453 50.14162827]
[274.69128418 65.42207336]
[266.80484009 78.53933716]
[253.71983337 86.47918701]
[238.44308472 87.41709137]
[224.48509216 81.13752747]
[215.05328369 69.08349609]
[200.30868530 71.83973694]
[185.56410217 74.59597778]
[170.81950378 77.35222626]
[156.07490540 80.10846710]
[141.33030701 82.86470795]
[126.58570862 85.62094879]
[129.16876221 94.63790131]
[128.83613586 103.83436584]
[125.72996521 112.30833435]
[120.25905609 119.26244354]
[113.04868317 124.07887268]
[104.87058258 126.37368011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
