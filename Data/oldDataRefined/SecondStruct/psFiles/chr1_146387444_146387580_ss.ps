%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUAAAUACACCGUCCCGUCUAUAAUACCAAUGACUUUACGGAAAAUUUGGGCUGAGUUGAUAAAGUAAAGUUCACACGACAAGACAGUAAAAGAGGUUCCACCCUUCGAGUCGACACAUUAAACAUCAUUGCUU\
) } def
/len { sequence length } bind def

/coor [
[65.88166046 259.43084717]
[55.12396240 248.97752380]
[46.31574249 236.83604431]
[39.71734619 223.36529541]
[35.52379608 208.96340942]
[33.85904694 194.05607605]
[34.77230072 179.08390808]
[38.23656464 164.48942566]
[44.14944458 150.70401001]
[52.33617401 138.13510132]
[62.55478287 127.15420532]
[74.50323486 118.08587646]
[87.82080841 111.20127869]
[73.37704468 115.24822998]
[58.93328857 119.29518127]
[44.48952866 123.34213257]
[39.00995255 137.73937988]
[26.25263786 146.05227661]
[11.22434139 145.26847839]
[-0.32251239 135.89788818]
[-14.76627159 139.94483948]
[-29.21003151 143.99179077]
[-31.82599449 159.02905273]
[-40.71430588 171.43714905]
[-54.11018372 178.75241089]
[-69.35386658 179.52243042]
[-83.41870880 173.59426880]
[-93.51213074 162.14500427]
[-97.63006592 147.44789124]
[-94.95491028 132.42103577]
[-86.01779938 120.04804993]
[-72.59322357 112.78558350]
[-57.34662628 112.07561493]
[-43.30523682 118.05910492]
[-33.25698090 129.54801941]
[-18.81322289 125.50107574]
[-4.36946392 121.45412445]
[0.62757802 107.44813538]
[13.06080055 98.96999359]
[28.28014755 99.44419861]
[40.44257736 108.89837646]
[54.88633728 104.85142517]
[69.33009338 100.80447388]
[83.77385712 96.75752258]
[68.84758759 98.24293518]
[56.77847672 89.33582306]
[53.79783630 74.63494873]
[61.44458008 61.73040009]
[75.77066803 57.28482819]
[89.37951660 63.59349442]
[95.24491882 77.40126038]
[91.85955811 62.78827667]
[88.47420502 48.17529297]
[85.08885193 33.56230545]
[81.70349121 18.94931793]
[78.31813812 4.33633280]
[65.44220734 -8.77182961]
[71.10705566 -25.34251785]
[60.19129562 -36.79488754]
[64.53334808 -51.04254913]
[60.81623077 -65.57469177]
[48.97232819 -76.91726685]
[53.13562012 -92.77913666]
[69.02326202 -96.84297180]
[80.29141998 -84.92824554]
[75.34837341 -69.29180908]
[79.06548309 -54.75966644]
[89.71537018 -44.34673309]
[85.63919067 -29.05963516]
[95.91975403 -22.58332825]
[99.09971619 -10.44042683]
[92.93112183 0.95097691]
[96.31648254 15.56396294]
[99.70183563 30.17694855]
[103.08718872 44.78993607]
[106.47254944 59.40292358]
[109.85790253 74.01590729]
[109.25126648 79.87841034]
[107.90099335 85.51280212]
[105.83702087 90.84571075]
[120.36915588 87.12860107]
[134.90129089 83.41148376]
[149.43344116 79.69436646]
[157.51954651 66.38074493]
[172.31016541 62.81807709]
[184.95283508 70.60900116]
[199.48497009 66.89188385]
[186.87295532 58.77171326]
[182.24858093 44.50233841]
[187.70030212 30.52812195]
[200.76600647 23.16013527]
[215.54493713 25.72592354]
[225.36259460 37.06671906]
[225.78511047 52.06076813]
[216.61994934 63.93751526]
[231.55780029 62.57349396]
[239.90296936 58.64730835]
[246.85060120 61.35240555]
[261.81564331 60.32876968]
[276.78067017 59.30513382]
[292.17025757 52.19198990]
[303.26568604 65.01103210]
[294.01913452 79.22151184]
[277.80429077 74.27016449]
[262.83926392 75.29380035]
[247.87423706 76.31743622]
[232.92182922 77.51134491]
[217.98397827 78.87536621]
[203.20208740 81.42402649]
[188.66995239 85.14114380]
[181.32087708 98.04566956]
[166.63618469 102.02236938]
[153.15055847 94.22650146]
[138.61840820 97.94361877]
[124.08627319 101.66073608]
[109.55413818 105.37785339]
[124.53797150 104.68162537]
[139.41961670 106.56219482]
[153.75923157 110.96397400]
[167.13296509 117.75685883]
[179.14553833 126.74006653]
[189.44189453 137.64808655]
[197.71769714 150.15852356]
[203.72836304 163.90159607]
[207.29621887 178.47109985]
[208.31581116 193.43640137]
[206.75700378 208.35519409]
[202.66587830 222.78649902]
[196.16334534 236.30378723]
[187.44158936 248.50752258]
[176.75842285 259.03698730]
[164.42961121 267.58102417]
[150.81951904 273.88702393]
[136.33045959 277.76861572]
[121.39064789 279.11111450]
[106.44168854 277.87478638]
[91.92540741 274.09619141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 44]
[14 43]
[15 42]
[16 41]
[20 37]
[21 36]
[22 35]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[58 69]
[60 67]
[61 66]
[80 116]
[81 115]
[82 114]
[83 113]
[86 110]
[87 109]
[95 108]
[96 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
