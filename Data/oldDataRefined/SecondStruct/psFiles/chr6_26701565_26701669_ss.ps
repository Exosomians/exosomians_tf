%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUCUUCAACCUAUGUGAUUUAUAGCCUUGCGUUGCGUUUACGAUAUCGUCUAUUCCUAAACUUCUGACUGGGUUAUAAACAUCUUUUACCUUUAUAUUAAAU\
) } def
/len { sequence length } bind def

/coor [
[112.53491211 385.64855957]
[106.48806000 399.37576294]
[100.44120789 413.10293579]
[94.39435577 426.83010864]
[98.83911896 442.24517822]
[89.44125366 455.24746704]
[73.41000366 455.86276245]
[63.04317093 443.61904907]
[66.29330444 427.90866089]
[80.66717529 420.78326416]
[86.71402740 407.05609131]
[92.76087952 393.32888794]
[98.80773163 379.60171509]
[81.83911896 359.95727539]
[78.16120148 334.17443848]
[89.03129578 310.41357422]
[111.08744812 296.24539185]
[109.31334686 281.35067749]
[107.53925323 266.45596313]
[103.55899048 260.08422852]
[105.94003296 251.09443665]
[104.60809326 236.15368652]
[103.27615356 221.21293640]
[101.94421387 206.27218628]
[100.61227417 191.33145142]
[99.28033447 176.39070129]
[97.94840240 161.44995117]
[96.61646271 146.50920105]
[95.28452301 131.56845093]
[93.95258331 116.62770844]
[85.81490326 110.57520294]
[82.33779907 101.04816437]
[84.66370392 91.17674255]
[92.02841949 84.20424652]
[91.58391571 69.21083832]
[91.13941956 54.21742249]
[90.69491577 39.22401047]
[79.26771545 22.74838829]
[88.77397919 6.02048874]
[87.44204712 -8.92025852]
[86.11010742 -23.86100578]
[84.77816772 -38.80175400]
[83.44622803 -53.74250031]
[74.51409149 -66.80111694]
[81.09069824 -80.16516113]
[79.75876617 -95.10590363]
[65.79460907 -101.50106049]
[56.91196442 -114.03079224]
[55.50021362 -129.32466125]
[61.93910599 -143.26870728]
[74.49662018 -152.11203003]
[89.79484558 -153.47584534]
[103.71862793 -146.99327087]
[112.52255249 -134.40809631]
[113.83840179 -119.10567474]
[107.31221771 -105.20227814]
[94.69950867 -96.43784332]
[96.03144836 -81.49709320]
[104.86831665 -69.50714111]
[98.38697815 -55.07444000]
[99.71891785 -40.13369370]
[101.05084991 -25.19294548]
[102.38278961 -10.25219727]
[103.71472931 4.68855047]
[112.25664520 10.64713097]
[116.10715485 20.56215668]
[113.72883606 31.15655136]
[105.68833160 38.77951050]
[106.13282776 53.77292252]
[106.57733154 68.76633453]
[107.02182770 83.75975037]
[117.66220093 98.95183563]
[108.89333344 115.29576874]
[110.22527313 130.23651123]
[111.55720520 145.17726135]
[112.88914490 160.11801147]
[114.22108459 175.05876160]
[115.55302429 189.99951172]
[116.88496399 204.94026184]
[118.21690369 219.88099670]
[119.54883575 234.82174683]
[120.88077545 249.76249695]
[122.43396759 264.68185425]
[124.20806122 279.57659912]
[125.98216248 294.47131348]
[133.02087402 295.34133911]
[139.84214783 297.26779175]
[146.28845215 300.20489502]
[152.21116638 304.08349609]
[157.47390747 308.81277466]
[161.95574951 314.28237915]
[165.55395508 320.36486816]
[168.18637085 326.91888428]
[169.79322815 333.79226685]
[170.33862305 340.82565308]
[169.81117249 347.85620117]
[168.22434998 354.72131348]
[165.61614990 361.26239014]
[162.04808044 367.32858276]
[157.60382080 372.78009033]
[152.38720703 377.49160767]
[146.51980591 381.35501099]
[140.13810730 384.28201294]
[133.39030457 386.20599365]
[126.43290710 387.08364868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[17 85]
[18 84]
[19 83]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[34 71]
[35 70]
[36 69]
[37 68]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
