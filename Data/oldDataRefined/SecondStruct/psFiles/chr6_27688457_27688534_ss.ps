%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGGGCAUUUUGUUUCCCCGAUAUCCGUGGAAUGUCACUGUCUCCAUGCAAUGCCAACCUCCGAAAACACUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[173.89888000 219.28111267]
[165.97259521 206.54635620]
[158.04629517 193.81161499]
[140.16995239 190.95625305]
[129.65290833 175.84010315]
[133.31201172 157.47434998]
[124.39899445 145.40959167]
[115.48597717 133.34484863]
[106.57296753 121.28009796]
[97.65995026 109.21534729]
[92.49649811 107.19749451]
[88.95403290 102.32030487]
[88.56362915 95.81906891]
[80.63733673 83.08431244]
[72.71104431 70.34956360]
[58.58426666 72.40686035]
[44.79474640 68.88513947]
[33.45424271 60.35839844]
[26.28613281 48.16440964]
[24.36353111 34.19496536]
[27.94876862 20.60238457]
[36.45816040 9.46790504]
[29.04442215 -3.57189894]
[21.63068581 -16.61170387]
[14.21694756 -29.65150642]
[9.21264076 -32.54502106]
[6.30199909 -36.73455429]
[5.61952400 -41.11666489]
[6.80408096 -44.71475983]
[0.99501354 -58.54424667]
[-4.81405401 -72.37373352]
[-10.62312126 -86.20322418]
[-24.00304794 -95.68529510]
[-22.21209335 -111.98635101]
[-7.09263897 -118.33726501]
[5.80171633 -108.20476532]
[3.20636606 -92.01229095]
[9.01543331 -78.18280029]
[14.82450104 -64.35331726]
[20.63356972 -50.52382660]
[27.25675201 -37.06524658]
[34.67049026 -24.02544022]
[42.08422852 -10.98563671]
[49.49796677 2.05416727]
[65.28785706 0.63500226]
[80.19277191 6.20352221]
[91.26404572 17.71128845]
[96.28847504 32.92971039]
[94.23062897 48.88153076]
[85.44579315 62.42327118]
[93.37208557 75.15802002]
[101.29837799 87.89277649]
[109.72470093 100.30233002]
[118.63771057 112.36708069]
[127.55072784 124.43183136]
[136.46374512 136.49658203]
[145.37675476 148.56132507]
[157.57594299 148.02439880]
[168.35151672 153.50527954]
[174.96745300 163.47808838]
[175.81025696 175.29420471]
[170.78105164 185.88531494]
[178.70733643 198.62007141]
[186.63363647 211.35481262]
[201.54092407 208.50219727]
[216.47132874 211.23120117]
[229.40563965 219.17272949]
[238.59460449 231.25276184]
[242.79550171 245.83758545]
[241.44017029 260.95471191]
[234.71191406 274.55966187]
[223.52067566 284.81253052]
[209.37998962 290.32662964]
[194.20225525 290.35626221]
[180.04014587 284.89743042]
[168.80895996 274.68835449]
[162.02763367 261.10977173]
[160.61326599 245.99806213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[13 52]
[14 51]
[15 50]
[22 44]
[23 43]
[24 42]
[25 41]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
