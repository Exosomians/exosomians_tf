%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACGAGGGACGUCAGUCCUGAGACCCUGGCGUCCCCCGAGGGCCUGGGACUGAGACGU\
) } def
/len { sequence length } bind def

/coor [
[40.90375900 270.34356689]
[35.94731903 284.77951050]
[25.21209526 295.62930298]
[10.82957172 300.73867798]
[-4.34458828 299.09320068]
[-17.29754448 291.01956177]
[-25.45747948 278.12078857]
[-27.20423126 262.95794678]
[-22.19098091 248.54164124]
[-11.41311359 237.73422241]
[2.98941851 232.68150330]
[18.15698051 234.38673401]
[26.09144211 221.65707397]
[34.02590179 208.92741394]
[41.96036148 196.19773865]
[49.89482117 183.46807861]
[57.17435074 170.35289001]
[63.78026199 156.88581848]
[70.38617706 143.41874695]
[76.99208832 129.95167542]
[83.59799957 116.48461151]
[90.20391083 103.01753998]
[90.69855499 94.62722778]
[97.50073242 89.04852295]
[104.78025818 75.93332672]
[104.71242523 60.11226273]
[117.65408325 52.73914337]
[124.93360901 39.62394333]
[132.21313477 26.50874519]
[139.49267578 13.39354610]
[146.43762207 0.09814573]
[153.04353333 -13.36892223]
[147.69531250 -28.24077606]
[154.50502014 -42.50273132]
[169.43258667 -47.69342422]
[183.62174988 -40.73330688]
[188.65432739 -25.75169563]
[181.54458618 -11.63691330]
[166.51060486 -6.76301003]
[159.90469360 6.70405817]
[159.78492737 14.39259052]
[152.60786438 20.67307472]
[145.32833862 33.78827667]
[138.04881287 46.90347290]
[130.76928711 60.01867294]
[131.35778809 74.90164948]
[117.89546204 83.21285248]
[110.61592865 96.32805634]
[103.67098236 109.62345123]
[97.06507111 123.09052277]
[90.45915985 136.55758667]
[83.85324097 150.02465820]
[77.24732971 163.49172974]
[70.64141846 176.95880127]
[70.71575165 184.21667480]
[67.36801147 189.42059326]
[62.62448502 191.40254211]
[54.69002533 204.13220215]
[46.75556564 216.86186218]
[38.82110596 229.59153748]
[30.88664436 242.32119751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[24 48]
[25 47]
[27 45]
[28 44]
[29 43]
[30 42]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
