%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGUCCUUUAUAUCUUUACCUGUGCCUCGUGGAGCAUCACGAUCUUUCGUUCCUUCACGAAUUUUAGGUUUGUGUUGGUUUGAGAAUUGAAA\
) } def
/len { sequence length } bind def

/coor [
[93.63216400 277.55523682]
[91.26371765 262.63653564]
[93.19565582 247.65507507]
[99.27136993 233.82530212]
[108.99832153 222.26835632]
[121.58798981 213.92109680]
[117.14385986 199.59455872]
[107.49626160 195.53941345]
[101.64422607 186.59666443]
[101.79644012 175.68827820]
[108.14899445 166.54730225]
[104.67169189 151.95591736]
[101.19438934 137.36454773]
[97.71708679 122.77316284]
[86.92512512 118.78500366]
[79.43719482 110.04985809]
[77.14550018 98.77510071]
[80.62915802 87.80988312]
[89.00783539 79.92511749]
[86.51290131 65.13406372]
[84.01795959 50.34300613]
[81.52301788 35.55195236]
[79.02807617 20.76089859]
[64.73056793 15.32688236]
[55.13600540 3.54379654]
[52.74346924 -11.36063671]
[58.09663773 -25.36776161]
[69.66429901 -34.75151062]
[67.16935730 -49.54256439]
[64.67441559 -64.33361816]
[62.17947769 -79.12467194]
[59.68453979 -93.91572571]
[57.18959808 -108.70677948]
[54.69465637 -123.49783325]
[52.19971848 -138.28889465]
[41.14695740 -143.28393555]
[34.02834702 -152.95422363]
[32.57246780 -164.75143433]
[37.03465271 -175.63796997]
[46.16165543 -182.86909485]
[44.66021729 -197.79376221]
[43.15878296 -212.71842957]
[41.65734863 -227.64309692]
[31.64344406 -240.62977600]
[38.13265991 -255.69038391]
[54.44944763 -257.33187866]
[63.80849457 -243.86561584]
[56.58201599 -229.14453125]
[58.08345032 -214.21986389]
[59.58488464 -199.29519653]
[61.08632278 -184.37052917]
[75.89044952 -173.85934448]
[78.55849457 -155.58308411]
[66.99076843 -140.78382874]
[69.48571014 -125.99277496]
[71.98065186 -111.20172119]
[74.47559357 -96.41066742]
[76.97053528 -81.61961365]
[79.46546936 -66.82855988]
[81.96041107 -52.03750610]
[84.45535278 -37.24645233]
[98.46106720 -32.17639542]
[108.11273193 -20.70026970]
[110.74160004 -5.83569956]
[105.54305267 8.44267273]
[93.81912994 18.26595879]
[96.31407166 33.05701065]
[98.80901337 47.84806442]
[101.30395508 62.63911819]
[103.79888916 77.43017578]
[118.86772919 87.04478455]
[122.42814636 104.56146240]
[112.30847168 119.29586029]
[115.78577423 133.88723755]
[119.26307678 148.47862244]
[122.74037170 163.07000732]
[137.28022766 176.83496094]
[131.47039795 195.15042114]
[135.91453552 209.47695923]
[151.01809692 209.23370361]
[165.57801819 213.25679016]
[178.41400146 221.22009277]
[188.48548889 232.47805786]
[194.97602844 246.11805725]
[197.35946655 261.03436279]
[195.44256592 276.01776123]
[189.38075256 289.85360718]
[179.66542053 301.42031860]
[167.08413696 309.78024292]
[152.65681458 314.25564575]
[137.55302429 314.48373413]
[122.99714661 310.44601440]
[110.16916656 302.46981812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[11 76]
[12 75]
[13 74]
[14 73]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
