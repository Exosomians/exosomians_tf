%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGACAUUACCGCGAACUUUCUCUUCGAGAAGCGUCAGAGCCUAGAUUGAAUUAAGAGUGACAGG\
) } def
/len { sequence length } bind def

/coor [
[43.01658249 265.64947510]
[38.77581787 280.31164551]
[28.58695602 291.67605591]
[14.47300434 297.48629761]
[-0.76370186 296.58877563]
[-14.09790325 289.16168213]
[-22.88208389 276.67965698]
[-25.37213898 261.62103271]
[-21.07366753 246.97569275]
[-10.84013081 235.65148926]
[3.29659176 229.89686584]
[18.52964592 230.85437012]
[25.82871246 217.75004578]
[18.06649017 205.03730774]
[17.70734406 190.04641724]
[24.94783401 176.80097961]
[37.93129730 168.90626526]
[53.22289276 168.56806946]
[60.52196121 155.46372986]
[67.82102966 142.35939026]
[75.12009430 129.25505066]
[82.41915894 116.15071869]
[76.29113007 102.79661560]
[79.14379883 88.38317108]
[89.89661407 78.37008667]
[104.47650146 76.55020905]
[111.77556610 63.44587708]
[119.07463837 50.34154129]
[126.37370300 37.23720551]
[133.67277527 24.13286781]
[125.54639435 8.25226974]
[128.29551697 -9.21900272]
[140.69010925 -21.62043762]
[157.85800171 -24.33150291]
[163.91682434 -38.05341339]
[157.97467041 -52.69807816]
[164.20513916 -67.22242737]
[178.91180420 -73.00942230]
[193.36947632 -66.62574005]
[199.00065613 -51.85870361]
[192.46447754 -37.46933746]
[177.63873291 -31.99459648]
[171.57991028 -18.27268791]
[179.36787415 -8.46886158]
[182.13031006 3.81861830]
[179.25440979 16.15551186]
[171.25091553 26.06920052]
[159.66476440 31.54424095]
[146.77709961 31.43193436]
[139.47804260 44.53627014]
[132.17897034 57.64060593]
[124.87990570 70.74494171]
[117.58084106 83.84928131]
[123.70886993 97.20338440]
[120.85620117 111.61682892]
[110.10338593 121.62991333]
[95.52349854 123.44979095]
[88.22443390 136.55412292]
[80.92536163 149.65846252]
[73.62629700 162.76280212]
[66.32723236 175.86712646]
[74.08967590 189.04634094]
[74.21237183 204.24113464]
[66.76249695 217.36994934]
[53.82791138 224.95629883]
[38.93304825 225.04910278]
[31.63398170 238.15344238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 67]
[13 66]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
