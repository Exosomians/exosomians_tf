%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUGGCUUGGGCCGUGGCGGAGCACCCCGCGGCGGCGGCCGGUGACUAGCCGGGCCGCAGGCGCAGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[116.14311981 312.98696899]
[126.02650452 300.65432739]
[124.14650726 285.77261353]
[122.26651001 270.89086914]
[120.38650513 256.00915527]
[118.50650787 241.12744141]
[116.31526184 226.28836060]
[113.81373596 211.49841309]
[111.31220245 196.70848083]
[108.81066895 181.91853333]
[106.30913544 167.12860107]
[103.49842072 152.39428711]
[100.37974548 137.72207642]
[97.26107025 123.04985809]
[94.14239502 108.37764740]
[89.39241791 101.54734802]
[91.21394348 93.02619171]
[88.71241760 78.23625183]
[86.21088409 63.44630814]
[83.70935059 48.65636826]
[73.54305267 40.41014481]
[71.89944458 27.83167648]
[79.12972260 17.90514374]
[77.24972534 3.02342319]
[75.05847931 -11.81566143]
[72.55694580 -26.60560226]
[70.05541992 -41.39554214]
[67.55388641 -56.18548203]
[64.43521118 -70.85769653]
[60.70486450 -85.38644409]
[56.97451401 -99.91519165]
[53.24416733 -114.44393921]
[41.38994217 -125.77572632]
[45.53878403 -141.64138794]
[61.42272186 -145.71968079]
[72.70172119 -133.81523132]
[67.77291107 -118.17428589]
[71.50326538 -103.64553833]
[75.23361206 -89.11679077]
[78.96395874 -74.58804321]
[82.80290985 -71.30811310]
[84.43139648 -65.46961212]
[82.34382629 -58.68701553]
[84.84535980 -43.89707565]
[87.34689331 -29.10713387]
[89.84841919 -14.31719303]
[94.19692230 -8.06552505]
[92.13144684 1.14342475]
[94.01144409 16.02514458]
[105.38160706 29.22447968]
[98.49929047 46.15483856]
[101.00082397 60.94477844]
[103.50235748 75.73471832]
[106.00389099 90.52465820]
[108.81460571 105.25897217]
[111.93328094 119.93118286]
[115.05195618 134.60339355]
[118.17063141 149.27560425]
[123.14974213 157.29306030]
[121.09908295 164.62705994]
[123.60060883 179.41700745]
[126.10214233 194.20693970]
[128.60366821 208.99688721]
[131.10520935 223.78681946]
[135.74420166 232.00573730]
[133.38822937 239.24743652]
[135.26823425 254.12916565]
[137.14822388 269.01089478]
[139.02822876 283.89260864]
[140.90821838 298.77432251]
[153.54811096 308.26162720]
[155.69458008 323.91946411]
[146.07415771 336.45834351]
[130.39450073 338.43914795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 58]
[13 57]
[14 56]
[15 55]
[17 54]
[18 53]
[19 52]
[20 51]
[23 49]
[24 48]
[25 46]
[26 45]
[27 44]
[28 43]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
