%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAGUUCAACUCAACUUUAGAGGAUUCACAUUCAACCCACGAAAUACAAUUCGAUGUGAGACCAAGCAGGUUCACGUGAAAGGUGAUGUGAAUGGUACAAUGCUGAACAAAGGAGAUAUAUUUACGCAUCCCCAAAAUCAAUUU\
) } def
/len { sequence length } bind def

/coor [
[142.24446106 211.17706299]
[141.90614319 204.24182129]
[142.75035095 197.34326172]
[144.75482178 190.68171692]
[147.86354065 184.45103455]
[151.98832703 178.83296204]
[142.76182556 167.00622559]
[133.53532410 155.17948914]
[124.30883026 143.35275269]
[115.08232880 131.52601624]
[98.13366699 134.89817810]
[81.64133453 129.73760986]
[71.20609283 140.51284790]
[60.77085876 151.28808594]
[62.56312943 166.82263184]
[53.90758133 179.84628296]
[38.89109802 184.20967102]
[24.60400391 177.85255432]
[17.79222679 163.77656555]
[21.67208099 148.62792969]
[34.41161728 139.55940247]
[49.99561691 140.85285950]
[60.43085480 130.07760620]
[70.86609650 119.30236816]
[65.25128937 96.27265930]
[75.62274170 74.95772552]
[67.71023560 62.21440887]
[59.79772568 49.47108841]
[51.88521576 36.72776794]
[43.97270584 23.98444748]
[36.06019974 11.24112892]
[28.14768982 -1.50219154]
[20.23517990 -14.24551105]
[12.32267189 -26.98883057]
[6.58577347 -30.50036430]
[3.93472767 -35.62811279]
[4.35783052 -40.45007706]
[-3.00293255 -53.51985550]
[-10.36369610 -66.58963776]
[-30.95697021 -66.61188507]
[-47.75110626 -80.80065918]
[-51.69657898 -103.84381866]
[-64.84426880 -111.06450653]
[-77.99195099 -118.28519440]
[-91.13964081 -125.50588226]
[-106.24257660 -120.85004425]
[-120.17489624 -128.31100464]
[-124.67079926 -143.46232605]
[-117.06294250 -157.31498718]
[-101.86493683 -161.65045166]
[-88.09349060 -153.89656067]
[-83.91895294 -138.65356445]
[-70.77127075 -131.43287659]
[-57.62358093 -124.21219635]
[-44.47589111 -116.99150848]
[-32.64915466 -126.21800995]
[-36.45397186 -140.72743225]
[-40.25879288 -155.23686218]
[-44.06361008 -169.74627686]
[-47.86843109 -184.25570679]
[-51.67324829 -198.76512146]
[-55.47806549 -213.27455139]
[-60.71707535 -220.84564209]
[-59.20562363 -228.13473511]
[-62.69950867 -242.72215271]
[-75.56700897 -252.30374146]
[-75.95453644 -268.34213257]
[-63.56481552 -278.53399658]
[-47.90217972 -275.06103516]
[-40.98166275 -260.58740234]
[-48.11209106 -246.21603394]
[-44.61820602 -231.62861633]
[-40.96864319 -217.07936096]
[-37.16382599 -202.56994629]
[-33.35900497 -188.06051636]
[-29.55418777 -173.55110168]
[-25.74936867 -159.04167175]
[-21.94454956 -144.53225708]
[-18.13973236 -130.02282715]
[-2.46011424 -125.22798920]
[8.82855034 -114.15013885]
[13.55499363 -99.66558838]
[11.15892792 -85.20647430]
[2.70608473 -73.95040131]
[10.06684780 -60.88061905]
[17.42761040 -47.81083679]
[25.06599236 -34.90134048]
[32.97850037 -22.15802002]
[40.89101028 -9.41470051]
[48.80351639 3.32861972]
[56.71602631 16.07193947]
[64.62853241 28.81525993]
[72.54104614 41.55857849]
[80.45355225 54.30189896]
[88.36606598 67.04521942]
[96.41335297 65.23648071]
[104.66042328 65.36408234]
[112.64790344 67.42091370]
[119.93089294 71.29241180]
[126.10372162 76.76292419]
[130.82257080 83.52774811]
[133.82460022 91.21008301]
[134.94258118 99.38201904]
[134.11425781 107.58837891]
[131.38575745 115.37205505]
[126.90906525 122.29951477]
[136.13555908 134.12625122]
[145.36206055 145.95298767]
[154.58856201 157.77972412]
[163.81506348 169.60646057]
[188.32507324 165.58036804]
[210.54295349 176.44761658]
[222.31068420 198.08216858]
[219.38610840 222.42977905]
[231.68870544 231.01153564]
[247.43385315 232.56092834]
[253.44577026 246.18832397]
[265.74835205 254.77008057]
[278.05093384 263.35183716]
[291.92501831 256.76351929]
[307.23315430 258.01092529]
[319.85757446 266.75848389]
[326.40237427 280.65313721]
[325.10699463 295.95730591]
[316.31991577 308.55422974]
[302.40481567 315.05541992]
[287.10476685 313.71209717]
[274.53543091 304.88555908]
[268.07791138 290.95016479]
[269.46917725 275.65441895]
[257.16659546 267.07266235]
[244.86402893 258.49090576]
[229.99882507 257.55535889]
[223.10694885 243.31411743]
[210.80436707 234.73237610]
[205.53520203 239.12232971]
[199.59184265 242.55778503]
[193.14556885 244.93717957]
[186.38258362 246.18939209]
[179.49864197 246.27592468]
[172.69337463 245.19204712]
[166.16452026 242.96699524]
[160.10214233 239.66320801]
[154.68316650 235.37455750]
[150.06614685 230.22366333]
[146.38664246 224.35847473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 110]
[7 109]
[8 108]
[9 107]
[10 106]
[12 24]
[13 23]
[14 22]
[26 95]
[27 94]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[37 86]
[38 85]
[39 84]
[42 55]
[43 54]
[44 53]
[45 52]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[64 72]
[65 71]
[114 135]
[115 134]
[117 132]
[118 131]
[119 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
