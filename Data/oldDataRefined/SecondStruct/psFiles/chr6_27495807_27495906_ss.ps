%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCGACAUCAGCACCGGCUCACCAAUUCCGCUACCUGAUCUUUAGGUAACCCCAGAGGGGCGCGUCCAAGCUUAGGACGGCUGAUGCCCCACCAAAAA\
) } def
/len { sequence length } bind def

/coor [
[143.17860413 302.04672241]
[140.39538574 287.30718994]
[137.61216736 272.56765747]
[125.20234680 264.41094971]
[122.16979980 249.50262451]
[130.80944824 236.54136658]
[126.39750671 230.44543457]
[128.17636108 221.30058289]
[125.85289001 206.48162842]
[123.52941895 191.66267395]
[121.20594788 176.84371948]
[118.88247681 162.02476501]
[116.55899811 147.20581055]
[114.23552704 132.38685608]
[94.99304199 133.35850525]
[79.03373718 124.28968811]
[70.87850952 108.86788940]
[55.89483261 109.56749725]
[40.91115570 110.26709747]
[33.93181992 123.94863892]
[21.03804016 132.29405212]
[5.69818306 133.05848694]
[-7.96140862 126.03630066]
[-16.26637459 113.11643219]
[-16.98271942 97.77425385]
[-9.91775036 84.13673401]
[3.02809167 75.87230682]
[18.37244034 75.20405579]
[31.98774147 82.31173706]
[40.21154785 95.28342438]
[55.19522476 94.58381653]
[70.17890167 93.88420868]
[73.25102234 85.46751404]
[78.64037323 78.30974579]
[71.07313538 65.35841370]
[63.50588989 52.40709305]
[55.93864822 39.45576477]
[48.37140274 26.50444031]
[40.80416107 13.55311489]
[33.23691940 0.60178947]
[20.02580643 -10.02378654]
[26.57893181 -25.66005516]
[43.41821289 -23.69157982]
[46.18824387 -6.96545362]
[53.75548553 5.98587227]
[61.32273102 18.93719673]
[68.88996887 31.88852310]
[76.45721436 44.83984756]
[84.02445984 57.79117584]
[91.59170532 70.74250031]
[98.10744476 69.61712646]
[104.71247864 69.92520142]
[110.61398315 56.13491058]
[116.51548767 42.34461212]
[122.41699219 28.55431747]
[123.08992004 11.61373043]
[139.55474854 7.57073689]
[147.99765015 22.27289963]
[136.20729065 34.45582199]
[130.30578613 48.24611664]
[124.40428162 62.03641129]
[118.50277710 75.82670593]
[126.79567719 82.34880066]
[132.70442200 91.73684692]
[135.24194336 103.09247589]
[150.02297974 100.53882599]
[164.80400085 97.98516846]
[179.58503723 95.43151855]
[194.36607361 92.87786102]
[202.07470703 79.27232361]
[216.74334717 73.85335541]
[231.44589233 79.17963409]
[239.24024963 92.73625946]
[236.44616699 108.12219238]
[224.38291931 118.07268524]
[208.74641418 117.88940430]
[196.91972351 107.65889740]
[182.13868713 110.21254730]
[167.35766602 112.76619720]
[152.57662964 115.31985474]
[137.79559326 117.87350464]
[129.05448914 130.06336975]
[131.37796021 144.88233948]
[133.70143127 159.70129395]
[136.02490234 174.52024841]
[138.34837341 189.33920288]
[140.67184448 204.15815735]
[142.99531555 218.97711182]
[145.54898071 233.75814819]
[158.32006836 242.67648315]
[160.93267822 257.66412354]
[152.35169983 269.78445435]
[155.13491821 284.52395630]
[157.91813660 299.26348877]
[171.64190674 306.75961304]
[177.28834534 321.34219360]
[172.19136047 336.12579346]
[158.75759888 344.13006592]
[143.33006287 341.57559204]
[133.19317627 329.66854858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[6 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[17 32]
[18 31]
[19 30]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[52 62]
[53 61]
[54 60]
[55 59]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
