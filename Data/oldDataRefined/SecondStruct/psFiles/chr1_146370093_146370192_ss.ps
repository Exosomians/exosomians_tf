%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUGGACAGAGACACCGCGUUAGCCAAUCGCGCAAGCCGACAAUUGGCGUUCCAACCACCAAGGUCGGGUGGGUCCCUGCGAACAAGCUCGAAAAUUU\
) } def
/len { sequence length } bind def

/coor [
[96.04919434 309.28021240]
[92.31770325 294.75173950]
[93.63890839 279.81002808]
[99.86189270 266.16180420]
[110.27584076 255.36598206]
[123.69122314 248.65573120]
[138.57568359 246.79751587]
[153.22903442 250.00360107]
[165.97845459 257.90859985]
[160.94570923 243.77807617]
[155.91294861 229.64756775]
[144.35394287 220.25402832]
[147.01255798 204.65780640]
[141.97979736 190.52728271]
[136.94705200 176.39677429]
[131.64411926 171.05783081]
[131.98498535 161.74780273]
[127.39412689 147.46760559]
[122.80326843 133.18740845]
[118.21240997 118.90721893]
[105.46736908 124.73223114]
[92.05533600 123.07729340]
[81.89009094 114.95049286]
[77.66297150 103.17065430]
[80.13898468 91.41226196]
[69.28785706 81.05596161]
[58.43672180 70.69966125]
[47.58559036 60.34336472]
[36.73446274 49.98706436]
[25.88332939 39.63076401]
[10.55817795 35.70008087]
[6.69314528 21.31568527]
[-4.31773233 11.12939167]
[-15.48569393 1.11557007]
[-31.51874542 0.54916513]
[-40.95621872 -12.42441082]
[-36.55849075 -27.85294151]
[-21.69912148 -33.90097809]
[-7.77694941 -25.92898369]
[-5.47187185 -10.05239201]
[5.69608974 -0.03856948]
[12.90448666 2.12117696]
[17.04944611 10.46455383]
[31.59845161 13.65448666]
[36.23963165 28.77963257]
[47.09076309 39.13593292]
[57.94189072 49.49223328]
[68.79302216 59.84853363]
[79.64415741 70.20483398]
[90.49528503 80.56113434]
[98.89919281 77.23496246]
[108.39348602 77.57414246]
[117.37433624 81.88718414]
[124.18236542 89.78296661]
[134.02130127 78.46062469]
[137.23292542 62.96881866]
[151.42140198 58.43709946]
[161.26033020 47.11475372]
[171.09925842 35.79241180]
[171.41625977 19.75248909]
[184.24150085 10.11439610]
[199.73655701 14.27165127]
[206.01495361 29.03516388]
[198.26043701 43.07963181]
[182.42161560 45.63134003]
[172.58267212 56.95368576]
[162.74374390 68.27603149]
[160.23585510 82.95798492]
[145.34364319 88.29955292]
[135.50471497 99.62189484]
[132.49259949 114.31636047]
[137.08346558 128.59655762]
[141.67431641 142.87675476]
[146.26518250 157.15695190]
[151.07757568 171.36401367]
[156.11032104 185.49453735]
[161.14306641 199.62504578]
[173.06205750 210.02929688]
[170.04347229 224.61480713]
[175.07621765 238.74533081]
[180.10896301 252.87583923]
[188.46675110 265.33166504]
[199.63471985 275.34548950]
[210.80267334 285.35931396]
[226.56793213 284.24929810]
[238.44560242 294.67504883]
[239.38888550 310.45117188]
[228.83811951 322.21795654]
[213.05291748 322.99435425]
[201.39834595 312.31979370]
[200.78884888 296.52725220]
[189.62089539 286.51342773]
[178.45292664 276.49963379]
[180.93473816 291.29287720]
[178.34701538 306.06799316]
[170.98533630 319.13723755]
[159.69058228 329.00784302]
[145.75291443 334.55233765]
[130.76432800 335.13735962]
[116.43688965 330.69610596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 81]
[10 80]
[11 79]
[13 77]
[14 76]
[15 75]
[17 74]
[18 73]
[19 72]
[20 71]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[32 43]
[33 41]
[34 40]
[54 70]
[55 69]
[57 67]
[58 66]
[59 65]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
