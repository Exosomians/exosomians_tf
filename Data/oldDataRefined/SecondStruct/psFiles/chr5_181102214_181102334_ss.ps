%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUUUAAACUUCGUCAAUUCACUUUUCAUCUUCCUUGACAAAGGCGGGCCAAAGCUUGGCCCCUGGAAAGCGCACACUCCGCUUGCACUAUUGGUGAUGUGAUGCCUUUGGCCGAACUA\
) } def
/len { sequence length } bind def

/coor [
[99.10454559 294.97708130]
[87.68018341 304.96948242]
[73.41625977 310.15649414]
[58.24187469 309.83660889]
[44.20922470 304.05307007]
[33.21611404 293.58810425]
[26.74927139 279.85693359]
[25.68328476 264.71667480]
[30.16231918 250.21484375]
[39.58062363 238.31274414]
[52.66444778 230.62002563]
[67.64431000 228.17704773]
[70.71259308 213.49421692]
[73.78087616 198.81138611]
[76.84915161 184.12855530]
[79.72814178 169.40742493]
[82.41735077 154.65045166]
[85.10655975 139.89349365]
[87.79577637 125.13652039]
[79.92288208 119.43442535]
[74.47985840 111.38025665]
[72.12545776 101.94876099]
[73.14462280 92.28141785]
[77.41400909 83.54823303]
[68.10486603 71.78643799]
[58.79572296 60.02463913]
[49.48658371 48.26284027]
[40.17744064 36.50104523]
[30.86829758 24.73924637]
[21.55915451 12.97744942]
[11.45983791 14.22227478]
[1.83396852 11.24246311]
[-5.64689493 4.64065790]
[-9.71879864 -4.35917377]
[-9.73857784 -14.13807392]
[-22.79285622 -21.52629471]
[-35.84713364 -28.91451645]
[-48.90141296 -36.30273819]
[-65.28638458 -35.62098694]
[-73.83958435 -49.61294174]
[-65.76221466 -63.88487625]
[-49.36358261 -63.75505066]
[-41.51319122 -49.35701370]
[-28.45891380 -41.96879578]
[-15.40463543 -34.58057404]
[-2.35035706 -27.19235229]
[-1.10475385 -28.22358513]
[0.20969565 -29.16549301]
[-3.61037111 -43.67090988]
[-7.43043804 -58.17632294]
[-11.25050449 -72.68173981]
[-15.07057190 -87.18715668]
[-18.89063835 -101.69257355]
[-22.71070480 -116.19799042]
[-32.59145355 -129.97503662]
[-22.08807564 -143.28350830]
[-6.39208078 -136.87475586]
[-8.20528889 -120.01805115]
[-4.38522243 -105.51264191]
[-0.56515568 -91.00722504]
[3.25491118 -76.50180817]
[7.07497787 -61.99639130]
[10.89504433 -47.49097443]
[14.71511173 -32.98555756]
[34.40665817 -20.31331062]
[33.32095337 3.66830730]
[42.63009644 15.43010426]
[51.93923569 27.19190216]
[61.24837875 38.95369720]
[70.55751801 50.71549606]
[79.86666107 62.47729111]
[89.17580414 74.23908997]
[111.51844025 74.54193115]
[126.49546051 91.12427521]
[141.47557068 90.35209656]
[156.45567322 89.57991791]
[171.42460632 88.61492920]
[186.37986755 87.45729828]
[201.33512878 86.29966736]
[211.59426880 74.57839966]
[226.77751160 73.61743927]
[237.88873291 83.47018433]
[252.84399414 82.31255341]
[267.79925537 81.15492249]
[282.75451660 79.99729156]
[289.97799683 66.36553192]
[303.43585205 58.82299423]
[318.83370972 59.77648544]
[331.25820923 68.92173767]
[336.74468994 83.34054565]
[333.54248047 98.43190765]
[322.67337036 109.38024139]
[307.60565186 112.69195557]
[293.14736938 107.31030273]
[283.91213989 94.95255280]
[268.95687866 96.11018372]
[254.00161743 97.26781464]
[239.04635620 98.42544556]
[229.58375549 109.87073517]
[214.43347168 111.25778198]
[202.49276733 101.25492859]
[187.53750610 102.41255951]
[172.58224487 103.57019043]
[166.07922363 107.26719666]
[157.22785950 104.56002808]
[142.24775696 105.33220673]
[127.26763916 106.10439301]
[122.41380310 116.68560028]
[113.66959381 124.37068176]
[102.55274200 127.82572937]
[99.86353302 142.58270264]
[97.17431641 157.33966064]
[94.48510742 172.09663391]
[96.03337097 181.22233582]
[91.53199005 187.19682312]
[88.46370697 201.87966919]
[85.39542389 216.56250000]
[82.32714844 231.24533081]
[95.07514954 239.48262024]
[103.98349762 251.77105713]
[107.84741211 266.44876099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 118]
[13 117]
[14 116]
[15 115]
[16 113]
[17 112]
[18 111]
[19 110]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[30 66]
[35 46]
[36 45]
[37 44]
[38 43]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[74 107]
[75 106]
[76 105]
[77 103]
[78 102]
[79 101]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
