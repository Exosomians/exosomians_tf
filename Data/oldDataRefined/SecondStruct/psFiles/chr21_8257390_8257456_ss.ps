%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCCACACCACCACCCCCUCCUCCUUCCGCCCAGGCCUUCCCCUUCCCACGGCCGCCCCUCUCUC\
) } def
/len { sequence length } bind def

/coor [
[134.75881958 211.69549561]
[120.19036102 215.22329712]
[105.29038239 216.85919189]
[90.30354309 216.57632446]
[75.47590637 214.37931824]
[61.05095291 210.30426025]
[47.26551819 204.41807556]
[34.34595871 196.81738281]
[22.50440598 187.62699890]
[11.93529129 176.99783325]
[2.81215668 165.10440063]
[-4.71520185 152.14196777]
[-10.52318954 138.32341003]
[-14.51644039 123.87559509]
[-16.62938881 109.03575134]
[-16.82734108 94.04754639]
[-15.10704517 79.15708160]
[-11.49674892 64.60884094]
[-6.05573177 50.64170837]
[1.12666786 37.48501587]
[9.93251801 25.35478592]
[20.21723175 14.45019531]
[31.81193924 4.95028925]
[44.52626038 -2.98894787]
[58.15143204 -9.23715782]
[72.46373749 -13.69174767]
[87.22817993 -16.27957535]
[102.20232391 -16.95815086]
[117.14030457 -15.71633053]
[131.79684448 -12.57450581]
[145.93130493 -7.58426380]
[159.31159973 -0.82754159]
[171.71801758 7.58471870]
[182.94686890 17.51439285]
[192.81378174 28.79843903]
[201.15672302 41.25157928]
[214.58416748 34.56550217]
[228.01161194 27.87942886]
[241.43907166 21.19335175]
[240.74044800 5.98046923]
[246.29589844 -8.19897938]
[257.14291382 -18.88831902]
[271.40219116 -24.23555756]
[286.60321045 -23.31425285]
[300.11233521 -16.28402519]
[309.58895874 -4.36290598]
[313.39126587 10.38369942]
[310.86047363 25.40085220]
[302.43502808 38.08674240]
[289.57470703 46.24345779]
[274.50762939 48.45780182]
[259.84426880 44.34612656]
[248.12513733 34.62080383]
[234.69769287 41.30687714]
[221.27024841 47.99295425]
[207.84278870 54.67902756]
[212.75286865 68.84153748]
[215.81159973 83.51564789]
[216.96875000 98.46043396]
[216.20533752 113.43048859]
[213.53388977 128.18002319]
[208.99827576 142.46685791]
[202.67295837 156.05641174]
[194.66181946 168.72554016]
[185.09635925 180.26623535]
[174.13366699 190.48899841]
[161.95373535 199.22596741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 56]
[37 55]
[38 54]
[39 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
