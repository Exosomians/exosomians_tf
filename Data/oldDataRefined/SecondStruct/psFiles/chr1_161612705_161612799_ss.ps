%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUGGCCCCUGCGCAACCACCACAUCACCACUCGUGUCGACGGAAAGUUCGUCAAUUGCGCCCAAGCUAAGGGCCCAUUGCUUUGCAAAAACA\
) } def
/len { sequence length } bind def

/coor [
[199.67417908 320.00463867]
[198.07948303 312.53567505]
[198.35003662 304.88467407]
[200.47857666 297.51147461]
[204.34591675 290.86145020]
[209.72752380 285.33856201]
[203.53691101 271.67562866]
[197.34631348 258.01266479]
[191.15570068 244.34970093]
[184.96510315 230.68673706]
[177.89414978 217.45791626]
[169.97312927 204.71989441]
[161.43663025 192.38586426]
[152.30520630 180.48556519]
[143.17378235 168.58526611]
[134.04235840 156.68496704]
[124.91094208 144.78466797]
[115.77951813 132.88436890]
[107.51004791 135.69276428]
[98.81001282 136.45487976]
[90.17820740 135.12701416]
[82.10948944 131.78527832]
[75.06644440 126.62128448]
[69.45286560 119.93106079]
[65.59056854 112.09818268]
[63.70099640 103.57170105]
[63.89246750 94.84045410]
[66.15401459 86.40500641]
[53.68196869 78.07145691]
[41.20992279 69.73789978]
[25.25794411 71.44490814]
[14.08036423 59.93659210]
[16.25166893 44.04115295]
[30.10621643 35.95220947]
[45.01598740 41.87490463]
[49.54347610 57.26585770]
[62.01552200 65.59941101]
[74.48756409 73.93296051]
[79.84478760 69.60029602]
[85.92120361 66.35237885]
[92.50000000 64.30511475]
[92.50000000 49.30511475]
[92.50000000 34.30511475]
[92.50000000 19.30511665]
[92.50000000 4.30511665]
[92.50000000 -10.69488335]
[86.45365906 -26.53401566]
[100.00000000 -36.72877121]
[113.54634094 -26.53401566]
[107.50000000 -10.69488335]
[107.50000000 4.30511665]
[107.50000000 19.30511665]
[107.50000000 34.30511475]
[107.50000000 49.30511475]
[107.50000000 64.30511475]
[128.52738953 77.27197266]
[136.46824646 100.66498566]
[127.67981720 123.75294495]
[136.81123352 135.65324402]
[145.94265747 147.55354309]
[155.07408142 159.45384216]
[164.20550537 171.35414124]
[173.33692932 183.25444031]
[178.53649902 185.38185120]
[181.93592834 189.00523376]
[183.26390076 193.12776184]
[182.71116638 196.79887390]
[190.63217163 209.53691101]
[194.96116638 211.61109924]
[197.98399353 214.71577454]
[199.53207397 218.26667786]
[199.66168213 221.68904114]
[198.62805176 224.49613953]
[204.81866455 238.15908813]
[211.00926208 251.82205200]
[217.19987488 265.48501587]
[223.39047241 279.14797974]
[246.83816528 284.38482666]
[259.56976318 304.48617554]
[254.38470459 327.47131348]
[264.27490234 338.74890137]
[274.16506958 350.02648926]
[284.05526733 361.30407715]
[299.04461670 369.22595215]
[295.58178711 385.82250977]
[278.67526245 387.08938599]
[272.77767944 371.19427490]
[262.88748169 359.91668701]
[252.99728394 348.63909912]
[243.10710144 337.36148071]
[236.07910156 340.00244141]
[228.60142517 340.85668945]
[221.12219238 339.86404419]
[214.09182739 337.07519531]
[207.93594360 332.64926147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 68]
[12 67]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[28 38]
[29 37]
[30 36]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
