%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGAUCUCCACUACAAAAACCAUUUGUCCGCCCCAUUCUAAACGGCUCAAGGAAAAUGAAAAAAAUUGGAAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[71.09110260 391.01953125]
[57.29499435 384.63708496]
[46.99518204 373.45751953]
[41.76232147 359.18569946]
[42.39437866 343.99789429]
[48.79497528 330.21020508]
[59.98806763 319.92510986]
[74.26678467 314.71099854]
[74.87077332 299.72317505]
[75.47476196 284.73535156]
[76.07875061 269.74749756]
[62.84664536 265.44689941]
[51.20630646 257.80184937]
[41.98564529 247.34791565]
[35.84262848 234.82073975]
[33.21833038 221.10429382]
[34.30526352 207.16842651]
[39.03327942 194.00035095]
[47.07405472 182.53472900]
[57.86388016 173.58724976]
[70.64316559 167.79669189]
[84.50993347 165.57923889]
[86.31798553 150.68861389]
[88.12603760 135.79797363]
[89.93408203 120.90734100]
[91.74213409 106.01670837]
[89.46665955 98.03058624]
[93.93455505 90.56739044]
[96.34072113 75.76163483]
[98.74688721 60.95587921]
[99.95388794 46.00452042]
[99.95388794 31.00452042]
[99.95388794 16.00452042]
[86.37200928 8.94823265]
[77.63459778 -3.61823606]
[75.74943542 -18.80720329]
[81.14972687 -33.12835693]
[92.59452057 -43.29080200]
[107.45388794 -46.95927811]
[122.31325531 -43.29080200]
[133.75805664 -33.12835693]
[139.15834045 -18.80720329]
[137.27317810 -3.61823606]
[128.53576660 8.94823265]
[114.95388794 16.00452042]
[114.95388794 31.00452042]
[114.95388794 46.00452042]
[117.15164948 48.15307999]
[118.50166321 51.42134857]
[118.52255249 55.43679428]
[116.89994812 59.64083862]
[113.55264282 63.36204910]
[111.14647675 78.16780090]
[108.74030304 92.97355652]
[106.63276672 107.82476044]
[104.82471466 122.71539307]
[103.01667023 137.60603333]
[101.20861816 152.49665833]
[99.40056610 167.38729858]
[114.18873596 174.01123047]
[126.25624847 184.79779053]
[134.47265625 198.72167969]
[138.07281494 214.46437073]
[136.72805786 230.53906250]
[130.57621765 245.43099976]
[120.20761108 257.74029541]
[106.60834503 266.31344604]
[91.06658936 270.35150146]
[90.46260071 285.33932495]
[89.85860443 300.32717896]
[89.25461578 315.31500244]
[103.06747437 321.66113281]
[113.39665985 332.81353760]
[118.66705322 347.07159424]
[118.07495880 362.26098633]
[111.71065521 376.06549072]
[100.54466248 386.37997437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[11 68]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[28 54]
[29 53]
[30 52]
[31 47]
[32 46]
[33 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
