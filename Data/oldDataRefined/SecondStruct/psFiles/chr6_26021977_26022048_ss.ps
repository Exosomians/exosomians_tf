%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAACCGCCAAUUCCAACGACUAAAGAGGUGUCGAACGUAAAGACUUGGUUUCCGGGAAAAGUCCCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[74.49346161 101.62937927]
[89.31584930 99.32623291]
[79.29489136 88.16467285]
[69.27393341 77.00311279]
[59.25297165 65.84155273]
[49.23201370 54.67999649]
[39.21105576 43.51843643]
[29.19009972 32.35687637]
[15.09214020 39.70666885]
[-0.39639682 43.24833679]
[-16.26658630 42.75662994]
[-31.48602486 38.26884842]
[-45.06597900 30.08207512]
[-56.12563324 18.73352432]
[-63.94921112 4.96527624]
[-68.03230286 -10.32423019]
[-68.11437225 -26.13883591]
[-64.19540405 -41.44955826]
[-56.53551102 -55.26154327]
[-67.47887421 -65.52033234]
[-78.42223358 -75.77912140]
[-89.36560059 -86.03791809]
[-104.30130005 -82.17418671]
[-118.94773865 -87.02035522]
[-128.63128662 -99.03003693]
[-130.26196289 -114.37097168]
[-123.31943512 -128.14793396]
[-110.01902008 -135.96475220]
[-94.60483551 -135.32708740]
[-81.99549866 -126.43842316]
[-76.21460724 -112.13511658]
[-79.10681152 -96.98127747]
[-68.16344452 -86.72248840]
[-57.22008133 -76.46369934]
[-46.27671814 -66.20490265]
[-34.43836975 -74.02574158]
[-21.12295914 -78.94898224]
[-7.02847385 -80.71268463]
[7.10537434 -79.22061920]
[20.53597641 -74.54753113]
[32.55683899 -66.93538666]
[42.53475189 -56.78087234]
[49.94314575 -44.61468506]
[54.38986206 -31.07384300]
[55.63793945 -16.86829567]
[53.61820984 -2.74372005]
[48.43315125 10.55762863]
[40.35165787 22.33591843]
[50.37261581 33.49747849]
[60.39357376 44.65903854]
[70.41453552 55.82059479]
[80.43549347 66.98215485]
[90.45645142 78.14371490]
[100.47740936 89.30527496]
[111.85198975 99.08375549]
[124.39087677 107.31640625]
[136.92976379 115.54904938]
[149.46864319 123.78169250]
[162.00752258 132.01434326]
[178.40179443 132.41410828]
[186.01409912 146.93942261]
[177.01353455 160.64788818]
[160.65913391 159.43740845]
[153.77487183 144.55322266]
[141.23599243 136.32057190]
[128.69711304 128.08793640]
[116.15823364 119.85528564]
[103.61934662 111.62264252]
[103.56655884 126.62255096]
[93.20409393 137.46778870]
[78.22212982 138.20309448]
[66.84747314 128.42468262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[19 35]
[20 34]
[21 33]
[22 32]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
