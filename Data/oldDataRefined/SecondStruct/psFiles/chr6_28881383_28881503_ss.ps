%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAACCGGCGCACCGGAUUACCUAUUCCGCAGACUAAGGCCUAGUCUUCUAACUCCCAAGCUCAGGGAAGCACCAGCAGCAAAACGCAAGAGACCAAGCUUUCUAUAAACAACUAAGUCU\
) } def
/len { sequence length } bind def

/coor [
[-46.62509155 380.61566162]
[-50.81737900 395.01791382]
[-55.00966263 409.42016602]
[-50.58271408 425.21047974]
[-62.23601913 436.74880981]
[-77.98165894 432.16546631]
[-81.62186432 416.17544556]
[-69.41191101 405.22787476]
[-65.21962738 390.82562256]
[-61.02733994 376.42340088]
[-66.66082764 371.47225952]
[-76.56330109 382.73907471]
[-87.82994843 372.83639526]
[-77.92781067 361.56997681]
[-83.56130219 356.61883545]
[-97.30605316 362.62564087]
[-111.05080414 368.63244629]
[-124.79556274 374.63925171]
[-127.99423981 389.82305908]
[-139.52938843 400.20187378]
[-154.96551514 401.78485107]
[-168.36709595 393.96328735]
[-174.58097839 379.74472046]
[-171.21777344 364.59649658]
[-159.57070923 354.34341431]
[-144.11831665 352.92800903]
[-130.80236816 360.89450073]
[-117.05761719 354.88769531]
[-103.31285858 348.88088989]
[-89.56810760 342.87408447]
[-68.99505615 324.41043091]
[-48.06208420 329.76852417]
[-37.31980133 319.29937744]
[-26.57751846 308.83020020]
[-15.83523560 298.36105347]
[-5.09295225 287.89187622]
[3.75504637 275.77938843]
[10.46145344 262.36206055]
[17.16786003 248.94476318]
[23.87426758 235.52745056]
[30.58067322 222.11015320]
[23.56377792 208.99903870]
[25.63726616 194.09385681]
[36.21353531 183.13958740]
[51.38742828 180.48269653]
[58.09383774 167.06539917]
[64.80024719 153.64808655]
[71.50665283 140.23078918]
[78.21305847 126.81347656]
[69.78818512 116.75946808]
[65.71833038 104.28958893]
[66.59015656 91.20137024]
[72.27799988 79.38146973]
[81.96194458 70.53371429]
[94.24607086 65.93350983]
[95.01824951 50.95339966]
[95.79043579 35.97328949]
[96.56261444 20.99317741]
[84.99434662 10.47133541]
[82.94708252 -5.03165579]
[91.38748932 -18.19575882]
[106.33025360 -22.80528450]
[120.71987152 -16.68375969]
[127.76199341 -2.72157717]
[124.13154602 12.48874474]
[111.54272461 21.76535797]
[110.77054596 36.74547195]
[109.99836731 51.72558212]
[109.22618103 66.70569611]
[112.60244751 67.83151245]
[115.84497833 69.29869843]
[125.45387268 57.78048706]
[127.72068024 41.53876495]
[143.01936340 35.63262939]
[155.61193848 46.13781357]
[152.54426575 62.24747849]
[136.97207642 67.38938904]
[127.36318207 78.90759277]
[127.89833832 79.62069702]
[128.41491699 80.34738159]
[142.30978394 74.69645691]
[149.84423828 60.53272247]
[165.64132690 57.73421860]
[177.58287048 68.44772339]
[176.50833130 84.45475006]
[163.24201965 93.47608185]
[147.96069336 88.59132385]
[134.06584167 94.24224091]
[130.42601013 116.36738586]
[113.97042847 131.59841919]
[91.63036346 133.51988220]
[84.92395782 146.93719482]
[78.21755219 160.35449219]
[71.51114655 173.77180481]
[64.80473328 187.18910217]
[71.78724670 200.92048645]
[69.37361908 215.95471191]
[58.69639969 226.55946350]
[43.99798203 228.81655884]
[37.29157257 242.23385620]
[30.58516693 255.65116882]
[23.87875938 269.06848145]
[17.17235184 282.48577881]
[30.60946846 275.81915283]
[45.58998871 275.05496216]
[59.63574600 280.31964111]
[70.42320251 290.74224854]
[76.16783142 304.59860229]
[75.91932678 319.59655762]
[69.71878052 333.25500488]
[58.59194565 343.31451416]
[44.37948227 348.11093140]
[29.43250084 346.85086060]
[16.22362900 339.74273682]
[6.93795586 327.96240234]
[3.11157703 313.45864868]
[5.37621021 298.63415527]
[-5.36607265 309.10333252]
[-16.10835648 319.57247925]
[-26.85063934 330.04165649]
[-37.59292221 340.51080322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[15 30]
[16 29]
[17 28]
[18 27]
[32 121]
[33 120]
[34 119]
[35 118]
[36 117]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[55 69]
[56 68]
[57 67]
[58 66]
[71 78]
[72 77]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
