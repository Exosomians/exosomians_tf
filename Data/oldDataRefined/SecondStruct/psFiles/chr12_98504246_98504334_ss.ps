%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGUCCUGGAGCACCGCGUUGCCAUCGCGCAGACUGAGGUCUAGUCUUCCGACGCACAAGCUUAGUGCAGCCCCAGUUUGAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[-32.47291183 266.14300537]
[-33.53246307 251.18048096]
[-27.71181870 237.35357666]
[-41.41500092 243.45463562]
[-55.11818314 249.55567932]
[-60.85758209 264.03659058]
[-74.84146881 270.02871704]
[-88.61144257 264.46783447]
[-102.31462860 270.56890869]
[-116.01780701 276.66995239]
[-129.61242676 283.00921631]
[-143.09432983 289.58477783]
[-156.57624817 296.16033936]
[-163.13786316 310.80017090]
[-178.71012878 314.65817261]
[-191.34732056 304.77484131]
[-191.35528564 288.73178101]
[-178.72789001 278.83587646]
[-163.15180969 282.67843628]
[-149.66990662 276.10287476]
[-136.18798828 269.52731323]
[-131.45384216 263.63729858]
[-122.11885834 262.96676636]
[-108.41567230 256.86572266]
[-94.71249390 250.76466370]
[-89.63112640 236.81062317]
[-75.82106018 230.42808533]
[-61.21923065 235.85250854]
[-47.51604843 229.75144958]
[-33.81286621 223.65040588]
[-21.52558708 215.04675293]
[-11.10571194 204.25665283]
[-0.68583620 193.46656799]
[9.73403931 182.67646790]
[20.15391541 171.88636780]
[30.57378960 161.09626770]
[40.99366760 150.30616760]
[44.26902390 135.77615356]
[59.42117691 131.22392273]
[69.84104919 120.43383026]
[80.26092529 109.64373016]
[75.93711853 98.83911133]
[77.66480255 86.27950287]
[85.98822784 75.37213898]
[99.55513000 69.54647064]
[104.19038391 55.28062057]
[108.82563782 41.01477432]
[104.88865662 25.09521866]
[116.89289093 13.92246246]
[132.48941040 18.99007797]
[135.63385010 35.08493805]
[123.09148407 45.65002823]
[118.45623016 59.91587830]
[113.82097626 74.18172455]
[124.79128265 84.41169739]
[138.69903564 78.79260254]
[152.60679626 73.17350006]
[166.51455688 67.55440521]
[171.17443848 52.62726212]
[184.36691284 44.23128891]
[199.86291504 46.33080292]
[210.34570312 57.93448257]
[210.86561584 73.56342316]
[201.17716980 85.83811188]
[185.85494995 88.96282196]
[172.13365173 81.46215820]
[158.22589111 87.08126068]
[144.31813049 92.70036316]
[130.41038513 98.31945801]
[114.87062836 121.58650970]
[91.05102539 120.06360626]
[80.63114929 130.85369873]
[70.21127319 141.64379883]
[66.19062042 156.94560242]
[51.78376389 160.72604370]
[41.36388779 171.51614380]
[30.94401169 182.30624390]
[20.52413559 193.09634399]
[10.10426044 203.88644409]
[-0.31561473 214.67652893]
[-10.73548985 225.46662903]
[4.24619865 224.72569275]
[17.94439888 230.83792114]
[27.39949226 242.48271179]
[30.56862259 257.14410400]
[26.76707268 271.65438843]
[16.81619835 282.87847900]
[2.86597633 288.39129639]
[-12.06952572 287.00177002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[8 25]
[9 24]
[10 23]
[11 21]
[12 20]
[13 19]
[31 81]
[32 80]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[39 73]
[40 72]
[41 71]
[45 54]
[46 53]
[47 52]
[55 69]
[56 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
