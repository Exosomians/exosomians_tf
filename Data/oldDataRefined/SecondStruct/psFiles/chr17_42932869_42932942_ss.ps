%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:45 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCCCAACAUAUGGUUGAAAUCACUGUGAUUACAAUUAUUCAAGACUACUGGGUGAUGGUAGCCUGGUCGG\
) } def
/len { sequence length } bind def

/coor [
[123.03689575 150.45050049]
[112.39499664 154.05845642]
[101.24427795 155.44731140]
[90.04248047 154.56005859]
[79.24943542 151.43312073]
[69.30820465 146.19487000]
[60.62686539 139.06031799]
[53.56179047 130.32234192]
[48.40299606 120.33964539]
[45.36225510 109.52200317]
[44.56438446 98.31348419]
[46.04214096 87.17420197]
[49.73485947 76.56141663]
[55.49095535 66.91077423]
[44.77386475 56.41582489]
[34.05677414 45.92087555]
[23.33968544 35.42592621]
[12.62259483 24.93097496]
[1.90550470 14.43602562]
[-8.81158543 3.94107533]
[-24.08493614 -0.18630978]
[-27.76471901 -14.61920547]
[-38.48181152 -25.11415482]
[-49.19889832 -35.60910416]
[-59.91598892 -46.10405350]
[-70.63307953 -56.59900665]
[-86.18010712 -63.36112213]
[-83.98610687 -80.17250824]
[-67.22435760 -82.71810150]
[-60.13813019 -67.31609344]
[-49.42103958 -56.82114410]
[-38.70394897 -46.32619476]
[-27.98686028 -35.83124542]
[-17.26976967 -25.33629608]
[-2.76297617 -21.95957947]
[1.68336463 -6.77601480]
[12.40045452 3.71893501]
[23.11754417 14.21388531]
[33.83463669 24.70883560]
[44.55172348 35.20378494]
[55.26881409 45.69873428]
[65.98590851 56.19368744]
[83.39627838 47.08243942]
[102.89097595 44.61413574]
[122.02275848 49.09862518]
[138.38993835 59.97295761]
[149.93789673 75.87203217]
[155.21694946 94.79998016]
[153.56442261 114.38070679]
[169.28460693 112.59575653]
[178.01908875 124.66050720]
[191.84704590 130.47323608]
[205.67498779 136.28598022]
[219.50292969 142.09870911]
[233.33088684 147.91143799]
[247.15882874 153.72418213]
[260.98678589 159.53691101]
[274.81146240 152.22856140]
[290.08856201 155.56689453]
[299.60467529 167.97566223]
[298.86660767 183.59582520]
[288.22283936 195.05200195]
[272.69903564 196.93495178]
[259.62506104 188.35560608]
[255.17404175 173.36485291]
[241.34609985 167.55212402]
[227.51814270 161.73939514]
[213.69020081 155.92665100]
[199.86225891 150.11392212]
[186.03430176 144.30119324]
[172.20635986 138.48844910]
[157.47523499 140.68917847]
[147.75167847 128.20866394]
[141.08569336 137.25476074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[49 73]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
