%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGGGUAGCAGGAUCUUAAUUAAGGGGAUUUUUAGAAACUUUAUCCCGGGCAUAAAUGGGAUAUCGUGGGGGAGAUGGGGGAGAUCUCGGGUGACAUUUCGAUUGAAUCGUAAUUGGAAAAUUCAAUUUCUAAUUCUCUUGGUUGUGGAGAAAUGUCACUUUACGGGGUUGAUUUAUGAUGGCAUACUG\
) } def
/len { sequence length } bind def

/coor [
[96.31005859 268.86993408]
[80.52500153 268.09042358]
[69.97657013 256.32156372]
[70.92295074 240.54562378]
[82.80268097 230.12220764]
[83.54254150 215.14045715]
[84.28240967 200.15872192]
[85.02227783 185.17698669]
[85.63890839 170.18965149]
[86.13226318 155.19776917]
[72.19289398 149.65756226]
[62.26026535 160.89779663]
[52.32763672 172.13803101]
[42.39501190 183.37826538]
[32.46238708 194.61851501]
[22.52976036 205.85874939]
[12.59713364 217.09898376]
[2.66450715 228.33921814]
[5.16384745 243.77577209]
[-2.88833404 257.18087769]
[-17.69004440 262.22500610]
[-32.25236511 256.52651978]
[-39.69942093 242.77606201]
[-36.51493073 227.46615601]
[-24.20252037 217.82568359]
[-8.57573032 218.40660095]
[1.35689592 207.16635132]
[11.28952217 195.92611694]
[21.22214890 184.68588257]
[31.15477371 173.44564819]
[41.08740234 162.20541382]
[51.02002716 150.96516418]
[60.95265198 139.72492981]
[56.38796234 133.47012329]
[52.79275131 126.72612762]
[50.21331024 119.63938904]
[48.67428589 112.35958099]
[48.17868805 105.03646088]
[48.70835876 97.81681824]
[33.97590256 94.99640656]
[20.99287605 103.60330963]
[6.09224844 100.53313446]
[-2.03310609 88.10276031]
[-16.76556206 85.28234863]
[-31.49801826 82.46193695]
[-46.23047638 79.64152527]
[-60.96293259 76.82111359]
[-75.69538879 74.00069427]
[-90.42784119 71.18028259]
[-101.65374756 81.89283752]
[-117.03681946 83.92768097]
[-130.66197205 76.50238800]
[-137.29003906 62.47211838]
[-134.37239075 47.23181152]
[-123.03094482 36.64166641]
[-107.62670135 34.77381897]
[-94.08290863 42.34648514]
[-87.60742950 56.44782639]
[-72.87497711 59.26824188]
[-58.14251709 62.08865356]
[-43.41006088 64.90906525]
[-28.67760468 67.72948456]
[-13.94514942 70.54989624]
[0.78730708 73.37030792]
[12.92925835 64.81994629]
[27.91024208 67.47038269]
[36.79631805 80.26394653]
[51.52877426 83.08436584]
[57.66800308 70.95520020]
[66.77552795 60.86264038]
[78.21273041 53.51437378]
[91.17765045 49.42565155]
[104.76118469 48.88317490]
[118.01087189 51.92498398]
[129.99763489 58.33778763]
[139.88099670 67.67192078]
[152.78836060 60.02992630]
[165.69572449 52.38793564]
[178.60307312 44.74594498]
[191.51043701 37.10395432]
[193.33276367 23.74848557]
[202.38626099 14.02672005]
[215.19729614 11.33955383]
[227.03663635 16.44977760]
[240.06794739 9.02111244]
[253.09924316 1.59244692]
[266.13055420 -5.83621836]
[279.16186523 -13.26488304]
[292.19317627 -20.69354820]
[305.22448730 -28.12221336]
[318.06854248 -35.87009811]
[330.71759033 -43.93247986]
[343.36660767 -51.99486542]
[356.01562500 -60.05724716]
[368.66467285 -68.11962891]
[381.31369019 -76.18201447]
[393.96273804 -84.24440002]
[406.61175537 -92.30678558]
[419.26080322 -100.36917114]
[431.90982056 -108.43154907]
[444.55883789 -116.49393463]
[442.83764648 -131.62004089]
[447.83419800 -145.93510437]
[458.50689697 -156.61750793]
[472.70098877 -161.58630371]
[487.58343506 -159.90649414]
[500.20843506 -151.96450806]
[512.85748291 -160.02688599]
[525.50646973 -168.08927917]
[538.15551758 -176.15165710]
[550.80456543 -184.21403503]
[559.49011230 -203.79219055]
[580.11981201 -203.88604736]
[592.35577393 -212.56251526]
[604.59173584 -221.23899841]
[616.82769775 -229.91548157]
[629.06365967 -238.59194946]
[641.29962158 -247.26843262]
[653.53558350 -255.94490051]
[665.77154541 -264.62136841]
[678.00750732 -273.29785156]
[680.41198730 -288.91815186]
[693.20666504 -298.19564819]
[708.80065918 -295.62615967]
[717.94238281 -282.73413086]
[715.20812988 -267.16815186]
[702.22015381 -258.16323853]
[686.68395996 -261.06188965]
[674.44799805 -252.38542175]
[662.21203613 -243.70893860]
[649.97607422 -235.03247070]
[637.74011230 -226.35598755]
[625.50415039 -217.67951965]
[613.26818848 -209.00303650]
[601.03222656 -200.32655334]
[588.79626465 -191.65008545]
[588.74987793 -182.74180603]
[584.53674316 -174.73667908]
[576.99383545 -169.49757385]
[567.74829102 -168.30914307]
[558.86694336 -171.56501770]
[546.21789551 -163.50262451]
[533.56890869 -155.44024658]
[520.91986084 -147.37785339]
[508.27081299 -139.31547546]
[510.13992310 -124.51777649]
[505.37921143 -110.31758881]
[494.88220215 -99.54848480]
[480.69253540 -94.38382721]
[465.60635376 -95.89833069]
[452.62124634 -103.84490204]
[439.97219849 -95.78252411]
[427.32318115 -87.72013855]
[414.67413330 -79.65775299]
[402.02511597 -71.59536743]
[389.37609863 -63.53298569]
[376.72705078 -55.47060013]
[364.07803345 -47.40821838]
[351.42898560 -39.34583282]
[338.77996826 -31.28344917]
[326.13092041 -23.22106552]
[325.01757812 -19.85858727]
[322.21054077 -16.87290764]
[317.90692139 -15.05856228]
[312.65313721 -15.09090805]
[299.62182617 -7.66224241]
[286.59051514 -0.23357746]
[273.55923462 7.19508791]
[260.52792358 14.62375259]
[247.49661255 22.05241776]
[234.46530151 29.48108292]
[230.72734070 45.87035751]
[216.00692749 54.66542053]
[199.15243530 50.01131439]
[186.24507141 57.65330505]
[173.33770752 65.29529572]
[160.43034363 72.93728638]
[147.52297974 80.57927704]
[152.21095276 99.98764801]
[149.14849854 120.05787659]
[138.54069519 137.76165771]
[121.74969482 150.33125305]
[101.12414551 155.69113159]
[100.63079071 170.68301392]
[103.47998047 179.38006592]
[100.00401306 185.91683960]
[99.26415253 200.89859009]
[98.52428436 215.88032532]
[97.78441620 230.86207581]
[108.57933807 242.40525818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 189]
[6 188]
[7 187]
[8 186]
[9 184]
[10 183]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[39 68]
[40 67]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[76 178]
[77 177]
[78 176]
[79 175]
[80 174]
[84 171]
[85 170]
[86 169]
[87 168]
[88 167]
[89 166]
[90 165]
[91 161]
[92 160]
[93 159]
[94 158]
[95 157]
[96 156]
[97 155]
[98 154]
[99 153]
[100 152]
[101 151]
[107 145]
[108 144]
[109 143]
[110 142]
[111 141]
[113 136]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
