%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUCUCUUCCUUUUCCCCCGAGCAGGCCCUAAACUUGGGCCCUGGAGAGCGUGGGUUUCGCUCUUAGUAUGGGGAUCUGGUUGCUCGGCGGCGAA\
) } def
/len { sequence length } bind def

/coor [
[48.51729965 293.15304565]
[49.25716400 308.29333496]
[44.77116394 322.77267456]
[35.60099792 334.84265137]
[22.85401154 343.04571533]
[8.06946754 346.39129639]
[-6.96733093 344.47546387]
[-20.44061661 337.52947998]
[-30.72342491 326.39218140]
[-36.57405472 312.40841675]
[-37.28601837 297.26678467]
[-32.77333832 282.79571533]
[-23.58094597 270.74267578]
[-10.81886578 262.56314087]
[3.97181964 259.24478149]
[19.00506210 261.18835449]
[25.87845993 247.85580444]
[32.75185776 234.52328491]
[39.41285706 221.08337402]
[45.85977936 207.53947449]
[52.09100723 193.89498901]
[58.10496521 180.15336609]
[64.11891937 166.41174316]
[70.13288116 152.67012024]
[76.14683533 138.92848206]
[82.16079712 125.18685913]
[88.17475128 111.44523621]
[84.87009430 96.81378937]
[73.53385162 86.99087524]
[62.19760895 77.16796112]
[50.86136627 67.34505463]
[39.52511978 57.52214050]
[24.11358452 60.17139435]
[10.63086891 52.24988174]
[5.44310045 37.49789429]
[10.99978542 22.88087463]
[24.67722702 15.30053043]
[40.01735306 18.33606911]
[49.77703094 30.55420113]
[49.34803391 46.18589783]
[60.68427658 56.00880814]
[72.02052307 65.83171844]
[83.35676575 75.65463257]
[94.69300842 85.47753906]
[102.09880066 84.29253387]
[107.45180511 70.28020477]
[116.91038513 81.92250824]
[124.31616974 80.73750305]
[132.02133179 67.86775208]
[139.72650146 54.99799728]
[147.43165588 42.12824631]
[155.13681030 29.25849533]
[162.84197998 16.38874435]
[170.54713440 3.51899290]
[165.26194763 -11.19836998]
[170.72186279 -25.85181046]
[184.34889221 -33.52241898]
[199.70875549 -30.58837128]
[209.54899597 -18.43503571]
[209.22335815 -2.80084252]
[198.88560486 8.93221760]
[183.41688538 11.22415352]
[175.71173096 24.09390450]
[168.00656128 36.96365738]
[160.30140686 49.83340836]
[152.59625244 62.70315933]
[144.89108276 75.57290649]
[137.18592834 88.44265747]
[152.17370605 87.83739471]
[166.62495422 91.85752106]
[179.14707947 100.11564636]
[188.53335571 111.81597137]
[193.87930298 125.83099365]
[194.66975403 140.81015015]
[190.82852173 155.30998230]
[182.72578430 167.93319702]
[171.14234924 177.46336365]
[157.19445801 182.98210144]
[142.22621155 183.95759583]
[127.68002319 180.29585266]
[114.95764160 172.34973145]
[105.28504944 160.88494873]
[99.59436035 147.00633240]
[98.43395233 132.05128479]
[101.91638184 117.45919037]
[95.90242004 131.20082092]
[89.88846588 144.94244385]
[83.87450409 158.68406677]
[77.86054993 172.42570496]
[71.84658813 186.16732788]
[65.83263397 199.90895081]
[65.22736359 209.21260071]
[59.40367889 213.98640442]
[52.95675659 227.53028870]
[52.05660629 236.81005859]
[46.08438873 241.39668274]
[39.21099091 254.72920227]
[32.33759308 268.06173706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 98]
[17 97]
[18 96]
[19 94]
[20 93]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
