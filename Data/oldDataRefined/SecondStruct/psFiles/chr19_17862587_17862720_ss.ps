%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACGUGGAUUUGGGUUCUUAGUGACAAAGAAUAUCGCCACCAAAUUUGUCUCCACGUUUGUCGUUCGCCUAGAACAGCGGAAACCCCCCGACACCGGCACGGGGAGUUUCACUUAAACCUCCAAGGUGUUGA\
) } def
/len { sequence length } bind def

/coor [
[60.23426437 119.59120178]
[74.01544952 113.66887665]
[86.35536957 105.14089966]
[71.43754578 106.70883179]
[56.51971436 108.27675629]
[41.60188675 109.84468079]
[26.68405724 111.41260529]
[11.76622963 112.98053741]
[-3.15159917 114.54846191]
[-18.06942749 116.11638641]
[-32.84154510 118.72111511]
[-47.39598083 122.34993744]
[-61.95041656 125.97876740]
[-76.50485229 129.60760498]
[-91.05928802 133.23641968]
[-105.27024078 138.03735352]
[-119.04347992 143.97854614]
[-132.81672668 149.91975403]
[-146.58996582 155.86094666]
[-160.36320496 161.80213928]
[-174.13644409 167.74333191]
[-178.44772339 182.77487183]
[-191.44126892 191.47554016]
[-206.98193359 189.73716736]
[-217.73187256 178.38055420]
[-218.61531067 162.76794434]
[-209.21511841 150.27114868]
[-193.96975708 146.79074097]
[-180.07763672 153.97009277]
[-166.30439758 148.02890015]
[-152.53115845 142.08770752]
[-138.75791931 136.14649963]
[-124.98467255 130.20530701]
[-111.21143341 124.26411438]
[-124.92014313 118.17549896]
[-131.68309021 104.78659821]
[-128.44827271 90.13954926]
[-116.67550659 80.84428406]
[-101.67761230 81.09555054]
[-90.22283173 90.77997589]
[-87.48048401 105.52716827]
[-94.68811798 118.68199158]
[-80.13368225 115.05316162]
[-65.57924652 111.42433167]
[-51.02480698 107.79550171]
[-36.47037125 104.16667938]
[-48.37657928 95.04296112]
[-50.55700684 80.20227814]
[-41.77827072 68.03947449]
[-27.00617790 65.43460846]
[-14.59677315 73.86115265]
[-11.56960487 88.55252075]
[-19.63735390 101.19856262]
[-4.71952581 99.63063812]
[10.19830227 98.06270599]
[25.11613083 96.49478149]
[40.03395844 94.92685699]
[54.95178604 93.35892487]
[69.86961365 91.79100037]
[84.78744507 90.22307587]
[95.69805145 79.92945099]
[98.13071442 65.12802887]
[100.56338501 50.32660294]
[95.16660309 35.45430374]
[104.86555481 24.15034103]
[107.29821777 9.34891796]
[109.73088837 -5.45250511]
[112.16355896 -20.25392914]
[104.01515961 -34.07359314]
[109.87374115 -49.00867462]
[125.24510193 -53.60224915]
[138.33764648 -44.33052444]
[139.10789490 -28.30597496]
[126.96498108 -17.82125854]
[124.53231049 -3.01983643]
[122.09964752 11.78158665]
[119.66697693 26.58300972]
[125.23776245 40.39661026]
[115.36480713 52.75926971]
[112.93214417 67.56069183]
[110.49947357 82.36211395]
[121.28956604 92.78199005]
[135.99707031 89.83424377]
[150.70458984 86.88649750]
[165.41209412 83.93874359]
[180.11959839 80.99099731]
[192.13017273 70.69260406]
[206.12977600 75.77791595]
[220.83728027 72.83016205]
[235.54478455 69.88241577]
[250.25228882 66.93466187]
[264.95980835 63.98691559]
[270.49148560 49.58539200]
[282.94461060 40.47916031]
[298.34539795 39.57398224]
[311.77951050 47.15869904]
[318.96020508 60.81305313]
[317.59609985 76.17999268]
[308.12252808 88.35597992]
[293.56243896 93.45570374]
[278.56188965 89.85186005]
[267.90756226 78.69441986]
[253.20004272 81.64217377]
[238.49253845 84.58992004]
[223.78503418 87.53767395]
[209.07751465 90.48542023]
[198.11892700 100.57296753]
[183.06735229 95.69850159]
[168.35984802 98.64625549]
[153.65232849 101.59400177]
[138.94482422 104.54174805]
[124.23731995 107.48950195]
[121.10727692 114.30513000]
[136.04235840 112.91099548]
[144.71716309 125.14813995]
[138.45678711 138.77926636]
[123.52168274 140.17308044]
[114.84720612 127.93640137]
[111.71716309 134.75202942]
[119.06551361 147.82879639]
[126.41385651 160.90556335]
[133.76220703 173.98233032]
[146.79273987 184.82859802]
[139.97755432 200.35244751]
[123.17375946 198.10102844]
[120.68543243 181.33067322]
[113.33708954 168.25390625]
[105.98874664 155.17713928]
[98.64039612 142.10037231]
[98.81983948 157.09930420]
[86.71676636 165.96020508]
[71.75421906 167.01951599]
[58.52346039 159.95219421]
[51.08435822 146.92684937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[61 81]
[62 80]
[63 79]
[65 77]
[66 76]
[67 75]
[68 74]
[82 112]
[83 111]
[84 110]
[85 109]
[86 108]
[88 106]
[89 105]
[90 104]
[91 103]
[92 102]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
