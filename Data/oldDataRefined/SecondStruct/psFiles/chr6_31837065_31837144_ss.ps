%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGAUUAACCCUUACUACUAAAGUGUCUGAUCUCAGAGGCUACGACCAGUACUACAGUUUUGAUUCAAGACUGAGUA\
) } def
/len { sequence length } bind def

/coor [
[98.00769806 149.71118164]
[74.13141632 142.49690247]
[64.48960114 153.98757935]
[54.84778595 165.47824097]
[45.20597076 176.96890259]
[35.56415939 188.45957947]
[35.52437592 204.50257874]
[22.86759567 214.36085510]
[7.30301666 210.47196960]
[0.77045131 195.81913757]
[8.28112507 181.64277649]
[24.07349205 178.81776428]
[33.71530533 167.32708740]
[43.35712051 155.83642578]
[52.99893188 144.34576416]
[62.64074707 132.85508728]
[57.20534897 125.37299347]
[53.24864960 117.01417542]
[50.90736389 108.06745911]
[50.26239014 98.84197998]
[51.33601379 89.65652466]
[54.09114456 80.82846069]
[58.43257523 72.66284180]
[64.21029663 65.44181061]
[71.22467804 59.41488266]
[64.49269104 46.01039124]
[57.76070023 32.60590363]
[44.65289307 23.74611282]
[45.85520554 8.90011311]
[39.12321854 -4.50437641]
[32.39123154 -17.90886497]
[25.65924454 -31.31335640]
[11.66808510 -39.86785889]
[12.35135937 -56.25276566]
[27.00617218 -63.61268997]
[40.55690765 -54.37636948]
[39.06373215 -38.04534149]
[45.79572296 -24.64085388]
[52.52770996 -11.23636436]
[59.25969696 2.16812563]
[71.88598633 10.06913757]
[71.16519165 25.87391663]
[77.89717865 39.27840424]
[84.62916565 52.68289566]
[96.42514038 50.37751389]
[108.42974854 50.96827316]
[119.94236755 54.42069626]
[130.29107666 60.53329086]
[138.87190247 68.94930267]
[145.18402100 79.17753601]
[148.85903931 90.62104797]
[149.68247986 102.61194611]
[147.60626221 114.45040131]
[161.13877869 120.92118835]
[174.67129517 127.39198303]
[188.20379639 133.86277771]
[197.56018066 134.79530334]
[202.12815857 140.85585022]
[215.39958191 147.84649658]
[228.67100525 154.83715820]
[241.94242859 161.82780457]
[255.21386719 168.81845093]
[268.48529053 175.80911255]
[281.75671387 182.79975891]
[295.02813721 189.79042053]
[311.85986328 191.82257080]
[314.56661987 208.55905151]
[299.23348999 215.79313660]
[288.03747559 203.06184387]
[274.76605225 196.07118225]
[261.49462891 189.08053589]
[248.22320557 182.08988953]
[234.95178223 175.09922791]
[221.68035889 168.10858154]
[208.40893555 161.11791992]
[195.13749695 154.12727356]
[181.73301697 147.39527893]
[168.20050049 140.92449951]
[154.66798401 134.45370483]
[141.13548279 127.98291016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[31 38]
[32 37]
[53 80]
[54 79]
[55 78]
[56 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
