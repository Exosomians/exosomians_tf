%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACACCCCCUUAACCGAGUUCGCCAUCUCGCGAACGAAUCGUACGUUCUCCAUCGUCCUAGCUGCGGACGUGAGAGGUCGAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[52.87887573 167.30642700]
[47.24496078 172.18917847]
[40.98788452 176.23751831]
[34.23022461 179.37307739]
[27.10422134 181.53535461]
[19.74920845 182.68292236]
[12.30887890 182.79414368]
[4.92848158 181.86766052]
[-2.24801373 179.92231750]
[-9.08072662 176.99685669]
[-15.43659210 173.14912415]
[-21.19194984 168.45491028]
[-26.23495674 163.00643921]
[-30.46774864 156.91061401]
[-33.80835342 150.28688049]
[-36.19226456 143.26489258]
[-37.57369995 135.98196411]
[-37.92646790 128.58042908]
[-37.24447250 121.20478821]
[-35.54181671 113.99894714]
[-49.10519028 107.59310150]
[-62.66856384 101.18725586]
[-76.23194122 94.78141022]
[-89.79531097 88.37556458]
[-103.35868835 81.96971893]
[-118.14974976 87.53749084]
[-132.51094055 80.93963623]
[-137.92202759 66.09053802]
[-131.17269897 51.79990768]
[-116.26721954 46.54611588]
[-102.04874420 53.44615173]
[-96.95284271 68.40634155]
[-83.38946533 74.81218719]
[-69.82609558 81.21803284]
[-56.26271820 87.62388611]
[-42.69934464 94.02973175]
[-29.13596916 100.43557739]
[-8.82172012 82.18595886]
[17.94518089 76.44428253]
[44.08662796 84.79798889]
[62.65548325 105.09805298]
[76.81996918 100.16171265]
[90.98445129 95.22537994]
[97.11261749 89.69315338]
[105.73680878 90.37441254]
[120.06668091 85.94104004]
[127.53682709 80.29558563]
[134.98104858 81.61372375]
[149.45845032 77.68883514]
[163.93585205 73.76394653]
[178.41325378 69.83905792]
[192.89067078 65.91416931]
[197.89366150 55.94139481]
[207.42976379 50.59014893]
[218.10534668 51.47941971]
[226.27793884 58.05607605]
[240.99613953 55.16218567]
[255.71434021 52.26829147]
[270.43255615 49.37440109]
[285.15072632 46.48051071]
[292.54351807 32.70079041]
[307.08328247 26.94494247]
[321.90475464 31.93070030]
[330.00970459 45.30393982]
[327.57125854 60.75023270]
[315.74072266 70.97630310]
[300.10415649 71.15372467]
[288.04464722 61.19871140]
[273.32644653 64.09260559]
[258.60824585 66.98649597]
[243.89002991 69.88038635]
[229.17182922 72.77427673]
[215.83821106 86.59211731]
[196.81555176 80.39157867]
[182.33815002 84.31646729]
[167.86074829 88.24135590]
[153.38334656 92.16624451]
[138.90592957 96.09113312]
[124.50005341 100.27091217]
[110.17018127 104.70428467]
[95.92078400 109.38986969]
[81.75630188 114.32620239]
[67.59181976 119.26253510]
[68.50227356 126.68209839]
[68.36979675 134.15330505]
[67.19776917 141.53033447]
[65.00984955 148.66928101]
[61.84950638 155.43106079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[41 83]
[42 82]
[43 81]
[45 80]
[46 79]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
