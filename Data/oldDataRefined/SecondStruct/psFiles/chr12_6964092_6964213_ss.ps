%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGCCGGCCGGGACCCAGGUAGAAGGUCAUGUCACAACCUACCAGAUUAACACUUCGAGGAUUGUGACAGACCAUUUCUACCGAGGGCCCACCCAAGAGAGCCGUCAUUGGAAGUCCCU\
) } def
/len { sequence length } bind def

/coor [
[153.31887817 292.30364990]
[162.36270142 279.83306885]
[157.83688354 265.53213501]
[153.31108093 251.23118591]
[142.09428406 241.43154907]
[145.30720520 225.94001770]
[140.78140259 211.63906860]
[136.07333374 197.39707947]
[130.46606445 183.48454285]
[124.15574646 169.87646484]
[110.12547302 165.00953674]
[103.53205872 151.29888916]
[108.73207855 136.61566162]
[102.42175293 123.00757599]
[96.11142731 109.39949799]
[90.06439972 103.91730499]
[89.81867981 95.36235046]
[83.85794830 81.59755707]
[77.89721680 67.83275604]
[62.87599564 57.27546310]
[65.42927551 39.96355820]
[59.11895370 26.35548019]
[52.80862808 12.74740124]
[46.49830627 -0.86067736]
[40.18798065 -14.46875572]
[33.87765884 -28.07683563]
[27.56733322 -41.68491364]
[20.91153526 -55.12739563]
[13.91460705 -68.39551544]
[6.91767740 -81.66363525]
[-0.07925192 -94.93175507]
[-6.93049717 -101.15207672]
[-7.08053637 -108.62927246]
[-13.73633385 -122.07176208]
[-20.39213181 -135.51423645]
[-27.04792976 -148.95672607]
[-33.70372772 -162.39921570]
[-40.35952377 -175.84169006]
[-47.01532364 -189.28417969]
[-53.67111969 -202.72665405]
[-60.49803925 -216.08305359]
[-67.49497223 -229.35116577]
[-74.49189758 -242.61929321]
[-89.72003937 -244.94519043]
[-100.53229523 -255.66659546]
[-102.92979431 -270.52310181]
[-96.20000458 -283.78387451]
[-103.19693756 -297.05200195]
[-118.51883698 -300.17825317]
[-128.20605469 -312.45388794]
[-127.68458557 -328.08279419]
[-117.20065308 -339.68542480]
[-101.70444489 -341.78338623]
[-88.51279449 -333.38610840]
[-83.85440063 -318.45849609]
[-89.92881775 -304.04891968]
[-82.93188477 -290.78082275]
[-68.18781281 -288.84426880]
[-57.28224182 -278.47445679]
[-54.54187775 -263.49636841]
[-61.22377777 -249.61621094]
[-54.22684860 -236.34809875]
[-47.22991943 -223.07998657]
[-41.25741196 -218.57884216]
[-40.22863770 -209.38246155]
[-33.57283783 -195.93997192]
[-26.91704178 -182.49749756]
[-20.26124382 -169.05500793]
[-13.60544586 -155.61251831]
[-6.94964838 -142.17004395]
[-0.29385063 -128.72755432]
[6.36194706 -115.28507233]
[13.18886662 -101.92868042]
[20.18579674 -88.66056061]
[27.18272591 -75.39244843]
[34.17965317 -62.12432480]
[38.50429153 -59.85822678]
[41.39104843 -54.79251862]
[41.17541122 -47.99523926]
[47.48573685 -34.38715744]
[53.79605865 -20.77907944]
[60.10638428 -7.17100143]
[66.41670990 6.43707752]
[72.72703552 20.04515648]
[79.03735352 33.65323639]
[90.34397888 38.15364075]
[95.68131256 49.53615570]
[91.66201019 61.87202454]
[97.62274170 75.63682556]
[103.58348083 89.40161896]
[109.71951294 103.08917236]
[116.02983093 116.69725037]
[122.34015656 130.30532837]
[136.90733337 135.82214355]
[143.11303711 149.71257019]
[137.76382446 163.56614685]
[144.07415771 177.17422485]
[147.95046997 179.67213440]
[150.50234985 182.97453308]
[151.63978577 186.54013062]
[151.46702576 189.85722351]
[150.25402832 192.50752258]
[156.07545471 199.70079041]
[155.08233643 207.11325073]
[159.60815430 221.41419983]
[171.14866638 232.23674011]
[167.61203003 246.70536804]
[172.13783264 261.00631714]
[176.66365051 275.30725098]
[191.23541260 280.30426025]
[199.96862793 292.77758789]
[199.68585205 307.82363892]
[190.70504761 319.67620850]
[195.23086548 333.97717285]
[208.74922180 342.61624146]
[210.28012085 358.58609009]
[198.64916992 369.63601685]
[182.77865601 367.28945923]
[174.84307861 353.34649658]
[180.92991638 338.50299072]
[176.40411377 324.20202637]
[162.23945618 319.67428589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[6 105]
[7 104]
[8 102]
[9 97]
[10 96]
[13 93]
[14 92]
[15 91]
[17 90]
[18 89]
[19 88]
[21 85]
[22 84]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 76]
[29 75]
[30 74]
[31 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 63]
[42 62]
[43 61]
[47 57]
[48 56]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
