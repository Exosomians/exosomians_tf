%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUAAAGUCUAUAAAUUGAAAGUGUAAGAUUGGUAUGUGGAAAGGUUCCAGAACAUUAUGAAAGUGUAACACUUAUA\
) } def
/len { sequence length } bind def

/coor [
[43.64298248 261.69836426]
[35.99842072 274.68518066]
[25.56451607 285.55856323]
[12.90395832 293.73211670]
[-1.30048609 298.76504517]
[-16.28278923 300.38595581]
[-31.23497200 298.50741577]
[-45.35068512 293.23074341]
[-57.86868286 284.84048462]
[-68.11389160 273.78912354]
[-75.53379059 260.67266846]
[-79.72824097 246.19842529]
[-80.47103882 231.14701843]
[-77.72212982 216.33012390]
[-71.62975311 202.54681396]
[-62.52246475 190.54039001]
[-50.89141464 180.95835876]
[-37.36384201 174.31745911]
[-22.66927719 170.97583008]
[-7.60017920 171.11367798]
[7.03079510 174.72357178]
[20.43461609 181.61082458]
[30.17633629 170.20474243]
[39.91805649 158.79864502]
[49.65977859 147.39256287]
[59.40149689 135.98646545]
[69.14321899 124.58038330]
[71.52542877 109.87751007]
[86.37141418 104.40875244]
[89.10798645 90.69734192]
[102.22249603 85.84952545]
[111.96421814 74.44343567]
[121.70593262 63.03734589]
[120.65203857 47.49620438]
[130.69401550 36.06758499]
[145.51661682 35.15863037]
[155.25833130 23.75253868]
[165.00004578 12.34644985]
[174.74177551 0.94036061]
[183.07533264 -11.53168392]
[189.88517761 -24.89678192]
[196.69503784 -38.26187897]
[203.50489807 -51.62697601]
[210.31475830 -64.99207306]
[212.11824036 -81.84982300]
[228.81643677 -84.78350830]
[236.25799561 -69.55001068]
[223.67985535 -58.18221664]
[216.86999512 -44.81711960]
[210.06013489 -31.45202255]
[203.25027466 -18.08692360]
[196.44042969 -4.72182608]
[211.32470703 -6.58145809]
[223.38220215 2.34135151]
[225.95443726 17.11916161]
[217.62091064 29.59122658]
[202.98365784 32.87010193]
[190.12580872 25.14509201]
[186.14785767 10.68208122]
[176.40614319 22.08817101]
[166.66441345 33.49425888]
[156.92269897 44.90034866]
[158.34370422 59.68264771]
[148.62669373 71.38881683]
[133.11203003 72.77906799]
[123.37030792 84.18515778]
[113.62858582 95.59124756]
[110.89201355 109.30265808]
[97.77750397 114.15047455]
[94.69850159 129.66918945]
[80.54930878 134.32209778]
[70.80758667 145.72819519]
[61.06586838 157.13427734]
[51.32414627 168.54037476]
[41.58242798 179.94645691]
[31.84070587 191.35255432]
[40.73998642 203.51394653]
[46.59422302 217.40007019]
[49.08769989 232.26208496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[29 69]
[31 67]
[32 66]
[33 65]
[36 62]
[37 61]
[38 60]
[39 59]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
