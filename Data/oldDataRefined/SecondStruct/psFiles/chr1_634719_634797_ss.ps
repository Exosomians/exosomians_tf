%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCGGGGGUUGUCCGUAGUGGGGCGAUUUAGGGGAUCUUCAGGGUGAGGAUUUGUGUAGGCAUAAUGAGCGUAGUCC\
) } def
/len { sequence length } bind def

/coor [
[60.57353210 137.54544067]
[63.03346252 122.74851990]
[73.09866333 111.62683868]
[87.57739258 107.70707703]
[72.62363434 108.88396454]
[63.52209473 118.26642609]
[50.86612320 118.80049133]
[41.61725235 110.74845886]
[26.62881470 111.33735657]
[11.64037991 111.92625427]
[-3.34805584 112.51515198]
[-18.33649063 113.10404968]
[-33.32492828 113.69293976]
[-48.31336212 114.28183746]
[-63.30179977 114.87073517]
[-78.29022980 115.45963287]
[-88.83280182 127.23374939]
[-104.61746216 128.02114868]
[-116.27945709 117.35469055]
[-116.89993286 101.56258392]
[-106.11077118 90.01401520]
[-90.31298828 89.56053925]
[-78.87912750 100.47119904]
[-63.89069366 99.88230133]
[-48.90225983 99.29340363]
[-33.91382217 98.70450592]
[-18.92538834 98.11560822]
[-3.93695307 97.52671051]
[11.05148220 96.93781281]
[26.03991890 96.34892273]
[41.02835464 95.76002502]
[55.17756271 85.57466888]
[71.44674683 93.93020630]
[86.40050507 92.75331879]
[98.53575897 83.93653870]
[104.27601624 70.07834625]
[110.01626587 56.22015381]
[115.75651550 42.36196136]
[121.49676514 28.50376892]
[127.23702240 14.64557552]
[132.97726440 0.78738230]
[138.71752930 -13.07081032]
[144.45777893 -26.92900276]
[144.93305969 -43.87628937]
[161.34960938 -48.11105347]
[169.96342468 -33.50836945]
[158.31596375 -21.18875313]
[152.57571411 -7.33055925]
[146.83546448 6.52763367]
[141.09521484 20.38582611]
[135.35496521 34.24401855]
[129.61471558 48.10221100]
[123.87445831 61.96040726]
[118.13420868 75.81859589]
[112.39395142 89.67678833]
[126.13055420 83.65136719]
[137.60375977 93.31396484]
[134.00248718 107.87523651]
[119.34683990 111.07556152]
[132.13644409 118.91304016]
[147.94575500 119.52648163]
[154.75480652 132.77359009]
[167.54440308 140.61106873]
[182.31549072 135.47795105]
[196.91184998 141.08869934]
[204.44151306 154.79409790]
[201.34921265 170.12289429]
[189.09503174 179.83726501]
[173.46502686 179.35041809]
[161.83921814 168.89219666]
[159.70692444 153.40068054]
[146.91732788 145.56320190]
[132.02281189 145.51034546]
[124.29895782 131.70263672]
[111.50936127 123.86516571]
[113.28534698 138.75965881]
[106.73174286 152.25225830]
[93.92668915 160.06446838]
[78.93066406 159.71902466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[59 75]
[60 74]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
