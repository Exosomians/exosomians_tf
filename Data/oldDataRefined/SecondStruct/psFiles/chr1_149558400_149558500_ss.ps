%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUUUUCGAGCUUGUUCGCAAGGACCCACCCGAGCUUGGUGGUUGGAAAUGCCAAUUGUUGGCUUGCGCGAUUGGUUAACGCGGUGUCUCUGUCCAUGA\
) } def
/len { sequence length } bind def

/coor [
[72.18492889 175.80833435]
[63.30360794 187.89642334]
[49.90578842 194.64167786]
[34.90592575 194.57676697]
[21.56698418 187.71582031]
[12.79061127 175.55131531]
[10.48595428 160.72941589]
[15.15434933 146.47438049]
[25.78259659 135.88571167]
[10.81104660 136.80912781]
[-4.16050291 137.73254395]
[-19.13205338 138.65596008]
[-34.10360336 139.57937622]
[-49.07515335 140.50277710]
[-64.04669952 141.42619324]
[-78.86918640 143.72706604]
[-93.41613770 147.38577271]
[-107.96308899 151.04447937]
[-122.51004791 154.70318604]
[-133.90011597 166.50143433]
[-149.74513245 162.27444458]
[-153.74511719 146.37060547]
[-141.78521729 135.15040588]
[-126.16875458 140.15623474]
[-111.62179565 136.49752808]
[-97.07484436 132.83882141]
[-82.52789307 129.18011475]
[-94.11463165 119.65397644]
[-95.85382080 104.75514221]
[-86.77275085 92.81637573]
[-71.95036316 90.51489258]
[-59.67665863 99.13789368]
[-56.81618881 113.86262512]
[-64.97011566 126.45464325]
[-49.99856567 125.53123474]
[-35.02701569 124.60781860]
[-20.05546570 123.68440247]
[-5.08391666 122.76099396]
[9.88763332 121.83757782]
[24.85918427 120.91416168]
[39.46075439 117.47990417]
[53.27433777 111.63311768]
[67.08792114 105.78633118]
[80.90150452 99.93954468]
[86.44029236 86.55043793]
[99.78377533 80.90263367]
[113.25170898 86.24687195]
[127.06529236 80.40008545]
[140.87887573 74.55329895]
[150.57164001 62.04886246]
[165.30815125 64.21327209]
[179.12173462 58.36648560]
[192.93530273 52.51969910]
[206.74888611 46.67291260]
[220.56246948 40.82612228]
[224.14570618 30.32500458]
[232.80169678 23.74363327]
[243.43577576 23.12442207]
[252.41513062 28.43126869]
[266.56243896 23.44594765]
[280.70977783 18.46062469]
[294.85708618 13.47530270]
[309.00439453 8.48998070]
[323.15170288 3.50465894]
[337.29904175 -1.48066318]
[351.44635010 -6.46598530]
[354.89932251 -21.50195694]
[365.94918823 -32.26784515]
[381.06994629 -35.32828903]
[395.43661499 -29.70671844]
[404.46487427 -17.19695091]
[405.27380371 -1.79081082]
[397.60528564 11.59566021]
[383.90634155 18.69088745]
[368.54821777 17.23080826]
[356.43167114 7.68133116]
[342.28436279 12.66665363]
[328.13702393 17.65197563]
[313.98971558 22.63729668]
[299.84240723 27.62261963]
[285.69509888 32.60794067]
[271.54776001 37.59326172]
[257.40045166 42.57858658]
[246.13801575 58.16861725]
[226.40927124 54.63970566]
[212.59568787 60.48649216]
[198.78210449 66.33328247]
[184.96852112 72.18006897]
[171.15493774 78.02685547]
[162.45021057 90.11309052]
[146.72566223 88.36688232]
[132.91207886 94.21366882]
[119.09849548 100.06045532]
[113.55970764 113.44956207]
[100.21622467 119.09736633]
[86.74829102 113.75312805]
[72.93470764 119.59991455]
[59.12112427 125.44670105]
[45.30754089 131.29348755]
[59.53902054 136.03321838]
[70.07292175 146.71202087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 27]
[17 26]
[18 25]
[19 24]
[41 99]
[42 98]
[43 97]
[44 96]
[47 93]
[48 92]
[49 91]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
