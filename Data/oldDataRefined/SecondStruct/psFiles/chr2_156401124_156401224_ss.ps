%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUUUGAUCUUCAGUUUUGAACGUAACCGGCCCUUAGCUUGGGCCCGGAGGGCGCACCGUCCGCUCUUAAGAUGGUGACUUGGUGGUUACGAAUAUCG\
) } def
/len { sequence length } bind def

/coor [
[127.09434509 258.60449219]
[119.20558929 271.36254883]
[108.12010956 281.46759033]
[94.68814850 288.14459229]
[79.93994141 290.88143921]
[65.00666046 289.46820068]
[51.03369904 284.01327515]
[39.09277344 274.93502808]
[30.09974670 262.92980957]
[24.74438667 248.91838074]
[23.43744850 233.97541809]
[26.27916908 219.24705505]
[33.04945755 205.86602783]
[19.42247772 212.13543701]
[5.79549837 218.40484619]
[-7.83148050 224.67424011]
[-16.85968781 238.36451721]
[-33.21162415 237.12103271]
[-40.06581497 222.22297668]
[-30.37126160 208.99618530]
[-14.10088539 211.04727173]
[-0.47390664 204.77786255]
[13.15307236 198.50845337]
[26.78005219 192.23904419]
[37.86518478 182.13362122]
[45.36518478 169.14323425]
[52.86518478 156.15284729]
[60.36518478 143.16247559]
[67.86518860 130.17208862]
[75.36518860 117.18170929]
[82.86518860 104.19132996]
[81.71132660 89.23577881]
[72.30747223 77.54956818]
[62.90361404 65.86335754]
[53.49975586 54.17715073]
[44.09590149 42.49094009]
[28.45894623 42.35078812]
[16.60408020 32.15293503]
[14.12880898 16.71250153]
[22.20187950 3.31998277]
[37.01143646 -1.70108032]
[51.56485748 4.02010393]
[58.99046326 17.78216743]
[55.78210831 33.08708572]
[65.18596649 44.77329254]
[74.58982086 56.45950317]
[83.99368286 68.14571381]
[93.39753723 79.83191681]
[108.25369263 77.75957489]
[114.10047913 63.94599152]
[119.94727325 50.13240814]
[125.79405975 36.31882477]
[124.04785156 20.59428024]
[136.13407898 11.88955498]
[141.98086548 -1.92402732]
[139.42971802 -18.12352371]
[152.35168457 -28.22079849]
[167.45375061 -21.82864380]
[169.20021057 -5.52275753]
[155.79444885 3.92276073]
[149.94766235 17.73634338]
[152.11207581 32.47284698]
[139.60763550 42.16561508]
[133.76084900 55.97919464]
[127.91406250 69.79277802]
[122.06727600 83.60636139]
[125.91685486 90.04303741]
[140.91506958 89.81201172]
[133.61601257 102.91638184]
[137.46559143 109.35305023]
[152.40159607 110.73707581]
[167.33761597 112.12110138]
[182.27362061 113.50512695]
[197.20964050 114.88915253]
[208.19566345 103.76076508]
[223.76940918 102.34908295]
[236.57739258 111.32067108]
[240.57209778 126.43940735]
[233.86735535 140.56669617]
[219.62892151 147.03205872]
[204.57974243 142.78276062]
[195.82560730 129.82516479]
[180.88960266 128.44114685]
[165.95358276 127.05711365]
[151.01757812 125.67308807]
[136.08155823 124.28906250]
[108.76069641 126.54122925]
[95.85556793 111.69132996]
[88.35556793 124.68170929]
[80.85556793 137.67208862]
[73.35556793 150.66247559]
[65.85556793 163.65284729]
[58.35556793 176.64323425]
[50.85556793 189.63362122]
[64.80783844 184.12597656]
[79.73567200 182.65637207]
[94.49411011 185.33752441]
[107.95117950 191.96377563]
[119.07472992 202.02690125]
[127.01158142 214.75508118]
[131.15298462 229.17204285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 24]
[14 23]
[15 22]
[16 21]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[49 66]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
