%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGUGAGUAGUUGUCUUCCGGUUCCGGAAUGCGGGGUCGUUCCCUAACUUGGGACUUAGGAGUCCGAUUUUCAGACUAUCGAGAUGGCUGACUCGAUGGGUCCGAGUGCUGUCGUUGGAA\
) } def
/len { sequence length } bind def

/coor [
[229.71487427 418.04064941]
[220.41983032 409.69732666]
[214.15940857 398.86068726]
[211.56463623 386.59246826]
[212.90649414 374.10003662]
[218.06777954 362.61779785]
[226.55313110 353.28503418]
[219.60818481 339.98962402]
[212.66323853 326.69424438]
[205.71827698 313.39883423]
[198.77333069 300.10342407]
[191.66052246 286.89706421]
[184.38099670 273.78186035]
[177.10147095 260.66665649]
[169.82192993 247.55146790]
[162.54240417 234.43627930]
[155.26287842 221.32107544]
[147.98335266 208.20587158]
[140.70381165 195.09066772]
[136.33375549 192.91813660]
[133.33985901 187.91833496]
[133.40699768 181.12165833]
[126.80108643 167.65458679]
[120.19517517 154.18751526]
[113.58926392 140.72045898]
[106.64431000 127.42504883]
[99.36478424 114.30985260]
[87.47590637 106.95143890]
[87.52001953 92.96967316]
[80.24048615 79.85447693]
[72.96096039 66.73928070]
[65.68142700 53.62407684]
[50.75288773 49.17701721]
[43.55723953 35.77264023]
[47.88883209 21.56796074]
[40.60930252 8.45276260]
[33.32977295 -4.66243696]
[26.05024529 -17.77763557]
[12.58791161 -26.08884239]
[13.17642403 -40.97181702]
[5.89689493 -54.08701706]
[-7.56543827 -62.39822388]
[-6.97692585 -77.28119659]
[-14.74949837 -90.11035156]
[-23.00388908 -102.63492584]
[-31.25827980 -115.15950012]
[-39.51266861 -127.68408203]
[-55.04195023 -130.61955261]
[-63.87796783 -143.72300720]
[-60.77846909 -159.22038269]
[-47.58233261 -167.91737366]
[-32.11859131 -164.65419006]
[-23.56161118 -151.36685181]
[-26.98809242 -135.93847656]
[-18.73370171 -123.41389465]
[-10.47931194 -110.88932037]
[-2.22492075 -98.36473846]
[1.25509715 -97.31664276]
[4.36983299 -94.46323395]
[6.24470282 -90.01031494]
[6.13827324 -84.56072998]
[19.07992554 -77.18760681]
[19.01209450 -61.36654663]
[26.29162407 -48.25134659]
[39.23327637 -40.87822723]
[39.16544342 -25.05716515]
[46.44497299 -11.94196606]
[53.72450256 1.17323291]
[61.00403214 14.28843212]
[75.35000610 18.12621307]
[82.91931915 31.32319069]
[78.79663086 46.34454727]
[86.07615662 59.45974731]
[93.35569000 72.57495117]
[100.63521576 85.69014740]
[112.52409363 93.04856110]
[112.47998047 107.03032684]
[119.75951385 120.14552307]
[125.37633514 123.97315216]
[127.76966858 129.28665161]
[127.05632782 134.11454773]
[133.66224670 147.58160400]
[140.26815796 161.04867554]
[146.87406921 174.51574707]
[153.81901550 187.81114197]
[161.09854126 200.92634583]
[168.37808228 214.04154968]
[175.65760803 227.15673828]
[182.93713379 240.27194214]
[190.21665955 253.38714600]
[197.49618530 266.50234985]
[204.77572632 279.61755371]
[211.75704956 285.68798828]
[212.06874084 293.15847778]
[219.01368713 306.45388794]
[225.95863342 319.74926758]
[232.90357971 333.04467773]
[239.84852600 346.34008789]
[257.63589478 345.21188354]
[274.10937500 351.87728882]
[286.03717041 364.97982788]
[291.10043335 381.90505981]
[288.34393311 399.30215454]
[278.35604858 413.74725342]
[286.29049683 426.47692871]
[294.22494507 439.20657349]
[302.15942383 451.93624878]
[310.09387207 464.66592407]
[325.52084351 464.77627563]
[338.42666626 473.22869873]
[344.69314575 487.32604980]
[342.32064819 502.56988525]
[332.06625366 514.09600830]
[317.20208740 518.22637939]
[302.47125244 513.64312744]
[292.57434082 501.80868530]
[290.66934204 486.49938965]
[297.36422729 472.60037231]
[289.42974854 459.87069702]
[281.49530029 447.14105225]
[273.56082153 434.41137695]
[265.62637329 421.68173218]
[253.49530029 424.32849121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 98]
[8 97]
[9 96]
[10 95]
[11 94]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[22 84]
[23 83]
[24 82]
[25 81]
[26 78]
[27 77]
[29 75]
[30 74]
[31 73]
[32 72]
[35 69]
[36 68]
[37 67]
[38 66]
[40 64]
[41 63]
[43 61]
[44 57]
[45 56]
[46 55]
[47 54]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
