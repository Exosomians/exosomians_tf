%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGUGACCCAACCCGUUCCACGCCCCGAUCCCGAUUGUCGUCAGAAUGACUUCCAAAGGACCUUUGGUGCGUGUACGACAACGGUGAUUGGAGUUGGA\
) } def
/len { sequence length } bind def

/coor [
[47.50818634 201.34365845]
[39.87256622 214.25479126]
[39.50752640 230.07177734]
[26.36899567 237.08807373]
[18.73337555 249.99920654]
[22.90600586 265.24270630]
[15.00524235 278.93041992]
[-0.28153449 282.94165039]
[-13.88494968 274.89663696]
[-17.73433876 259.56829834]
[-9.54592800 246.05068970]
[5.82224512 242.36358643]
[13.45786572 229.45245361]
[13.27675533 214.55894470]
[26.96143341 206.61917114]
[34.59705353 193.70803833]
[34.41594315 178.81452942]
[48.10062408 170.87474060]
[55.73624420 157.96362305]
[63.37186432 145.05249023]
[71.00748444 132.14135742]
[71.71553802 124.64714813]
[79.09117889 118.94997406]
[87.12857819 106.28505707]
[87.90589142 92.32484436]
[100.20650482 85.67754364]
[108.24390411 73.01262665]
[116.28130341 60.34770584]
[124.31871033 47.68278885]
[132.35610962 35.01786804]
[140.39350891 22.35294914]
[148.23098755 9.56334686]
[155.86660767 -3.34778357]
[163.50222778 -16.25891304]
[165.22998047 -25.41711807]
[171.58592224 -29.45029640]
[179.62332153 -42.11521530]
[187.66072083 -54.78013611]
[195.69813538 -67.44505310]
[203.73553467 -80.10997009]
[211.77293396 -92.77489471]
[219.81033325 -105.43981171]
[214.94183350 -116.52056122]
[216.10144043 -128.44639587]
[222.87524414 -138.18293762]
[233.43606567 -143.31100464]
[245.03492737 -142.62731934]
[253.85169983 -154.76257324]
[262.66848755 -166.89782715]
[258.50534058 -178.26240540]
[260.41149902 -190.09190369]
[267.78329468 -199.38389587]
[278.64526367 -203.83872986]
[290.17831421 -202.42810059]
[299.73968506 -213.98579407]
[309.30102539 -225.54350281]
[318.86239624 -237.10119629]
[328.42376709 -248.65888977]
[337.98510742 -260.21658325]
[343.42257690 -276.27493286]
[360.35858154 -275.49536133]
[364.29785156 -259.00540161]
[349.54281616 -250.65522766]
[339.98144531 -239.09753418]
[330.42010498 -227.53984070]
[320.85873413 -215.98213196]
[311.29736328 -204.42443848]
[301.73602295 -192.86674500]
[304.65203857 -174.92941284]
[293.48611450 -160.19511414]
[274.80374146 -158.08105469]
[265.98696899 -145.94580078]
[257.17016602 -133.81054688]
[261.20672607 -116.09170532]
[250.98802185 -100.68537903]
[232.47525024 -97.40240479]
[224.43785095 -84.73748779]
[216.40045166 -72.07257080]
[208.36305237 -59.40764999]
[200.32565308 -46.74273300]
[192.28823853 -34.07781219]
[184.25083923 -21.41289520]
[176.41336060 -8.62329292]
[168.77774048 4.28783751]
[161.14212036 17.19896889]
[160.43406677 24.69318008]
[153.05842590 30.39035034]
[145.02102661 43.05527115]
[136.98362732 55.72018814]
[128.94622803 68.38510895]
[120.90882111 81.05002594]
[112.87142181 93.71494293]
[112.09410858 107.67515564]
[99.79349518 114.32245636]
[91.75609589 126.98737335]
[83.91861725 139.77697754]
[76.28299713 152.68811035]
[68.64737701 165.59924316]
[61.01175308 178.51037598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[4 13]
[5 12]
[18 99]
[19 98]
[20 97]
[21 96]
[23 95]
[24 94]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 85]
[33 84]
[34 83]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[41 77]
[42 76]
[47 73]
[48 72]
[49 71]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
