%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUAUGCCGACUACGAGCGAAAAAGAGGAUACCGCACGUCCGGUGUACAAUGAAGAAUAAGGGGUCCGGA\
) } def
/len { sequence length } bind def

/coor [
[89.06970215 174.76747131]
[82.73043060 188.36209106]
[76.39115143 201.95671082]
[75.17709351 218.86712646]
[58.59144974 222.38179016]
[50.62278366 207.41726685]
[62.79653549 195.61743164]
[69.13581085 182.02282715]
[75.47508240 168.42820740]
[80.29667664 154.22425842]
[83.54327393 139.57980347]
[86.78986359 124.93537140]
[90.03646088 110.29093170]
[86.01558685 96.89973450]
[95.31909943 86.46247864]
[81.55498505 80.38456726]
[69.24510193 71.74082184]
[58.86149979 60.86498642]
[50.80189514 48.17635345]
[45.37446976 34.16358948]
[42.78607178 19.36594200]
[43.13433838 4.35245705]
[46.40401459 -10.29988384]
[52.46760178 -24.02834511]
[61.09034729 -36.30604935]
[71.93930817 -46.66219330]
[84.59622955 -54.70010757]
[98.57365417 -60.11244965]
[113.33369446 -62.69294739]
[128.30876160 -62.34426880]
[131.55535889 -76.98870850]
[134.80195618 -91.63314819]
[138.04853821 -106.27758789]
[141.29513550 -120.92202759]
[144.54173279 -135.56646729]
[135.83978271 -148.75932312]
[139.09713745 -164.22428894]
[152.38125610 -172.78628540]
[167.81092834 -169.36560059]
[176.23197937 -155.99169922]
[172.64836121 -140.59906006]
[159.18617249 -132.31987000]
[155.93957520 -117.67543793]
[152.69297791 -103.03099060]
[149.44639587 -88.38655090]
[146.19979858 -73.74211121]
[142.95320129 -59.09767532]
[156.67257690 -53.08494949]
[168.95915222 -44.50835800]
[179.33964539 -33.69599533]
[187.41374207 -21.06212616]
[192.86955261 -7.09130239]
[195.49562073 7.68020439]
[195.18920898 22.68499947]
[191.96018982 37.34635544]
[185.93086243 51.10037613]
[177.33120728 63.41769791]
[166.49024963 73.82384491]
[153.82331848 81.91751862]
[139.81623840 87.38607025]
[125.00669861 90.01757812]
[109.96353912 89.70906830]
[113.98441315 103.10026550]
[104.68090057 113.53752136]
[101.43430328 128.18196106]
[98.18771362 142.82640076]
[94.94111633 157.47084045]
[96.67336273 161.71774292]
[96.95275879 165.88960266]
[95.97804260 169.54338074]
[94.07030487 172.34521484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[10 67]
[11 66]
[12 65]
[13 64]
[15 62]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
