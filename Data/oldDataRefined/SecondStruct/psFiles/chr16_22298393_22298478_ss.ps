%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:33 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUGUUUGGAAGGGUCUCCAAUGCAAAUAAUCGCAGGACAGGAAUGAGGAAGGGGCGUCCCCAGACCUCCAGCCAUGAAUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[52.48753357 138.65638733]
[45.27408981 127.51045227]
[31.14807892 132.55583191]
[17.02206993 137.60121155]
[2.89605951 142.64659119]
[-11.22995090 147.69197083]
[-25.35596085 152.73735046]
[-39.48197174 157.78273010]
[-53.60797882 162.82809448]
[-64.00156403 174.75639343]
[-78.58977509 171.75083923]
[-85.40974426 185.75532532]
[-99.80739594 190.67082214]
[-113.11651611 184.08273315]
[-127.24252319 189.12811279]
[-140.12503052 200.14978027]
[-154.28221130 190.82182312]
[-149.23788452 174.63568115]
[-132.28790283 175.00209045]
[-118.16188812 169.95671082]
[-112.03797913 156.42773438]
[-97.78407288 151.10977173]
[-83.63515472 157.62481689]
[-74.25196075 146.05741882]
[-58.65335846 148.70208740]
[-44.52734756 143.65670776]
[-30.40133858 138.61132812]
[-16.27532959 133.56596375]
[-2.14931893 128.52058411]
[11.97669125 123.47519684]
[26.10270119 118.42982483]
[40.22871017 113.38444519]
[38.84065247 96.64076233]
[42.05415726 80.14982605]
[49.62744141 65.15239716]
[60.99069977 52.77685928]
[75.28897858 43.95434189]
[91.44648743 39.34863663]
[108.24755096 39.30627441]
[124.42807770 43.83044052]
[138.77066040 52.58074188]
[150.19618225 64.89881897]
[163.44886780 57.87269211]
[165.74124146 42.63946152]
[176.43881226 31.80363083]
[191.29000854 29.37342644]
[204.56556702 36.07399750]
[217.81825256 29.04787064]
[231.07092285 22.02174377]
[244.32360840 14.99561787]
[249.05828857 -1.72862649]
[264.07403564 -9.79855061]
[279.99655151 -4.72187662]
[292.98693848 -12.22187710]
[305.97732544 -19.72187614]
[318.96768188 -27.22187614]
[329.66162109 -40.37772751]
[345.26370239 -33.74362946]
[343.20794678 -16.91477776]
[326.46768188 -14.23149586]
[313.47732544 -6.73149586]
[300.48693848 0.76850432]
[287.49655151 8.26850414]
[285.88742065 21.18795204]
[276.94427490 30.91747475]
[263.82232666 33.68825150]
[251.34973145 28.24829865]
[238.09704590 35.27442551]
[224.84437561 42.30055237]
[211.59169006 49.32667923]
[209.68760681 64.07498169]
[199.34185791 75.00335693]
[184.36981201 77.77669525]
[170.47499084 71.12537384]
[157.22232056 78.15149689]
[160.58595276 90.99484253]
[161.10311890 104.26126862]
[158.74954224 117.32749176]
[153.63577271 129.57963562]
[146.00207520 140.44206238]
[136.20709229 149.40441895]
[124.71102142 156.04565430]
[112.05397797 160.05374146]
[98.83060455 161.24037170]
[85.66217804 159.54978943]
[73.16737366 155.06141663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[11 23]
[14 20]
[15 19]
[42 75]
[43 74]
[47 70]
[48 69]
[49 68]
[50 67]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
