%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUGGUCCACGGUGUAGCGCGAGACACUACCAUAGGGGAGUUACUAACUUAAAACCAGAGGCGCGCGAGGGUCGUCGUUCCUAACAGUCACUUUACUG\
) } def
/len { sequence length } bind def

/coor [
[124.47573090 245.34838867]
[121.23545837 230.70254517]
[117.99519348 216.05670166]
[114.75492859 201.41087341]
[111.51465607 186.76502991]
[101.21072388 176.00964355]
[105.78425598 160.86390686]
[102.54399109 146.21806335]
[91.21434784 145.44660950]
[80.41349030 141.93984985]
[70.79148865 135.90882874]
[62.92745972 127.71657562]
[57.29472733 117.85614014]
[42.70104980 121.32378387]
[28.10737228 124.79142761]
[13.51369476 128.25907898]
[-1.07998335 131.72671509]
[-6.92701960 146.10002136]
[-20.12352753 154.26284790]
[-35.59518051 153.07643127]
[-47.39281082 142.99697876]
[-50.97999191 127.90023041]
[-44.97737885 113.59120178]
[-31.69309425 105.57200623]
[-16.23522377 106.92619324]
[-4.54762840 117.13304138]
[10.04605007 113.66539001]
[24.63972855 110.19774628]
[39.23340607 106.73010254]
[53.82708359 103.26245880]
[52.54955673 89.00971985]
[55.77931213 74.34245300]
[43.72686005 65.41281891]
[27.38154602 64.08511353]
[20.60418510 49.15195084]
[30.36674309 35.97528458]
[46.62633896 38.11014557]
[52.65649033 53.36036682]
[64.70894623 62.28999710]
[77.03327942 53.73951340]
[72.88875580 39.32345200]
[68.74423218 24.90738678]
[64.59970093 10.49132252]
[60.45517731 -3.92474151]
[50.26783752 -17.47665787]
[60.47000122 -31.01741600]
[76.30582428 -24.96241188]
[74.87123871 -8.06926727]
[79.01576996 6.34679651]
[83.16029358 20.76286125]
[87.30481720 35.17892456]
[91.44934845 49.59498978]
[99.22184753 49.41831207]
[106.84901428 50.42061615]
[114.15496063 52.55370712]
[120.97504425 55.74360657]
[127.15957642 59.89285660]
[132.57705688 64.88329315]
[137.11701965 70.57933807]
[140.69213867 76.83157349]
[143.23994446 83.48062897]
[157.93440247 80.46852112]
[172.62886047 77.45641327]
[184.59423828 67.10554504]
[198.61596680 72.12951660]
[213.31042480 69.11740875]
[228.00488281 66.10530853]
[242.65072632 62.86503983]
[257.24441528 59.39739227]
[271.83807373 55.92974854]
[285.85040283 46.38555908]
[298.90057373 57.20816803]
[292.11358643 72.74434662]
[275.30572510 70.52342987]
[260.71206665 73.99107361]
[246.11837769 77.45871735]
[240.23486328 82.15016937]
[231.01699829 80.79976654]
[216.32252502 83.81187439]
[201.62806702 86.82398224]
[190.71374512 96.95940399]
[175.64096069 92.15087891]
[160.94650269 95.16298676]
[146.25204468 98.17508698]
[138.83348083 125.19013977]
[117.18983459 142.97779846]
[120.43009949 157.62364197]
[130.96580505 169.42658997]
[126.16049957 183.52476501]
[129.40077209 198.17059326]
[132.64103699 212.81643677]
[135.88130188 227.46228027]
[139.12156677 242.10812378]
[153.40220642 248.17797852]
[161.35881042 261.49984741]
[159.93193054 276.95117188]
[149.67021179 288.59063721]
[134.51950073 291.94259644]
[120.30556488 285.71817017]
[112.49393463 272.31079102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[7 87]
[8 86]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[32 39]
[33 38]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[61 84]
[62 83]
[63 82]
[65 80]
[66 79]
[67 78]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
