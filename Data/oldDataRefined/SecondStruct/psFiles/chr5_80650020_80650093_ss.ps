%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGAAGUGCCCGUCCAGUUAAAGUGACCAACUUUCAUUCUCUGUCGACUUGGGAGCACCUCGGUAAGUAUGU\
) } def
/len { sequence length } bind def

/coor [
[118.32756042 251.62438965]
[124.39209747 237.68560791]
[135.33261108 227.13223267]
[129.81074524 213.18559265]
[124.28887177 199.23893738]
[120.06910706 196.46601868]
[117.72170258 190.87765503]
[118.94272614 183.88690186]
[114.60725403 169.52711487]
[110.27177429 155.16732788]
[105.93629456 140.80752563]
[101.30104065 126.54167938]
[96.36804199 112.37603760]
[90.55530548 98.54808807]
[83.88578033 85.11241150]
[77.21625519 71.67673492]
[69.98994446 58.53213501]
[62.21954346 45.70167160]
[54.44913864 32.87120819]
[42.22488785 32.28413773]
[31.98118019 25.81284332]
[26.31572723 15.24033546]
[26.59494209 3.37058711]
[32.62629700 -6.71479750]
[25.95676994 -20.15047455]
[19.28724289 -33.58615112]
[12.61771488 -47.02182770]
[5.94818687 -60.45750427]
[-9.29246140 -63.95845413]
[-18.67580414 -76.46792603]
[-17.77131462 -92.07933044]
[-7.00606537 -103.42143250]
[8.53692341 -105.13884735]
[21.51872635 -96.42066193]
[25.80973434 -81.38333130]
[19.38386345 -67.12702942]
[26.05339050 -53.69135284]
[32.72291946 -40.25567627]
[39.39244461 -26.82000160]
[46.06197357 -13.38432503]
[63.56888962 -8.84856319]
[72.61437988 7.17014456]
[67.27960205 25.10080147]
[75.05001068 37.93126678]
[82.82041168 50.76173019]
[87.44351959 52.79209518]
[90.69001007 57.91072083]
[90.65193176 65.00720978]
[97.32145691 78.44288635]
[103.99098206 91.87856293]
[107.77350616 93.69137573]
[110.63386536 97.29093170]
[111.73677826 102.17021942]
[110.53369141 107.44303894]
[115.46669006 121.60868073]
[121.41138458 128.93885803]
[120.29608917 136.47204590]
[124.63156891 150.83184814]
[128.96704102 165.19163513]
[133.30252075 179.55142212]
[138.23551941 193.71707153]
[143.75738525 207.66372681]
[149.27925110 221.61036682]
[164.47882080 221.81414795]
[178.44143677 227.82362366]
[189.03790283 238.72241211]
[194.65232849 252.84851074]
[194.42855835 268.04779053]
[188.40071106 282.00250244]
[177.48800659 292.58459473]
[163.35452271 298.18045044]
[148.15554810 297.93667603]
[134.20878601 291.89047241]
[123.64104462 280.96386719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 55]
[13 54]
[14 50]
[15 49]
[16 48]
[17 45]
[18 44]
[19 43]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
