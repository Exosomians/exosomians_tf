%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAACACCGUCAUGAAUCACAAGUUGUCUUUUGUGAGGUAGACGAUUUGUUAUAGAGCUGACGUUUCGAAGAGAAUGACAACCGC\
) } def
/len { sequence length } bind def

/coor [
[160.28614807 256.30178833]
[170.28793335 244.95191956]
[162.63388062 232.05171204]
[154.97982788 219.15150452]
[147.32577515 206.25128174]
[139.67173767 193.35107422]
[129.31639099 191.64151001]
[121.53545380 184.27052307]
[119.17203522 173.58845520]
[123.28075409 163.20927429]
[116.56649017 149.79589844]
[109.85223389 136.38252258]
[103.13797760 122.96913910]
[96.42372131 109.55576324]
[90.14771271 104.18588257]
[89.71884155 95.54164124]
[77.80598450 90.22270203]
[72.95577240 78.54765320]
[77.30681610 67.10864258]
[71.56656647 53.25045395]
[64.85230255 39.83707428]
[57.19825363 26.93686104]
[49.54420471 14.03664684]
[41.89015579 1.13643301]
[34.23610306 -11.76378059]
[26.58205223 -24.66399384]
[18.92800331 -37.56420898]
[11.27395248 -50.46442032]
[3.61990166 -63.36463547]
[-4.03414869 -76.26484680]
[-11.68819904 -89.16506195]
[-27.04483986 -88.90206909]
[-40.46778488 -96.36665344]
[-48.34633255 -109.55088806]
[-48.56119156 -124.90827942]
[-41.05456543 -138.30776978]
[-27.84569931 -146.14494324]
[-12.48771286 -146.31166077]
[0.88817465 -138.76307678]
[8.68391514 -125.52970886]
[8.80249405 -110.17127228]
[1.21201420 -96.81911469]
[8.86606503 -83.91889954]
[16.52011490 -71.01868439]
[24.17416573 -58.11847305]
[31.82821655 -45.21825790]
[39.48226547 -32.31804657]
[47.13631821 -19.41783142]
[54.79036713 -6.51761770]
[62.44441986 6.38259602]
[70.09846497 19.28281021]
[77.75251770 32.18302155]
[80.68213654 32.93062973]
[83.45126343 35.01895523]
[85.49211121 38.37638474]
[86.28131104 42.70577621]
[85.42475891 47.51020050]
[91.16500854 61.36839294]
[105.62206268 71.14240265]
[103.36332703 89.31041718]
[109.83709717 102.84149933]
[116.55135345 116.25488281]
[123.26560974 129.66825867]
[129.97987366 143.08163452]
[136.69412231 156.49502563]
[153.98811340 166.55003357]
[152.57194519 185.69702148]
[160.22599792 198.59722900]
[167.88005066 211.49745178]
[175.53408813 224.39765930]
[183.18814087 237.29788208]
[197.94303894 233.95893860]
[213.00737000 235.34494019]
[226.90530396 241.32011414]
[238.27525330 251.29905701]
[246.00331116 264.30413818]
[249.33236694 279.06127930]
[247.93626404 294.12466431]
[241.95178223 308.01858521]
[231.96522522 319.38186646]
[218.95495605 327.10119629]
[204.19560242 330.42037964]
[189.13314819 329.01416016]
[175.24324036 323.02038574]
[163.88665771 313.02621460]
[156.17604065 300.01077271]
[152.86676025 285.24920654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[16 60]
[19 58]
[20 57]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
