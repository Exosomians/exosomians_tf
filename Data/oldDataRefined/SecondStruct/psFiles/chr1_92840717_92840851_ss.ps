%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACGUUUGAGCUAGUGAUCGAGACGCACUACACCGUCUUCGCUUCCCUUGGUCCAAACGUUUUCAUUGACACCACUACCUUUACACAAUCGGAGUCUGUGAUGACUCCACCAAGAAAGAUAGGAUCAUGUCAG\
) } def
/len { sequence length } bind def

/coor [
[238.88435364 129.66603088]
[223.04614258 126.70652771]
[210.02441406 117.11930084]
[202.44082642 102.77188873]
[187.45683289 103.46463776]
[172.47283936 104.15738678]
[157.48883057 104.85014343]
[142.50483704 105.54289246]
[127.52085114 106.23564911]
[112.53685760 106.92839813]
[100.66152954 114.30866241]
[88.15589905 108.05559540]
[73.17190552 108.74835205]
[58.18790817 109.44110107]
[43.20391464 110.13385010]
[28.22891998 110.99961853]
[14.99763680 119.67393494]
[1.76514888 112.83649445]
[-13.19884682 113.87516022]
[-28.17112923 124.52324677]
[-43.64175415 116.32062531]
[-58.57776642 117.70464325]
[-73.51377869 119.08866882]
[-88.43280792 120.64511108]
[-103.33287048 122.37375641]
[-118.23292542 124.10240173]
[-133.13299561 125.83105469]
[-140.62858582 139.41764832]
[-154.69290161 145.97314453]
[-169.91793823 142.97679138]
[-180.44934082 131.58078003]
[-182.23757935 116.16709137]
[-174.59503174 102.66260529]
[-160.46041870 96.26007080]
[-145.26879883 99.42140198]
[-134.86163330 110.93099213]
[-119.96157837 109.20234680]
[-105.06151581 107.47370148]
[-90.16145325 105.74505615]
[-83.82290649 101.81422424]
[-74.89780426 104.15265656]
[-59.96179199 102.76863098]
[-45.02577591 101.38460541]
[-37.01041412 92.24994659]
[-24.51585579 91.02236938]
[-14.23751259 98.91116333]
[0.72648317 97.87249756]
[12.88744164 89.27247620]
[27.19025421 96.03562164]
[33.70357895 92.40172577]
[42.51116180 95.14985657]
[57.49515533 94.45710754]
[72.47914886 93.76435089]
[87.46314240 93.07160187]
[99.33847046 85.69133759]
[111.84410095 91.94440460]
[126.82809448 91.25164795]
[141.81208801 90.55889893]
[156.79608154 89.86614990]
[171.78007507 89.17339325]
[186.76406860 88.48064423]
[201.74806213 87.78789520]
[206.80850220 74.54112244]
[216.51849365 64.26634216]
[229.37905884 58.50137329]
[243.42323303 58.09157181]
[256.51687622 63.06599045]
[266.68295288 72.63802338]
[272.40014648 85.32960510]
[287.39614868 84.98313904]
[302.39215088 84.63666534]
[317.38815308 84.29019928]
[332.38415527 83.94373322]
[342.17462158 68.77139282]
[358.94195557 62.50264359]
[375.98486328 67.44389343]
[386.61016846 81.46051025]
[401.57415771 80.42184448]
[416.53814697 79.38317871]
[429.76943970 70.70886993]
[443.00192261 77.54630280]
[457.96591187 76.50763702]
[472.92993164 75.46897125]
[487.89392090 74.43030548]
[491.48046875 61.37912369]
[498.92257690 50.10113907]
[509.47555542 41.69908905]
[522.09143066 36.98921967]
[535.52294922 36.42202759]
[548.44683838 40.03918457]
[559.59442139 47.47085190]
[567.87579346 57.97342300]
[572.48669434 70.50392914]
[587.48266602 70.15746307]
[602.47869873 69.81099701]
[617.47467041 69.46452332]
[632.47070312 69.11805725]
[647.46667480 68.77159119]
[658.19824219 57.16947937]
[673.99359131 56.63740540]
[685.48156738 67.49103546]
[685.84661865 83.29111481]
[674.87213135 94.66371918]
[659.06909180 94.86169434]
[647.81317139 83.76758575]
[632.81713867 84.11405182]
[617.82116699 84.46052551]
[602.82513428 84.80699158]
[587.82916260 85.15345764]
[572.83312988 85.49993134]
[567.23333740 101.09912109]
[556.07513428 113.40355682]
[541.03009033 120.52848053]
[524.36779785 121.36815643]
[508.61383057 115.76738739]
[496.16662598 104.54925537]
[488.93258667 89.39430237]
[473.96859741 90.43296814]
[459.00457764 91.47163391]
[444.04058838 92.51029968]
[431.87963867 101.11032104]
[417.57681274 94.34717560]
[402.61282349 95.38584137]
[387.64883423 96.42450714]
[382.75515747 107.64406586]
[373.47760010 115.73939514]
[361.55895996 119.10746765]
[349.27359009 117.04110718]
[338.99356079 109.87637329]
[332.73062134 98.93972778]
[317.73461914 99.28620148]
[302.73861694 99.63266754]
[287.74261475 99.97913361]
[272.74661255 100.32559967]
[266.45516968 114.96966553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[12 54]
[13 53]
[14 52]
[15 51]
[16 49]
[18 47]
[19 46]
[21 43]
[22 42]
[23 41]
[24 39]
[25 38]
[26 37]
[27 36]
[69 134]
[70 133]
[71 132]
[72 131]
[73 130]
[77 124]
[78 123]
[79 122]
[81 120]
[82 119]
[83 118]
[84 117]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
