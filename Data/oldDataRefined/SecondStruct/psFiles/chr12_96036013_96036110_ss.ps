%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGCCAAGGAGCAAUCAUAUCACCACUCAUAGGGGCGGACAGUGCGCCCUCUGGCCCCAAGCUAAGGGGCUGCCCCUCCGUGUCAUUAACAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[162.73390198 285.77789307]
[156.71994019 272.03625488]
[150.70597839 258.29461670]
[144.69203186 244.55300903]
[138.67807007 230.81137085]
[128.65908813 227.86674500]
[121.85038757 219.65846252]
[120.76332092 208.82633972]
[126.01470947 199.03755188]
[120.88440704 184.94215393]
[115.75410461 170.84677124]
[104.13043976 161.53335571]
[106.68119049 145.91912842]
[101.55088806 131.82373047]
[96.42058563 117.72834778]
[96.67577362 132.72618103]
[92.14874268 147.02673340]
[83.30941772 159.14558411]
[71.07534790 167.82472229]
[56.71647644 172.16325378]
[41.72330093 171.71080017]
[27.65216827 166.51432800]
[15.96371078 157.11326599]
[7.87123108 144.48347473]
[4.21475697 129.93595886]
[5.37384367 114.98081207]
[11.22817326 101.17041779]
[21.17004776 89.93836212]
[34.16746140 82.45056152]
[48.87124252 79.48427582]
[63.75508118 81.34741211]
[77.27466583 87.84705353]
[71.69972992 73.92153168]
[66.12479401 59.99601364]
[60.32961273 46.16070175]
[54.31565475 32.41907501]
[48.30169678 18.67744637]
[42.28773880 4.93582010]
[36.27378082 -8.80580711]
[21.21965981 -13.03752613]
[12.45038509 -25.98487473]
[14.10653973 -41.53451157]
[25.40613937 -52.34437180]
[41.01385498 -53.31037140]
[53.56020737 -43.97639465]
[57.12118530 -28.74965858]
[50.01540756 -14.81976509]
[56.02936554 -1.07813776]
[62.04332352 12.66348934]
[68.05728149 26.40511513]
[74.07124329 40.14674377]
[79.74053192 45.10290146]
[80.05030823 54.42107773]
[85.62524414 68.34659576]
[91.20018005 82.27211761]
[105.65781403 86.26922607]
[117.59424591 77.18508148]
[129.53067017 68.10092926]
[141.46710205 59.01678848]
[153.40351868 49.93264389]
[153.96681213 34.30520630]
[164.48176575 22.73067093]
[179.98353577 20.67417717]
[193.15266418 29.10673523]
[197.77108765 44.04675293]
[191.65814209 58.44001007]
[177.70014954 65.49044800]
[162.48767090 61.86906815]
[150.55123901 70.95321655]
[138.61482239 80.03736115]
[126.67839050 89.12150574]
[114.74195862 98.20565033]
[110.51597595 112.59804535]
[115.64627838 126.69343567]
[120.77657318 140.78881836]
[132.76719666 151.11042786]
[129.84950256 165.71646118]
[134.97979736 179.81185913]
[140.11010742 193.90724182]
[156.13406372 205.93334961]
[152.41969299 224.79742432]
[158.43365479 238.53904724]
[164.44761658 252.28067017]
[170.46156311 266.02230835]
[176.47552490 279.76391602]
[191.67272949 279.42749023]
[205.84007263 284.93701172]
[216.81712341 295.45239258]
[222.92994690 309.37005615]
[223.24641418 324.56768799]
[217.71823120 338.72778320]
[207.18843079 349.69097900]
[193.26272583 355.78549194]
[178.06468201 356.08197021]
[163.91189575 350.53515625]
[152.96255493 339.99096680]
[146.88635254 326.05725098]
[146.60987854 310.85882568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[5 81]
[9 79]
[10 78]
[11 77]
[13 75]
[14 74]
[15 73]
[32 55]
[33 54]
[34 53]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
