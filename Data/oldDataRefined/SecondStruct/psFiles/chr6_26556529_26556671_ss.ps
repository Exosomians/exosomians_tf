%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGAUGCAAGCCCACUCGGGCCGAUCGAGUCAGCCAUCUCGUACUCUGAGAAUUAGAGUCCCAGCACCCAAGCUCGGGGUGCAACCCGCGAGACCAAAAGUUAGGAUUUUACAAAAGUCCAAAGAGUAACGCCAGGUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[-50.23875809 322.57223511]
[-59.62760925 334.27050781]
[-69.01645660 345.96875000]
[-78.40531158 357.66702271]
[-87.79416656 369.36529541]
[-97.18301392 381.06356812]
[-93.59484100 392.49215698]
[-95.98002625 404.10806274]
[-103.62468719 413.01525879]
[-114.51875305 417.05102539]
[-125.88345337 415.31045532]
[-135.77363586 426.58804321]
[-145.66381836 437.86563110]
[-155.55401611 449.14321899]
[-158.22090149 465.32406616]
[-173.66065979 470.85092163]
[-185.99018860 460.03820801]
[-182.52592468 444.00912476]
[-166.83160400 439.25305176]
[-156.94142151 427.97543335]
[-147.05123901 416.69784546]
[-137.16104126 405.42025757]
[-139.49955750 387.31964111]
[-127.72293854 372.96359253]
[-108.88128662 371.67471313]
[-99.49243164 359.97644043]
[-90.10357666 348.27816772]
[-80.71472931 336.57992554]
[-71.32587433 324.88165283]
[-61.93702316 313.18338013]
[-65.54433441 294.10501099]
[-53.87511063 278.21008301]
[-33.99227905 275.86557007]
[-25.38863182 263.57827759]
[-16.78498459 251.29100037]
[-8.18133831 239.00372314]
[-13.68979263 226.79650879]
[-12.41777229 213.35557556]
[-4.59234858 202.22090149]
[7.81929731 196.37846375]
[21.60342789 197.45979309]
[30.47307205 185.36312866]
[39.34271622 173.26646423]
[48.07988358 161.07376099]
[56.68352890 148.78648376]
[65.28717804 136.49920654]
[73.89082336 124.21192169]
[82.49446869 111.92463684]
[79.24377441 95.77865601]
[88.54283142 82.18501282]
[104.76918793 79.36276245]
[113.10273743 66.89071655]
[107.57501221 46.67890930]
[118.46620178 29.11749077]
[138.46055603 25.19788551]
[145.67538452 12.04698372]
[152.89021301 -1.10391808]
[160.10504150 -14.25481892]
[167.31988525 -27.40572166]
[174.53471375 -40.55662155]
[181.74954224 -53.70752335]
[188.96437073 -66.85842133]
[188.81860352 -82.67896271]
[201.72377014 -90.11574554]
[208.93861389 -103.26664734]
[216.15344238 -116.41754913]
[206.21179199 -127.83634949]
[200.78691101 -141.94105530]
[200.51553345 -157.02238464]
[205.41110229 -171.25978088]
[214.86451721 -182.94114685]
[227.71980286 -190.66877747]
[242.41546631 -193.52651978]
[257.17413330 -191.18840027]
[264.38897705 -204.33930969]
[271.60379028 -217.49020386]
[278.81863403 -230.64111328]
[285.88958740 -243.86993408]
[292.81582642 -257.17507935]
[299.74203491 -270.48025513]
[306.66827393 -283.78543091]
[308.61880493 -300.62680054]
[325.34194946 -303.41464233]
[332.65029907 -288.11679077]
[319.97341919 -276.85919189]
[313.04721069 -263.55401611]
[306.12097168 -250.24887085]
[299.19473267 -236.94369507]
[298.89389038 -229.50195312]
[291.96954346 -223.42628479]
[284.75469971 -210.27537537]
[277.53988647 -197.12448120]
[270.32504272 -183.97357178]
[280.22680664 -172.78250122]
[285.71258545 -158.85284424]
[286.10232544 -143.85874939]
[281.32965088 -129.60942078]
[271.95236206 -117.83079529]
[259.08706665 -109.95648193]
[244.27650452 -106.95333099]
[229.30433655 -109.20271301]
[222.08950806 -96.05181122]
[214.87467957 -82.90091705]
[215.53649902 -68.02101898]
[202.11528015 -59.64359283]
[194.90043640 -46.49269104]
[187.68560791 -33.34178925]
[180.47077942 -20.19088936]
[173.25595093 -7.03998804]
[166.04112244 6.11091328]
[158.82629395 19.26181412]
[151.61145020 32.41271591]
[156.95475769 40.29524231]
[159.03123474 49.64863968]
[157.50695801 59.16671371]
[152.55393982 67.50404358]
[144.83190918 73.46614075]
[135.40068054 76.18054962]
[125.57478333 75.22427368]
[117.24123383 87.69631958]
[121.18009186 99.78976440]
[117.48206329 111.95901489]
[107.48052979 119.81621552]
[94.78174591 120.52828217]
[86.17810059 132.81556702]
[77.57445526 145.10284424]
[68.97080994 157.39012146]
[60.36716461 169.67741394]
[57.98062897 178.57487488]
[51.43938446 182.13610840]
[42.56974030 194.23277283]
[33.70009613 206.32943726]
[39.07855606 222.32774353]
[33.93930817 238.23040771]
[20.48500443 247.86248779]
[4.10594273 247.60736084]
[-4.49770403 259.89465332]
[-13.10135078 272.18191528]
[-21.70499611 284.46920776]
[-17.24202156 294.30474854]
[-17.30536079 305.02413940]
[-21.81544113 314.65921021]
[-29.88247108 321.46929932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[11 22]
[12 21]
[13 20]
[14 19]
[33 139]
[34 138]
[35 137]
[36 136]
[41 132]
[42 131]
[43 130]
[44 128]
[45 127]
[46 126]
[47 125]
[48 124]
[51 120]
[52 119]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[62 105]
[64 103]
[65 102]
[66 101]
[74 93]
[75 92]
[76 91]
[77 90]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
