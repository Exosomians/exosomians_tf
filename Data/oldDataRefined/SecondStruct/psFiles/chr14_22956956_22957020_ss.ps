%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUGGAGCCGACCCCGCCCGACCGGUCGUCGCAGAUGUGGGGUCUUGGGCGGGCGCGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[87.36447144 243.15812683]
[71.92741394 245.65440369]
[58.52392578 237.59956360]
[53.48271179 222.79684448]
[59.18408966 208.23565674]
[72.93603516 200.79133606]
[75.77480316 186.06240845]
[70.58597565 172.10083008]
[80.79515076 160.01434326]
[83.63392639 145.28541565]
[86.47269440 130.55648804]
[89.31146240 115.82755280]
[81.27710724 103.76955414]
[84.01926422 89.54187012]
[95.95960999 81.33367920]
[98.79837799 66.60475159]
[101.63714600 51.87582016]
[104.47591400 37.14688873]
[107.31468201 22.41795731]
[110.15345001 7.68902779]
[112.99221802 -7.03990269]
[115.12694550 -21.88722420]
[116.55278778 -36.81930161]
[117.97862244 -51.75138092]
[119.40446472 -66.68346405]
[107.94635010 -76.97994995]
[104.78514099 -91.87492371]
[110.92813110 -105.61273956]
[123.82816315 -113.01052094]
[125.25400543 -127.94260406]
[126.67984772 -142.87467957]
[128.10568237 -157.80676270]
[123.59233093 -174.14891052]
[138.04640198 -183.00984192]
[150.56233215 -171.57359314]
[143.03776550 -156.38092041]
[141.61192322 -141.44883728]
[140.18608093 -126.51676178]
[138.76023865 -111.58467865]
[150.02711487 -101.87924194]
[153.45919800 -87.22711182]
[147.53622437 -73.19957733]
[134.33654785 -65.25762177]
[132.91070557 -50.32554245]
[131.48486328 -35.39346313]
[130.05902100 -20.46138382]
[132.60018921 -16.02950287]
[132.11729431 -9.90514946]
[127.72115326 -4.20113420]
[124.88238525 10.52779675]
[122.04361725 25.25672722]
[119.20484924 39.98565674]
[116.36607361 54.71458817]
[113.52730560 69.44351959]
[110.68853760 84.17244720]
[118.72289276 96.23044586]
[115.98073578 110.45812988]
[104.04039001 118.66632080]
[101.20162201 133.39524841]
[98.36285400 148.12417603]
[95.52408600 162.85311890]
[100.50986481 177.86819458]
[90.50373077 188.90116882]
[87.66496277 203.63009644]
[97.66505432 215.65225220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 64]
[7 63]
[9 61]
[10 60]
[11 59]
[12 58]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 46]
[23 45]
[24 44]
[25 43]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
