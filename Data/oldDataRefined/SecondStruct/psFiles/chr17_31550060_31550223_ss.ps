%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACCCGACAGUCCGCGCCACCGGUUCACCAUUCCGCAGCCAGAGCAUUUGGCUUCUAGCGCCCAAGCUUGGGGCAGGCACGGACUCUGGGCUCCAUCCCGAAACCGACACCCCUUCAGCCCAAAAGAGGUGCAUGCGGCAGGGAAGAUGCACCGUAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[331.00112915 206.06231689]
[344.32943726 199.18077087]
[359.03317261 196.23878479]
[344.85818481 191.33276367]
[330.68316650 186.42675781]
[316.46209717 181.65589905]
[302.19622803 177.02064514]
[287.93038940 172.38539124]
[273.66455078 167.75013733]
[262.71862793 172.96565247]
[250.77606201 169.18609619]
[244.42875671 157.92378235]
[230.25373840 153.01776123]
[216.07873535 148.11174011]
[201.90371704 143.20571899]
[187.72871399 138.29969788]
[173.55369568 133.39367676]
[158.99578857 136.54275513]
[148.48524475 124.71740723]
[134.31022644 119.81138611]
[120.13521576 114.90536499]
[112.08692169 132.19796753]
[90.65607452 142.72203064]
[62.30900574 137.36335754]
[48.43719101 143.07060242]
[34.56537247 148.77786255]
[31.89128304 163.97169495]
[21.41050529 175.29234314]
[6.46741724 179.12739563]
[-8.16969395 174.25312805]
[-17.83018112 162.22488403]
[-19.43141556 146.88084412]
[-12.46245193 133.11723328]
[0.85294056 125.32595825]
[16.26586723 125.99320221]
[28.85812187 134.90603638]
[42.72993851 129.19879150]
[56.60175323 123.49153900]
[56.10232162 116.00818634]
[54.60403824 93.55812836]
[40.09683228 89.74485016]
[25.58963013 85.93157196]
[11.08242798 82.11830139]
[-3.42477489 78.30502319]
[-17.93197823 74.49175262]
[-32.43918228 70.67847443]
[-49.29503632 72.49957275]
[-55.71113586 56.80658340]
[-42.40758133 46.29697800]
[-28.62590599 56.17127228]
[-14.11870289 59.98454666]
[0.38850012 63.79782104]
[14.89570332 67.61109924]
[29.40290642 71.42436981]
[43.91011047 75.23764801]
[58.41731262 79.05092621]
[62.99716949 73.11165619]
[51.11877823 63.95175552]
[60.27886200 52.07350159]
[72.15689087 61.23312378]
[76.73674774 55.29385376]
[69.36075592 42.23266602]
[62.38375854 36.26525497]
[61.97137070 28.85184097]
[54.84538269 15.65258598]
[47.71939850 2.45333242]
[40.59341049 -10.74592113]
[26.35505867 -18.88234711]
[26.55282211 -35.28030014]
[40.98325348 -43.07097626]
[54.80156708 -34.23999023]
[53.79266357 -17.87190819]
[60.91865158 -4.67265511]
[68.04463959 8.52659893]
[75.17062378 21.72585297]
[82.42194366 34.85667038]
[89.79793549 47.91786194]
[125.26162720 70.20598602]
[125.04123688 100.73035431]
[139.21624756 105.63637543]
[153.39126587 110.54239655]
[168.96305847 107.74423218]
[178.45971680 119.21867371]
[192.63473511 124.12468719]
[206.80973816 129.03071594]
[220.98475647 133.93672180]
[235.15975952 138.84274292]
[249.33477783 143.74876404]
[267.30581665 139.83067322]
[278.29980469 153.48428345]
[292.56564331 158.11953735]
[306.83148193 162.75479126]
[321.09735107 167.39004517]
[330.27258301 167.06881714]
[335.58917236 172.25173950]
[349.76419067 177.15776062]
[363.93920898 182.06378174]
[373.44839478 180.23570251]
[380.84432983 184.65885925]
[395.83822632 184.23051453]
[410.83209229 183.80218506]
[425.82598877 183.37384033]
[432.18383789 173.26434326]
[442.53695679 167.55633545]
[454.23916626 167.57592773]
[464.36303711 173.20188904]
[470.43231201 182.92501831]
[485.43161011 183.06781006]
[500.43093872 183.21061707]
[518.34893799 171.51039124]
[535.73724365 182.58323669]
[550.72027588 181.86950684]
[565.70324707 181.15577698]
[580.68627930 180.44204712]
[594.10266113 172.05686951]
[607.18365479 179.17982483]
[622.16668701 178.46609497]
[637.14971924 177.75236511]
[645.54986572 164.70562744]
[660.02655029 159.11947632]
[675.01318359 163.14190674]
[684.74713135 175.22618103]
[685.48547363 190.72569275]
[676.94427490 203.68052673]
[662.40783691 209.10929871]
[647.46569824 204.92454529]
[637.86340332 192.73536682]
[622.88043213 193.44909668]
[607.89739990 194.16282654]
[595.55267334 202.49694824]
[581.40002441 195.42504883]
[566.41699219 196.13877869]
[551.43395996 196.85250854]
[536.45098877 197.56623840]
[531.58117676 205.08451843]
[523.66491699 209.56384277]
[514.43652344 209.87628174]
[505.98651123 205.82334900]
[500.28814697 198.20993042]
[485.28881836 198.06713867]
[470.28948975 197.92433167]
[458.06271362 211.50439453]
[439.47518921 211.88740540]
[426.25433350 198.36772156]
[411.26043701 198.79606628]
[396.26657104 199.22439575]
[381.27267456 199.65274048]
[394.42083740 206.87255859]
[405.07040405 217.43601990]
[412.39666748 230.52516174]
[415.83236694 245.12640381]
[415.11138916 260.10906982]
[410.28961182 274.31295776]
[401.74038696 286.63818359]
[390.12576294 296.13027954]
[376.34509277 302.05429077]
[361.46554565 303.95141602]
[346.63934326 301.67477417]
[333.01452637 295.40066528]
[321.64617920 285.61489868]
[313.41461182 273.07531738]
[308.95727539 258.75286865]
[308.61932373 243.75668335]
[312.42691040 229.24798584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 93]
[7 92]
[8 91]
[9 90]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[19 81]
[20 80]
[21 79]
[24 38]
[25 37]
[26 36]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[61 77]
[62 76]
[64 75]
[65 74]
[66 73]
[67 72]
[99 147]
[100 146]
[101 145]
[102 144]
[107 141]
[108 140]
[109 139]
[111 134]
[112 133]
[113 132]
[114 131]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
