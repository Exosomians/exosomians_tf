%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUUAGAGUCUUCGGCUUAGGCAUGAAUAAAAAGAAGUCCAAUAGUCGAAGCCCUAUCCAAAGUAGUAACUAAUCUGGUUAG\
) } def
/len { sequence length } bind def

/coor [
[139.96936035 208.77404785]
[126.81222534 198.21434021]
[117.93169403 183.84204102]
[114.36412048 167.30389404]
[116.53606415 150.50112915]
[124.21329498 135.37092590]
[113.70514679 124.66676331]
[103.19699860 113.96261597]
[89.77828979 110.03453827]
[86.09884644 96.54553223]
[77.64143372 92.48386383]
[75.40931702 85.24631500]
[65.30387878 74.16118622]
[55.19844818 63.07604980]
[45.09300995 51.99091721]
[34.98757553 40.90578079]
[24.88214302 29.82064819]
[14.77670765 18.73551559]
[4.67127323 7.65038109]
[-14.08080196 7.65567303]
[-26.84852791 -5.64826155]
[-26.09791374 -23.75933266]
[-36.99441910 -34.06788254]
[-47.89092255 -44.37643433]
[-61.75381088 -38.14034653]
[-76.94804382 -37.68905258]
[-91.15661621 -43.09136200]
[-102.21281433 -53.52346802]
[-108.43066406 -67.39454651]
[-108.86196899 -82.58936310]
[-103.44097137 -96.79081726]
[-92.99433136 -107.83328247]
[-79.11508942 -114.03287506]
[-63.91971588 -114.44419861]
[-49.72540665 -109.00452423]
[-38.69668961 -98.54336548]
[-32.51536179 -84.65597534]
[-32.12403107 -69.46007538]
[-37.58237076 -55.27293777]
[-26.68586731 -44.96438599]
[-15.78936386 -34.65583801]
[-4.44318581 -37.46638489]
[6.93787527 -34.31048584]
[15.38839626 -25.88672256]
[18.64605141 -14.28193665]
[15.75640678 -2.45505381]
[25.86184120 8.63008022]
[35.96727753 19.71521378]
[46.07271194 30.80034828]
[56.17814636 41.88548279]
[66.28357697 52.97061539]
[76.38901520 64.05574799]
[86.49444580 75.14088440]
[96.80300140 86.03738403]
[110.22171021 89.96546173]
[113.90115356 103.45446777]
[124.40930176 114.15862274]
[134.91744995 124.86277008]
[146.72776794 118.59671783]
[159.76283264 115.68692017]
[173.08927917 116.33429718]
[185.75482178 120.48528290]
[196.85635376 127.83623505]
[205.60430908 137.85560608]
[211.37886047 149.82240295]
[213.77375793 162.87800598]
[212.62498474 176.08786011]
[208.02189636 188.50830078]
[200.30038452 199.25399780]
[209.55955505 211.05517578]
[218.81872559 222.85635376]
[228.07789612 234.65753174]
[237.33708191 246.45869446]
[246.59625244 258.25988770]
[261.13034058 266.98895264]
[256.76580811 283.37149048]
[239.81529236 283.71267700]
[234.79507446 267.51904297]
[225.53590393 255.71788025]
[216.27673340 243.91670227]
[207.01754761 232.11552429]
[197.75837708 220.31434631]
[188.49920654 208.51318359]
[172.70016479 214.22154236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 58]
[7 57]
[8 56]
[10 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[22 41]
[23 40]
[24 39]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
