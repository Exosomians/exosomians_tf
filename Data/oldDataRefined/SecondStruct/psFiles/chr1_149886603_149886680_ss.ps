%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUCCCCGGCCUCGCCUAAAACGGCCAAGUCCGUACCAUUCUGUGUCAUGUUUGCGCCGAAUCGGUUCUUUUCUU\
) } def
/len { sequence length } bind def

/coor [
[95.34595490 204.46685791]
[81.19845581 199.48205566]
[69.08606720 190.63389587]
[60.03523636 178.67218018]
[54.81296158 164.61061096]
[53.86179733 149.64079285]
[57.26235199 135.03134155]
[64.72644043 122.02029419]
[75.62154388 111.71025848]
[89.02806854 104.97371674]
[74.52639771 101.13946533]
[60.02472687 97.30521393]
[44.70523453 101.25791931]
[34.37857056 90.52436066]
[19.87689590 86.69010925]
[2.37810230 92.00038910]
[-9.72246742 79.45309448]
[-24.36511230 76.19841766]
[-39.00775528 72.94373322]
[-52.20542145 81.63839722]
[-67.66858673 78.37250519]
[-76.22322845 65.08364868]
[-72.79403687 49.65587997]
[-59.41548157 41.24221039]
[-44.02482605 44.83432770]
[-35.75307465 58.30109024]
[-21.11042976 61.55577087]
[-6.46778536 64.81045532]
[4.07315063 58.53762817]
[16.43321800 61.32600403]
[23.71114540 72.18843842]
[38.21281815 76.02268982]
[52.49505234 71.79573822]
[63.85897446 82.80354309]
[78.36064911 86.63779449]
[92.86231995 90.47204590]
[98.68815613 88.24987793]
[104.79378510 89.28192139]
[118.25237274 82.65873718]
[131.71095276 76.03556061]
[145.03518677 69.14609528]
[158.21981812 61.99308777]
[171.40444946 54.84007263]
[184.58908081 47.68706131]
[193.02941895 34.30531311]
[207.90603638 35.03698349]
[221.09066772 27.88397217]
[234.27529907 20.73095894]
[240.53302002 13.69811916]
[248.12936401 13.56754494]
[261.58795166 6.94436312]
[270.25549316 -6.97704029]
[286.63433838 -6.16106081]
[293.87530518 8.55289173]
[284.52954102 22.02836418]
[268.21112061 20.40294647]
[254.75254822 27.02612877]
[241.42831421 33.91558838]
[228.24368286 41.06859970]
[215.05905151 48.22161102]
[207.56176758 61.09172821]
[191.74209595 60.87168884]
[178.55746460 68.02470398]
[165.37283325 75.17771149]
[152.18820190 82.33072662]
[147.69026184 88.45365143]
[138.33413696 89.49414062]
[124.87555695 96.11732483]
[111.41696930 102.74050903]
[125.88642883 106.69459534]
[138.60398865 114.64844513]
[148.49191284 125.92803192]
[154.71226501 139.57746887]
[156.73791504 154.44006348]
[154.39720154 169.25630188]
[147.88848877 182.77061462]
[137.76333618 193.83775330]
[124.87979889 201.51983643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 36]
[11 35]
[12 34]
[14 32]
[15 31]
[17 28]
[18 27]
[19 26]
[38 69]
[39 68]
[40 67]
[41 65]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[48 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
