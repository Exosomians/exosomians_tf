%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACCGAGAAUUUUCUCGGAAACCCCACUUACUCAUACCACAGUUCGGAGAAUUAAUGAACAAGAACGGUCCGAACACUGAGAGGCA\
) } def
/len { sequence length } bind def

/coor [
[63.08622742 185.64480591]
[49.24062729 193.09214783]
[33.71400070 195.38365173]
[18.35950851 192.26411438]
[5.00354290 184.12307739]
[-6.58111000 193.65176392]
[-18.16576195 203.18045044]
[-29.75041580 212.70912170]
[-41.33506775 222.23780823]
[-52.91971970 231.76649475]
[-58.16963577 247.30259705]
[-74.30021667 250.25834656]
[-84.71770477 237.59310913]
[-78.70548248 222.33581543]
[-62.44840622 220.18183899]
[-50.86375427 210.65315247]
[-39.27909851 201.12448120]
[-27.69444656 191.59579468]
[-16.10979462 182.06710815]
[-4.52514076 172.53842163]
[-9.66477489 159.22827148]
[-10.41100407 144.95817566]
[-6.67639923 131.14286804]
[1.18157554 119.15617371]
[12.39472771 110.19440460]
[25.85922241 105.15696716]
[40.24423599 104.55609894]
[54.12350082 108.46480560]
[66.11669922 116.50833130]
[78.03041840 107.39442444]
[89.94413757 98.28050995]
[94.03752899 91.11084747]
[102.44297028 89.06406403]
[114.67091370 80.37628174]
[126.89884949 71.68849945]
[139.12678528 63.00072479]
[137.62150574 53.59451294]
[139.37959290 44.27727890]
[144.16419983 36.14265060]
[151.38508606 30.13512039]
[160.17121887 26.94041252]
[169.47584534 26.90728188]
[178.20112610 30.00970459]
[185.32774353 35.85346222]
[198.89112854 29.44761658]
[212.45449829 23.04177094]
[226.01786804 16.63592529]
[239.58125305 10.23007774]
[253.14462280 3.82423115]
[266.70800781 -2.58161545]
[264.35290527 -17.50241089]
[266.29821777 -32.48214340]
[272.38629150 -46.30646896]
[282.12359619 -57.85471344]
[294.72073364 -66.19071198]
[309.15652466 -70.63871002]
[324.26071167 -70.83811188]
[338.80889893 -66.77276611]
[351.62170410 -58.77222824]
[361.66046143 -47.48506546]
[368.11138916 -33.82627869]
[370.45147705 -18.90312576]
[368.49111938 -3.92535615]
[362.38912964 9.89284706]
[352.64025879 21.43130493]
[340.03475952 29.75464439]
[325.59451294 34.18813324]
[310.49011230 34.37236404]
[295.94601440 30.29240608]
[283.14126587 22.27900124]
[273.11383057 10.98175907]
[259.55047607 17.38760567]
[245.98709106 23.79345322]
[232.42372131 30.19929886]
[218.86035156 36.60514450]
[205.29696655 43.01099396]
[191.73359680 49.41683960]
[186.95408630 69.91893005]
[168.65565491 80.86059570]
[147.81457520 75.22866058]
[135.58662415 83.91644287]
[123.35868835 92.60421753]
[111.13075256 101.29199982]
[99.05804443 110.19422913]
[87.14432526 119.30813599]
[75.23060608 128.42204285]
[80.06758881 143.49279785]
[79.49253082 159.28366089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[29 86]
[30 85]
[31 84]
[33 83]
[34 82]
[35 81]
[36 80]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
