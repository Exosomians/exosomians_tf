%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACACCAUCACACCGGCUCGCCAGAUUCCGCGACCUAAAUCCGAGGUCAGAGAAGCCCCCGCACCCAAGCUUAGGGUGGUGACGGUCACCAUGCAAAAUCGUGUUGUUCCUAGGACUUCAUGAUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[248.13873291 231.52630615]
[237.10287476 221.36708069]
[226.06701660 211.20787048]
[209.01896667 215.51664734]
[192.62559509 208.73651123]
[183.44134521 193.37677002]
[185.25819397 175.41629028]
[173.75488281 165.78956604]
[162.25157166 156.16282654]
[147.52552795 153.92834473]
[141.90800476 139.13800049]
[130.40470886 129.51127625]
[118.90139008 119.88454437]
[107.39808655 110.25782013]
[101.97813416 115.80387878]
[92.95098877 117.86682892]
[82.72464752 114.39534760]
[74.71854401 104.97782135]
[60.26856995 100.95312500]
[45.81859207 96.92842865]
[31.36861610 92.90373230]
[10.52564335 108.13455200]
[-16.70674324 97.77362823]
[-31.33066177 101.11144257]
[-37.30520248 115.43221283]
[-50.57373428 123.47743988]
[-66.03423309 122.15357971]
[-77.74182129 111.96967316]
[-81.19469452 96.84164429]
[-75.06515503 82.58652496]
[-61.71012878 74.68570709]
[-46.26490021 76.17720795]
[-34.66847610 86.48751831]
[-20.04455757 83.14970398]
[-18.27709961 68.25420380]
[-31.71382523 61.58678818]
[-45.15055084 54.91937637]
[-58.58727646 48.25196457]
[-72.02400208 41.58455276]
[-86.27929688 48.01266861]
[-101.31729889 43.72402954]
[-110.03753662 30.74360085]
[-108.32256317 15.20034122]
[-96.98215485 4.43330574]
[-81.37089539 3.52635765]
[-68.85993958 12.90773106]
[-65.35659027 28.14782715]
[-51.91986465 34.81523895]
[-38.48313904 41.48265076]
[-25.04641342 48.15006256]
[-11.60968685 54.81747437]
[-0.69753873 49.68268585]
[10.90018177 49.00865555]
[21.49358940 52.56634521]
[29.65799332 59.53280640]
[34.42502975 68.65265656]
[35.39331436 78.45375824]
[49.84328842 82.47845459]
[64.29326630 86.50315094]
[78.74324036 90.52784729]
[67.65958405 80.42079163]
[69.47984314 65.53163910]
[82.67193604 58.39239883]
[96.13224792 65.01206207]
[98.53140259 79.81903076]
[103.06545258 65.52069092]
[107.59949493 51.22235489]
[112.13354492 36.92401886]
[116.66758728 22.62568283]
[108.13497162 9.52116203]
[110.07334137 -5.99582052]
[121.56745911 -16.59861946]
[137.19015503 -17.28091812]
[149.56486511 -7.72055531]
[152.84863281 7.56835747]
[145.49096680 21.36686325]
[130.96592712 27.15973091]
[126.43187714 41.45806503]
[121.89783478 55.75640106]
[117.36378479 70.05474091]
[112.82973480 84.35307312]
[117.02481079 98.75450897]
[128.52812195 108.38124084]
[140.03143311 118.00796509]
[151.53474426 127.63468933]
[167.08357239 130.55775452]
[171.87829590 144.65951538]
[183.38160706 154.28625488]
[194.88491821 163.91297913]
[206.60908508 159.27162170]
[219.11927795 160.08941650]
[230.01263428 166.14707947]
[237.22343445 176.22483826]
[239.41481018 188.34764099]
[236.22624207 200.17199707]
[247.26210022 210.33122253]
[258.29797363 220.49044800]
[278.20050049 218.50222778]
[293.02474976 231.47706604]
[293.67031860 250.86544800]
[305.39776611 260.21780396]
[317.12524414 269.57012939]
[328.85272217 278.92248535]
[340.58020020 288.27484131]
[352.30767822 297.62716675]
[364.03512573 306.97952271]
[379.53201294 305.40322876]
[391.29211426 315.05490112]
[392.69937134 329.83850098]
[404.42684937 339.19085693]
[416.15432739 348.54318237]
[427.88180542 357.89553833]
[444.03515625 363.04385376]
[443.55972290 379.99114990]
[427.14315796 384.22576904]
[418.52944946 369.62301636]
[406.80197144 360.27066040]
[395.07449341 350.91830444]
[383.34704590 341.56597900]
[368.62094116 343.48364258]
[356.59439087 334.16610718]
[354.68280029 318.70700073]
[342.95532227 309.35464478]
[331.22784424 300.00231934]
[319.50036621 290.64996338]
[307.77288818 281.29760742]
[296.04544067 271.94525146]
[284.31796265 262.59292603]
[274.64761353 266.49688721]
[264.15039062 265.98004150]
[254.76628113 261.06961060]
[248.25810242 252.61112976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[7 89]
[8 88]
[9 87]
[11 85]
[12 84]
[13 83]
[14 82]
[18 60]
[19 59]
[20 58]
[21 57]
[23 34]
[24 33]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
