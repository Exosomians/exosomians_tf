%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACUUACUACUGUUUUACAAAGUCAGGGUUUACUAUGUAUGACUAAUAUGGUAAUAUAAAUAGGACUGU\
) } def
/len { sequence length } bind def

/coor [
[186.59362793 268.01367188]
[195.52221680 255.78425598]
[186.91857910 243.49697876]
[178.31492615 231.20970154]
[169.71128845 218.92240906]
[161.10763550 206.63513184]
[147.37249756 210.20877075]
[133.21740723 208.82507324]
[120.38003540 202.63302612]
[110.44347382 192.37316895]
[104.64105225 179.28906250]
[103.70324707 164.97659302]
[107.76579285 151.18937683]
[116.35048676 139.62380981]
[108.29099274 126.97294617]
[100.23149872 114.32207489]
[87.91930389 107.69625092]
[87.11763000 93.73741913]
[79.05813599 81.08654785]
[70.99864197 68.43567657]
[62.93914795 55.78480530]
[48.99874496 48.30310440]
[48.68596268 33.41178513]
[40.62646866 20.76091385]
[32.56697083 8.11004162]
[17.07120132 7.29719734]
[5.03385544 -2.49473357]
[1.08353794 -17.50055313]
[6.73922729 -31.95021820]
[19.82619667 -40.28753662]
[35.31223679 -39.30664062]
[47.24265289 -29.38470268]
[51.02995300 -14.33691311]
[45.21784592 0.05054796]
[53.27733994 12.70141983]
[61.33683395 25.35229111]
[74.70076752 31.92911530]
[75.59001923 47.72531128]
[83.64951324 60.37618256]
[91.70900726 73.02705383]
[99.76850128 85.67792511]
[112.08069611 92.30374908]
[112.88237000 106.26258087]
[120.94186401 118.91345215]
[129.00135803 131.56431580]
[144.66490173 128.66357422]
[160.21844482 131.92474365]
[173.33447266 140.83024597]
[182.06149292 154.02005005]
[185.11434937 169.49929810]
[182.06344604 184.94009399]
[173.39491272 198.03149414]
[181.99856567 210.31877136]
[190.60220337 222.60604858]
[199.20585632 234.89332581]
[207.80949402 247.18061829]
[222.35516357 242.97319031]
[237.47872925 243.71919250]
[251.53970337 249.33769226]
[263.01284790 259.21926880]
[270.65368652 272.29199219]
[273.63333130 287.13787842]
[271.62863159 302.14654541]
[264.85699463 315.68997192]
[254.05299377 326.29901123]
[240.38854980 332.82293701]
[225.34588623 334.55407715]
[210.55670166 331.30462646]
[197.62524414 323.42706299]
[187.95419312 311.77590942]
[182.59260559 297.61495972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[14 45]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[21 38]
[23 36]
[24 35]
[25 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
