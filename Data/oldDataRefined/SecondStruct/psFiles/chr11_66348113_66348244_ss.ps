%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAUCCUGCUCCACCGGCUCACCAAUUCCGCUACCUGACGAUUAGGUAACACGAAACGUGCGCACCCAAGCUUAGGGUAGGAGCAGCCGGGACAAAAUAUCUCCAACCCCCCCUUCGUAGAUGUAAAAGU\
) } def
/len { sequence length } bind def

/coor [
[89.99853516 202.15576172]
[101.10400391 191.14654541]
[99.68885803 176.21345520]
[98.27370453 161.28036499]
[96.85855103 146.34725952]
[95.44339752 131.41416931]
[94.02824402 116.48107147]
[87.04533386 103.20557404]
[75.54202271 93.57884979]
[64.03871918 83.95211792]
[52.53540802 74.32539368]
[41.03209686 64.69866180]
[29.52878761 55.07193756]
[18.02547836 45.44521332]
[5.35689974 50.58724213]
[-8.70444202 48.52622986]
[-20.20727921 39.29183197]
[-25.64559555 25.00131416]
[-23.01539040 9.39152241]
[-36.75199127 3.36609077]
[-52.49785995 4.90823793]
[-61.04511642 -7.28986216]
[-74.78171539 -13.31529331]
[-88.51831818 -19.34072495]
[-100.47450256 -13.01585388]
[-113.69372559 -14.73759174]
[-123.34408569 -23.64923668]
[-126.02973175 -36.30801392]
[-139.62017822 -42.65620804]
[-153.21064758 -49.00439835]
[-167.84753418 -40.61898804]
[-184.43803406 -42.55564117]
[-196.50825500 -53.86052322]
[-199.46612549 -69.96308136]
[-213.20272827 -75.98851013]
[-226.93931580 -82.01393890]
[-240.67591858 -88.03937531]
[-254.41252136 -94.06480408]
[-268.14910889 -100.09023285]
[-281.88571167 -106.11566925]
[-298.81954956 -106.94110107]
[-302.71414185 -123.44165802]
[-287.93655396 -131.75184631]
[-275.86029053 -119.85226440]
[-262.12368774 -113.82683563]
[-248.38708496 -107.80140686]
[-234.65049744 -101.77597046]
[-220.91389465 -95.75054169]
[-207.17729187 -89.72511292]
[-193.44068909 -83.69967651]
[-182.54148865 -91.50078583]
[-169.10063171 -92.88466644]
[-156.64190674 -87.38034058]
[-148.48530579 -76.33695984]
[-146.86244202 -62.59485245]
[-133.27198792 -56.24666214]
[-119.68154144 -49.89846802]
[-104.18469238 -56.32008362]
[-88.51148224 -49.45405579]
[-82.49288177 -33.07732391]
[-68.75628662 -27.05189323]
[-55.01968384 -21.02646255]
[-40.25635147 -22.99958801]
[-30.72655869 -10.37050915]
[-16.98995972 -4.34507751]
[-3.32547879 -10.53232098]
[1.20856857 -24.83065796]
[5.74261570 -39.12899399]
[10.27666283 -53.42733002]
[1.74404669 -66.53185272]
[3.68241477 -82.04883575]
[15.17652893 -92.65163422]
[30.79922104 -93.33393097]
[43.17393112 -83.77356720]
[46.45770264 -68.48465729]
[39.10003662 -54.68614960]
[24.57499886 -48.89328384]
[20.04095268 -34.59494781]
[15.50690460 -20.29660988]
[10.97285748 -5.99827385]
[29.16582870 11.15990829]
[27.65220451 33.94190216]
[39.15551376 43.56863022]
[50.65882492 53.19535446]
[62.16213226 62.82208252]
[73.66544342 72.44880676]
[85.16875458 82.07553864]
[96.67205811 91.70226288]
[101.61656952 81.16399384]
[115.15533447 75.42749023]
[133.08557129 79.66467285]
[147.90910339 81.95868683]
[162.73265076 84.25269318]
[169.33055115 70.65272522]
[179.64520264 59.60286331]
[192.75942993 52.08565903]
[207.50714111 48.76953125]
[222.57695007 49.94935226]
[236.62889099 55.52021408]
[248.41345215 64.98675537]
[256.88278198 77.50721741]
[261.28375244 91.96829224]
[261.22509766 107.08411407]
[256.71197510 121.51058197]
[248.14569092 133.96492004]
[236.28799438 143.33969116]
[222.19323730 148.80128479]
[207.11470032 149.86407471]
[192.39318848 146.43356323]
[179.33772278 138.81477356]
[169.10916138 127.68516541]
[162.61705017 114.03437805]
[160.43864441 99.07624054]
[145.61509705 96.78222656]
[130.79154968 94.48822021]
[125.33399963 99.63264465]
[139.70193481 103.94108582]
[143.15457153 118.53832245]
[132.23924255 128.82693481]
[117.87140656 124.51818085]
[114.41889191 109.92149353]
[108.96134186 115.06592560]
[110.37649536 129.99902344]
[111.79164886 144.93211365]
[113.20679474 159.86520386]
[114.62194824 174.79830933]
[116.03710175 189.73139954]
[129.01290894 198.45851135]
[133.29356384 213.49879456]
[126.85789490 227.75067139]
[112.74461365 234.48484802]
[97.61757660 230.52166748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[7 122]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[19 65]
[20 64]
[22 62]
[23 61]
[24 60]
[28 57]
[29 56]
[30 55]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[66 80]
[67 79]
[68 78]
[69 77]
[91 115]
[92 114]
[93 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
