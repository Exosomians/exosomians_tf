%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGUCGACUGCUCAUAGGUUGUUUUGGUCAAUGUGUCCUCUGACUGCUCACCGUCAGUACCCACACUACCACGUACUAGAGUUCAAAAGUUAGACUCUGGA\
) } def
/len { sequence length } bind def

/coor [
[121.96820831 298.17834473]
[120.16016388 283.28771973]
[118.35211182 268.39706421]
[116.54405975 253.50643921]
[107.32907104 241.80459595]
[113.34652710 227.17240906]
[109.34911346 220.80581665]
[111.71576691 211.80560303]
[110.35828400 196.86715698]
[109.00080109 181.92871094]
[107.64331818 166.99026489]
[105.16263580 152.19680786]
[101.57290649 137.63267517]
[97.98316956 123.06855011]
[94.39343262 108.50442505]
[89.48401642 101.92787170]
[90.92229462 93.44622040]
[87.77407837 78.78031921]
[84.62586212 64.11441803]
[71.63733673 55.51582336]
[68.65351868 40.59766388]
[76.93100739 28.26807404]
[73.78279114 13.60216999]
[70.63457489 -1.06373358]
[66.89008331 -5.17454147]
[65.37185669 -9.85597515]
[65.90487671 -14.11723900]
[67.92916107 -17.19735146]
[66.12111664 -32.08798599]
[64.31306458 -46.97861862]
[52.74972916 -54.07833099]
[47.51322556 -66.38382721]
[50.33119965 -79.25672150]
[59.94045258 -87.98583221]
[58.58296967 -102.92427826]
[57.22548676 -117.86272430]
[55.86800385 -132.80117798]
[42.02750015 -139.31175232]
[33.36130905 -151.79350281]
[32.11459351 -166.83717346]
[38.52237701 -180.39431763]
[50.77322388 -188.86677551]
[49.41574097 -203.80522156]
[48.05825806 -218.74366760]
[46.70077515 -233.68211365]
[45.34329224 -248.62055969]
[31.94734383 -256.45181274]
[25.74372482 -270.67483521]
[29.11785126 -285.82061768]
[40.77230072 -296.06530762]
[56.22570419 -297.46957397]
[69.53591156 -289.49346924]
[75.58486938 -275.20397949]
[72.04663849 -260.09570312]
[60.28173828 -249.97804260]
[61.63922119 -235.03959656]
[62.99670410 -220.10115051]
[64.35418701 -205.16270447]
[65.71166992 -190.22425842]
[79.28904724 -184.09886169]
[88.03561401 -171.91882324]
[89.52101898 -156.89683533]
[83.24668121 -143.05741882]
[70.80644989 -134.15866089]
[72.16393280 -119.22020721]
[73.52141571 -104.28176117]
[74.87889862 -89.34331512]
[88.21625519 -79.22379303]
[90.22795868 -62.26533127]
[79.20369720 -48.78666687]
[81.01174927 -33.89603424]
[82.81980133 -19.00540161]
[85.30047607 -4.21194983]
[88.44869232 10.45395374]
[91.59690857 25.11985779]
[104.20537567 32.96601868]
[107.60703278 47.79448318]
[99.29177094 60.96620178]
[102.43998718 75.63210297]
[105.58820343 90.29800415]
[108.95756531 104.91468811]
[112.54729462 119.47882080]
[116.13703156 134.04293823]
[119.72676849 148.60707092]
[122.82366943 151.40357971]
[124.78688049 154.68429565]
[125.59895325 158.06698608]
[125.35859680 161.19868469]
[124.26303101 163.78848267]
[122.58176422 165.63278198]
[123.93924713 180.57122803]
[125.29673004 195.50967407]
[126.65421295 210.44812012]
[128.23716736 225.36436462]
[137.58148193 238.13128662]
[131.43469238 251.69839478]
[133.24273682 266.58901978]
[135.05079651 281.47964478]
[136.85884094 296.37030029]
[148.55007935 307.35638428]
[147.10661316 323.33438110]
[133.63572693 332.04730225]
[118.47115326 326.81134033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[6 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 84]
[13 83]
[14 82]
[15 81]
[17 80]
[18 79]
[19 78]
[22 75]
[23 74]
[24 73]
[28 72]
[29 71]
[30 70]
[34 67]
[35 66]
[36 65]
[37 64]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
