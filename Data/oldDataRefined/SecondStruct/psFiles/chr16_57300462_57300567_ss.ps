%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUCAUUAACUCGAGACAGUCUUCACCCUAAGCUUGGGUGCGGAGGUCCCCUCUGACGCUGGACUUGCGUCGCGGAAUCUGGCGAGCCGGUAGGACUGACGAA\
) } def
/len { sequence length } bind def

/coor [
[61.16116714 299.29785156]
[57.27732468 313.97027588]
[48.35229111 326.24661255]
[35.59310532 334.46655273]
[20.72534180 337.51846313]
[5.75974560 334.98956299]
[-7.27971125 327.22186279]
[-16.62954903 315.26589966]
[-21.02527809 300.73861694]
[-19.87241364 285.60470581]
[-13.32686901 271.91091919]
[-2.27387714 261.50918579]
[11.79173565 255.80628967]
[26.96771240 255.57350159]
[32.14397049 241.49493408]
[37.32022858 227.41635132]
[32.14249802 218.38400269]
[32.89264297 207.77777100]
[39.56217957 199.21429443]
[50.08263397 195.75090027]
[56.07621002 182.00038147]
[62.06978607 168.24984741]
[68.06336212 154.49931335]
[74.05693054 140.74879456]
[80.05050659 126.99826050]
[86.04408264 113.24772644]
[81.07505035 99.09468079]
[67.80109406 92.10884094]
[54.52713394 85.12300110]
[41.25317383 78.13715363]
[27.97921371 71.15131378]
[13.57472992 77.23776245]
[-1.35676229 72.59185028]
[-9.76506901 59.40721893]
[-7.68004513 43.90926361]
[3.91382504 33.41563416]
[19.54227066 32.88111115]
[31.82601738 42.55807114]
[34.96505356 57.87735748]
[48.23901367 64.86319733]
[61.51297379 71.84903717]
[74.78693390 78.83488464]
[88.06089783 85.82072449]
[100.29885864 77.14707184]
[98.10470581 62.30841064]
[95.91056061 47.46975708]
[93.71640778 32.63109970]
[91.52225494 17.79244423]
[89.32810974 2.95378923]
[81.02990723 -11.83053493]
[92.93928528 -23.89714432]
[107.83116913 -15.79356098]
[104.16676331 0.75963932]
[106.36091614 15.59829521]
[108.55506134 30.43695068]
[110.74921417 45.27560806]
[112.94335938 60.11426163]
[115.13751221 74.95291901]
[115.26907349 82.83609009]
[113.17313385 89.76921082]
[109.22708893 95.23241425]
[124.03193665 92.82067108]
[138.83679199 90.40892792]
[153.64163208 87.99719238]
[168.44648743 85.58544922]
[176.56303406 81.05233002]
[183.72079468 83.32687378]
[198.59005737 81.35079193]
[213.45932007 79.37471008]
[228.32859802 77.39862061]
[243.19786072 75.42253876]
[247.46475220 60.80359268]
[257.31375122 49.18821716]
[271.03848267 42.58884811]
[286.26104736 42.14886475]
[300.34402466 47.94449234]
[310.84747314 58.97161102]
[315.95162964 73.31970215]
[314.77209473 88.50287628]
[307.51330566 101.89054871]
[295.43286133 111.16322327]
[280.62377930 114.71437073]
[265.65179443 111.92871094]
[253.11093140 103.28888702]
[245.17395020 90.29180145]
[230.30467224 92.26789093]
[215.43540955 94.24397278]
[200.56614685 96.22006226]
[185.69688416 98.19614410]
[170.85823059 100.39029694]
[156.05337524 102.80203247]
[141.24853516 105.21377563]
[126.44367981 107.62551880]
[111.63883209 110.03726196]
[99.79460907 119.24130249]
[93.80104065 132.99183655]
[87.80746460 146.74237061]
[81.81388855 160.49288940]
[75.82031250 174.24342346]
[69.82673645 187.99395752]
[63.83316422 201.74447632]
[67.13811493 221.52294922]
[51.39880753 232.59260559]
[46.22254944 246.67118835]
[41.04629135 260.74975586]
[52.45707321 270.75769043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 105]
[15 104]
[16 103]
[20 101]
[21 100]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
