%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAAAACCCAGUUACUACUCAACCGUACAUAAGACUUAGAUUUCAACUAAUAAUGAUGAAAUCGAGAUCUUAAUGAGACUCUGGACU\
) } def
/len { sequence length } bind def

/coor [
[21.29929543 404.16802979]
[7.39095211 410.37109375]
[-7.83796358 410.37432861]
[-21.74895096 404.17721558]
[-31.93184471 392.85342407]
[-36.62239838 378.36483765]
[-35.00794983 363.22174072]
[-27.36820221 350.04776001]
[-15.02679634 341.12533569]
[-0.12195183 338.00033569]
[2.99672341 323.32812500]
[6.11539888 308.65591431]
[9.23407459 293.98370361]
[0.06572545 287.00656128]
[-5.77164412 277.01321411]
[-7.35981083 265.49679565]
[-4.41891193 254.19567871]
[2.64421821 244.83108521]
[12.79182816 238.84495544]
[24.50757980 237.17791748]
[29.14283371 222.91206360]
[33.77809143 208.64622498]
[38.41334534 194.38037109]
[33.68857193 189.62113953]
[30.57387543 183.63569641]
[29.37276840 176.95431519]
[30.21798897 170.17721558]
[33.05731964 163.92060852]
[37.65612030 158.76069641]
[43.61655426 155.18060303]
[50.41191864 153.52522278]
[57.43317795 153.96804810]
[65.38196564 141.24732971]
[73.33075714 128.52661133]
[81.27954865 115.80589294]
[89.22833252 103.08516693]
[96.95390320 90.22766113]
[104.45390320 77.23727417]
[111.95390320 64.24689484]
[113.59654236 55.03314209]
[119.94913483 50.94059753]
[127.89792633 38.21987534]
[135.84671021 25.49915504]
[143.79550171 12.77843380]
[151.74429321 0.05771234]
[159.69308472 -12.66300869]
[167.64187622 -25.38372993]
[168.39324951 -41.18708420]
[181.69927979 -47.88027954]
[176.69523621 -62.69559860]
[182.43315125 -77.24243164]
[196.20375061 -84.65220642]
[211.50497437 -81.42626190]
[221.11204529 -69.08777618]
[220.48881531 -53.46261978]
[209.92953491 -41.92850494]
[194.41999817 -39.93149185]
[194.23716736 -25.03800774]
[180.36259460 -17.43494225]
[172.41380310 -4.71422005]
[164.46501160 8.00650120]
[156.51622009 20.72722244]
[148.56742859 33.44794464]
[140.61865234 46.16866684]
[132.66986084 58.88938522]
[124.94429016 71.74689484]
[117.44429016 84.73727417]
[109.94429016 97.72766113]
[108.91909790 105.91585541]
[101.94905853 111.03395844]
[94.00026703 123.75467682]
[86.05147552 136.47540283]
[78.10269165 149.19612122]
[70.15390015 161.91683960]
[72.80830383 186.25575256]
[52.67919159 199.01562500]
[48.04393768 213.28147888]
[43.40868378 227.54733276]
[38.77342606 241.81317139]
[50.65373230 256.51074219]
[51.53114700 275.24310303]
[41.23799515 290.74389648]
[23.90628815 297.10238647]
[20.78761292 311.77459717]
[17.66893768 326.44680786]
[14.55026245 341.11901855]
[26.89547157 350.03619385]
[34.54083252 363.20690918]
[36.16173935 378.34933472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 86]
[11 85]
[12 84]
[13 83]
[20 79]
[21 78]
[22 77]
[23 76]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 68]
[38 67]
[39 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
