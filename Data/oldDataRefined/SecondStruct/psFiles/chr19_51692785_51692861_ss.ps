%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCCGACUCCAUCCUCCAACAUAUCAACUCCUCCUGUGGGUUCCUCUAGUGAUAUGCCGGAGGAUCGAAAGGGG\
) } def
/len { sequence length } bind def

/coor [
[69.93405914 356.28295898]
[54.24499893 354.37796021]
[44.56410217 341.88574219]
[46.63486481 326.21768188]
[59.22874451 316.66940308]
[61.03679657 301.77877808]
[62.84484482 286.88815308]
[53.46877289 277.81768799]
[51.07890701 264.79339600]
[56.79062271 252.62965393]
[68.68111420 245.95800781]
[71.08728790 231.15225220]
[65.49178314 217.34864807]
[75.34259033 204.96833801]
[77.74875641 190.16258240]
[80.15493011 175.35682678]
[82.56109619 160.55107117]
[84.96726227 145.74531555]
[87.37343597 130.93955994]
[89.77960205 116.13380432]
[81.39553833 104.31629181]
[83.71982574 90.01440430]
[95.41464233 81.46002197]
[97.82080841 66.65426636]
[100.22698212 51.84851456]
[102.63314819 37.04276276]
[105.03932190 22.23700714]
[107.44548798 7.43125296]
[109.85165405 -7.37450075]
[109.85165405 -22.37450027]
[107.44548798 -37.18025589]
[105.03932190 -51.98600769]
[102.63314819 -66.79176331]
[99.92932129 -81.54605865]
[88.65559387 -93.45551300]
[93.59131622 -109.09426880]
[109.65904999 -112.37451935]
[120.32968140 -99.92182159]
[114.62618256 -84.54644775]
[119.17526245 -78.45607758]
[117.43890381 -69.19792938]
[119.84506989 -54.39217758]
[122.25124359 -39.58642578]
[124.65740967 -24.78067017]
[134.43803406 -36.15341568]
[148.96168518 -39.90356827]
[163.02565002 -34.68774033]
[171.59190369 -22.37436295]
[171.59182739 -7.37436199]
[163.02542114 4.93891764]
[148.96139526 10.15458107]
[134.43778992 6.40425873]
[124.65740967 -4.96833181]
[122.25124359 9.83742237]
[119.84506989 24.64317703]
[117.43890381 39.44892883]
[115.03273773 54.25468445]
[112.62656403 69.06044006]
[110.22039795 83.86619568]
[118.60446167 95.68370819]
[116.28017426 109.98559570]
[104.58535767 118.53997803]
[102.17919159 133.34573364]
[99.77301788 148.15148926]
[97.36685181 162.95724487]
[94.96067810 177.76300049]
[92.55451202 192.56874084]
[90.14834595 207.37449646]
[95.57174683 222.23712158]
[85.89304352 233.55842590]
[83.48686981 248.36418152]
[93.95156860 262.21463013]
[91.34996033 279.03994751]
[77.73548126 288.69619751]
[75.92742920 303.58682251]
[74.11937714 318.47744751]
[84.06224823 330.76220703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[11 71]
[12 70]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 44]
[31 43]
[32 42]
[33 41]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
