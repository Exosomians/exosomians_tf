%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGCGUUGGUGGGUACUGGGGCUGCACUAAACUUGUGCGUUGGAAGACUAGACCUCAGUCUGCGCGAUGGCAACGCGGUGCUCCAGUG\
) } def
/len { sequence length } bind def

/coor [
[216.05847168 451.91979980]
[212.50700378 437.34631348]
[201.97633362 426.81283569]
[206.22624207 411.57312012]
[202.67477417 396.99960327]
[199.12332153 382.42608643]
[195.57185364 367.85260010]
[192.02038574 353.27908325]
[188.46891785 338.70556641]
[184.91744995 324.13208008]
[181.36598206 309.55856323]
[176.58482361 295.34094238]
[170.60881042 281.58279419]
[164.63279724 267.82461548]
[152.46549988 259.23355103]
[154.06423950 243.49334717]
[141.89694214 234.90229797]
[143.49566650 219.16206360]
[137.51965332 205.40390015]
[131.54364014 191.64573669]
[125.56762695 177.88755798]
[119.59160614 164.12939453]
[113.61559296 150.37121582]
[107.63957214 136.61305237]
[101.42953491 122.95891571]
[94.98728180 109.41279602]
[86.12911987 97.30772400]
[75.16658020 87.06941986]
[64.20404053 76.83112335]
[53.24149704 66.59282684]
[37.74198532 68.66626740]
[24.56365013 60.24810410]
[19.92889595 45.31314087]
[26.02611351 30.91321373]
[39.97638321 23.84752274]
[55.19281387 27.45227432]
[64.49067688 40.02541351]
[63.47979736 55.63029099]
[74.44233704 65.86858368]
[85.40487671 76.10688019]
[96.36741638 86.34518433]
[110.22560883 80.60492706]
[110.73772430 65.61367798]
[111.24983978 50.62241745]
[103.06656647 36.41094589]
[111.51548004 22.35577202]
[127.90506744 22.91565704]
[135.37512207 37.51463699]
[126.24109650 51.13453674]
[125.72898102 66.12579346]
[125.21686554 81.11704254]
[120.02996063 96.89324188]
[108.53340149 102.97054291]
[114.97565460 116.51667023]
[121.62561035 123.09008026]
[121.39774323 130.63703918]
[127.37376404 144.39520264]
[133.34977722 158.15338135]
[139.32579041 171.91154480]
[145.30180359 185.66970825]
[151.27783203 199.42788696]
[157.25384521 213.18605042]
[169.84858704 222.76118469]
[167.82240295 237.51733398]
[180.41714478 247.09245300]
[178.39096069 261.84860229]
[184.36698914 275.60678101]
[190.34300232 289.36492920]
[193.97080994 291.65594482]
[196.51074219 294.64883423]
[197.87664795 297.94207764]
[198.11332703 301.14547729]
[197.38282776 303.91931152]
[195.93948364 306.00711060]
[199.49095154 320.58059692]
[203.04241943 335.15411377]
[206.59388733 349.72763062]
[210.14535522 364.30111694]
[213.69682312 378.87463379]
[217.24829102 393.44815063]
[220.79975891 408.02163696]
[231.58445740 419.59753418]
[227.08050537 433.79483032]
[230.63197327 448.36834717]
[245.03865051 454.13265991]
[253.27719116 467.28204346]
[252.17971802 482.76025391]
[242.16822815 494.61563110]
[227.09236145 498.28952026]
[212.74906921 492.36926270]
[204.65365601 479.13128662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 68]
[13 67]
[14 66]
[16 64]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 54]
[26 53]
[27 41]
[28 40]
[29 39]
[30 38]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
