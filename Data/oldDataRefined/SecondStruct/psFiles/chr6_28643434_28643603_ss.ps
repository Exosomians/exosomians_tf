%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAUACACACCCCUACAUCGAGUCACCAUCUCGCGUACGAAACGUACAUACUCCAGGGCCCAAGCUAGGGGCCGUAGAGGUUAUCCAUAAUUCCAAAAUCGCGACUAAGAACAAGUUGCAUGCACGACGACUCGUUUAGAAGGCGAGUGACAAUAACGGUUCCAGAGA\
) } def
/len { sequence length } bind def

/coor [
[284.13223267 140.70010376]
[281.12753296 127.52204895]
[279.53717041 114.09873962]
[279.37927246 100.58152008]
[264.45578003 99.06842041]
[249.53228760 97.55531311]
[234.60879517 96.04221344]
[231.63940430 98.00936890]
[227.55891418 98.61437988]
[223.02809143 97.34609222]
[218.91287231 94.01246643]
[204.09539795 91.67955780]
[189.27792358 89.34664917]
[175.50215149 95.01036072]
[163.07327271 85.22091675]
[148.25579834 82.88800812]
[133.43832397 80.55509949]
[118.62084961 78.22219086]
[135.45312500 98.45809174]
[130.19114685 129.65603638]
[98.74272156 149.13735962]
[85.89231110 156.87474060]
[73.04190826 164.61210632]
[60.19149780 172.34948730]
[57.93832016 187.82389832]
[46.23119736 198.19102478]
[30.59786987 198.55581665]
[18.41991806 188.74604797]
[15.44740009 173.39358521]
[23.08384705 159.74739075]
[37.72356033 154.25077820]
[52.45412064 159.49908447]
[65.30452728 151.76170349]
[78.15493011 144.02432251]
[91.00534058 136.28694153]
[89.03094482 129.05149841]
[83.10775757 107.34513855]
[68.10839081 107.20735168]
[53.10902405 107.06956482]
[38.10965729 106.93177795]
[23.11028862 106.79399109]
[7.21628475 112.69458008]
[-2.85360551 99.05516815]
[7.46515322 85.60304260]
[23.24807739 91.79462433]
[38.24744415 91.93241119]
[53.24681091 92.07019806]
[68.24617767 92.20798492]
[83.24554443 92.34577179]
[86.50853729 85.59278107]
[73.00255585 79.06679535]
[59.49657822 72.54080963]
[44.63498688 70.50778198]
[41.97605133 55.74533081]
[55.19433594 48.65470505]
[66.02256012 59.03483200]
[79.52854156 65.56081390]
[93.03452301 72.08679962]
[96.29751587 65.33380890]
[86.86842346 53.66795731]
[77.43933105 42.00210190]
[68.01023865 30.33624458]
[58.58114243 18.67038918]
[42.94392014 18.56403351]
[31.06703949 8.39182854]
[28.55840111 -7.04322100]
[36.60250854 -20.45315742]
[51.40117645 -25.50621796]
[65.96692657 -19.81650162]
[73.42226410 -6.07052040]
[70.24699402 9.24129486]
[79.67609406 20.90715027]
[89.10518646 32.57300568]
[98.53427887 44.23886108]
[107.96337128 55.90472031]
[120.95375061 63.40472031]
[135.77122498 65.73762512]
[150.58869934 68.07053375]
[165.40617371 70.40344238]
[180.24177551 64.90659332]
[191.61082458 74.52917480]
[206.42829895 76.86208344]
[221.24577332 79.19499207]
[236.12190247 81.11872101]
[251.04539490 82.63182831]
[265.96887207 84.14492798]
[280.89236450 85.65803528]
[285.16778564 67.67485046]
[292.00189209 50.50235367]
[301.25003052 34.50243378]
[312.71670532 20.01218796]
[326.15960693 7.33681059]
[341.29492188 -3.25683522]
[357.80316162 -11.54584026]
[375.33590698 -17.35593414]
[393.52331543 -20.56515121]
[411.98175049 -21.10639381]
[430.32196045 -18.96882820]
[448.15725708 -14.19810581]
[465.11175537 -6.89538908]
[480.82812500 2.78479671]
[494.97525024 14.63783169]
[507.25521851 28.41332626]
[519.65991211 19.97979736]
[532.06451416 11.54626656]
[544.46917725 3.11273718]
[556.87384033 -5.32079268]
[569.27850342 -13.75432205]
[570.67584229 -29.32935143]
[581.79406738 -40.32565308]
[597.38354492 -41.55110550]
[610.08343506 -32.42708969]
[613.89715576 -17.26169014]
[607.02404785 -3.21553898]
[592.70935059 3.07919717]
[577.71203613 -1.34966302]
[565.30737305 7.08386660]
[552.90270996 15.51739693]
[540.49804688 23.95092583]
[528.09338379 32.38445663]
[515.68878174 40.81798553]
[520.88629150 50.44692612]
[525.23626709 60.48730087]
[528.70629883 70.86466217]
[531.27081299 81.50207520]
[532.91070557 92.32066345]
[533.61383057 103.24021912]
[533.37493896 114.17978668]
[532.19586182 125.05824280]
[530.08532715 135.79493713]
[527.05895996 146.31027222]
[523.13928223 156.52629089]
[536.52307129 163.29928589]
[549.90686035 170.07228088]
[563.29071045 176.84529114]
[576.67449951 183.61828613]
[590.05834961 190.39128113]
[603.44213867 197.16429138]
[616.82592773 203.93728638]
[633.68859863 205.69430542]
[636.66827393 222.38436890]
[621.45538330 229.86787415]
[610.05297852 217.32110596]
[596.66912842 210.54809570]
[583.28533936 203.77510071]
[569.90148926 197.00210571]
[556.51770020 190.22909546]
[543.13391113 183.45610046]
[529.75006104 176.68310547]
[516.36627197 169.91009521]
[508.97027588 181.19862366]
[500.41833496 191.63990784]
[490.80667114 201.11605835]
[480.24353027 209.52009583]
[468.84799194 216.75704956]
[456.74838257 222.74516296]
[444.08111572 227.41671753]
[430.98895264 230.71885681]
[417.61950684 232.61412048]
[404.12353516 233.08094788]
[390.65322876 232.11387634]
[377.36050415 229.72361755]
[364.39529419 225.93693542]
[351.90390015 220.79632568]
[340.02725220 214.35960388]
[328.89938354 206.69915771]
[318.64593506 197.90122986]
[309.38262939 188.06489563]
[301.21411133 177.30091858]
[294.23263550 165.73060608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 87]
[5 86]
[6 85]
[7 84]
[11 83]
[12 82]
[13 81]
[15 79]
[16 78]
[17 77]
[18 76]
[21 35]
[22 34]
[23 33]
[24 32]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[103 121]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
