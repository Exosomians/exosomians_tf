%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUUUUUGUGUGUCCGGGGUCGCUCUUAACUUGAGCGCUGGGGACCAAAUGUUCUGGUCGCGAGAUUGGGGACUCGAUACCUCGGGAGCAGA\
) } def
/len { sequence length } bind def

/coor [
[112.49792480 128.35516357]
[102.07546997 130.91772461]
[91.40402985 129.77117920]
[81.76382446 125.05304718]
[74.31136322 117.32937622]
[69.94069672 107.52674103]
[69.17617035 96.82114410]
[55.07138443 91.71675110]
[40.96659088 86.61235046]
[26.86180115 81.50794983]
[17.52344513 81.50955963]
[12.37977314 75.99456787]
[-1.54853737 70.42660522]
[-17.23480797 72.48852539]
[-26.18070221 60.57969284]
[-40.10901260 55.01173401]
[-54.03732300 49.44377518]
[-67.96563721 43.87581635]
[-81.89394379 38.30785751]
[-87.45852661 39.13582993]
[-92.23727417 37.75284576]
[-95.48542023 34.88023758]
[-96.88120270 31.43616104]
[-110.18954468 24.51604462]
[-123.49788666 17.59592628]
[-136.80622864 10.67580891]
[-150.11457825 3.75569153]
[-164.48878479 9.91329670]
[-179.44306946 5.34126949]
[-187.91645813 -7.80161762]
[-185.90809631 -23.30969620]
[-174.36627197 -33.86052704]
[-158.74066162 -34.47232437]
[-146.40921021 -24.85622406]
[-143.19445801 -9.55265045]
[-129.88610840 -2.63253331]
[-116.57776642 4.28758430]
[-103.26942444 11.20770168]
[-89.96108246 18.12781906]
[-76.32598877 24.37954712]
[-62.39767456 29.94750595]
[-48.46936417 35.51546478]
[-34.54105377 41.08342361]
[-20.61274338 46.65138245]
[-5.92271996 44.19120789]
[4.01942110 56.49829483]
[17.94773102 62.06625366]
[31.96619797 67.40316010]
[46.07099152 72.50756073]
[60.17578125 77.61196136]
[74.28057098 82.71635437]
[89.40340424 70.88083649]
[108.59597015 70.22882843]
[124.48716736 81.01073456]
[130.97381592 99.08566284]
[145.62861633 102.28515625]
[160.28341675 105.48464966]
[174.93821716 108.68414307]
[190.07116699 104.06847382]
[200.85519409 114.34243774]
[215.50999451 117.54193115]
[230.64294434 112.92626190]
[241.42695618 123.20022583]
[256.08175659 126.39971924]
[270.73657227 129.59921265]
[285.39135742 132.79870605]
[300.14395142 135.51191711]
[314.97814941 137.73587036]
[329.81237793 139.95982361]
[344.64660645 142.18377686]
[359.48080444 144.40774536]
[374.53524780 137.90417480]
[387.53143311 147.90571594]
[385.10003662 164.12361145]
[369.74224854 169.87429810]
[357.25686646 159.24195862]
[342.42263794 157.01800537]
[327.58840942 154.79405212]
[312.75421143 152.57009888]
[297.91998291 150.34613037]
[293.47326660 152.54057312]
[287.58105469 151.82008362]
[282.19186401 147.45350647]
[267.53707886 144.25401306]
[252.88226318 141.05451965]
[238.22746277 137.85502625]
[224.14271545 142.69955444]
[212.31050110 132.19673157]
[197.65570068 128.99723816]
[183.57095337 133.84176636]
[171.73872375 123.33895111]
[157.08392334 120.13945007]
[142.42912292 116.93995667]
[127.77432251 113.74046326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 51]
[8 50]
[9 49]
[10 48]
[12 47]
[13 46]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[55 94]
[56 93]
[57 92]
[58 91]
[60 89]
[61 88]
[63 86]
[64 85]
[65 84]
[66 83]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
