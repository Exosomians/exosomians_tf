%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUCGAAAGUCGACGACGUAACCGGCCCUUAGCUUGGGCCCGGAGGGCGCACCGUCCGCUCUUAAGAUGGUGACUUGGUGGUUACGAGGUCGA\
) } def
/len { sequence length } bind def

/coor [
[42.11996460 311.03024292]
[41.01572418 326.21905518]
[33.82337570 339.64254761]
[21.78903580 348.97500610]
[6.99772549 352.59948730]
[-7.98787212 349.88809204]
[-20.57141113 341.31051636]
[-28.57271576 328.35293579]
[-30.60551453 313.26031494]
[-26.31760979 298.64752197]
[-16.45190811 287.04632568]
[-2.71770215 280.46667480]
[12.50547409 280.04858398]
[18.18957520 266.16726685]
[23.87367439 252.28596497]
[29.55777550 238.40463257]
[35.24187469 224.52331543]
[29.26735306 210.92770386]
[34.83409500 196.76910400]
[49.13492966 190.59466553]
[54.81903076 176.71333313]
[60.50313187 162.83201599]
[66.18723297 148.95069885]
[71.87133026 135.06938171]
[77.55543518 121.18806458]
[83.23953247 107.30674744]
[79.63166046 92.74710083]
[68.12366486 83.12597656]
[56.61566544 73.50485992]
[45.10766983 63.88373184]
[33.59967422 54.26261139]
[18.23734093 57.18369675]
[4.61679459 49.50158691]
[-0.83075815 34.84354782]
[4.46684933 20.13064957]
[18.00824928 12.30987549]
[33.39960480 15.07395554]
[43.37359238 27.11777687]
[43.22079468 42.75461197]
[54.72879410 52.37573624]
[66.23679352 61.99686050]
[77.74478912 71.61798096]
[89.25278473 81.23910522]
[103.54835510 76.69635773]
[107.39152527 62.19704437]
[111.23468781 47.69773102]
[115.07785797 33.19841766]
[111.13457489 17.87650108]
[121.87448120 7.55643654]
[125.71765137 -6.94287634]
[120.91056824 -22.62165070]
[132.28175354 -34.43808365]
[148.13351440 -30.23643875]
[152.15890503 -14.33901119]
[140.21696472 -3.09970975]
[136.37379456 11.39960289]
[140.59196472 25.68443108]
[129.57716370 37.04158401]
[125.73400116 51.54089737]
[121.89083862 66.04020691]
[118.04766846 80.53952026]
[122.57312775 86.52033997]
[137.45764160 84.66252899]
[131.62403870 98.48198700]
[136.14950562 104.46280670]
[151.14753723 104.70570374]
[166.14556885 104.94860077]
[181.14360046 105.19149780]
[196.14163208 105.43438721]
[206.24855042 93.50190735]
[221.66961670 90.90866089]
[235.12345886 98.87910461]
[240.25759888 113.64984131]
[234.64785767 128.24658203]
[220.94296265 135.77717590]
[205.61396790 132.68592834]
[195.89874268 120.43242645]
[180.90071106 120.18952942]
[165.90267944 119.94663239]
[150.90464783 119.70373535]
[135.90661621 119.46083832]
[111.23728180 124.63142395]
[97.12084961 112.99084473]
[91.43675232 126.87216949]
[85.75265503 140.75347900]
[80.06855011 154.63479614]
[74.38445282 168.51612854]
[68.70034790 182.39744568]
[63.01625061 196.27876282]
[68.87951660 210.70997620]
[62.91728210 224.70663452]
[49.12319565 230.20742798]
[43.43909454 244.08874512]
[37.75499344 257.97006226]
[32.07089233 271.85137939]
[26.38679314 285.73269653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[44 61]
[45 60]
[46 59]
[47 58]
[49 56]
[50 55]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
