%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUAACAGGUACAGUUAGACAGUACUAAAAUGGGAGUAUUUCCGUUUUAGUUUUUACUAAUUGUGCCGAAAAGAAAGUCGUCCUAUUACCGUCAUGAAGGUGUUUUACUUCGUGACAUUAACGUUGGACGAAA\
) } def
/len { sequence length } bind def

/coor [
[78.18610382 114.20728302]
[74.01627350 101.59333038]
[59.41469955 98.15907288]
[44.81312943 94.72481537]
[30.21155739 91.29055786]
[20.42821693 101.07199860]
[7.18797970 104.69069672]
[-6.00020599 101.29912567]
[-15.69619846 91.89304352]
[-19.42597389 79.02234650]
[-33.94432449 75.25173950]
[-48.46267700 71.48113251]
[-62.98102951 67.71052551]
[-77.49938202 63.93991852]
[-92.01773071 60.16931152]
[-106.53607941 56.39870071]
[-121.05443573 52.62809372]
[-135.57278442 48.85748672]
[-150.09114075 45.08687973]
[-164.60948181 41.31627274]
[-174.51268005 52.87863541]
[-188.39735413 58.96982574]
[-203.48806763 58.43074799]
[-216.79356384 51.42184830]
[-225.69975281 39.38069153]
[-228.48316956 24.72743225]
[-243.00152588 20.95682526]
[-257.51986694 17.18621635]
[-272.03823853 13.41560936]
[-286.55657959 9.64500237]
[-301.07492065 5.87439442]
[-315.59329224 2.10378695]
[-330.11163330 -1.66682065]
[-344.62997437 -5.43742800]
[-359.14834595 -9.20803547]
[-373.66668701 -12.97864342]
[-388.18502808 -16.74925041]
[-403.83956909 -11.86381912]
[-415.71273804 -23.17577362]
[-411.59042358 -39.04834366]
[-395.71331787 -43.15319443]
[-384.41442871 -31.26760101]
[-369.89608765 -27.49699402]
[-355.37771606 -23.72638702]
[-340.85937500 -19.95578003]
[-326.34103394 -16.18517113]
[-311.82266235 -12.41456413]
[-297.30432129 -8.64395714]
[-282.78598022 -4.87334919]
[-268.26760864 -1.10274160]
[-253.74926758 2.66786575]
[-239.23091125 6.43847322]
[-224.71257019 10.20908070]
[-215.15055847 -1.23790646]
[-201.51063538 -7.42354250]
[-186.47610474 -7.07215834]
[-173.03019714 -0.19990271]
[-163.86422729 11.87784672]
[-160.83888245 26.79792213]
[-146.32052612 30.56852913]
[-131.80216980 34.33913803]
[-117.28382111 38.10974503]
[-102.76547241 41.88035202]
[-88.24712372 45.65095901]
[-73.72877502 49.42156601]
[-59.21041870 53.19217300]
[-44.69207001 56.96278000]
[-30.17371750 60.73339081]
[-15.65536690 64.50399780]
[-3.36204576 53.68727493]
[13.11845207 52.28303909]
[27.34671974 61.03754425]
[33.64581680 76.68898773]
[48.24738693 80.12324524]
[62.84895706 83.55750275]
[77.45053101 86.99176025]
[89.52652740 76.16726685]
[105.66708374 74.59178925]
[119.60835266 82.87675476]
[125.93999481 97.80692291]
[140.61698914 100.90299988]
[155.29399109 103.99907684]
[169.97099304 107.09515381]
[184.64799500 110.19123077]
[199.32499695 113.28730774]
[214.70011902 102.33946991]
[232.90267944 105.95236206]
[242.59416199 121.40549469]
[257.39846802 123.82043457]
[272.20281982 126.23537445]
[284.94467163 117.27532196]
[299.92398071 119.93531036]
[308.38748169 132.13795471]
[323.19180298 134.55288696]
[337.99612427 136.96783447]
[352.80044556 139.38276672]
[367.60479736 141.79771423]
[382.40911865 144.21264648]
[397.21343994 146.62757874]
[412.01776123 149.04252625]
[426.82208252 151.45745850]
[437.74969482 140.44079590]
[453.07110596 137.98443604]
[466.89495850 145.03292847]
[473.90567017 158.87596130]
[471.40747070 174.19061279]
[460.36099243 185.08808899]
[445.01382446 187.37809753]
[431.26727295 180.18005371]
[424.40716553 166.26177979]
[409.60281372 163.84684753]
[394.79849243 161.43191528]
[379.99417114 159.01696777]
[365.18984985 156.60203552]
[350.38552856 154.18708801]
[335.58120728 151.77215576]
[320.77685547 149.35722351]
[305.97253418 146.94227600]
[294.06988525 155.82272339]
[279.02178955 153.58451843]
[269.78787231 141.03970337]
[254.98353577 138.62475586]
[240.17921448 136.20982361]
[232.50231934 144.79042053]
[221.50981140 148.60009766]
[209.93225098 146.56872559]
[200.70610046 139.09274292]
[196.22891235 127.96430206]
[181.55191040 124.86822510]
[166.87492371 121.77214813]
[152.19792175 118.67607880]
[137.52091980 115.58000183]
[122.84391785 112.48392487]
[113.70909119 122.13037872]
[101.00385284 126.01317596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[80 133]
[81 132]
[82 131]
[83 130]
[84 129]
[85 128]
[88 123]
[89 122]
[90 121]
[93 118]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
