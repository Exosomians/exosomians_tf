%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGUUCAUUACAGUCCGGUAUUUGGUAAGAGUCACGGGUGACCAAGGGCUCGUGACUCACAUCUUUAGCGGUGAAAGAGAAACGGGGCUCCGGUGUCCGUGUCGUCUCGUUGACAGACACCACGGUUGUCCAGGUCCUGUCGUAGGCGUCCCGUCG\
) } def
/len { sequence length } bind def

/coor [
[-60.09987259 146.33418274]
[-69.11869812 154.14509583]
[-79.28220367 160.38800049]
[-90.32066345 164.89851379]
[-101.94134521 167.55815125]
[-113.83625793 168.29753113]
[-125.69030762 167.09811401]
[-137.18966675 163.99273682]
[-148.03009033 159.06468201]
[-157.92489624 152.44541931]
[-166.61265564 144.31114197]
[-173.86401367 134.87805176]
[-179.48776245 124.39662170]
[-183.33592224 113.14492798]
[-185.30758667 101.42131805]
[-185.35159302 89.53643799]
[-200.11204529 86.86647034]
[-214.87251282 84.19650269]
[-229.82952881 89.35384369]
[-240.97633362 79.47467041]
[-255.73680115 76.80470276]
[-265.87542725 85.72117615]
[-279.10714722 87.13214874]
[-290.55752563 80.74398041]
[-296.13836670 69.09493256]
[-310.84280396 66.13201904]
[-325.54727173 63.16911316]
[-338.61303711 71.64991760]
[-353.48321533 68.43563080]
[-361.48785400 55.92717743]
[-376.19232178 52.96426773]
[-390.89678955 50.00135422]
[-405.60125732 47.03844452]
[-420.30569458 44.07553482]
[-435.01016235 41.11262131]
[-449.71463013 38.14971161]
[-464.41909790 35.18680191]
[-479.12353516 32.22388840]
[-493.82800293 29.26097870]
[-508.53247070 26.29806709]
[-519.86157227 36.90143585]
[-535.26361084 38.78725815]
[-548.81622314 31.23039818]
[-555.30816650 17.13662148]
[-552.24310303 1.92527282]
[-540.79968262 -8.55457306]
[-525.37805176 -10.27320194]
[-511.90820312 -2.56976557]
[-505.56954956 11.59360695]
[-490.86508179 14.55651760]
[-476.16064453 17.51942825]
[-461.45617676 20.48233986]
[-446.75170898 23.44525146]
[-432.04724121 26.40816116]
[-417.34280396 29.37107277]
[-402.63833618 32.33398438]
[-387.93386841 35.29689407]
[-373.22940063 38.25980377]
[-358.52496338 41.22271729]
[-346.30078125 32.79030991]
[-331.34616089 35.58565140]
[-322.58438110 48.46465302]
[-307.87991333 51.42756271]
[-293.17544556 54.39047241]
[-279.60879517 44.49315643]
[-262.74511719 47.50336075]
[-253.06683350 62.04423904]
[-238.30636597 64.71421051]
[-224.40512085 59.36589432]
[-212.20254517 69.43603516]
[-197.44207764 72.10600281]
[-182.68162537 74.77597809]
[-175.41455078 57.88051987]
[-164.15190125 43.32913589]
[-149.60433960 32.04719925]
[-132.69160461 24.75355339]
[-114.48439026 21.91471863]
[-96.13651276 23.71504021]
[-78.81181335 30.04473686]
[-63.61034393 40.50657654]
[-51.49850464 54.44080353]
[-43.24760437 70.96674347]
[-39.38475800 89.03847504]
[-24.38772392 89.33670807]
[-9.39068890 89.63494110]
[5.60634613 89.93317413]
[20.60338020 90.23140717]
[35.60041428 90.52964020]
[50.59745026 90.82787323]
[63.47603989 83.34514618]
[77.11965179 91.35529327]
[92.11668396 91.65352631]
[106.79096222 88.54457855]
[120.37857056 82.19029236]
[133.96617126 75.83600616]
[147.55378723 69.48171997]
[161.14138794 63.12742996]
[174.72898865 56.77314377]
[178.87635803 51.51128006]
[184.25788879 49.48067093]
[188.98547363 50.44838333]
[202.81495667 44.63931274]
[216.64443970 38.83024597]
[230.47393799 33.02117920]
[244.30342102 27.21211243]
[250.04602051 12.48804760]
[264.55151367 6.21379089]
[279.21405029 12.11174583]
[285.33459473 26.68276024]
[279.28195190 41.28211212]
[264.64703369 47.24826050]
[250.11248779 41.04159927]
[236.28300476 46.85066605]
[222.45350647 52.65973282]
[208.62402344 58.46880341]
[194.79454041 64.27787018]
[181.08328247 70.36074829]
[167.49568176 76.71503448]
[153.90806580 83.06932068]
[140.32046509 89.42361450]
[126.73285675 95.77790070]
[113.14524841 102.13218689]
[113.29436493 109.63070679]
[113.59259796 124.62773895]
[113.74171448 132.12625122]
[127.57120514 137.93531799]
[143.76367188 135.33996582]
[153.89617920 148.23432922]
[147.54525757 163.35377502]
[131.24420166 165.14472961]
[121.76213837 151.76481628]
[107.93264771 145.95574951]
[117.28414917 157.68388367]
[112.67702484 171.95884705]
[103.06539154 183.47477722]
[89.84431458 190.56019592]
[74.93276215 192.18670654]
[60.49505234 188.11822510]
[48.62673187 178.94528198]
[41.05042267 165.99925232]
[38.86577225 151.15919495]
[42.38987732 136.57904053]
[51.11123276 124.37503052]
[63.76398468 116.31848907]
[78.51433563 113.57880402]
[91.81845093 106.65056610]
[76.82141876 106.35233307]
[62.87014008 113.81372833]
[50.29921722 105.82490540]
[35.30218124 105.52667236]
[20.30514717 105.22843933]
[5.30811310 104.93020630]
[-9.68892193 104.63198090]
[-24.68595695 104.33374786]
[-39.68299103 104.03551483]
[-42.11887360 115.72867584]
[-46.41791534 126.86883545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 72]
[17 71]
[18 70]
[20 68]
[21 67]
[25 64]
[26 63]
[27 62]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[83 155]
[84 154]
[85 153]
[86 152]
[87 151]
[88 150]
[89 149]
[91 147]
[92 146]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
