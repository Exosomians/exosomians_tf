%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACGGAGAGACGUCCGGCACACGAAACGAGCCAACUAGAACGUCUCGGAUUCUGUGUCCGGGUCUCU\
) } def
/len { sequence length } bind def

/coor [
[46.14366913 320.61190796]
[37.07752228 333.20492554]
[22.33034325 338.03198242]
[7.57272816 333.23693848]
[-1.52072144 320.66360474]
[-1.45338809 305.14666748]
[7.74883699 292.65274048]
[22.54751015 287.98596191]
[27.18276596 273.72009277]
[31.81801987 259.45425415]
[36.45327377 245.18840027]
[41.08853149 230.92256165]
[45.72378540 216.65670776]
[44.22220993 211.80332947]
[46.00081253 205.96397400]
[51.46733856 201.35307312]
[57.36271286 187.56015015]
[63.25809097 173.76724243]
[69.15346527 159.97431946]
[74.73786926 146.05259705]
[80.00849152 132.00906372]
[85.27911377 117.96554565]
[90.54973602 103.92202759]
[90.22578430 95.57974243]
[96.38475037 89.37554932]
[102.28012085 75.58263397]
[108.17549896 61.78971481]
[105.43785095 43.73596573]
[119.54953003 33.54475021]
[124.82015228 19.50122833]
[130.09077454 5.45770502]
[135.36140442 -8.58581829]
[132.96650696 -24.22471237]
[144.68247986 -33.42173767]
[135.38017273 -45.72908401]
[134.23121643 -61.11360168]
[141.60224915 -74.66615295]
[155.14117432 -82.06216431]
[170.52778625 -80.94158936]
[182.85226440 -71.66201019]
[188.18193054 -57.18450165]
[184.81608582 -42.12878418]
[173.82876587 -31.29908180]
[158.72599792 -28.15111351]
[161.49787903 -13.51670551]
[149.40492249 -3.31519580]
[144.13429260 10.72832680]
[138.86367798 24.77185059]
[133.59304810 38.81537247]
[138.33412170 50.16588974]
[133.80023193 62.03558731]
[121.96841431 67.68508911]
[116.07304382 81.47800446]
[110.17766571 95.27091980]
[104.59326172 109.19264984]
[99.32263947 123.23616791]
[94.05201721 137.27969360]
[88.78139496 151.32321167]
[88.65724182 160.79393005]
[82.94638062 165.86968994]
[77.05101013 179.66261292]
[71.15563202 193.45552063]
[65.26025391 207.24844360]
[59.98963165 221.29196167]
[55.35437775 235.55781555]
[50.71912384 249.82366943]
[46.08386993 264.08950806]
[41.44861221 278.35534668]
[36.81335831 292.62121582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 58]
[21 57]
[22 56]
[23 55]
[25 54]
[26 53]
[27 52]
[29 49]
[30 48]
[31 47]
[32 46]
[34 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
