%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUUUCAGUGGCAAACCUCCACGGCCCCUAGCUUGGGCCCUGGAGUAUGUACGUUUCGUACGCGAGAUGGUGACUCGAUGUGGGGGAAGGA\
) } def
/len { sequence length } bind def

/coor [
[66.69865417 295.39364624]
[55.46198654 305.45288086]
[42.07632828 312.40090942]
[27.38311958 315.80096436]
[12.30598259 315.43933105]
[-2.20731711 311.33871460]
[-15.24446297 303.75692749]
[-25.98592949 293.17053223]
[-33.75649643 280.24499512]
[-38.06770325 265.79287720]
[-38.64854050 250.72257996]
[-35.46249771 235.98149109]
[-28.70985413 222.49621582]
[-18.81508255 211.11445618]
[-6.40017939 202.55169678]
[7.75444508 197.34617615]
[22.75901794 195.82511902]
[37.67034149 198.08416748]
[43.52618027 184.27441406]
[49.38201904 170.46467590]
[55.23785782 156.65492249]
[61.09369659 142.84516907]
[66.94953918 129.03543091]
[72.80537415 115.22567749]
[68.84244537 100.75863647]
[56.76639557 91.86093903]
[44.69034576 82.96324158]
[32.61429214 74.06555176]
[20.53824234 65.16785431]
[5.38382816 69.02502441]
[-8.68195534 62.19217682]
[-15.01767445 47.89558029]
[-10.63179779 32.88564682]
[2.40479875 24.24960899]
[17.93663216 26.06513786]
[28.63004684 37.47499847]
[29.43593788 53.09180069]
[41.51198959 61.98949814]
[53.58803940 70.88719177]
[65.66409302 79.78488922]
[77.74014282 88.68258667]
[94.10948181 79.08849335]
[109.67897034 84.25869751]
[116.67750549 70.06957245]
[131.54930115 69.24556732]
[143.91592407 60.75635910]
[156.28254700 52.26715088]
[168.64916992 43.77794647]
[167.33387756 31.11521339]
[171.58105469 19.19112015]
[180.50175476 10.31406307]
[192.30885315 6.17369890]
[204.67488098 7.51955366]
[215.19076538 14.02618122]
[228.09678650 6.38193130]
[241.00282288 -1.26231825]
[253.90884399 -8.90656757]
[266.81484985 -16.55081749]
[279.72088623 -24.19506645]
[292.62692261 -31.83931732]
[300.19180298 -46.38938141]
[316.58468628 -46.84260941]
[324.94195557 -32.73275757]
[316.66638184 -18.57483101]
[300.27114868 -18.93329239]
[287.36514282 -11.28904343]
[274.45910645 -3.64479375]
[261.55310059 3.99945593]
[248.64706421 11.64370537]
[235.74104309 19.28795433]
[222.83502197 26.93220520]
[222.10916138 44.41429901]
[211.05665588 58.17753220]
[193.84466553 62.73976517]
[177.13838196 56.14456940]
[164.77175903 64.63377380]
[152.40513611 73.12298584]
[140.03851318 81.61219025]
[133.92451477 95.19409943]
[118.16817474 96.62532043]
[112.16603088 117.99935913]
[86.61512756 121.08151245]
[80.75928497 134.89126587]
[74.90345001 148.70100403]
[69.04760742 162.51075745]
[63.19176865 176.32051086]
[57.33592987 190.13024902]
[51.48009109 203.94000244]
[63.47018051 213.08815002]
[72.80788422 224.93121338]
[78.90621948 238.72473145]
[81.38184357 253.60162354]
[80.07913971 268.62673950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[24 82]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[43 80]
[45 78]
[46 77]
[47 76]
[48 75]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
