%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAGUCUCACUCCAUCAUCUAACAUAUCAACACCCCAUCACUAAAAUGGGACAAGUCCUCUAUUGAUAUGUUAGAUAACGGAAGGGACUCCUCAUCUGAACGACGUAAUAAAAGAAAAAUAAAUC\
) } def
/len { sequence length } bind def

/coor [
[409.62380981 438.23291016]
[400.10791016 426.63775635]
[390.59201050 415.04260254]
[381.07611084 403.44744873]
[371.00274658 392.33319092]
[360.39611816 381.72659302]
[349.78952026 371.11999512]
[339.18292236 360.51336670]
[328.57632446 349.90676880]
[317.96972656 339.30017090]
[305.81173706 338.96627808]
[296.88473511 330.12420654]
[296.40371704 317.16610718]
[286.06060791 306.30239868]
[275.71749878 295.43869019]
[261.00280762 297.58697510]
[247.68713379 290.57574463]
[240.97471619 276.90838623]
[243.62782288 261.73382568]
[233.28471375 250.87011719]
[222.94160461 240.00640869]
[212.59849548 229.14271545]
[202.25538635 218.27900696]
[191.91227722 207.41529846]
[181.56916809 196.55158997]
[171.22605896 185.68788147]
[160.88294983 174.82417297]
[150.53985596 163.96046448]
[140.19674683 153.09677124]
[129.85363770 142.23306274]
[119.51052094 131.36935425]
[109.16741943 120.50564575]
[97.60813141 125.89198303]
[83.20570374 124.30500031]
[70.26232147 114.49790192]
[63.43938065 97.84367371]
[50.96733856 89.51011658]
[38.49529266 81.17656708]
[26.02324867 72.84300995]
[13.55120468 64.50946045]
[-1.41001999 69.05871582]
[-15.77484131 62.87924194]
[-22.76062965 48.88878632]
[-19.06890869 33.69322205]
[-6.44279623 24.46742439]
[9.15604210 25.56753731]
[20.36231422 36.47411728]
[21.88475800 52.03741455]
[34.35680389 60.37096786]
[46.82884598 68.70452118]
[59.30089188 77.03807068]
[71.77293396 85.37162781]
[77.95735168 81.12863922]
[76.79267120 66.17391968]
[90.32619476 72.64266205]
[96.51061249 68.39967346]
[93.22409821 53.76414108]
[81.72017670 42.07688522]
[86.34988403 26.34482002]
[102.35057068 22.75174713]
[113.26210022 34.99391174]
[107.85962677 50.47762299]
[111.14614868 65.11315155]
[127.25629425 88.60369110]
[120.03112030 110.16253662]
[130.37423706 121.02624512]
[140.71734619 131.88995361]
[151.06044006 142.75366211]
[161.40354919 153.61735535]
[171.74665833 164.48106384]
[182.08976746 175.34477234]
[192.43287659 186.20848083]
[202.77598572 197.07218933]
[213.11909485 207.93589783]
[223.46220398 218.79960632]
[233.80531311 229.66329956]
[244.14842224 240.52700806]
[254.49153137 251.39071655]
[269.77798462 249.48538208]
[283.09951782 256.86035156]
[289.44894409 270.50399780]
[286.58120728 285.09558105]
[296.92431641 295.95928955]
[307.26742554 306.82299805]
[325.01214600 311.55639648]
[328.57632446 328.69357300]
[339.18292236 339.30017090]
[349.78952026 349.90676880]
[360.39611816 360.51336670]
[371.00274658 371.11999512]
[381.60934448 381.72659302]
[386.08276367 382.73498535]
[389.59896851 384.94241333]
[391.89062500 387.87869263]
[392.87942505 391.03488159]
[392.67126465 393.93154907]
[402.18716431 405.52670288]
[411.70306396 417.12185669]
[421.21896362 428.71701050]
[434.53665161 421.70098877]
[448.99411011 417.50973511]
[463.99935913 416.31491089]
[478.93789673 418.16540527]
[493.19805908 422.98544312]
[506.19586182 430.57769775]
[517.39904785 440.63119507]
[526.34887695 452.73431396]
[532.67889404 466.39141846]
[536.12982178 481.04324341]
[536.56030273 496.08981323]
[533.95288086 510.91500854]
[528.41418457 524.91168213]
[520.17102051 537.50677490]
[509.56100464 548.18444824]
[497.01861572 556.50744629]
[483.05740356 562.13500977]
[468.24908447 564.83666992]
[453.20007324 564.50183105]
[438.52661133 561.14410400]
[424.82955933 554.90106201]
[412.66979980 546.02832031]
[402.54525757 534.88928223]
[394.87054443 521.94000244]
[389.95996094 507.71078491]
[388.01452637 492.78427124]
[389.11395264 477.77175903]
[393.21322632 463.28793335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[13 84]
[14 83]
[15 82]
[19 78]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
