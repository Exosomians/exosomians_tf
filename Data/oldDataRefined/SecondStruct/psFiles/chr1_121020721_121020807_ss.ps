%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGAAUACAAAGGCGGGCCAAAGCUUGGCCCCUGGAAAGCGCACACUCCGCUUGCACUAUUGGUGAUGUGAUGCCUUUGGUGUCC\
) } def
/len { sequence length } bind def

/coor [
[64.80201721 321.19049072]
[49.08828354 319.50109863]
[39.23677444 307.14297485]
[41.09221649 291.44796753]
[53.55381012 281.72766113]
[55.15723801 266.81362915]
[44.00665283 256.97479248]
[40.74917221 242.28286743]
[46.83864975 228.32679749]
[60.13189697 220.54248047]
[61.73532486 205.62841797]
[63.33875275 190.71437073]
[64.94217682 175.80030823]
[66.54560852 160.88626099]
[68.14903259 145.97221375]
[69.75245667 131.05815125]
[60.97906113 118.89149475]
[46.32185745 115.70301819]
[31.66465378 112.51454163]
[17.00745010 109.32605743]
[2.35024786 106.13758087]
[-12.30695534 102.94910431]
[-26.96415901 99.76062012]
[-43.72655869 102.30193329]
[-50.80884933 86.89811707]
[-37.96759415 75.82840729]
[-23.77567863 85.10341644]
[-9.11847591 88.29190063]
[5.53872728 91.48037720]
[20.19593048 94.66885376]
[34.85313416 97.85733795]
[49.51033783 101.04581451]
[64.16754150 104.23429871]
[65.12326050 94.39076233]
[68.67391205 85.38397217]
[74.43928528 77.86746216]
[81.88359070 72.35243225]
[90.36360931 69.17353821]
[99.18354797 68.46987915]
[102.37203217 53.81267929]
[105.56050873 39.15547562]
[108.74898529 24.49827385]
[111.93746948 9.84107018]
[102.22631073 -2.41565990]
[102.71727753 -18.04553413]
[113.17855072 -29.66860390]
[128.67063904 -31.79681015]
[141.87864685 -23.42527962]
[146.56616211 -8.50679302]
[140.51988220 5.91459656]
[126.59467316 13.02954960]
[123.40618896 27.68675232]
[120.21771240 42.34395599]
[117.02923584 57.00115967]
[113.84075165 71.65836334]
[121.49238586 76.91554260]
[127.28203583 84.17264557]
[141.67443848 79.94665527]
[156.06683350 75.72066498]
[170.45922852 71.49467468]
[183.95330811 61.23085785]
[197.55154419 71.35627747]
[191.58619690 87.22608948]
[174.68521118 85.88706970]
[160.29281616 90.11306000]
[145.90042114 94.33905029]
[131.50802612 98.56504059]
[131.39358521 106.73702240]
[129.15802002 114.74884033]
[124.87839508 122.04998779]
[118.77449799 128.11970520]
[111.19837952 132.50389099]
[102.61450958 134.84855652]
[93.57138062 134.92745972]
[84.66651154 132.66157532]
[83.06308746 147.57563782]
[81.45966339 162.48968506]
[79.85623169 177.40374756]
[78.25280762 192.31779480]
[76.64938354 207.23185730]
[75.04595184 222.14590454]
[86.38073730 232.57801819]
[89.36447144 247.50955200]
[83.05844116 261.17330933]
[70.07128906 268.41705322]
[68.46786499 283.33111572]
[78.57846832 295.47814941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 86]
[6 85]
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
