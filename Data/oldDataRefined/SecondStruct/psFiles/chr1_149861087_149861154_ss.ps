%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGGAAACGGAUUCGGAAAAGGCGGGAAAGGAGACGGCCUGUACUGGCGACCUCGGGCUAUCUGUC\
) } def
/len { sequence length } bind def

/coor [
[145.78507996 217.71943665]
[133.23937988 209.69108582]
[134.12004089 193.89440918]
[127.52402496 180.42250061]
[120.92800140 166.95057678]
[114.33198547 153.47866821]
[104.02480316 150.89489746]
[96.83100128 142.77275085]
[95.45516205 131.78486633]
[100.62897491 121.74172974]
[95.28534698 107.72582245]
[91.64874268 105.54251099]
[89.12631226 101.63203430]
[88.52496338 96.60104370]
[90.31358337 91.41965485]
[86.92822266 76.80667114]
[83.54286957 62.19368362]
[80.15751648 47.58069611]
[66.02459717 41.45151520]
[58.30095673 28.32906342]
[59.76794052 13.35201645]
[69.65438080 2.24362779]
[66.26902771 -12.36935806]
[62.88367081 -26.98234558]
[59.49831390 -41.59532928]
[48.84607697 -53.29321289]
[53.51132584 -67.43833923]
[38.95113373 -72.53778839]
[29.47731590 -84.71360016]
[28.11293221 -100.08051300]
[35.29335022 -113.73500061]
[48.72732925 -121.31997681]
[64.12813568 -120.41508484]
[76.58142090 -111.30908966]
[82.11339569 -96.90767670]
[78.95881653 -81.80627441]
[68.12431335 -70.82369995]
[78.53440857 -60.17103577]
[74.11130524 -44.98068619]
[77.49665833 -30.36770058]
[80.88201141 -15.75471401]
[84.26737213 -1.14172792]
[98.03140259 4.48761225]
[105.93486786 17.29382896]
[104.76844788 32.47582245]
[94.77050018 44.19534302]
[98.15585327 58.80832672]
[101.54121399 73.42131805]
[104.92656708 88.03430176]
[109.30125427 102.38219452]
[114.64488220 116.39810181]
[130.85011292 127.99616241]
[127.80390167 146.88264465]
[134.39991760 160.35455322]
[140.99594116 173.82647705]
[147.59196472 187.29838562]
[160.60946655 196.29034424]
[159.25700378 211.12342834]
[174.55815125 211.48844910]
[187.93138123 218.93258667]
[196.30361938 231.74525452]
[197.75097656 246.98217773]
[191.94085693 261.14202881]
[180.20840454 270.97097778]
[165.24963379 274.21038818]
[150.50196838 270.11587524]
[139.35430908 259.62835693]
[134.36831665 245.15774536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[3 56]
[4 55]
[5 54]
[6 53]
[10 51]
[11 50]
[15 49]
[16 48]
[17 47]
[18 46]
[22 42]
[23 41]
[24 40]
[25 39]
[27 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
