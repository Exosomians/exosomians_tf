%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCGACACUACUAACCGCGUCCCCAUGCCUGGAGUCGACUCAGUACCCUCGACUUACAUACACAAAGAGGAAACAGGACGUACACCGUCCGACUACCCCUCGUGAAUGUACUCUGACAACGGAGUUAGACUCGGAC\
) } def
/len { sequence length } bind def

/coor [
[86.17875671 282.60903931]
[88.80425262 263.40600586]
[89.14324188 248.40982056]
[89.48223877 233.41365051]
[89.82122803 218.41748047]
[90.16021729 203.42131042]
[90.49921417 188.42514038]
[80.05424500 177.86871338]
[80.18440247 162.65563965]
[91.32777405 151.77157593]
[91.66677094 136.77540588]
[92.00576019 121.77923584]
[85.67148590 117.76339722]
[85.05021667 132.75051880]
[71.76039124 139.70613098]
[59.09169006 131.67469788]
[59.71268463 116.68755341]
[73.00292969 109.73171997]
[66.66865540 105.71588135]
[53.25011063 112.41979980]
[39.83156204 119.12371826]
[26.41301346 125.82764435]
[17.82925034 139.80087280]
[1.44580841 139.08331299]
[-5.88343096 124.41312408]
[3.38122463 110.88174438]
[19.70909119 112.40909576]
[33.12763977 105.70517731]
[46.54618835 99.00125122]
[59.96473694 92.29733276]
[60.04949188 84.79781342]
[47.14467621 77.15151978]
[60.21899796 69.79876709]
[60.30374908 62.29924774]
[47.04013443 55.29378510]
[33.77651596 48.28832626]
[20.51290131 41.28286362]
[7.24928522 34.27740479]
[-6.01433134 27.27194214]
[-19.27794838 20.26648140]
[-32.23760986 28.50922012]
[-47.58305359 29.15177536]
[-61.18643570 22.02130699]
[-69.38851166 9.03587151]
[-69.98296356 -6.31151295]
[-62.80989075 -19.89247704]
[-49.79880905 -28.05380821]
[-34.44963455 -28.60015297]
[-20.89122391 -21.38454247]
[-12.77071476 -8.34794426]
[-12.27248669 7.00286531]
[0.99112976 14.00832558]
[14.25474644 21.01378632]
[27.51836205 28.01924706]
[40.78197861 35.02470779]
[54.04559326 42.03017044]
[67.30921173 49.03562927]
[116.97544098 79.96649933]
[126.38447571 68.28445435]
[135.79351807 56.60241699]
[145.20254517 44.92037582]
[147.83312988 29.31939697]
[161.84239197 24.26073265]
[171.25141907 12.57869148]
[180.66046143 0.89665180]
[181.47875977 -4.43044519]
[184.04481506 -8.46513081]
[187.55046082 -10.75101089]
[191.12438965 -11.22961426]
[201.30328369 -22.24732780]
[211.48217773 -33.26504135]
[221.66108704 -44.28275681]
[215.05960083 -60.05621338]
[215.97151184 -77.07598114]
[224.16755676 -91.95741272]
[237.97471619 -101.76194763]
[254.61746216 -104.57733154]
[270.77563477 -99.89041901]
[280.44625854 -111.35683441]
[290.11691284 -122.82325745]
[299.78753662 -134.28967285]
[309.45819092 -145.75608826]
[309.53826904 -161.79895020]
[322.21975708 -171.62539673]
[337.77450562 -167.69743347]
[344.27026367 -153.02825928]
[336.72402954 -138.87080383]
[320.92459106 -136.08544922]
[311.25396729 -124.61903381]
[301.58331299 -113.15261841]
[291.91268921 -101.68619537]
[282.24203491 -90.21977997]
[288.53826904 -78.75545502]
[290.54309082 -65.79805756]
[287.99353027 -52.90405655]
[281.17495728 -41.62987900]
[270.88946533 -33.34405518]
[258.36145020 -29.06110191]
[245.09196472 -29.31734657]
[232.67880249 -34.10385513]
[222.49989319 -23.08614349]
[212.32099915 -12.06842899]
[202.14210510 -1.05071568]
[192.34249878 10.30568695]
[182.93347168 21.98772621]
[173.52442932 33.66976547]
[171.56683350 48.43516922]
[156.88458252 54.32941055]
[147.47555542 66.01145172]
[138.06651306 77.69348907]
[128.65748596 89.37553406]
[130.18045044 104.29801941]
[141.75541687 113.83846283]
[153.33038330 123.37891388]
[164.90534973 132.91935730]
[176.48031616 142.45980835]
[188.05528259 152.00024414]
[204.31016541 154.17073059]
[210.30688477 169.43412781]
[199.87654114 182.08877563]
[183.74897766 179.11663818]
[178.51483154 163.57521057]
[166.93986511 154.03477478]
[155.36489868 144.49432373]
[143.78993225 134.95387268]
[132.21496582 125.41342926]
[120.63999939 115.87298584]
[107.00193024 122.11822510]
[106.66293335 137.11439514]
[106.32394409 152.11056519]
[116.96411133 163.48706055]
[116.40670013 178.69047546]
[105.49538422 188.76414490]
[105.15638733 203.76029968]
[104.81739807 218.75646973]
[104.47840881 233.75263977]
[104.13941193 248.74880981]
[103.80042267 263.74499512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[5 135]
[6 134]
[7 133]
[10 130]
[11 129]
[12 128]
[19 30]
[20 29]
[21 28]
[22 27]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[58 111]
[59 110]
[60 109]
[61 108]
[63 106]
[64 105]
[65 104]
[69 103]
[70 102]
[71 101]
[72 100]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
