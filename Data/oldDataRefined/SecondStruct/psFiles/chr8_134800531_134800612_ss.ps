%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCAUUUGUAGGUGGAGGGUCGGUUAGGUACAUAAUGUCGACUCACAUCCUACAAAUGUACUUGACUUUGAACCAAAUUU\
) } def
/len { sequence length } bind def

/coor [
[188.50532532 298.42218018]
[188.85404968 283.36587524]
[192.43170166 268.73663330]
[199.07098389 255.21873474]
[208.46133423 243.44438171]
[199.01417542 231.79315186]
[189.56703186 220.14192200]
[180.11987305 208.49069214]
[170.67271423 196.83946228]
[161.22555542 185.18821716]
[151.77839661 173.53698730]
[142.33123779 161.88575745]
[132.88407898 150.23452759]
[123.43692017 138.58329773]
[113.77096558 127.11293030]
[103.88967133 115.82753754]
[92.18540192 114.30287933]
[84.57947540 105.27710724]
[85.06082153 93.48376465]
[75.61366272 81.83253479]
[66.16650391 70.18130493]
[56.71934509 58.53007126]
[47.27218628 46.87883759]
[37.82502747 35.22760773]
[27.94373703 23.94221497]
[17.64246750 13.03882790]
[7.34119797 2.13544083]
[-2.96007156 -8.76794624]
[-18.76312065 -8.96594810]
[-29.73758698 -20.33857346]
[-29.37251854 -36.13864517]
[-17.88449860 -46.99225998]
[-2.08917046 -46.46016312]
[8.64238071 -34.85803604]
[7.94331551 -19.06921577]
[18.24458504 -8.16582870]
[28.54585457 2.73755789]
[38.84712601 13.64094448]
[43.75121689 14.65412903]
[47.97632599 18.91959953]
[49.47626114 25.78044891]
[58.92341995 37.43168259]
[68.37057495 49.08291245]
[77.81773376 60.73414612]
[87.26489258 72.38537598]
[96.71205139 84.03660583]
[112.46330261 89.49730682]
[115.17506409 105.94624329]
[125.05635834 117.23163605]
[133.27693176 121.77427673]
[135.08815002 129.13613892]
[144.53530884 140.78736877]
[153.98246765 152.43859863]
[163.42962646 164.08982849]
[172.87678528 175.74105835]
[182.32394409 187.39230347]
[191.77110291 199.04353333]
[201.21826172 210.69476318]
[210.66542053 222.34599304]
[220.11257935 233.99722290]
[233.57347107 227.24310303]
[248.17172241 223.54101562]
[263.22451782 223.06413269]
[278.02780151 225.83474731]
[291.88925171 231.72328186]
[304.16049194 240.45429993]
[314.26757812 251.61946106]
[321.73779297 264.69653320]
[326.22177124 279.07388306]
[327.50973511 294.07907104]
[325.54147339 309.01022339]
[320.40905762 323.16906738]
[312.35250854 335.89328003]
[301.74865723 346.58779907]
[289.09347534 354.75238037]
[274.97885132 360.00515747]
[260.06497192 362.10046387]
[245.04939270 360.94030762]
[230.63438416 356.57891846]
[217.49418640 349.22030640]
[206.24339294 339.20861816]
[197.40820312 327.01217651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 49]
[16 48]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 38]
[26 37]
[27 36]
[28 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
