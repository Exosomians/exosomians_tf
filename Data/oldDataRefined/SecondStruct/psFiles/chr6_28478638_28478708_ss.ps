%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGGGUGCGGGGGCUUCUCUGACCUCGGAAUUAGGUCGCAGAAUCUGGUGAGCCGGUGCGAUGGUGCG\
) } def
/len { sequence length } bind def

/coor [
[71.52972412 130.25466919]
[63.95699310 120.65921783]
[59.50466537 109.27520752]
[44.51893997 109.92949677]
[29.53321838 110.58379364]
[14.54749489 111.23808289]
[-0.42038912 112.21913147]
[-15.36330986 113.52646637]
[-30.30623055 114.83380127]
[-38.88946152 118.80513000]
[-45.92715836 115.85765076]
[-60.91288376 116.51194000]
[-75.89860535 117.16622925]
[-90.88433075 117.82052612]
[-105.87005615 118.47481537]
[-119.40269470 127.73761749]
[-134.07188416 120.40637207]
[-134.78720093 104.02283478]
[-120.81279755 95.44097900]
[-106.52434540 103.48908997]
[-91.53862000 102.83480072]
[-76.55289459 102.18051147]
[-61.56717300 101.52622223]
[-46.58145142 100.87192535]
[-31.61356544 99.89088440]
[-16.67064667 98.58354187]
[-1.72772527 97.27620697]
[4.86504221 93.43534088]
[13.89320374 96.25235748]
[28.87892723 95.59806824]
[43.86465073 94.94377899]
[58.85037231 94.28948975]
[65.06662750 77.51531219]
[77.76018524 64.91022491]
[94.57742310 58.81143951]
[112.40010834 60.34979248]
[127.92358398 69.24003601]
[138.26950073 83.83376312]
[152.91394043 80.58716583]
[167.55838013 77.34056854]
[182.20281982 74.09397888]
[196.84725952 70.84738159]
[211.49169922 67.60079193]
[215.07537842 63.97432327]
[219.25891113 62.09802628]
[223.33515930 61.92517471]
[226.70419312 63.15526962]
[228.95567322 65.30161285]
[243.94139099 64.64732361]
[258.92712402 63.99303055]
[273.91284180 63.33874130]
[287.44549561 54.07593536]
[302.11468506 61.40718079]
[302.82998657 77.79071808]
[288.85559082 86.37257385]
[274.56713867 78.32446289]
[259.58142090 78.97875214]
[244.59568787 79.63304901]
[229.60997009 80.28733826]
[214.73829651 82.24523163]
[200.09385681 85.49182129]
[185.44941711 88.73841858]
[170.80497742 91.98501587]
[156.16053772 95.23160553]
[141.51609802 98.47820282]
[140.16186523 110.62665558]
[135.33065796 121.85511780]
[127.44071960 131.19148254]
[117.17510986 137.82746887]
[105.42257690 141.18855286]
[93.20058441 140.98377991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[7 27]
[8 26]
[9 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
