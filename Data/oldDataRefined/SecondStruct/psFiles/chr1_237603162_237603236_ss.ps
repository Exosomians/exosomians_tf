%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUACUUACCUACUUGCUCUAAGGGUGACAGGGAUGGAUGAUAGGUCGCUUUGGUGUCGGUUCCCUUGCCCGAAC\
) } def
/len { sequence length } bind def

/coor [
[-11.87671185 317.59069824]
[-21.45935631 329.20907593]
[-33.31585312 338.49551392]
[-46.89165497 345.01559448]
[-61.55179214 348.46444702]
[-76.61058807 348.68069458]
[-91.36370850 345.65423584]
[-105.12113190 339.52664185]
[-117.23940277 330.58450317]
[-127.15171051 319.24606323]
[-134.39445496 306.04165649]
[-138.62886047 291.58883667]
[-139.65690613 276.56362915]
[-137.43048096 261.66876221]
[-132.05372620 247.60089111]
[-123.77812958 235.01802063]
[-112.99074554 224.50866699]
[-100.19612885 216.56437683]
[-85.99270630 211.55670166]
[-71.04479218 209.71986389]
[-56.05153275 211.13978577]
[-41.71418381 215.75004578]
[-28.70333481 223.33502197]
[-18.54411125 212.29916382]
[-8.38488674 201.26330566]
[1.77433634 190.22744751]
[11.93356037 179.19158936]
[22.09278297 168.15573120]
[21.95516586 155.87965393]
[30.58124352 146.58378601]
[43.64111328 145.75228882]
[54.24771500 135.14567566]
[64.85431671 124.53907776]
[75.46092224 113.93247986]
[86.06752014 103.32587433]
[89.87144470 89.87144470]
[103.32587433 86.06752014]
[113.93247986 75.46092224]
[124.53907776 64.85431671]
[135.14567566 54.24771500]
[134.24555969 35.55691910]
[146.86155701 22.16157341]
[164.94993591 21.94860268]
[174.64442444 10.50234032]
[177.03224182 -5.72203588]
[192.37452698 -11.51396751]
[204.88844299 -0.91521084]
[201.70077515 15.17114162]
[186.09069824 20.19682884]
[176.39620972 31.64309120]
[179.83430481 42.87289429]
[177.26660156 54.45780182]
[169.24269104 63.36417007]
[157.75659180 67.19949341]
[145.75228882 64.85431671]
[135.14567566 75.46092224]
[124.53907776 86.06752014]
[113.93247986 96.67412567]
[110.12855530 110.12855530]
[96.67412567 113.93247986]
[86.06752014 124.53907776]
[75.46092224 135.14567566]
[64.85431671 145.75228882]
[54.24771500 156.35888672]
[50.04710388 174.14830017]
[33.12864304 178.31495667]
[22.96941948 189.35081482]
[12.81019497 200.38667297]
[2.65097141 211.42253113]
[-7.50825214 222.45838928]
[-17.66747475 233.49424744]
[-9.03397942 245.83430481]
[-3.25549269 259.74197388]
[-0.60228658 274.56677246]
[-1.19845617 289.61529541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[37 58]
[38 57]
[39 56]
[40 55]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
