%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:14 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUCGGUCGGUUACUUAGACGAAUGGACUAACACAAACACGUCUGUAUGAAAUUUUUGACCGUUAUCAUUUCGGUACAAUGCUCGGAAUUCCUGUAACUUCAGCAAUUCCAGGGACUCUUACCGAUAUUGUUU\
) } def
/len { sequence length } bind def

/coor [
[67.50084686 147.92213440]
[58.05876923 139.92065430]
[50.53286743 130.09532166]
[45.26697540 118.89501953]
[42.50167847 106.83145142]
[27.50269318 106.65692139]
[12.50370979 106.48239899]
[-2.49527526 106.30786896]
[-17.49425888 106.13333893]
[-32.49324417 105.95880890]
[-47.49222946 105.78427887]
[-62.47598648 106.48216248]
[-77.39381409 108.05008698]
[-92.31164551 109.61801147]
[-102.24498749 121.61661530]
[-117.39612579 122.99420166]
[-128.77374268 113.45033264]
[-143.69157410 115.01826477]
[-158.60939026 116.58618927]
[-173.52722168 118.15411377]
[-188.44505310 119.72204590]
[-203.36288452 121.28997040]
[-214.62390137 136.43536377]
[-233.05357361 138.59875488]
[-247.03010559 126.87995911]
[-261.85882568 129.14024353]
[-268.86386108 142.98616028]
[-282.68478394 150.04031372]
[-298.00723267 147.59025574]
[-308.93933105 136.57807922]
[-311.27755737 121.23817444]
[-304.12274170 107.46907043]
[-290.22607422 100.56525421]
[-274.93112183 103.18138885]
[-264.11911011 114.31151581]
[-249.29039001 112.05123138]
[-244.62701416 101.52202606]
[-235.33891296 94.51265717]
[-223.69584656 92.88262177]
[-212.61515808 97.15850067]
[-204.93080139 106.37213898]
[-190.01298523 104.80421448]
[-175.09515381 103.23628998]
[-160.17732239 101.66835785]
[-145.25949097 100.10043335]
[-130.34165955 98.53250885]
[-121.19696045 86.83164978]
[-106.09049988 85.02904510]
[-93.87957001 94.70018768]
[-78.96173859 93.13225555]
[-64.04391479 91.56433105]
[-73.47592926 79.90084076]
[-70.47102356 65.20490265]
[-57.21774292 58.17990875]
[-43.36875153 63.94232559]
[-39.01058960 78.29524994]
[-47.31769943 90.78529358]
[-32.31871414 90.95982361]
[-17.31973076 91.13435364]
[-2.32074618 91.30888367]
[12.67823887 91.48341370]
[27.67722321 91.65794373]
[42.67620850 91.83246613]
[47.83148575 74.87686920]
[57.87369537 60.27469254]
[71.86212158 49.39382172]
[88.48638153 43.25352478]
[106.18919373 42.42900467]
[123.31223297 46.99749374]
[138.25146484 56.53103638]
[149.60746765 70.13657379]
[156.31645203 86.53958893]
[171.23428345 84.97166443]
[186.15211487 83.40373230]
[201.06994629 81.83580780]
[215.98776245 80.26788330]
[230.90559387 78.69995880]
[236.11773682 64.39628601]
[246.97909546 53.81715775]
[261.29800415 49.02251816]
[276.21743774 50.91255951]
[288.78485107 59.05926514]
[296.53680420 71.80184174]
[311.45462036 70.23390961]
[326.37243652 68.66598511]
[341.27102661 66.92459106]
[356.14831543 65.00996399]
[371.02563477 63.09534073]
[385.90295410 61.18071747]
[400.78024292 59.26609039]
[415.65756226 57.35146713]
[428.35723877 47.91597748]
[441.96801758 53.96546173]
[456.84530640 52.05083466]
[471.72262573 50.13621140]
[481.18048096 37.47428513]
[496.83328247 35.29138565]
[509.39453125 44.88259125]
[511.41180420 60.55760574]
[501.68832397 73.01672363]
[485.99285889 74.86817169]
[473.63723755 65.01351929]
[458.75994873 66.92813873]
[443.88262939 68.84276581]
[432.24707031 78.14131165]
[417.57217407 72.22877502]
[402.69485474 74.14339447]
[387.81756592 76.05802155]
[372.94024658 77.97264862]
[358.06295776 79.88726807]
[343.18563843 81.80189514]
[336.89550781 85.81239319]
[327.94036865 83.58381653]
[313.02255249 85.15174103]
[298.10470581 86.71966553]
[293.17150879 100.79550171]
[282.57250977 111.37709808]
[268.37207031 116.32775879]
[253.36920166 114.61495972]
[240.54566956 106.52522278]
[232.47352600 93.61778259]
[217.55569458 95.18570709]
[202.63786316 96.75363922]
[187.72003174 98.32156372]
[172.80221558 99.88948822]
[157.88438416 101.45742035]
[156.25236511 113.72579193]
[152.05033875 125.36707306]
[145.47027588 135.84939575]
[136.81280518 144.69387817]
[126.47347260 151.49641418]
[114.92464447 155.94622803]
[102.69393921 157.84002686]
[90.34016418 157.09127808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 51]
[13 50]
[14 49]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[25 36]
[26 35]
[72 126]
[73 125]
[74 124]
[75 123]
[76 122]
[77 121]
[83 115]
[84 114]
[85 113]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
