%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGGGCCCGUCGUAGGAGCCACCGUCUCGAGUCCCAGCCAACCUUUAGGGACCGUUACACUAAACACUGU\
) } def
/len { sequence length } bind def

/coor [
[90.12596893 152.57521057]
[86.84131622 137.93927002]
[88.56871796 123.03906250]
[95.11522675 109.54214478]
[80.88980865 114.30001831]
[66.77004242 119.36286163]
[52.76248932 124.72833252]
[38.75492859 130.09381104]
[24.86605835 135.75942993]
[11.10230350 141.72256470]
[5.52448368 156.50984192]
[-8.91003609 162.94569397]
[-23.63751221 157.21185303]
[-29.92039299 142.71009827]
[-24.03115845 128.04406738]
[-9.46378613 121.91484833]
[5.13916111 127.95881653]
[18.90291595 121.99567413]
[23.94058228 116.27186584]
[33.38945389 116.08625031]
[47.39701462 110.72077942]
[61.40457153 105.35530090]
[66.68382263 99.85352325]
[76.13193512 100.07459259]
[90.35736084 95.31672668]
[102.14210510 86.03665161]
[110.10305786 73.32353973]
[106.77816010 58.10569382]
[115.03279877 45.32619476]
[129.56118774 42.25019836]
[137.52214050 29.53708458]
[139.52273560 20.30056572]
[146.10903931 16.45862579]
[154.60957336 4.09978104]
[163.11009216 -8.25906372]
[171.61062622 -20.61790848]
[180.11114502 -32.97675323]
[172.48915100 -46.20051575]
[171.36811829 -61.42240906]
[176.97061157 -75.62011719]
[188.18426514 -85.97466278]
[202.78259277 -90.43016052]
[217.86709595 -88.10195923]
[230.44273376 -79.45232391]
[238.01258850 -66.19864655]
[239.07368469 -50.97245789]
[233.41532898 -36.79692459]
[222.16098022 -26.48661232]
[207.54521179 -22.08864021]
[192.47000122 -24.47622681]
[183.96946716 -12.11738300]
[175.46894836 0.24146247]
[166.96841431 12.60030746]
[158.46789551 24.95915222]
[150.23524475 37.49803543]
[142.27429199 50.21114731]
[145.85087585 64.62446594]
[137.95843506 77.63077545]
[122.81616974 81.28449249]
[114.85522461 93.99760437]
[129.51011658 90.79856873]
[144.39997864 92.61303711]
[157.85774231 99.23787689]
[168.37672424 109.93137360]
[174.77925110 123.49632263]
[176.34849548 138.41401672]
[172.90876770 153.01429749]
[164.84518433 165.66256714]
[153.06051636 174.94273376]
[138.87416077 179.81584167]
[123.87436676 179.73628235]
[109.74049377 174.71296692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 22]
[7 21]
[8 20]
[9 18]
[10 17]
[26 60]
[27 59]
[30 56]
[31 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
