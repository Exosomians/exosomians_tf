%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGUGAAAGUGUCAAGGAAGGGGUCCGUCACCCCGGUCCUAAACCAUCGACCACGACUCUCUUUUGGGAACUAACAUAAGAACGGGACCCUAAUAUGGUCACCGUUGACAGU\
) } def
/len { sequence length } bind def

/coor [
[98.46048737 231.75669861]
[94.76893616 246.66535950]
[84.10607910 257.71972656]
[69.34016418 261.94622803]
[54.44314957 258.20794678]
[43.42226410 247.51049805]
[39.24206543 232.73141479]
[43.02700806 217.84619141]
[53.75896072 206.85888672]
[68.55107880 202.72503662]
[64.14420319 188.49728394]
[75.00770569 176.99533081]
[78.65862274 162.44642639]
[82.30953217 147.89752197]
[85.96044922 133.34860229]
[89.61135864 118.79969025]
[49.94091415 109.87062836]
[34.95350647 109.25614166]
[19.96609688 108.64165497]
[4.97868967 108.02716827]
[-11.04612160 116.96949768]
[-25.53291512 107.16842651]
[-40.53151703 106.96354675]
[-55.53011703 106.75866699]
[-70.52871704 106.55378723]
[-85.52732086 106.34890747]
[-97.98182678 116.46150970]
[-113.62197876 112.88867188]
[-120.44998932 98.37116241]
[-113.22798920 84.04558563]
[-97.49607849 80.90129089]
[-85.32244110 91.35030365]
[-70.32383728 91.55518341]
[-55.32523727 91.76006317]
[-40.32663727 91.96495056]
[-25.32803535 92.16983032]
[-16.36401367 83.92150116]
[-3.78055787 84.05144501]
[5.59317684 93.03975677]
[20.58058548 93.65424347]
[35.56799316 94.26873016]
[50.55540085 94.88322449]
[55.36758423 89.13057709]
[40.59154892 86.54817200]
[35.44006729 72.46051025]
[45.06468201 60.95543289]
[59.84065628 63.53816223]
[64.99195099 77.62528992]
[69.80413055 71.87265015]
[66.55197906 57.22944260]
[63.29982758 42.58623505]
[51.82338333 30.87200165]
[56.49000931 15.15085030]
[72.49908447 11.59535027]
[83.38184357 23.86309624]
[77.94303894 39.33408356]
[81.19518280 53.97729111]
[84.44733429 68.62049866]
[91.61125183 70.84048462]
[102.62007904 60.65197754]
[105.93907928 75.28044891]
[113.10299683 77.50043488]
[124.06553650 67.26213837]
[135.02807617 57.02384186]
[145.99061584 46.78554535]
[150.79515076 31.71149826]
[165.37782288 28.67915535]
[176.34036255 18.44085884]
[174.30404663 3.05797768]
[181.72804260 -10.56787777]
[195.75765991 -17.19728851]
[210.99826050 -14.28110981]
[221.58947754 -2.94067359]
[223.45880127 12.46339226]
[215.88743591 26.00790977]
[201.78671265 32.48473740]
[186.57865906 29.40339851]
[175.61611938 39.64169693]
[171.59568787 53.98343277]
[156.22891235 57.74808502]
[145.26637268 67.98638153]
[134.30383301 78.22467804]
[123.34129333 88.46297455]
[125.18062592 103.34977722]
[138.30543518 110.61196136]
[151.43025208 117.87415314]
[164.55505371 125.13633728]
[177.77783203 132.21858215]
[191.09611511 139.11955261]
[204.41439819 146.02053833]
[217.73266602 152.92150879]
[232.09800720 146.74324036]
[247.05885315 151.29376221]
[255.55114746 164.42445374]
[253.56507874 179.93540955]
[242.03842163 190.50282288]
[226.41371155 191.13708496]
[214.06845093 181.53872681]
[210.83169556 166.23979187]
[197.51341248 159.33880615]
[184.19514465 152.43783569]
[170.87686157 145.53686523]
[163.38890076 145.24971008]
[157.29287720 138.26115417]
[144.16806030 130.99896240]
[131.04325867 123.73677826]
[117.91844177 116.47458649]
[104.16027069 122.45060730]
[100.50936127 136.99951172]
[96.85844421 151.54843140]
[93.20753479 166.09733582]
[89.55661774 180.64625549]
[93.70235443 195.91462708]
[83.09999084 206.37594604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 114]
[12 112]
[13 111]
[14 110]
[15 109]
[16 108]
[17 42]
[18 41]
[19 40]
[20 39]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[49 58]
[50 57]
[51 56]
[62 83]
[63 82]
[64 81]
[65 80]
[67 78]
[68 77]
[84 107]
[85 106]
[86 105]
[87 104]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
