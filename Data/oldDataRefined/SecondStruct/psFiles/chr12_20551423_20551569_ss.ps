%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGUCCUAACUGUCUAACUAUCGAGAAAGAGCUAAGGCACCCACCACCACGUACCGGCAAGAAUCAACCACCUCGCUAAACAGACCAAUUAAGGCUAUUGCUUGCUCUGAGACCGUACGAUUGAUCAAUGCGCUGGGGGCUCG\
) } def
/len { sequence length } bind def

/coor [
[-59.08510590 295.72073364]
[-58.08242035 280.75466919]
[-70.32897949 289.41616821]
[-82.57553864 298.07766724]
[-94.82209778 306.73919678]
[-107.06865692 315.40069580]
[-107.39629364 330.80197144]
[-116.62201691 342.91555786]
[-131.04110718 347.22302246]
[-145.06384277 342.27319336]
[-157.31040955 350.93472290]
[-160.47085571 356.86935425]
[-165.42835999 359.82263184]
[-170.26560974 359.69091797]
[-182.86874390 367.82485962]
[-190.26811218 381.80914307]
[-205.15733337 382.20971680]
[-217.76046753 390.34365845]
[-230.36360168 398.47760010]
[-231.08505249 413.97790527]
[-240.80584717 426.07278442]
[-255.78810120 430.11151123]
[-270.27087402 424.54110718]
[-278.68521118 411.50354004]
[-277.79562378 396.01196289]
[-267.94421387 384.02325439]
[-252.91902161 380.14730835]
[-238.49754333 385.87448120]
[-225.89440918 377.74053955]
[-213.29127502 369.60659790]
[-206.79336548 356.20410156]
[-191.00268555 355.22174072]
[-178.39956665 347.08776855]
[-165.97192383 338.68817139]
[-153.72535706 330.02664185]
[-153.72088623 315.15594482]
[-144.85592651 302.99548340]
[-130.36082458 298.33227539]
[-115.73017120 303.15414429]
[-103.48361206 294.49264526]
[-91.23705292 285.83111572]
[-78.99049377 277.16961670]
[-66.74393463 268.50808716]
[-55.07339478 259.08480835]
[-44.02619553 248.93791199]
[-32.97899246 238.79101562]
[-30.16089821 231.90219116]
[-21.58795357 228.54907227]
[-10.32786942 218.63894653]
[0.93221498 208.72882080]
[12.08648682 198.69975281]
[23.02537346 188.43618774]
[33.85471725 178.05711365]
[43.64477158 166.69248962]
[52.30628204 154.44592285]
[60.96779251 142.19935608]
[69.62930298 129.95280457]
[78.29081726 117.70624542]
[72.74594116 93.51803589]
[88.58672333 74.41608429]
[86.36608887 59.58136749]
[84.14544678 44.74665070]
[74.45038605 32.24399567]
[80.21825409 18.51151466]
[77.99761200 3.67679977]
[63.67690659 -1.87414443]
[54.06279373 -13.85180759]
[51.74142075 -29.03425789]
[57.33722687 -43.33749390]
[69.34496307 -52.91401291]
[84.53461456 -55.18778610]
[98.82024384 -49.54717255]
[108.35907745 -37.50947571]
[110.58522797 -22.31277084]
[104.89986420 -8.04489708]
[92.83232880 1.45615959]
[95.05296326 16.29087448]
[104.58918762 27.73245430]
[98.98015594 42.52601242]
[101.20079803 57.36072540]
[103.42144012 72.19544220]
[107.99487305 73.15075684]
[112.34593201 74.85288239]
[116.35359955 77.25445557]
[119.90638733 80.28869629]
[133.00160217 72.97327423]
[146.09681702 65.65785217]
[159.19201660 58.34242630]
[167.46632385 44.85737991]
[182.35086060 45.40512466]
[195.44607544 38.08969879]
[182.12371826 31.19659042]
[178.99337769 16.52685928]
[188.34164429 4.79613018]
[203.33998108 4.57320642]
[213.03276062 16.02092552]
[210.33929443 30.77790070]
[224.13577271 24.89089012]
[237.93226624 19.00388145]
[247.33868408 5.57066584]
[263.64959717 7.26961184]
[270.08572388 22.35298920]
[260.02612305 35.30431366]
[243.81927490 32.80037308]
[230.02278137 38.68738174]
[216.22630310 44.57439041]
[202.76148987 51.18491364]
[189.66627502 58.50033569]
[182.32862854 71.46213531]
[166.50744629 71.43763733]
[153.41223145 78.75305939]
[140.31703186 86.06848907]
[127.22180939 93.38391113]
[127.81099701 103.36870575]
[124.85494232 112.92407227]
[118.73047638 120.83192444]
[110.21831512 126.08420563]
[100.40357208 128.01136780]
[90.53737640 126.36775208]
[81.87586212 138.61431885]
[73.21435547 150.86087036]
[64.55284119 163.10743713]
[55.89133072 175.35398865]
[70.45014954 171.74278259]
[84.69816589 176.43257141]
[94.26580811 187.98506165]
[96.21887207 202.85737610]
[89.95838928 216.48846436]
[77.40433502 224.69793701]
[62.40676880 224.96813965]
[49.56513977 217.21620178]
[42.81771469 203.81947327]
[44.23379898 188.88645935]
[33.40445709 199.26553345]
[29.33637238 207.52322388]
[22.23337364 209.74696350]
[17.99093437 217.91644287]
[10.84233570 219.98890686]
[-0.41774872 229.89903259]
[-11.67783356 239.80915833]
[-22.83210564 249.83822632]
[-33.87930679 259.98510742]
[-44.92650986 270.13198853]
[-30.08475113 272.30505371]
[-20.97004509 284.21817017]
[-22.75417519 299.11169434]
[-34.42480850 308.53488159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[10 35]
[11 34]
[14 33]
[15 32]
[17 30]
[18 29]
[19 28]
[44 143]
[45 142]
[46 141]
[48 140]
[49 139]
[50 138]
[51 136]
[52 134]
[53 133]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[60 81]
[61 80]
[62 79]
[64 77]
[65 76]
[85 113]
[86 112]
[87 111]
[88 110]
[90 108]
[91 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
