%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUGACAUAAAAGGGUUUUACAACGUCUAGUCAAUGUUGUUUGUCUUGCCGCUGGCAGUUCCUUUUGACAGUGAGACCCGAGGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[63.65008163 313.21664429]
[74.26506042 301.73379517]
[72.20025635 286.87658691]
[70.13545227 272.01937866]
[68.07064819 257.16217041]
[58.85486603 268.99725342]
[44.78621674 274.20043945]
[30.08732796 271.20999146]
[19.17000008 260.92349243]
[15.31101036 246.42839050]
[19.66861343 232.07528687]
[30.93489838 222.17222595]
[45.72834778 219.69152832]
[59.60878754 225.37777710]
[68.40968323 237.52320862]
[70.98606873 222.74612427]
[73.56245422 207.96903992]
[76.13883972 193.19195557]
[78.71522522 178.41487122]
[81.29161072 163.63778687]
[83.86799622 148.86070251]
[86.44438171 134.08361816]
[89.02076721 119.30652618]
[83.81523132 115.20982361]
[80.04942322 109.76012421]
[78.05832672 103.44219971]
[78.01907349 96.81807709]
[79.93515015 90.47699738]
[83.63611603 84.98304749]
[88.79273224 80.82494354]
[94.94630432 78.37256622]
[101.54943085 77.84407806]
[107.58734131 64.11296082]
[113.62525177 50.38183594]
[119.66315460 36.65071869]
[125.70106506 22.91959763]
[115.25263214 11.91478062]
[109.82813263 -2.21383524]
[110.22509003 -17.30211067]
[116.35189819 -31.05165291]
[127.24646759 -41.37991714]
[141.22723389 -46.73564148]
[156.15258789 -46.33177567]
[162.19049072 -60.06289291]
[168.22839355 -73.79401398]
[174.26631165 -87.52513123]
[180.30421448 -101.25625610]
[172.36788940 -114.59020996]
[173.81828308 -130.03935242]
[184.09770203 -141.66316223]
[199.25349426 -144.99206543]
[213.45794678 -138.74603271]
[221.24916077 -125.32676697]
[219.63125610 -109.89426422]
[209.22634888 -98.38264465]
[194.03533936 -95.21834564]
[187.99743652 -81.48722839]
[181.95951843 -67.75610352]
[175.92161560 -54.02498627]
[169.88369751 -40.29386520]
[180.27003479 -29.56756783]
[185.77331543 -15.64423466]
[185.52598572 -0.63411516]
[179.53459167 13.17496777]
[168.68356323 23.66633415]
[154.60476685 29.21887589]
[139.43218994 28.95750618]
[133.39427185 42.68862534]
[127.35636902 56.41974640]
[121.31845856 70.15086365]
[115.28055573 83.88198853]
[121.26062012 106.42430115]
[103.79785156 121.88291168]
[101.22146606 136.66000366]
[98.64508057 151.43708801]
[96.06869507 166.21417236]
[93.49230957 180.99125671]
[90.91592407 195.76834106]
[88.33953857 210.54542542]
[85.76315308 225.32250977]
[83.18676758 240.09959412]
[82.92785645 255.09736633]
[84.99266052 269.95455933]
[87.05745697 284.81176758]
[89.12226105 299.66897583]
[102.46618652 307.82211304]
[107.39844513 322.66149902]
[101.59018707 337.18038940]
[87.78389740 344.52340698]
[72.49846649 341.22344971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 83]
[5 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
