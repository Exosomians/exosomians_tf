%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGUCUUUAACGUAGACCGAAGUCGUUUGAGUCUUCUUGCUUUCAGUCUUGCAUGAGUAGUCACUCCUUAUCU\
) } def
/len { sequence length } bind def

/coor [
[74.63745880 189.15476990]
[69.71804810 174.98440552]
[71.19655609 160.05744934]
[78.80023956 147.12748718]
[91.12361908 138.58085632]
[78.56612396 146.78507996]
[66.00862885 154.98930359]
[53.45112991 163.19352722]
[51.76793289 178.74024963]
[40.44955444 189.53045654]
[24.84017754 190.46929932]
[12.31008053 181.11352539]
[8.77558804 165.88061523]
[15.90557957 151.96310425]
[30.33349228 145.93240356]
[45.24690628 150.63603210]
[57.80440521 142.43180847]
[70.36190033 134.22758484]
[82.91939545 126.02336121]
[72.61663055 105.94629669]
[78.92124939 86.71689606]
[69.22676086 75.27063751]
[59.53227234 63.82437515]
[49.83778381 52.37811661]
[35.01453400 46.84803391]
[32.69311905 32.13544464]
[16.92409134 31.08027840]
[6.58285713 19.12894249]
[7.80468464 3.37195492]
[19.86468506 -6.84234524]
[35.60787582 -5.45399332]
[45.69409943 6.71332550]
[44.13937759 22.44095612]
[58.26921463 27.15232468]
[61.28404617 42.68362808]
[70.97853088 54.12988663]
[80.67301941 65.57614899]
[90.36750793 77.02240753]
[101.02960968 75.10633850]
[111.49706268 77.89633179]
[122.10366821 67.28973389]
[132.71026611 56.68313217]
[128.65763855 41.86854935]
[132.57078552 27.01651573]
[143.39706421 16.12215042]
[158.22427368 12.11598301]
[173.06396484 16.07565308]
[183.92434692 26.93603134]
[187.88401794 41.77572632]
[183.87785339 56.60293961]
[172.98348999 67.42922211]
[158.13145447 71.34235382]
[143.31686401 67.28973389]
[132.71026611 77.89633179]
[122.10366821 88.50293732]
[127.50041199 105.37909698]
[120.16832733 123.71076965]
[133.64419556 130.29872131]
[147.12005615 136.88667297]
[160.59593201 143.47462463]
[176.91001892 141.80651855]
[186.29101562 155.25749207]
[179.08857727 169.99034119]
[162.71192932 170.84916687]
[154.00798035 156.95048523]
[140.53210449 150.36253357]
[127.05624390 143.77458191]
[113.58038330 137.18663025]
[126.86862183 144.14527893]
[136.01220703 156.03623962]
[139.32443237 170.66596985]
[136.19429016 185.33573914]
[127.19920349 197.33941650]
[113.99848175 204.46267700]
[99.02726746 205.39151001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[40 55]
[41 54]
[42 53]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
