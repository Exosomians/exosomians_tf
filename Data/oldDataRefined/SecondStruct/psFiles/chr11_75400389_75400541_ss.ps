%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGCUACUUCUCUACUACUGCUCAGACUGAACCCCUACAAGAGAAACGGGUCCACCGGAUGAGACACGACGCAAGACACCGUGUCAAAUUUCUCGGGACCAACUUCAUUAAAGGAUUUCUACUGAAUCUCCGUAAACAGACUCUUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[98.90829468 525.06811523]
[98.29647064 510.08059692]
[97.68463898 495.09307861]
[97.07280731 480.10556030]
[96.46098328 465.11804199]
[95.84915161 450.13052368]
[86.61752319 445.41046143]
[80.15279388 437.20086670]
[77.69117737 426.96212769]
[79.74901581 416.55197144]
[86.01620483 407.88848877]
[95.40083313 402.59671021]
[95.70681000 387.59982300]
[96.01278687 372.60293579]
[85.43965912 356.45550537]
[95.97863770 339.31793213]
[95.67266083 324.32104492]
[95.36668396 309.32418823]
[81.42919159 303.96920776]
[70.57433319 293.65817261]
[64.47765350 279.93972778]
[64.09665680 264.89172363]
[69.52052307 250.80645752]
[79.95181274 239.84144592]
[93.82351685 233.68908691]
[93.51753998 218.69221497]
[93.21156311 203.69532776]
[92.90557861 188.69845581]
[82.42984009 181.13609314]
[78.17678070 168.72972107]
[81.91902924 155.95655823]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[92.50000000 52.43565369]
[81.60544586 41.30252838]
[81.81912994 26.09039497]
[92.50000000 15.77271461]
[92.50000000 0.77271420]
[83.92817688 -8.91763878]
[84.27092743 -21.44882011]
[92.79605865 -30.08376122]
[93.10203552 -45.08063889]
[93.40802002 -60.07751846]
[81.21247864 -69.48895264]
[76.94701385 -84.10604095]
[82.04619598 -98.26451111]
[94.35732269 -106.60562134]
[94.66329956 -121.60250092]
[94.96927643 -136.59938049]
[95.27525330 -151.59625244]
[95.58123016 -166.59313965]
[81.98092651 -176.60090637]
[77.05303192 -192.57800293]
[82.54330444 -208.19500732]
[96.11061096 -217.38742065]
[96.11061096 -232.38742065]
[96.11061096 -247.38742065]
[96.11061096 -262.38742065]
[85.21605682 -273.52053833]
[85.42974091 -288.73266602]
[96.11061096 -299.05035400]
[96.11061096 -314.05035400]
[96.11061096 -329.05035400]
[96.11061096 -344.05035400]
[96.11061096 -359.05035400]
[96.11061096 -374.05035400]
[82.52873230 -381.10662842]
[73.79131317 -393.67312622]
[71.90615845 -408.86209106]
[77.30644989 -423.18322754]
[88.75124359 -433.34567261]
[103.61061096 -437.01416016]
[118.46997833 -433.34567261]
[129.91477966 -423.18322754]
[135.31506348 -408.86209106]
[133.42990112 -393.67312622]
[124.69248962 -381.10662842]
[111.11061096 -374.05035400]
[111.11061096 -359.05035400]
[111.11061096 -344.05035400]
[111.11061096 -329.05035400]
[111.11061096 -314.05035400]
[111.11061096 -299.05035400]
[121.79148102 -288.73266602]
[122.00516510 -273.52053833]
[111.11061096 -262.38742065]
[111.11061096 -247.38742065]
[111.11061096 -232.38742065]
[111.11061096 -217.38742065]
[122.61820984 -210.55325317]
[129.28639221 -198.82377625]
[129.27255249 -185.22293091]
[122.47296143 -173.31871033]
[110.57810974 -166.28715515]
[110.27213287 -151.29028320]
[109.96615601 -136.29339600]
[109.66017914 -121.29652405]
[109.35420227 -106.29964447]
[121.31485748 -97.46331787]
[125.83229065 -83.10864258]
[120.97415924 -68.67770386]
[108.40489197 -59.77154160]
[108.09891510 -44.77466202]
[107.79293823 -29.77778244]
[117.08218384 -14.91923714]
[107.50000000 0.77271420]
[107.50000000 15.77271461]
[118.18087006 26.09039497]
[118.39455414 41.30252838]
[107.50000000 52.43565369]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[120.08510590 159.67329407]
[120.04988861 176.80087280]
[107.90245819 188.39247131]
[108.20844269 203.38935852]
[108.51441956 218.38623047]
[108.82039642 233.38311768]
[122.93150330 238.96453857]
[133.80136108 249.49494934]
[139.79522705 263.34729004]
[140.02833557 278.39828491]
[134.49629211 292.35400391]
[124.07102966 303.09918213]
[110.36356354 309.01818848]
[110.66954041 324.01507568]
[110.97551727 339.01196289]
[119.29782104 346.13253784]
[122.23400116 356.45550537]
[119.03856659 366.47018433]
[111.00966644 372.90890503]
[110.70368958 387.90579224]
[110.39771271 402.90267944]
[125.06441498 416.55197144]
[125.06263733 436.28457642]
[110.83666992 449.51867676]
[111.44850159 464.50619507]
[112.06032562 479.49371338]
[112.67215729 494.48123169]
[113.28398895 509.46875000]
[113.89581299 524.45629883]
[120.58317566 540.03558350]
[107.46394348 550.77441406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[12 143]
[13 142]
[14 141]
[16 137]
[17 136]
[18 135]
[25 128]
[26 127]
[27 126]
[28 125]
[32 122]
[33 121]
[34 120]
[37 117]
[38 116]
[39 115]
[42 112]
[43 111]
[46 109]
[47 108]
[48 107]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[60 94]
[61 93]
[62 92]
[63 91]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
