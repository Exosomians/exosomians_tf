%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAACACAACACCAUUUAUACAUCUCCCUCAUAUCCCGACACUAAUCAUACAACUCAGGACAUUCAUCCUCUCACUAUAAACUAGUCCUCU\
) } def
/len { sequence length } bind def

/coor [
[207.86274719 197.84062195]
[197.23106384 208.41252136]
[185.56874084 217.83526611]
[172.99937439 226.00892639]
[159.65620422 232.84687805]
[145.68067932 238.27665710]
[131.22091675 242.24067688]
[116.43022919 244.69694519]
[101.46537781 245.61940002]
[86.48498535 244.99827576]
[71.64785767 242.84016418]
[57.11126709 239.16793823]
[43.02929688 234.02050781]
[29.55122375 227.45245361]
[16.81991386 219.53338623]
[4.97032118 210.34725952]
[-5.87194872 199.99143982]
[-15.59196663 188.57569885]
[-24.08669853 176.22105408]
[-31.26609993 163.05845642]
[-37.05406952 149.22743225]
[-41.38925171 134.87458801]
[-44.22569656 120.15206909]
[-45.53333282 105.21594238]
[-45.29830551 90.22452545]
[-43.52309799 75.33673096]
[-40.22653580 60.71036530]
[-35.44356155 46.50047684]
[-29.22486877 32.85768890]
[-21.63638306 19.92661285]
[-12.75853920 7.84432316]
[-2.68544507 -3.26110768]
[8.47612476 -13.27196121]
[20.60785484 -22.08212090]
[33.58115005 -29.59819984]
[47.25849152 -35.74052429]
[61.49489975 -40.44398880]
[76.13946533 -43.65873337]
[91.03694916 -45.35068130]
[106.02944946 -45.50189972]
[120.95803070 -44.11078262]
[135.66445923 -41.19208145]
[149.99284363 -36.77672577]
[163.79129028 -30.91152954]
[176.91354370 -23.65865517]
[189.22052002 -15.09498978]
[200.58174133 -5.31130600]
[210.87678528 5.58868742]
[219.99652100 17.48944855]
[227.84429932 30.26483154]
[234.33689880 43.77941132]
[239.40551758 57.88993454]
[242.99642944 72.44683075]
[245.07156372 87.29579163]
[245.60893250 102.27941895]
[244.60282898 117.23888397]
[242.06391907 132.01560974]
[256.50769043 136.06256104]
[270.95144653 140.10951233]
[285.39520264 144.15646362]
[299.83895874 148.20341492]
[307.38339233 135.14460754]
[317.93896484 124.37287140]
[330.84219360 116.56531525]
[345.28192139 112.21273804]
[360.35046387 111.58874512]
[375.10064697 114.73255157]
[388.60519409 121.44654846]
[400.01522827 131.30868530]
[408.61352539 143.69900513]
[413.85955811 157.83866882]
[415.42358398 172.83882141]
[413.20724487 187.75656128]
[407.34991455 201.65412903]
[398.21975708 213.65791321]
[386.39068604 223.01335144]
[372.60632324 229.13235474]
[357.73315430 231.63027954]
[342.70611572 230.35009766]
[328.46981812 225.37228394]
[315.91915894 217.00975037]
[305.84310913 205.78816223]
[298.87503052 192.41293335]
[295.45297241 177.72483826]
[295.79199219 162.64717102]
[281.34823608 158.60021973]
[266.90447998 154.55326843]
[252.46072388 150.50631714]
[238.01696777 146.45936584]
[232.50851440 160.40406799]
[225.59544373 173.70848083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
