%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGUCGAAGGGACCACCAGAUCACCAAUCCUAAGCCGCGAGAGUGGCGGCGCCGGGCCCAAGCUAAGGGCCAGUCCCUUUCUCAUUGUAGAAGAAAAUGACGAAAGAGAGUCCUAGAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[90.87335968 281.41577148]
[76.05850220 278.41387939]
[62.78744507 271.17712402]
[52.24024200 260.34902954]
[45.35474396 246.89236450]
[42.74320984 232.00373840]
[44.63784790 217.00701904]
[50.87018967 203.23570251]
[60.88606262 191.91430664]
[73.79486084 184.04956055]
[88.44874573 180.34075928]
[89.20240784 165.35971069]
[89.95606995 150.37866211]
[90.70973969 135.39759827]
[91.46340179 120.41654968]
[83.61969757 133.20233154]
[82.26853180 148.14135742]
[76.69953918 162.06925964]
[67.37835693 173.82151794]
[55.08433151 182.41551208]
[40.84536743 187.13272095]
[25.85200119 187.57870483]
[11.35782814 183.71620178]
[-1.42528212 175.86813354]
[-11.42852879 164.69070435]
[-17.81553459 151.11843872]
[-20.05227852 136.28614807]
[-17.95174599 121.43395233]
[-11.68956375 107.80364990]
[-1.78931451 96.53488922]
[10.92123508 88.56983948]
[25.37935066 84.57448578]
[40.37617874 84.88285828]
[54.65783310 89.46919250]
[67.03199005 97.95165253]
[81.88336945 100.05793762]
[69.85986328 91.08936310]
[57.83635712 82.12078857]
[45.81285477 73.15221405]
[33.78934860 64.18363953]
[18.61250877 67.95160675]
[4.58716059 61.03614044]
[-1.66435552 46.70252609]
[2.80973530 31.71864891]
[15.89690399 23.15944290]
[31.41779137 25.06629944]
[42.04390717 36.53886414]
[42.75792313 52.16013718]
[54.78142929 61.12871170]
[66.80493164 70.09728241]
[78.82843781 79.06585693]
[90.85194397 88.03443146]
[97.75368500 85.09912872]
[91.88329315 71.29556274]
[105.68695068 65.42538452]
[111.55715942 79.22853088]
[118.45890045 76.29322815]
[120.33889771 61.41150284]
[122.21889496 46.52978516]
[124.09889221 31.64806366]
[125.97888947 16.76634216]
[115.22203064 5.41628122]
[114.32907867 -10.19578648]
[123.72166443 -22.69831848]
[138.96490479 -26.18800354]
[152.86138916 -19.01711655]
[158.84963989 -4.57153225]
[154.10217285 10.32798576]
[140.86061096 18.64634132]
[138.98062134 33.52806091]
[137.10061646 48.40978241]
[135.22061157 63.29150391]
[133.34062195 78.17322540]
[128.94641113 85.38695526]
[123.43978119 91.30100250]
[117.06060028 95.76660156]
[132.05941772 95.57810974]
[145.76127625 87.66800690]
[158.58476257 95.24476624]
[173.58358765 95.05627441]
[188.58239746 94.86778259]
[203.58120728 94.67929077]
[218.58003235 94.49079895]
[233.57528687 94.11384583]
[248.56463623 93.54849243]
[263.55398560 92.98314667]
[278.54330444 92.41779327]
[293.53265381 91.85243988]
[301.28952026 78.51697540]
[315.03509521 71.51250458]
[330.38323975 73.07411957]
[342.43637085 82.70352173]
[347.34841919 97.32800293]
[343.55194092 112.28093719]
[332.25839233 122.79090881]
[317.07150269 125.50421906]
[302.83737183 119.55505371]
[294.09802246 106.84178162]
[279.10867310 107.40713501]
[264.11932373 107.97248840]
[249.12998962 108.53784180]
[234.14064026 109.10318756]
[227.50102234 112.53766632]
[218.76852417 109.48961639]
[203.76969910 109.67810822]
[188.77088928 109.86660004]
[173.77207947 110.05508423]
[158.77325439 110.24357605]
[146.14421082 118.14019775]
[132.24790955 110.57691956]
[117.24909210 110.76541138]
[106.44445801 121.17021179]
[105.69078827 136.15126038]
[104.93712616 151.13232422]
[104.18346405 166.11337280]
[103.42979431 181.09443665]
[117.63747406 186.25518799]
[129.69177246 195.37577820]
[138.52084351 207.64521790]
[143.33959961 221.97248840]
[143.71957397 237.08364868]
[139.62698364 251.63500977]
[131.42572021 264.33267212]
[119.84503937 274.04757690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 116]
[12 115]
[13 114]
[14 113]
[15 112]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[76 111]
[77 110]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
