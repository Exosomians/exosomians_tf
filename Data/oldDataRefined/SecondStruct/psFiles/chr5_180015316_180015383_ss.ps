%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCGAUAUUUCAUUGACUCUGCCUAGGGUGUUUGCUGUAUACUGUUAGUCAGAGUAACGAAAUAUUA\
) } def
/len { sequence length } bind def

/coor [
[64.43784332 378.90570068]
[48.78075409 376.75369263]
[39.29793167 364.11044312]
[41.61536407 348.47698975]
[54.35816193 339.12835693]
[56.40066147 324.26806641]
[58.44316101 309.40777588]
[60.48566055 294.54748535]
[62.52816010 279.68719482]
[64.57066345 264.82690430]
[66.61315918 249.96662903]
[68.65566254 235.10633850]
[58.08802032 226.65014648]
[53.11868286 213.94346619]
[55.17864609 200.34542847]
[63.82490158 189.50973511]
[76.83007050 184.40292358]
[79.54681396 169.65100098]
[82.26355743 154.89907837]
[84.98030090 140.14715576]
[87.69704437 125.39522552]
[90.41378784 110.64330292]
[85.91294861 97.40570068]
[94.83428955 86.63995361]
[97.55103302 71.88803101]
[100.26777649 57.13610458]
[93.62409973 40.13110733]
[105.14010620 27.08225822]
[107.18260956 12.22196960]
[109.22510529 -2.63831973]
[111.26760864 -17.49860954]
[113.31010437 -32.35889816]
[102.67790985 -43.82582474]
[101.95560455 -59.44671631]
[111.48424530 -71.84587097]
[126.76470184 -75.16877747]
[140.58200073 -67.84647369]
[146.41204834 -53.33631897]
[141.50205994 -38.48956680]
[128.17039490 -30.31639862]
[126.12789917 -15.45610905]
[124.08539581 -0.59582013]
[122.04290009 14.26446915]
[120.00039673 29.12475777]
[127.13028717 39.15396881]
[125.32187653 51.73530197]
[115.01969910 59.85284805]
[112.30295563 74.60477448]
[109.58621216 89.35669708]
[114.08705139 102.59429932]
[105.16571045 113.36004639]
[102.44896698 128.11196899]
[99.73222351 142.86389160]
[97.01548004 157.61582947]
[94.29873657 172.36775208]
[91.58199310 187.11967468]
[103.33996582 199.05282593]
[105.76715851 215.46284485]
[98.11983490 229.99841309]
[83.51594543 237.14883423]
[81.47344971 252.00912476]
[79.43094635 266.86941528]
[77.38845062 281.72970581]
[75.34594727 296.58999634]
[73.30345154 311.45028687]
[71.26094818 326.31057739]
[69.21845245 341.17086792]
[78.96648407 353.61077881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[24 49]
[25 48]
[26 47]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
