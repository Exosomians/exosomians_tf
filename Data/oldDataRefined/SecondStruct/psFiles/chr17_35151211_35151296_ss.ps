%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUACGAAUUUAAGUCGCCCAGCGGUGCAGACUAGACUCCAGCGCCCGGAGCUAGUCUUCCUGAACCCGGGGUGUGCUCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[45.13017654 206.83879089]
[37.76922226 216.68702698]
[27.49155426 223.37113953]
[15.57297325 226.09034729]
[3.48303795 224.53427124]
[-7.29614401 218.91813660]
[-18.72857475 228.62892151]
[-30.16100502 238.33972168]
[-29.88597107 253.97488403]
[-39.76549911 266.09631348]
[-55.13477707 268.98062134]
[-68.73690033 261.26596069]
[-74.14936829 246.59492493]
[-68.81657410 231.89474487]
[-55.25650024 224.10639954]
[-39.87179947 226.90728760]
[-28.43936920 217.19650269]
[-17.00693893 207.48570251]
[-21.15397072 190.11585999]
[-16.09242249 172.90402222]
[-3.08344483 160.42990112]
[14.48592758 156.05505371]
[31.98437881 161.01736450]
[42.29986954 150.12744141]
[52.61536407 139.23750305]
[62.93085480 128.34756470]
[73.24634552 117.45764160]
[83.56183624 106.56770325]
[82.55775452 92.71575165]
[92.18129730 81.48010254]
[93.26366425 66.51920319]
[94.34603119 51.55830002]
[95.42839813 36.59740448]
[96.51076508 21.63650513]
[97.59313202 6.67560673]
[98.67549896 -8.28529167]
[96.13219452 -17.30621910]
[100.07662201 -23.76362991]
[101.69841003 -38.67569733]
[103.32019806 -53.58776855]
[104.94197845 -68.49983978]
[93.99001312 -79.66175842]
[92.82660675 -95.25600433]
[102.00109100 -107.91944885]
[117.18154907 -111.67280579]
[131.20024109 -104.74385071]
[137.43795776 -90.40422821]
[132.94944763 -75.42465973]
[119.85404968 -66.87805176]
[118.23226166 -51.96598434]
[116.61048126 -37.05391312]
[114.98869324 -22.14184380]
[113.63639832 -7.20292568]
[112.55403137 7.75797272]
[111.47166443 22.71887207]
[110.38929749 37.67977142]
[109.30693054 52.64066696]
[108.22456360 67.60157013]
[107.14219666 82.56246185]
[116.85299683 93.99489594]
[131.79191589 95.34719086]
[146.73083496 96.69948578]
[161.66975403 98.05178833]
[176.60867310 99.40408325]
[191.25683594 92.03092957]
[204.81590271 101.25501251]
[203.33746338 117.58737946]
[188.34242249 124.22669983]
[175.25637817 114.34300232]
[160.31745911 112.99069977]
[145.37854004 111.63840485]
[130.43962097 110.28610992]
[115.50069427 108.93381500]
[128.08432007 117.09790802]
[131.94490051 131.59259033]
[125.08920288 144.93423462]
[111.05684662 150.23451233]
[97.09276581 144.75688171]
[90.40664673 131.32945251]
[94.45177460 116.88320160]
[84.13627625 127.77313232]
[73.82078552 138.66307068]
[63.50529480 149.55299377]
[53.18980408 160.44293213]
[42.87431335 171.33285522]
[47.87506104 182.68054199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[38 52]
[39 51]
[40 50]
[41 49]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
