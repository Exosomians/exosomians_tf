%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUAUAUGAUUUUAACCUUGCUAUGUCUCUUCUAAUCGUACCGGGGACGCGUUCCUACUGUGCGUUUAAGCACUUCGCAAGGUAUAAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[68.60183716 395.58840942]
[55.65943909 403.56103516]
[40.65043640 405.96899414]
[25.86359596 402.44509888]
[13.55379868 393.52673340]
[5.59820223 380.57385254]
[3.20997620 365.56170654]
[6.75330782 350.77951050]
[15.68786430 338.48147583]
[28.65119171 330.54290771]
[43.66647720 328.17443848]
[47.14377975 313.58306885]
[50.62108231 298.99166870]
[54.09838104 284.40029907]
[57.57568359 269.80892944]
[60.80868149 255.16146851]
[63.79647064 240.46205139]
[66.78426361 225.76261902]
[69.77204895 211.06318665]
[72.75984192 196.36376953]
[75.74763489 181.66433716]
[78.73542023 166.96492004]
[68.55134583 156.12875366]
[66.67870331 141.19699097]
[74.04360962 127.86989594]
[88.00509644 121.35966492]
[90.99288940 106.66024017]
[93.73463440 91.91294098]
[96.22957611 77.12188721]
[94.34906769 72.68508911]
[94.14112091 68.34114838]
[95.34244537 64.64488220]
[97.52553558 61.99289703]
[100.17139435 60.58131409]
[104.61552429 46.25477982]
[109.05966187 31.92823982]
[105.75839996 16.45528793]
[116.91909790 6.59181261]
[121.36322784 -7.73472500]
[125.80736542 -22.06126213]
[130.25149536 -36.38779831]
[134.69563293 -50.71433640]
[129.20036316 -69.96748352]
[143.53302002 -82.76535034]
[147.01033020 -97.35672760]
[150.48762512 -111.94811249]
[153.96493530 -126.53948975]
[157.44223022 -141.13087463]
[152.24235535 -156.68379211]
[163.31277466 -168.78245544]
[179.26518250 -164.98080444]
[183.68911743 -149.18965149]
[172.03361511 -137.65356445]
[168.55630493 -123.06218719]
[165.07901001 -108.47080994]
[161.60169983 -93.87942505]
[158.12440491 -79.28804779]
[164.35864258 -70.88241577]
[164.83636475 -60.20577621]
[159.14630127 -50.89774323]
[149.02217102 -46.27020264]
[144.57803345 -31.94366646]
[140.13389587 -17.61712837]
[135.68975830 -3.29059124]
[131.24563599 11.03594589]
[134.86476135 25.48416901]
[123.38619995 36.37237549]
[118.94206238 50.69891357]
[114.49793243 65.02545166]
[111.02062988 79.61682892]
[108.52568817 94.40788269]
[110.42066956 102.42478180]
[105.69231415 109.64803314]
[102.70452118 124.34745789]
[113.01663971 135.79150391]
[114.59438324 150.93627930]
[107.04113770 163.95214844]
[93.43484497 169.95271301]
[90.44705963 184.65213013]
[87.45926666 199.35156250]
[84.47147369 214.05097961]
[81.48368835 228.75041199]
[78.49589539 243.44982910]
[75.50811005 258.14926147]
[76.87490845 267.39105225]
[72.16706848 273.28622437]
[68.68976593 287.87759399]
[65.21246338 302.46899414]
[61.73515701 317.06036377]
[58.25785446 331.65173340]
[70.59107208 340.53768921]
[78.58071899 353.46960449]
[81.00843048 368.47540283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 90]
[12 89]
[13 88]
[14 87]
[15 86]
[16 84]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[26 74]
[27 73]
[28 71]
[29 70]
[34 69]
[35 68]
[36 67]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
