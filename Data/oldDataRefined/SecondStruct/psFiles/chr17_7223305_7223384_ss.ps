%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUCGUCGUGGACCCCGUCACCCAGAGGUCGAAAUGUGGUUACGGGAUCCCCUACGCCCCUCCGUAUCAGUCGAGUC\
) } def
/len { sequence length } bind def

/coor [
[175.20477295 223.20817566]
[166.48239136 211.00489807]
[157.76000977 198.80162048]
[149.03762817 186.59834290]
[140.31524658 174.39505005]
[133.69227600 170.68928528]
[131.50210571 161.54518127]
[123.25947571 149.01286316]
[115.01684570 136.48054504]
[101.55867004 130.09878540]
[100.43977356 114.31719208]
[88.03251648 107.87113953]
[87.02790833 93.92544556]
[78.78527069 81.39312744]
[70.54264069 68.86080933]
[56.49489975 61.58264923]
[55.96557236 46.69745255]
[47.72293472 34.16513443]
[39.48030090 21.63281822]
[31.23766708 9.10050011]
[22.99503136 -3.43181705]
[8.94729328 -10.70997715]
[8.41796303 -25.59517288]
[0.17532869 -38.12749100]
[-8.06730556 -50.65980911]
[-16.55140877 -63.02993393]
[-25.27379036 -75.23321533]
[-40.55256271 -73.66646576]
[-54.56116867 -79.96364594]
[-63.53136444 -92.43084717]
[-65.05021667 -107.71446228]
[-58.70915222 -121.70325470]
[-46.21389389 -130.63433838]
[-30.92560005 -132.10527039]
[-16.95674515 -125.72039032]
[-8.06488228 -113.19719696]
[-6.64187622 -97.90436554]
[-13.07050896 -83.95559692]
[-4.34812784 -71.75231171]
[2.27484417 -68.04654694]
[4.46501112 -58.90244293]
[12.70764542 -46.37012482]
[20.95028114 -33.83780670]
[34.40845108 -27.45604324]
[35.52734756 -11.67445183]
[43.76998520 0.85786551]
[52.01261902 13.39018250]
[60.25525284 25.92250061]
[68.49788666 38.45481873]
[81.95605469 44.83658218]
[83.07495880 60.61817169]
[91.31758881 73.15048981]
[99.56022644 85.68280792]
[111.96748352 92.12886047]
[112.97209167 106.07455444]
[127.01982880 113.35271454]
[127.54915619 128.23791504]
[135.79179382 140.77023315]
[144.03442383 153.30255127]
[152.51853943 165.67266846]
[161.24090576 177.87596130]
[169.96328735 190.07923889]
[178.68566895 202.28251648]
[187.40805054 214.48579407]
[201.91223145 210.13752747]
[217.04232788 210.73686218]
[231.15711975 216.21876526]
[242.72555542 225.98863220]
[250.49276733 238.98666382]
[253.61622620 253.80296326]
[251.75714111 268.83035278]
[245.11715698 282.43878174]
[234.41651917 293.15209961]
[220.81597900 299.80822754]
[205.79080200 301.68511963]
[190.97080994 298.57922363]
[177.96356201 290.82742310]
[168.18000793 279.27056885]
[162.68136597 265.16229248]
[162.06410217 250.03292847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[7 59]
[8 58]
[9 57]
[11 55]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[23 43]
[24 42]
[25 41]
[26 39]
[27 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
