%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUUUUGGUGGUAAACCUCCACGGCCCCUAGCUUGGGCCCCGGAGUGUGUACGUUUCGUACACGAGAUGGUGACUCGAUGUGGGGGGAGGAC\
) } def
/len { sequence length } bind def

/coor [
[97.05396271 146.12475586]
[95.56828308 131.19851685]
[94.08259583 116.27227020]
[87.54647064 112.59409332]
[87.71170044 127.59318542]
[74.80467224 135.23573303]
[61.73256683 127.87909698]
[61.56766129 112.88000488]
[74.47420502 105.23774719]
[67.93807220 101.55957031]
[54.40820312 108.03588104]
[40.87833405 114.51219940]
[27.34846687 120.98851013]
[23.62948418 136.17742920]
[10.98683739 145.38055420]
[-4.61000204 144.25245667]
[-15.79668331 133.32577515]
[-17.29119873 117.75978088]
[-8.38788223 104.90423584]
[6.70939159 100.82914734]
[20.87215233 107.45864105]
[34.40201950 100.98233032]
[47.93188858 94.50601196]
[61.46175766 88.02970123]
[78.63610077 79.10661316]
[93.83110809 81.59633636]
[101.33277893 91.16209412]
[110.54596710 79.32498932]
[119.75916290 67.48787689]
[128.97235107 55.65077209]
[138.18554688 43.81366348]
[147.39872742 31.97655487]
[145.63951111 16.49938202]
[155.15161133 4.62611771]
[169.91757202 3.04434466]
[179.13076782 -8.79276276]
[188.34396362 -20.62987137]
[197.55714417 -32.46697998]
[206.77033997 -44.30408478]
[215.78656006 -56.29190445]
[217.63848877 -72.00434875]
[231.37899780 -77.75305939]
[240.19577026 -89.88831329]
[249.01255798 -102.02356720]
[244.37742615 -116.71443939]
[249.22485352 -131.14897156]
[261.49722290 -139.85835266]
[276.36679077 -139.67343140]
[285.18356323 -151.80868530]
[294.00033569 -163.94393921]
[302.81710815 -176.07919312]
[311.63388062 -188.21444702]
[320.45068359 -200.34970093]
[329.26745605 -212.48495483]
[338.08422852 -224.62020874]
[342.50265503 -240.98829651]
[359.45419312 -241.27368164]
[364.42108154 -225.06361389]
[350.21948242 -215.80343628]
[341.40270996 -203.66818237]
[332.58593750 -191.53292847]
[323.76913452 -179.39767456]
[314.95236206 -167.26242065]
[306.13558960 -155.12716675]
[297.31881714 -142.99191284]
[288.50204468 -130.85664368]
[293.27285767 -116.77200317]
[288.78210449 -102.40895081]
[276.55200195 -93.33824921]
[261.14779663 -93.20678711]
[252.33102417 -81.07153320]
[243.51425171 -68.93627930]
[242.29295349 -54.09183121]
[227.92181396 -47.47512817]
[226.50944519 -40.06718063]
[218.60745239 -35.09089661]
[209.39425659 -23.25378799]
[200.18106079 -11.41668034]
[190.96788025 0.42042774]
[181.75468445 12.25753498]
[183.84614563 26.95996284]
[174.67127991 39.09571838]
[159.23583984 41.18974686]
[150.02264404 53.02685547]
[140.80946350 64.86396027]
[131.59626770 76.70107269]
[122.38307953 88.53817749]
[113.16988373 100.37528229]
[109.00884247 114.78659058]
[110.49452209 129.71282959]
[111.98020935 144.63908386]
[121.98040009 157.63630676]
[115.47529602 172.69007874]
[99.15678406 174.31433105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[10 24]
[11 23]
[12 22]
[13 21]
[27 88]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[40 74]
[42 72]
[43 71]
[44 70]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
