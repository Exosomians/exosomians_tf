%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUUUUUAUGGAGAAUAGAACUGGCCCUUAACUUGGGCCCAGAGGGCGCACCCUCCGCUCUUAAGAUGGUGACUUGGUGGUCACGGAGAGAGAU\
) } def
/len { sequence length } bind def

/coor [
[110.63673401 145.61845398]
[99.96697235 146.84210205]
[89.29895020 145.60340881]
[79.19345093 141.96749878]
[70.18167877 136.12548828]
[58.90408707 146.01568604]
[47.62648773 155.90586853]
[36.34889221 165.79605103]
[25.07129478 175.68623352]
[13.79369736 185.57643127]
[11.31386185 201.42666626]
[-2.69528580 209.24481201]
[-17.48712540 203.03344727]
[-21.71462631 187.55740356]
[-12.13480854 174.68858337]
[3.90350962 174.29882812]
[15.18110657 164.40864563]
[26.45870399 154.51846313]
[37.73630142 144.62826538]
[49.01389694 134.73808289]
[60.29149628 124.84789276]
[54.63539505 111.67201233]
[53.22996521 97.40245819]
[56.20689774 83.37629700]
[43.21651840 75.87629700]
[30.22613716 68.37629700]
[17.23575592 60.87629700]
[4.24537516 53.37629700]
[-10.38628101 58.89432526]
[-25.12450218 53.66758347]
[-33.01035309 40.16397858]
[-30.32037354 24.75949669]
[-18.32469177 14.72766685]
[-2.68730068 14.80521011]
[9.20830154 24.95551300]
[11.74537468 40.38591385]
[24.73575592 47.88591385]
[37.72613525 55.38591385]
[50.71651840 62.88591385]
[63.70689774 70.38591766]
[73.09641266 61.65446472]
[84.50170135 55.79608917]
[97.06820679 53.24972916]
[98.53846741 38.32195663]
[100.00872803 23.39418793]
[101.47898102 8.46641636]
[102.94924164 -6.46135473]
[95.69202423 -21.16730309]
[105.02292633 -34.65308762]
[121.34310150 -33.04568863]
[127.86376953 -17.99866295]
[117.87700653 -4.99109745]
[116.40675354 9.93667316]
[114.93649292 24.86444473]
[113.46623993 39.79221344]
[111.99597931 54.71998596]
[131.23466492 65.09185028]
[143.67315674 83.06368256]
[146.60342407 104.72277832]
[161.09230042 108.60506439]
[175.58119202 112.48735046]
[190.07008362 116.36963654]
[204.55897522 120.25192261]
[212.30354309 114.28549194]
[221.80827332 112.69567108]
[230.80841064 115.72803497]
[237.22177124 122.54237366]
[239.63038635 131.44029236]
[255.27151489 129.06002808]
[264.45758057 140.78459167]
[278.49615479 146.06834412]
[292.53475952 151.35209656]
[306.57333374 156.63584900]
[320.61193848 161.91960144]
[334.65051270 167.20333862]
[350.73367310 163.99958801]
[361.34494019 176.50292969]
[355.56832886 191.85098267]
[339.34634399 194.25500488]
[329.36676025 181.24192810]
[315.32818604 175.95819092]
[301.28958130 170.67443848]
[287.25100708 165.39068604]
[273.21240234 160.10693359]
[259.17382812 154.82318115]
[244.53683472 157.58139038]
[234.34663391 145.47888184]
[214.54788208 150.89878845]
[200.67668152 134.74081421]
[186.18778992 130.85852051]
[171.69891357 126.97623444]
[157.21002197 123.09394836]
[142.72113037 119.21166229]
[137.22257996 128.43699646]
[129.76734924 136.16749573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[68 87]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
