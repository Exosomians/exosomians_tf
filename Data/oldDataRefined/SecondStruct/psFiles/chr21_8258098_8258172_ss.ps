%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGCUCUGCGCUGGAGUCUAGUCUGCACCGCUGGGCGACUUAAAUUCGUAUAAUCAGUCGCCUCCUUUUCU\
) } def
/len { sequence length } bind def

/coor [
[145.87084961 395.91934204]
[156.16896057 384.15145874]
[153.70004272 369.35601807]
[151.23112488 354.56060791]
[148.76220703 339.76519775]
[146.29328918 324.96978760]
[143.82437134 310.17434692]
[141.35545349 295.37893677]
[129.47082520 282.63720703]
[135.68409729 265.44702148]
[132.60586548 250.76625061]
[129.52763367 236.08549500]
[113.24022675 232.64808655]
[99.96384430 222.51704407]
[92.29929352 207.61853027]
[91.77307892 190.81822205]
[98.53363037 175.37008667]
[111.31351471 164.28619385]
[107.03347015 149.90979004]
[102.75342560 135.53337097]
[98.47338104 121.15695953]
[83.86221313 113.76660919]
[78.86682892 98.17335510]
[86.46374512 83.66851807]
[81.59325409 69.48125458]
[76.72276306 55.29399872]
[71.85226440 41.10673904]
[65.94334412 33.75567245]
[67.08686829 26.23140526]
[62.80682755 11.85499287]
[57.20672989 4.26601887]
[58.66022110 -3.20456505]
[54.97793961 -17.74556923]
[45.22834015 -31.61573982]
[55.85749817 -44.82396698]
[71.49198914 -38.26659775]
[69.51894379 -21.42785072]
[73.20122528 -6.88684750]
[77.18323517 7.57494974]
[81.46327972 21.95136261]
[86.03952789 36.23624802]
[90.91001892 50.42350769]
[95.78050995 64.61076355]
[100.65100098 78.79802704]
[112.76502228 83.05887604]
[120.20070648 93.52858734]
[120.23289490 106.37005615]
[112.84979248 116.87691498]
[117.12983704 131.25332642]
[121.40988159 145.62974548]
[125.68992615 160.00614929]
[139.15631104 161.22433472]
[151.33880615 167.01559448]
[160.74012756 176.64332581]
[166.21347046 188.90092468]
[167.10231018 202.26304626]
[163.31910706 215.07539368]
[155.35336304 225.75952148]
[144.20838928 233.00727844]
[147.28662109 247.68801880]
[150.36485291 262.36877441]
[160.84335327 270.20794678]
[162.98045349 282.70816040]
[156.15086365 292.91000366]
[158.61978149 307.70544434]
[161.08869934 322.50085449]
[163.55763245 337.29626465]
[166.02655029 352.09170532]
[168.49546814 366.88711548]
[170.96438599 381.68252563]
[184.52552795 389.46899414]
[189.86036682 404.16845703]
[184.44992065 418.84024048]
[170.84886169 426.55679321]
[155.47918701 423.67459106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[10 61]
[11 60]
[12 59]
[18 51]
[19 50]
[20 49]
[21 48]
[24 44]
[25 43]
[26 42]
[27 41]
[29 40]
[30 39]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
