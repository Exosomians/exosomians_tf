%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCCCAAACGACUUCUACCGCCAUAUAUCCGACUCGUUCUCCACCACUCCAACUAGCCCCAAAUAGCUAAUGUCUUGUCCGAGGAGAUCUCCCUAUACUUCGUGGCGGUCCAGGAAACUCAAAAUUCGACACCGAGCAUCACAAGACCGCUCGUCAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[110.49230957 112.49824524]
[103.17137909 114.12734985]
[98.40052795 128.34843445]
[93.62967682 142.56950378]
[88.85882568 156.79057312]
[96.12294006 170.82653809]
[91.25497437 185.86244202]
[77.14299774 192.97775269]
[62.15940475 187.95109558]
[55.19368362 173.76467896]
[60.37848282 158.83506775]
[74.63774872 152.01972961]
[79.40859985 137.79864502]
[84.17945862 123.57757568]
[88.95030975 109.35649872]
[86.81558228 94.50917816]
[78.23144531 82.20825958]
[69.64730835 69.90734863]
[60.71540070 57.85657501]
[51.44301605 46.06577682]
[42.17063141 34.27498245]
[32.89824677 22.48418617]
[23.62586212 10.69338894]
[14.35347652 -1.09740722]
[5.08109236 -12.88820362]
[-4.19129276 -24.67900085]
[-18.05971909 -17.81993675]
[-33.04234695 -13.98244572]
[-48.48922729 -13.33058739]
[-63.73076630 -15.89028072]
[-78.10676575 -21.54828072]
[-90.99499512 -30.05718803]
[-101.83815765 -41.04626083]
[-110.16793823 -54.03757858]
[-115.62529755 -68.46681976]
[-117.97587585 -83.70776367]
[-117.12010956 -99.09948730]
[-113.09741974 -113.97502899]
[-106.08441162 -127.69026947]
[-96.38712311 -139.65182495]
[-105.88230896 -151.26394653]
[-115.37749481 -162.87606812]
[-124.87268066 -174.48818970]
[-134.36787415 -186.10031128]
[-151.21769714 -184.89730835]
[-165.33341980 -193.87130737]
[-171.27482605 -209.32974243]
[-166.89181519 -225.12799072]
[-176.60635376 -236.55723572]
[-191.85563660 -231.52873230]
[-207.82942200 -232.72486877]
[-222.09107971 -239.93362427]
[-232.47651672 -252.02807617]
[-237.42248535 -267.14245605]
[-236.20188904 -282.96005249]
[-229.03045654 -297.06808472]
[-238.96084595 -308.31030273]
[-248.89123535 -319.55252075]
[-258.82162476 -330.79473877]
[-274.25503540 -329.18572998]
[-287.66979980 -336.98471069]
[-293.90765381 -351.19274902]
[-290.56997681 -366.34661865]
[-278.94024658 -376.61932373]
[-263.49026489 -378.06079102]
[-250.16088867 -370.11676025]
[-244.07754517 -355.84188843]
[-247.57940674 -340.72509766]
[-237.64901733 -329.48287964]
[-227.71862793 -318.24066162]
[-217.78823853 -306.99847412]
[-204.67607117 -312.06393433]
[-190.59231567 -312.34262085]
[-177.23339844 -307.78054810]
[-166.21539307 -298.90802002]
[-158.87858582 -286.77801514]
[-156.12442017 -272.84140015]
[-158.30474854 -258.77331543]
[-165.17710876 -246.27178955]
[-155.46257019 -234.84254456]
[-142.27667236 -237.08830261]
[-129.60528564 -232.47758484]
[-120.80564117 -222.11784363]
[-118.26544189 -208.65441895]
[-122.75574493 -195.59550476]
[-113.26055908 -183.98338318]
[-103.76537323 -172.37126160]
[-94.27018738 -160.75912476]
[-84.77500153 -149.14700317]
[-71.90574646 -155.96139526]
[-57.94604492 -160.12376404]
[-43.43642807 -161.47090149]
[-28.93913460 -159.94863892]
[-15.01629925 -155.61404419]
[-2.20817256 -148.63327026]
[8.98785114 -139.27519226]
[18.13654518 -127.90105438]
[24.88177681 -114.95048523]
[28.96035957 -100.92459106]
[30.21232605 -86.36647034]
[28.58720779 -71.84026337]
[24.14605522 -57.90924072]
[17.05915642 -45.11397934]
[7.59950399 -33.95138550]
[16.87188911 -22.16058922]
[26.14427376 -10.36979198]
[35.41665649 1.42100441]
[44.68904114 13.21180058]
[53.96142960 25.00259781]
[63.23381424 36.79339218]
[72.50619507 48.58419037]
[75.99102783 49.35382843]
[79.26654816 51.87678909]
[81.50030518 56.03137207]
[81.94821930 61.32320404]
[90.53236389 73.62412262]
[99.11650085 85.92504120]
[97.48058319 71.01451111]
[94.38478851 56.33745193]
[95.76917267 41.40147400]
[101.50981140 27.54344177]
[111.09288788 16.00374413]
[123.66065216 7.81525660]
[138.08821106 3.71090555]
[153.08418274 4.05805635]
[167.30636597 8.82563686]
[179.48175049 17.58691597]
[188.52056885 29.55770493]
[193.61378479 43.66653442]
[194.30552673 58.65057755]
[190.53387451 73.16865540]
[182.63642883 85.92131805]
[171.32005310 95.76710510]
[157.59977722 101.82416534]
[143.31111145 97.25974274]
[153.66229248 108.11575317]
[164.01348877 118.97176361]
[174.36466980 129.82777405]
[184.71585083 140.68379211]
[202.48451233 145.43605042]
[205.99992371 162.60960388]
[216.55590820 173.26657104]
[232.50981140 177.06201172]
[236.93989563 192.85144043]
[225.28887939 204.39205933]
[209.54232788 199.81187439]
[205.89894104 183.82257080]
[195.34295654 173.16560364]
[183.22395325 172.78562927]
[174.34086609 163.95382690]
[173.85984802 151.03497314]
[163.50865173 140.17895508]
[153.15747070 129.32295227]
[142.80628967 118.46694183]
[132.45510864 107.61093140]
[125.13417053 109.24003601]
[129.01354980 123.72970581]
[132.89291382 138.21937561]
[136.77227783 152.70904541]
[142.92430115 166.38941956]
[132.58657837 177.25823975]
[118.61540222 171.79872131]
[118.38569641 156.80055237]
[115.75457001 142.03312683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[16 117]
[17 116]
[18 115]
[19 111]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[40 89]
[41 88]
[42 87]
[43 86]
[44 85]
[48 80]
[49 79]
[56 71]
[57 70]
[58 69]
[59 68]
[135 155]
[136 154]
[137 153]
[138 152]
[139 151]
[141 148]
[142 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
