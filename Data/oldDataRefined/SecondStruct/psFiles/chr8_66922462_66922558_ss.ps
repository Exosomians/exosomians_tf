%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:31 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCAUGACCGUAGAGUCAGAAUUUUAAUAAAGAAGUUUCUGUUGGAGUCGACCCAUUUGCCGUUUUUCAUUAAAUUCAGUAGUAACACGGUCGAUA\
) } def
/len { sequence length } bind def

/coor [
[113.09918213 116.52900696]
[102.99796295 120.03827667]
[92.91629791 118.09528351]
[82.48106384 128.87052917]
[78.66220093 137.37985229]
[71.53445435 139.81712341]
[60.75921631 150.25236511]
[49.98397827 160.68760681]
[39.20873642 171.12284851]
[39.20605850 186.92712402]
[27.96993637 198.04132080]
[12.16656017 197.87155151]
[1.17179215 186.51853943]
[1.50863409 170.71784973]
[12.97724342 159.84371948]
[28.77349854 160.34759521]
[39.54873657 149.91236877]
[50.32397842 139.47712708]
[61.09922028 129.04188538]
[71.70581818 118.43528748]
[82.14105988 107.66004181]
[79.43347168 96.80058289]
[83.22353363 85.46775055]
[93.09016418 77.45837402]
[81.66847229 67.73494720]
[70.24678040 58.01152420]
[58.82509232 48.28809738]
[47.40340424 38.56467056]
[35.98171234 28.84124565]
[29.26093102 27.20182228]
[25.12348175 22.96509933]
[24.16573143 18.11028290]
[13.39049149 7.67504501]
[2.61525106 -2.76019311]
[-13.41409016 -6.22317457]
[-18.17143440 -21.91711426]
[-6.76283455 -33.69742966]
[9.07552147 -29.44554520]
[13.05048943 -13.53543377]
[23.82572937 -3.10019493]
[34.60097122 7.33504343]
[45.70513916 17.41955566]
[57.12683105 27.14298248]
[68.54851532 36.86640930]
[79.97020721 46.58983612]
[91.39189911 56.31325912]
[102.81358337 66.03668976]
[117.12335205 70.53453064]
[132.05403137 69.09418488]
[146.98472595 67.65383911]
[161.91540527 66.21349335]
[176.84609985 64.77314758]
[191.77677917 63.33280563]
[206.70747375 61.89245987]
[215.48355103 45.11488342]
[232.36917114 36.87722397]
[250.70576477 40.23462296]
[263.37652588 53.70745087]
[278.09991455 50.84006882]
[292.82330322 47.97269058]
[307.54669189 45.10531235]
[319.61334229 34.87266922]
[333.58496094 40.03436279]
[342.43017578 27.21252060]
[357.40264893 24.51432991]
[369.57180786 33.02592468]
[384.29519653 30.15854454]
[399.01855469 27.29116440]
[411.02944946 16.12557411]
[426.62295532 21.20249557]
[429.75778198 37.29922867]
[417.20913696 47.85683441]
[401.88595581 42.01455307]
[387.16256714 44.88193130]
[372.43917847 47.74930954]
[364.35348511 60.20553207]
[349.46273804 63.32320404]
[336.45233154 54.75774765]
[325.43881226 64.78529358]
[310.41406250 59.82869720]
[295.69067383 62.69607925]
[280.96728516 65.56345367]
[266.24392700 68.43083954]
[263.42498779 79.54846191]
[256.55703735 88.79909515]
[246.64140320 94.76763916]
[235.14923096 96.52240753]
[223.80325317 93.76036072]
[214.31950378 86.85853577]
[208.14781189 76.82315063]
[193.21713257 78.26348877]
[178.28643799 79.70383453]
[163.35575867 81.14418030]
[148.42506409 82.58452606]
[133.49438477 84.02487183]
[118.56369781 85.46521759]
[122.51701355 96.76643372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[6 19]
[7 18]
[8 17]
[9 16]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[32 41]
[33 40]
[34 39]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[53 91]
[54 90]
[58 83]
[59 82]
[60 81]
[61 80]
[63 78]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
