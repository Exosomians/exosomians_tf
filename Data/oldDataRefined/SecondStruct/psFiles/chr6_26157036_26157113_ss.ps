%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUUCUUUUUCAUCUUUCAAGGAAACCGGUUGACGAAUCUUCGGGUUGUGUUGGGUUUCCGAGAAAAGUCUCGGUGG\
) } def
/len { sequence length } bind def

/coor [
[93.29176331 203.84179688]
[85.97863770 217.19987488]
[73.86061096 226.42340088]
[59.03721237 229.91433716]
[44.07667923 227.06788635]
[31.57101631 218.37718201]
[23.68690300 205.34796143]
[21.79031181 190.23760986]
[26.20983696 175.66407776]
[36.17977142 164.15232849]
[49.97276306 157.69683838]
[65.19908905 157.41606140]
[71.00815582 143.58657837]
[76.81722260 129.75709534]
[82.62628937 115.92760468]
[80.16397858 108.73619843]
[80.29660034 101.73280334]
[82.62586212 95.75889587]
[86.50917053 91.41807556]
[91.16972351 89.01519775]
[95.81761932 88.54058075]
[99.76499176 89.69905090]
[102.14096069 74.88842010]
[104.51692963 60.07778931]
[106.89289856 45.26715851]
[109.26887512 30.45652771]
[111.64484406 15.64589787]
[114.02081299 0.83526754]
[108.56711578 -14.01625538]
[118.22270966 -25.35727692]
[109.03800201 -35.42931366]
[107.44284821 -48.76903915]
[113.80521393 -60.37844467]
[125.55413055 -66.04087067]
[128.51704407 -80.74533081]
[127.13138580 -90.05660248]
[131.90115356 -95.97023010]
[135.44631958 -110.54527283]
[138.99148560 -125.12030792]
[142.53665161 -139.69534302]
[137.40921021 -155.27230835]
[148.53581238 -167.31932068]
[164.47035217 -163.44348145]
[168.82075500 -147.63189697]
[157.11169434 -136.15017700]
[153.56651306 -121.57514191]
[150.02134705 -107.00010681]
[146.47618103 -92.42506409]
[143.22151184 -77.78241730]
[140.25859070 -63.07795715]
[150.14910889 -49.62949753]
[147.32678223 -32.83711243]
[133.03334045 -22.98130608]
[138.65698242 -9.18913841]
[128.83143616 3.21123791]
[126.45547485 18.02186775]
[124.07950592 32.83249664]
[121.70352936 47.64312744]
[119.32756042 62.45375824]
[116.95159149 77.26438904]
[114.57562256 92.07501984]
[120.10858154 106.01727295]
[131.99372864 115.16839600]
[143.87889099 124.31952667]
[155.76403809 133.47065735]
[172.08198547 135.10058594]
[178.58186340 150.15660095]
[168.57714844 163.15036011]
[152.35983276 160.71499634]
[146.61291504 145.35580444]
[134.72775269 136.20468140]
[122.84260559 127.05355072]
[110.95745087 117.90242004]
[96.45578003 121.73667145]
[90.64671326 135.56616211]
[84.83764648 149.39564514]
[79.02857971 163.22514343]
[89.48714447 174.29483032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 77]
[13 76]
[14 75]
[15 74]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[30 53]
[34 50]
[35 49]
[37 48]
[38 47]
[39 46]
[40 45]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
