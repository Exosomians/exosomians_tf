%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACUAAUGAUCAGUUUAGGCAGUCACUAGGGCUCAGGGUCUUUGGUUUCCGAGAAAAGUCUCGGUGG\
) } def
/len { sequence length } bind def

/coor [
[148.32196045 183.39604187]
[144.53614807 174.43908691]
[144.06790161 164.68154907]
[147.00535583 155.31809998]
[136.16342163 144.95216370]
[125.32150269 134.58622742]
[114.47957611 124.22028351]
[103.63765717 113.85434723]
[90.10125732 110.35327148]
[85.99640656 96.98757935]
[75.15447998 86.62163544]
[64.31256104 76.25569916]
[53.47063446 65.88976288]
[41.95596313 56.27662659]
[29.82070923 47.45984650]
[17.68545341 38.64306641]
[5.55019855 29.82628822]
[-6.77983236 21.28402138]
[-19.29843140 13.02056694]
[-31.81702995 4.75711250]
[-46.75249863 9.39023209]
[-61.15176010 3.29143882]
[-68.21592712 -10.65960407]
[-64.60950470 -25.87564087]
[-52.03535080 -35.17212296]
[-36.43058777 -34.15953827]
[-25.16330528 -23.31599617]
[-23.55357552 -7.76148653]
[-11.03497601 0.50196820]
[1.48362231 8.76542282]
[9.04597855 9.85542107]
[14.36697769 17.69103432]
[26.50223160 26.50781250]
[38.63748550 35.32459259]
[50.77274323 44.14136887]
[54.59924316 43.77780914]
[58.77851868 45.47703171]
[62.22279739 49.37213516]
[63.83657455 55.04783630]
[74.67849731 65.41378021]
[85.52042389 75.77971649]
[96.36234283 86.14565277]
[109.89874268 89.64672852]
[114.00359344 103.01242065]
[124.84552002 113.37836456]
[135.68743896 123.74430084]
[146.52935791 134.11024475]
[157.37129211 144.47618103]
[178.65513611 141.72387695]
[195.39852905 154.72753906]
[197.93672180 175.51188660]
[210.81346130 183.20536804]
[223.69018555 190.89886475]
[236.56692505 198.59234619]
[249.44364929 206.28584290]
[262.32037354 213.97933960]
[278.71685791 213.68350220]
[286.93829346 227.87292480]
[278.52719116 241.95075989]
[262.13616943 241.43492126]
[254.62689209 226.85606384]
[241.75016785 219.16256714]
[228.87342834 211.46908569]
[215.99670410 203.77558899]
[203.11996460 196.08210754]
[190.24324036 188.38861084]
[182.34214783 193.66531372]
[173.06298828 195.90534973]
[163.53608704 194.80421448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[10 42]
[11 41]
[12 40]
[13 39]
[14 35]
[15 34]
[16 33]
[17 32]
[18 30]
[19 29]
[20 28]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
