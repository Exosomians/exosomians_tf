%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUCAUGGACAGAGACACCGCGUUAGCCAAUCGCGCAAGCCGACAAUUGGCUUUCCAACCACCAAGCUCGGGUGGGUCCCUGCGAACAAGCUCGAAAAUUUCAUAAGUAUAUAACAGUUAGUGAUCUAUUUACCCCUUCUAAAA\
) } def
/len { sequence length } bind def

/coor [
[113.46331024 259.05252075]
[110.26940155 244.39289856]
[105.23963928 258.52447510]
[100.20988464 272.65606689]
[95.18012238 286.78762817]
[90.15036011 300.91921997]
[90.53551483 317.86880493]
[74.35495758 322.93099976]
[65.01136017 308.78414917]
[76.01878357 295.88946533]
[81.04854584 281.75787354]
[86.07830048 267.62631226]
[91.10806274 253.49472046]
[96.13782501 239.36314392]
[98.21483612 224.50764465]
[97.25378418 209.53845215]
[96.29273224 194.56927490]
[95.17177582 179.61122131]
[93.89105988 164.66600037]
[92.61033630 149.72076416]
[80.03901672 141.53775024]
[65.85449982 146.41621399]
[51.66997910 151.29469299]
[37.48546219 156.17315674]
[33.91916656 171.18266296]
[22.78842545 181.86489868]
[7.64501619 184.81120300]
[-6.67885208 179.08142090]
[-15.61248589 166.50390625]
[-16.30519485 151.09210205]
[-8.53593922 137.76385498]
[5.21614122 130.77217102]
[20.56280708 132.34803772]
[32.60699463 141.98864746]
[46.79151154 137.11016846]
[60.97602844 132.23170471]
[75.16054535 127.35323334]
[75.56106567 119.86392975]
[76.76263428 97.39604187]
[63.17932892 91.03256226]
[49.59602356 84.66909027]
[36.01271820 78.30561066]
[22.42941475 71.94213867]
[8.84610844 65.57866669]
[-4.73719645 59.21518707]
[-21.64542961 57.97101212]
[-25.13054085 41.37913513]
[-10.15185738 33.43713760]
[1.62627864 45.63188171]
[15.20958424 51.99535751]
[28.79288864 58.35883331]
[42.37619400 64.72230530]
[55.95949936 71.08578491]
[69.54280853 77.44925690]
[83.12611389 83.81273651]
[89.03948212 79.19948578]
[76.60990906 70.80271149]
[80.75478363 56.38674927]
[95.74601746 55.87401199]
[100.86621857 69.97298431]
[106.77958679 65.35973358]
[103.91220856 50.63634872]
[101.04482269 35.91296005]
[98.17744446 21.18957329]
[95.31006622 6.46618605]
[81.54368591 -0.95140839]
[75.81402588 -15.50149727]
[80.82646942 -30.31397247]
[94.21428680 -38.39483643]
[109.65615845 -35.92855453]
[119.86090851 -24.07962608]
[120.01016998 -8.44275570]
[110.03345490 3.59880638]
[112.90083313 18.32219315]
[115.76821136 33.04558182]
[118.63558960 47.76896667]
[121.50297546 62.49235535]
[128.81492615 64.16126251]
[132.15274048 49.53734589]
[135.49078369 34.91347885]
[150.11459351 38.25174332]
[146.77665710 52.87515640]
[143.43884277 67.49907684]
[150.75080872 69.16798401]
[159.72247314 57.14677811]
[157.20274353 41.54464722]
[166.52102661 28.77964211]
[182.14892578 26.42501831]
[194.81469727 35.87772751]
[197.00395203 51.52965164]
[187.41786194 64.09477234]
[171.74366760 66.11843872]
[162.77201843 78.13964081]
[176.40866089 71.89128113]
[191.09715271 68.85020447]
[206.09107971 68.42373657]
[220.92868042 70.62501526]
[235.15298462 75.38624573]
[248.32591248 82.56079102]
[260.04177856 91.92768860]
[269.93972778 103.19846344]
[277.71496582 116.02600098]
[283.12799072 130.01524353]
[286.01214600 144.73535156]
[286.27856445 159.73298645]
[283.91906738 174.54624939]
[279.00631714 188.71893311]
[271.69161987 201.81454468]
[262.20019531 213.42976379]
[250.82444763 223.20687866]
[237.91465759 230.84477234]
[223.86843872 236.10821533]
[209.11839294 238.83511353]
[194.11877441 238.94146729]
[179.33152771 236.42401123]
[165.21208191 231.36029053]
[152.19528198 223.90623474]
[140.68202209 214.29142761]
[131.02685547 202.81196594]
[123.52717590 189.82139587]
[118.41393280 175.71981812]
[115.84461975 160.94171143]
[107.55556488 148.44004822]
[108.83628082 163.38526917]
[110.11700439 178.33050537]
[113.99148560 186.68257141]
[111.26190948 193.60823059]
[112.22296143 208.57740784]
[113.18402100 223.54658508]
[120.27398682 210.32795715]
[130.88488770 199.72564697]
[144.10925293 192.64636230]
[158.81614685 189.69555664]
[173.74781799 191.12554932]
[187.62733459 196.81405640]
[199.26770020 206.27459717]
[207.67343140 218.69812012]
[212.12567139 233.02214050]
[212.24365234 248.02166748]
[208.01730347 262.41397095]
[199.80804443 274.96817017]
[188.31794739 284.61065674]
[174.52964783 290.51681519]
[159.62229919 292.18151855]
[144.87081909 289.46243286]
[131.53671265 282.59207153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[15 129]
[16 128]
[17 127]
[18 125]
[19 124]
[20 123]
[21 37]
[22 36]
[23 35]
[24 34]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
