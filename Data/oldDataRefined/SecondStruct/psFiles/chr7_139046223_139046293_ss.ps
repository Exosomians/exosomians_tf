%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGACCAUCUGUGUCCCGGAGAAACCCUAUAACAAGAAACAAGACUAAGACACGAGUGGUCCUUUGUUU\
) } def
/len { sequence length } bind def

/coor [
[123.94222260 348.62377930]
[134.13179016 336.76181030]
[131.52706909 321.98968506]
[128.92234802 307.21759033]
[126.31762695 292.44546509]
[123.71290588 277.67333984]
[121.10818481 262.90121460]
[118.50345612 248.12911987]
[115.89873505 233.35699463]
[113.29401398 218.58488464]
[103.46419525 207.39453125]
[108.68756866 192.46044922]
[106.08284760 177.68832397]
[103.47812653 162.91621399]
[100.87340546 148.14410400]
[98.26868439 133.37197876]
[95.66395569 118.59986877]
[83.85534668 110.20326233]
[81.33927155 95.93386841]
[89.56392670 84.00485992]
[86.95920563 69.23274231]
[71.39496613 66.60285950]
[57.66762924 58.86435699]
[47.39478302 46.94977951]
[41.77994919 32.28254700]
[41.47157288 16.60689926]
[46.48819733 1.78047347]
[56.21838760 -10.44583321]
[69.49520874 -18.63463020]
[66.24861145 -33.27907181]
[52.78642273 -41.55825806]
[49.20280838 -56.95089340]
[57.62386322 -70.32479858]
[73.05352783 -73.74547577]
[86.33765411 -65.18349457]
[89.59500885 -49.71852493]
[80.89305115 -36.52566528]
[84.13964844 -21.88122368]
[98.37818909 -20.42238808]
[111.47119904 -14.58649063]
[122.10687256 -4.94345045]
[129.21501160 7.55464268]
[132.07467651 21.66751862]
[130.38732910 35.98980331]
[124.30790710 49.09096909]
[114.43070984 59.65821838]
[101.73131561 66.62802124]
[104.33604431 81.40013123]
[116.14465332 89.79673767]
[118.66072845 104.06613159]
[110.43607330 115.99514008]
[113.04079437 130.76725769]
[115.64552307 145.53938293]
[118.25024414 160.31149292]
[120.85496521 175.08360291]
[123.45968628 189.85572815]
[133.47581482 202.10267639]
[128.06613159 215.98016357]
[130.67085266 230.75227356]
[133.27557373 245.52438354]
[135.88029480 260.29650879]
[138.48501587 275.06863403]
[141.08973694 289.84072876]
[143.69447327 304.61285400]
[146.29919434 319.38497925]
[148.90391541 334.15707397]
[162.53601074 341.81866455]
[168.00564575 356.46847534]
[162.73020935 371.18933105]
[149.20060730 379.03051758]
[133.80509949 376.28961182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[20 48]
[21 47]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
