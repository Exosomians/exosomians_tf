%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUUCAUGAUUGGUCCGGGCUGGGACGAAUCGAAGGCUCUAGUCUGCUCUAGCCCGCGCAAGUCCCACCAUACCGGCAUCUG\
) } def
/len { sequence length } bind def

/coor [
[74.87802124 326.15646362]
[59.64036942 327.59609985]
[45.48346329 321.77883911]
[35.66045761 310.04141235]
[32.42860794 295.08099365]
[36.53056335 280.33541870]
[47.02373123 269.19305420]
[61.49685669 264.21438599]
[63.70638275 249.37799072]
[65.91590881 234.54162598]
[63.73411942 227.28874207]
[68.49098969 219.20188904]
[71.24723816 204.45730591]
[74.00347900 189.71270752]
[76.75971985 174.96810913]
[79.51596069 160.22351074]
[70.74916077 150.59107971]
[69.18268585 137.46353149]
[75.62496948 125.69467163]
[87.88051605 119.76927185]
[91.17971802 105.13658905]
[89.72289276 96.99395752]
[94.88064575 90.02893066]
[98.71828461 75.52815247]
[102.55593109 61.02737808]
[106.39356995 46.52659988]
[110.23121643 32.02582550]
[114.06885529 17.52504921]
[104.51506042 7.40191031]
[101.29800415 -6.02864027]
[105.16692352 -19.17248344]
[114.98956299 -28.56762695]
[128.08071899 -31.79599762]
[132.45155334 -46.14506149]
[125.27385712 -59.96961975]
[129.91093445 -74.45935059]
[143.13476562 -81.21699524]
[147.50561523 -95.56606293]
[151.87644958 -109.91512299]
[156.24729919 -124.26419067]
[149.06961060 -138.08874512]
[153.70666504 -152.57847595]
[166.93051147 -159.33612061]
[171.30136108 -173.68518066]
[167.07087708 -189.52926636]
[178.86659241 -200.92195129]
[194.55409241 -196.14340210]
[197.99540710 -180.10940552]
[185.65042114 -169.31434631]
[181.27957153 -154.96527100]
[188.49047852 -141.98303223]
[184.26222229 -127.36878204]
[170.59637451 -119.89334869]
[166.22552490 -105.54428101]
[161.85467529 -91.19521332]
[157.48382568 -76.84614563]
[164.69473267 -63.86391068]
[160.46647644 -49.24965286]
[146.80062866 -41.77421570]
[142.42977905 -27.42514992]
[152.70706177 -14.76778126]
[153.50964355 1.68164730]
[144.33169556 15.55405140]
[128.56962585 21.36269188]
[124.73198700 35.86346817]
[120.89434814 50.36424255]
[117.05670166 64.86502075]
[113.21906281 79.36579895]
[109.38142395 93.86656952]
[105.81239319 108.43578339]
[102.51319885 123.06846619]
[112.12054443 137.54808044]
[108.47309875 154.19566345]
[94.26055908 162.97975159]
[91.50431824 177.72434998]
[88.74807739 192.46894836]
[85.99182892 207.21354675]
[83.23558807 221.95814514]
[80.75228119 236.75114441]
[78.54275513 251.58752441]
[76.33322906 266.42388916]
[88.72754669 275.40383911]
[95.51859283 289.12026978]
[95.14582825 304.42123413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 81]
[9 80]
[10 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[20 71]
[21 70]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[28 64]
[33 60]
[34 59]
[37 56]
[38 55]
[39 54]
[40 53]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
