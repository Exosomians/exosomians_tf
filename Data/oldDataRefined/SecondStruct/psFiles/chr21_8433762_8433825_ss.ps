%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGCAGAGAGGAGAGGGGCGGGCGGCCGCCACGCACACCCUUCCGCACCCCACGCCUGGGG\
) } def
/len { sequence length } bind def

/coor [
[148.41946411 231.74505615]
[141.44862366 218.46322632]
[134.47776794 205.18138123]
[127.50692749 191.89953613]
[114.74122620 184.22579956]
[115.17900848 168.41065979]
[108.20816040 155.12881470]
[105.56042480 154.62011719]
[102.96379089 152.96296692]
[100.87567902 150.17773438]
[99.73520660 146.45536804]
[99.90288544 142.14521790]
[101.60680389 137.72245789]
[98.01706696 123.15833282]
[94.42733002 108.59420013]
[89.42765045 101.86642456]
[91.03414154 93.23975372]
[88.15224457 78.51920319]
[85.27033997 63.79864883]
[82.38844299 49.07809830]
[78.44783020 34.60496521]
[73.46921539 20.45528603]
[68.49059296 6.30560875]
[63.17152023 -7.71963453]
[57.51509857 -21.61225510]
[51.85867691 -35.50487518]
[38.58398056 -45.13370895]
[40.55433655 -61.41405869]
[55.74280930 -67.59809113]
[68.52480316 -57.32420731]
[65.75129700 -41.16129684]
[71.40771484 -27.26867676]
[77.06414032 -13.37605762]
[82.70854187 -8.18331909]
[82.64027405 1.32699120]
[87.61888885 15.47666836]
[92.59750366 29.62634468]
[95.99577332 31.50240135]
[98.49617767 35.32028961]
[99.09472656 40.55270004]
[97.10899353 46.19619751]
[99.99089050 60.91674805]
[102.87279510 75.63729858]
[105.75469208 90.35784912]
[108.99145508 105.00447083]
[112.58119202 119.56859589]
[116.17092896 134.13272095]
[121.48999786 148.15795898]
[128.46084595 161.43980408]
[141.72514343 170.06355286]
[140.78877258 184.92869568]
[147.75961304 198.21052551]
[154.73046875 211.49237061]
[161.70130920 224.77421570]
[177.00668335 224.71043396]
[190.58320618 231.77700806]
[199.31111145 244.35009766]
[201.18475342 259.54049683]
[195.77362061 273.85754395]
[184.32112122 284.01132202]
[169.45898438 287.66851807]
[154.60240173 283.98880005]
[143.16529846 273.81768799]
[137.77586365 259.49243164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[6 49]
[7 48]
[13 47]
[14 46]
[15 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 37]
[22 36]
[23 35]
[24 33]
[25 32]
[26 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
