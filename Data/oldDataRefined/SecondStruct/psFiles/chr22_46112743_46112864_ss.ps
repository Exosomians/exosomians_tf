%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCCCACUCCAUCAUCCAACAUAUCAAACCCCGAGACGGGACGAUACCCUAUUGAUAUGUUAGAUGACAGAAAGGACUUCACCGACAUUAUAGACGCCACCUGUCUCGCAGACCUUGG\
) } def
/len { sequence length } bind def

/coor [
[166.60203552 187.63633728]
[153.17729187 187.76431274]
[140.35424805 183.71148682]
[129.40428162 175.86474609]
[121.41770172 164.98789978]
[117.19516754 152.14732361]
[117.16744232 138.60740662]
[121.35150146 125.70603180]
[109.42211151 116.61264801]
[95.04900360 118.44570160]
[83.52558899 109.66178894]
[81.48451233 95.31674194]
[69.55511475 86.22336578]
[54.09646606 88.13854218]
[42.12790680 78.74662018]
[40.39734268 63.99735641]
[28.46794891 54.90397644]
[16.53855705 45.81059265]
[4.60916328 36.71721268]
[-7.32022953 27.62383270]
[-22.98595619 25.41123581]
[-28.41731644 11.54222107]
[-40.34671021 2.44884014]
[-52.27610397 -6.64454079]
[-64.20549774 -15.73792171]
[-76.13488770 -24.83130264]
[-88.06428528 -33.92468262]
[-99.99367523 -43.01806641]
[-111.92306519 -52.11144638]
[-123.85246277 -61.20482635]
[-135.78186035 -70.29821014]
[-159.02809143 -64.11079407]
[-179.39959717 -76.44456482]
[-184.58610535 -99.43990326]
[-198.27366638 -105.57593536]
[-211.96122742 -111.71195984]
[-225.64877319 -117.84799194]
[-242.57540894 -118.80997467]
[-246.33677673 -135.34141541]
[-231.49264526 -143.53215027]
[-219.51274109 -131.53555298]
[-205.82519531 -125.39952087]
[-192.13763428 -119.26348877]
[-178.45008850 -113.12745667]
[-173.39387512 -118.20240784]
[-167.26261902 -121.94299316]
[-160.40161133 -124.12831879]
[-153.19970703 -124.62537384]
[-146.06726074 -123.39708710]
[-139.41273499 -120.50495148]
[-133.61930847 -116.10597229]
[-129.02285767 -110.44422150]
[-125.89244080 -103.83725739]
[-124.41455078 -96.65834808]
[-124.68207550 -89.31535339]
[-126.68847656 -82.22760010]
[-114.75907898 -73.13422394]
[-102.82968903 -64.04084015]
[-90.90029144 -54.94746017]
[-78.97090149 -45.85407639]
[-67.04151154 -36.76069641]
[-55.11211395 -27.66731453]
[-43.18272018 -18.57393456]
[-31.25332832 -9.48055267]
[-19.32393646 -0.38717175]
[-4.51147938 1.17500412]
[1.77315140 15.69443893]
[13.70254421 24.78782082]
[25.63193703 33.88120270]
[37.56132889 42.97458267]
[49.49072266 52.06796265]
[64.17131805 49.82838440]
[76.39895630 58.88042450]
[78.64849854 74.29396820]
[90.57788849 83.38735199]
[104.95099640 81.55429840]
[116.47441101 90.33821106]
[118.51548767 104.68325806]
[130.44488525 113.77663422]
[144.79502869 105.09996796]
[161.33355713 102.55683899]
[177.55671692 106.50413513]
[191.01922607 116.31826782]
[199.70281982 130.49354553]
[202.31883240 146.87307739]
[198.49932861 162.97700500]
[210.87747192 171.44940186]
[223.25561523 179.92179871]
[235.63375854 188.39419556]
[249.52215576 178.99612427]
[265.90927124 175.61184692]
[282.31280518 178.72561646]
[296.25888062 187.83955383]
[305.65493774 201.55294800]
[309.10388184 217.77754211]
[306.11163330 234.05549622]
[318.90625000 241.88479614]
[331.70083618 249.71411133]
[344.49545288 257.54342651]
[357.29006958 265.37274170]
[373.16122437 263.03063965]
[384.78906250 274.08383179]
[383.25369263 290.05322266]
[369.73291016 298.68850708]
[354.59869385 293.36538696]
[349.46075439 278.16732788]
[336.66613770 270.33801270]
[323.87152100 262.50872803]
[311.07693481 254.67939758]
[298.28231812 246.85009766]
[287.97988892 255.38653564]
[275.51507568 260.31134033]
[262.11437988 261.12463379]
[249.10112000 257.73184204]
[237.76478577 250.45445251]
[229.23324585 239.99960327]
[224.36056519 227.39137268]
[223.64152527 213.87052917]
[227.16136169 200.77233887]
[214.78321838 192.29994202]
[202.40507507 183.82754517]
[190.02693176 175.35514832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 79]
[9 78]
[12 75]
[13 74]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[34 44]
[35 43]
[36 42]
[37 41]
[86 122]
[87 121]
[88 120]
[89 119]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
