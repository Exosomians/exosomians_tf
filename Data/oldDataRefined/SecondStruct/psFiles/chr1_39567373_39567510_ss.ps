%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUACACCGUCUCGACAUCUCUGUCCGGGGUUCUGUUUACCUUUUGUUGGACAGACCUAAAGGAGACGAGUAAGACAUCGUGGUAGACAGGGGUGUGGCCGUGCUCCGUCGUUCCUUACCCUUUCUAAGUCCACGAG\
) } def
/len { sequence length } bind def

/coor [
[81.42214966 104.42940521]
[66.63713074 101.89891052]
[51.85212326 99.36840820]
[37.06710815 96.83791351]
[22.28209686 94.30741882]
[7.49708557 91.77692413]
[-3.51550174 98.59661865]
[-15.82174110 96.12882996]
[-22.88520432 86.24384308]
[-37.60925293 83.37985992]
[-52.33330154 80.51587677]
[-67.05735016 77.65189362]
[-81.78139496 74.78791046]
[-96.50544739 71.92392731]
[-105.26547241 85.35904694]
[-118.46897888 94.39658356]
[-134.08856201 97.68447113]
[-149.73942566 94.75076294]
[-163.04350281 86.07115936]
[-171.99076843 72.99211121]
[-175.24288940 57.52207184]
[-190.02789307 54.99157333]
[-204.81291199 52.46107483]
[-219.59791565 49.93058014]
[-234.38293457 47.40008163]
[-249.16793823 44.86958694]
[-263.95297241 42.33908844]
[-278.73797607 39.80859375]
[-293.64230347 38.11709595]
[-308.61834717 37.26999283]
[-323.59442139 36.42289352]
[-338.57046509 35.57579041]
[-349.15005493 47.09128571]
[-364.66308594 49.06097412]
[-377.78482056 40.55483246]
[-382.31954956 25.58919525]
[-376.12609863 11.23038292]
[-362.12887573 4.25818634]
[-346.93692017 7.96466398]
[-337.72338867 20.59972954]
[-322.74731445 21.44683075]
[-307.77124023 22.29393196]
[-292.79519653 23.14103317]
[-300.26898193 10.13555050]
[-294.97662354 -3.89979434]
[-280.77645874 -8.73260593]
[-268.02108765 -0.83954847]
[-266.00970459 14.02498531]
[-276.20745850 25.02358055]
[-261.42245483 27.55407715]
[-246.63745117 30.08457375]
[-231.85243225 32.61507034]
[-217.06742859 35.14556885]
[-202.28240967 37.67606354]
[-187.49740601 40.20656204]
[-172.71238708 42.73705673]
[-165.66218567 30.55349541]
[-154.84489441 21.49952698]
[-141.55393982 16.68448448]
[-127.38776398 16.70923805]
[-114.05749512 21.59129715]
[-103.18032837 30.76020622]
[-96.08331299 43.12414169]
[-93.64146423 57.19987869]
[-78.91741180 60.06386185]
[-64.19336700 62.92784500]
[-49.46931839 65.79183197]
[-34.74526978 68.65581512]
[-20.02122116 71.51979828]
[-3.80776262 64.89945984]
[10.02758217 76.99190521]
[24.81259537 79.52240753]
[39.59760666 82.05290222]
[54.38261795 84.58339691]
[69.16763306 87.11389923]
[83.95264435 89.64439392]
[95.84019470 81.35992432]
[110.12204742 83.80430603]
[118.57785034 95.57059479]
[133.36286926 98.10108948]
[148.14787292 100.63159180]
[162.93289185 103.16208649]
[177.71789551 105.69258118]
[192.50291443 108.22307587]
[207.36520386 110.25097656]
[222.28768921 111.77394104]
[237.21017456 113.29690552]
[252.13265991 114.81987000]
[261.07357788 112.56539917]
[267.37384033 116.54959869]
[282.25808716 118.40941620]
[297.14233398 120.26922607]
[312.02661133 122.12904358]
[326.91085815 123.98886108]
[341.79510498 125.84867859]
[356.67938232 127.70849609]
[371.33239746 121.74194336]
[383.00213623 130.99757385]
[397.88638306 132.85739136]
[414.63088989 125.28999329]
[428.23220825 136.32217407]
[443.15469360 137.84513855]
[453.40213013 126.19309998]
[468.54870605 122.82253265]
[482.77026367 129.02949524]
[490.59835815 142.42729187]
[489.02288818 157.86416626]
[478.64968872 169.40435791]
[463.46743774 172.61042786]
[449.31402588 166.24954224]
[441.63174438 152.76762390]
[426.70925903 151.24465942]
[417.08572388 158.66038513]
[404.59216309 157.45841980]
[396.02655029 147.74163818]
[381.14230347 145.88182068]
[367.55392456 151.98139954]
[354.81954956 142.59274292]
[339.93530273 140.73292542]
[325.05105591 138.87312317]
[310.16677856 137.01330566]
[295.28253174 135.15348816]
[280.39828491 133.29367065]
[265.51400757 131.43385315]
[250.60969543 129.74235535]
[235.68721008 128.21939087]
[220.76472473 126.69642639]
[205.84223938 125.17346191]
[202.84625244 127.17996979]
[198.70535278 127.78643799]
[194.11143494 126.46005249]
[189.97241211 123.00809479]
[175.18740845 120.47759247]
[160.40238953 117.94709778]
[145.61738586 115.41660309]
[130.83236694 112.88610077]
[116.04735565 110.35560608]
[104.15980530 118.64007568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 43]
[30 42]
[31 41]
[32 40]
[79 137]
[80 136]
[81 135]
[82 134]
[83 133]
[84 132]
[85 128]
[86 127]
[87 126]
[88 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[98 116]
[99 115]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
