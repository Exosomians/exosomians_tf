%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUUUAUAUACGCCGGUAUAUCGUCUCCUACCAAAGCUAGGUAGCUGGAGACCCAAUACCCGGGUCGUGCGAAGGCGACGCGGUGAGACGACAGAGCUGUCAGGCGAGGCGGUGAGACGA\
) } def
/len { sequence length } bind def

/coor [
[94.65152740 199.08265686]
[94.22135925 214.07649231]
[85.21785736 226.07386780]
[70.94153595 230.67675781]
[56.62583923 226.19784546]
[47.51862717 214.27900696]
[46.95812607 199.29061890]
[36.76902771 210.29888916]
[26.57992554 221.30717468]
[16.39082527 232.31546021]
[6.20172596 243.32374573]
[-3.98737407 254.33201599]
[-7.08727741 270.43551636]
[-22.66971397 275.54626465]
[-34.70480728 264.40676880]
[-30.81188774 248.47636414]
[-14.99565411 244.14291382]
[-4.80655432 233.13464355]
[5.38254547 222.12635803]
[15.57164574 211.11807251]
[25.76074600 200.10980225]
[35.94984436 189.10151672]
[44.95306015 177.10392761]
[52.67495346 164.24420166]
[60.39684296 151.38449097]
[68.11873627 138.52476501]
[75.84062958 125.66504669]
[83.56252289 112.80532837]
[78.45238495 98.70261383]
[64.28504944 93.77448273]
[50.11771011 88.84634399]
[35.95037460 83.91820526]
[21.78303528 78.99007416]
[8.44732475 87.15663910]
[-7.01005077 84.78945160]
[-17.29059029 73.00622559]
[-17.54013824 57.37063217]
[-7.64086628 45.26532745]
[7.73309326 42.40606308]
[21.32262611 50.14289856]
[26.71117020 64.82273102]
[40.87850952 69.75086975]
[55.04584885 74.67900848]
[69.21318817 79.60713959]
[83.38052368 84.53527832]
[97.34698486 79.06372070]
[104.39663696 65.82353973]
[111.44628906 52.58335876]
[107.06221008 37.63619995]
[114.40016937 24.30919838]
[128.67701721 20.22176170]
[128.33322144 4.40429020]
[141.14430237 -3.19345164]
[140.80050659 -19.01092339]
[153.61158752 -26.60866356]
[160.66123962 -39.84884644]
[160.31530762 -44.45273209]
[161.41282654 -48.48407364]
[163.57508850 -51.54349899]
[166.32951355 -53.40518188]
[169.17814636 -54.03256989]
[177.55180359 -66.47772217]
[185.92546082 -78.92288208]
[187.20986938 -94.69186401]
[200.73423767 -100.93209076]
[209.10789490 -113.37724304]
[217.48155212 -125.82240295]
[225.85520935 -138.26756287]
[234.22886658 -150.71270752]
[230.94992065 -166.17311096]
[239.63343811 -179.37811279]
[255.12763977 -182.49342346]
[268.24011230 -173.67077637]
[271.19140625 -158.14450073]
[262.23062134 -145.12605286]
[246.67402649 -142.33905029]
[238.30036926 -129.89390564]
[229.92671204 -117.44874573]
[221.55305481 -105.00359344]
[213.17939758 -92.55843353]
[212.49394226 -77.67961121]
[198.37062073 -70.54922485]
[189.99696350 -58.10406876]
[181.62330627 -45.65891647]
[173.90141296 -32.79919434]
[166.85176086 -19.55901337]
[167.69979858 -4.68856907]
[154.38447571 3.85619950]
[155.23251343 18.72664452]
[141.91720581 27.27141190]
[146.49591064 41.39837265]
[139.53517151 54.92622375]
[124.68647003 59.63301086]
[117.63681793 72.87319183]
[110.58716583 86.11337280]
[118.96843719 94.11389160]
[121.14584351 106.95188141]
[132.41281128 116.85416412]
[143.67979431 126.75644684]
[154.94677734 136.65873718]
[166.21376038 146.56100464]
[177.48072815 156.46328735]
[193.23417664 155.19657898]
[205.21492004 165.50372314]
[206.31501770 181.26968384]
[195.88177490 193.14077759]
[180.10507202 194.07412720]
[168.34494019 183.51596069]
[167.57844543 167.73027039]
[156.31147766 157.82798767]
[145.04449463 147.92570496]
[133.77751160 138.02342224]
[122.51053619 128.12113953]
[111.24356079 118.21886444]
[96.42224121 120.52722168]
[88.70034790 133.38694763]
[80.97845459 146.24665833]
[73.25656128 159.10638428]
[65.53466797 171.96609497]
[57.81277847 184.82582092]
[72.36171722 181.17501831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[28 115]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[46 95]
[47 94]
[48 93]
[51 90]
[53 88]
[55 86]
[56 85]
[61 84]
[62 83]
[63 82]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
