%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGACAUCAGCACCGGCUCACCAAUUCCGCUACCUGAUCUUUAGGUAACCCCAGAGGGGCGCGUCCAAGCUUAGGACGGCUGAUGCCGUCACCCAAAAACGUAGAAGUUCGUCCAAAGUAGGCUGGCUA\
) } def
/len { sequence length } bind def

/coor [
[81.31173706 364.09555054]
[72.11663818 376.12588501]
[59.51213455 384.51666260]
[44.86545944 388.35769653]
[29.76538086 387.23239136]
[15.84984112 381.26275635]
[4.62829542 371.09634399]
[-2.68202877 357.83596802]
[-5.28816128 342.91998291]
[-2.90740848 327.96636963]
[4.20198345 314.59716797]
[15.26884079 304.26260376]
[29.09271240 298.08364868]
[44.17409134 296.73059082]
[47.73695374 282.15988159]
[51.29981613 267.58914185]
[54.86267853 253.01843262]
[58.42553711 238.44770813]
[61.98839951 223.87696838]
[57.49556351 209.67614746]
[68.28930664 198.10870361]
[71.85217285 183.53797913]
[59.61904907 178.35989380]
[48.30289841 171.40240479]
[38.16069031 162.82351685]
[29.42273140 152.81802368]
[22.28744507 141.61312866]
[16.91685867 129.46330261]
[13.43292713 116.64440155]
[11.91476440 103.44754791]
[12.39684582 90.17240143]
[14.86822414 77.12042236]
[0.76601189 72.00890350]
[-13.33619976 66.89739227]
[-27.43841171 61.78586960]
[-41.54062271 56.67435074]
[-55.64283752 51.56283569]
[-69.74504852 46.45131683]
[-86.69656372 46.73830032]
[-91.66497803 30.52869797]
[-77.46424866 21.26718521]
[-64.63352966 32.34910583]
[-50.53131866 37.46062088]
[-36.42910767 42.57213974]
[-22.32689476 47.68365860]
[-8.22468185 52.79517746]
[5.87753010 57.90669632]
[19.97974205 63.01821136]
[33.00251389 42.70923996]
[51.04346085 26.69139481]
[43.80455017 13.55373287]
[36.56563950 0.41607025]
[29.32672882 -12.72159195]
[16.38720703 -23.67627525]
[23.33176041 -39.14267349]
[40.11617279 -36.75104141]
[42.46438980 -19.96050262]
[49.70330048 -6.82284069]
[56.94221115 6.31482172]
[64.18112183 19.45248413]
[80.08986664 14.12520313]
[96.71976471 11.90837574]
[97.43894196 -3.07437444]
[86.62808990 -14.60264683]
[87.21887970 -30.39588928]
[98.86080933 -41.08425140]
[114.64692688 -40.32651901]
[125.21160126 -28.57223701]
[124.28701019 -12.79501724]
[112.42169189 -2.35520172]
[111.70251465 12.62754822]
[122.84526062 14.85900974]
[133.60835266 18.50538254]
[143.81292725 23.50606918]
[153.28939819 29.77796555]
[161.88027954 37.21684265]
[173.28053284 27.46828461]
[184.68077087 17.71972847]
[196.08102417 7.97117090]
[207.48127747 -1.77738667]
[218.88151550 -11.52594376]
[223.83326721 -27.15963364]
[239.90434265 -30.42341805]
[250.56221008 -17.95979691]
[244.84297180 -2.59027362]
[228.63008118 -0.12569723]
[217.22982788 9.62285995]
[205.82957458 19.37141800]
[194.42933655 29.11997414]
[183.02908325 38.86853409]
[171.62884521 48.61708832]
[176.56042480 56.30338287]
[180.67034912 64.45864105]
[183.91448975 72.99533844]
[186.25804138 81.82186127]
[187.67584229 90.84347534]
[188.15266418 99.96335602]
[187.68341064 109.08364105]
[186.27311707 118.10643005]
[183.93692017 126.93489075]
[197.77783203 132.71665955]
[211.61875916 138.49842834]
[224.80297852 130.31575012]
[240.27639771 131.47888184]
[252.08917236 141.54057312]
[255.69906616 156.63191223]
[249.71800232 170.94995117]
[236.44580078 178.98912048]
[220.98590088 177.65820312]
[209.28295898 167.46896362]
[205.83699036 152.33935547]
[191.99606323 146.55758667]
[178.15515137 140.77581787]
[168.08244324 155.99710083]
[155.09095764 168.81773376]
[139.73767090 178.68806458]
[122.68078613 185.18495178]
[104.65155029 188.02986145]
[86.42289734 187.10084534]
[82.86003113 201.67156982]
[87.09803009 216.91459656]
[76.55912781 227.43983459]
[72.99626160 242.01055908]
[69.43340302 256.58129883]
[65.87053680 271.15200806]
[62.30767822 285.72274780]
[58.74481583 300.29345703]
[71.50010681 308.45318604]
[80.91286469 320.31399536]
[85.96207428 334.58929443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 127]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[21 120]
[22 119]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[50 60]
[51 59]
[52 58]
[53 57]
[62 71]
[63 70]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
