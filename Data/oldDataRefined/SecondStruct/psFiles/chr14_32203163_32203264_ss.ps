%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUAUACCUUGCGAAGUGCUUAAACGCACAGUAGGAACGCGUCCCCGGUACGAUUAGAAGAGACAUAGCAAGGUUAAAAUCAUAUACACGACGGCUUCGC\
) } def
/len { sequence length } bind def

/coor [
[140.79901123 171.42674255]
[132.20578003 159.13218689]
[123.61254883 146.83761597]
[115.01931763 134.54304504]
[106.42608643 122.24848175]
[97.83285522 109.95391846]
[90.88241577 105.58457947]
[89.17176819 97.15080261]
[80.95746613 84.59989166]
[72.74317169 72.04898834]
[64.52886963 59.49807739]
[56.31457138 46.94717026]
[48.10027313 34.39626312]
[39.88597107 21.84535599]
[15.54784298 24.15748596]
[-5.81318951 12.47246075]
[-16.90231133 -9.09204006]
[-14.00403595 -33.06658554]
[-26.42821693 -41.47132874]
[-38.85239792 -49.87607574]
[-51.27658081 -58.28081894]
[-63.70076370 -66.68556213]
[-79.43412018 -60.70267868]
[-95.49137115 -65.17111969]
[-105.66884613 -78.16130829]
[-106.15531158 -94.49125671]
[-118.83002472 -102.51319885]
[-131.50474548 -110.53514862]
[-144.17945862 -118.55709076]
[-157.40542603 -110.85433960]
[-172.69659424 -110.19188690]
[-186.53915405 -116.72196198]
[-195.75219727 -128.94401550]
[-198.21864319 -144.04948425]
[-193.37170410 -158.56726074]
[-182.32516479 -169.16125488]
[-167.61746216 -173.39704895]
[-152.62831116 -170.30128479]
[-140.80209351 -160.58535767]
[-134.85639954 -146.48190308]
[-136.15751648 -131.23181152]
[-123.48279572 -123.20986176]
[-110.80808258 -115.18791962]
[-98.13336945 -107.16596985]
[-86.14453888 -113.25097656]
[-72.60824585 -112.56863403]
[-61.10894012 -105.19136810]
[-54.74540329 -92.97872162]
[-55.29601669 -79.10974121]
[-42.87183762 -70.70500183]
[-30.44765472 -62.30025482]
[-18.02347374 -53.89551163]
[-5.59929228 -45.49076843]
[0.24139856 -50.45345688]
[6.90826368 -54.24938202]
[14.17093086 -56.74419403]
[21.77784920 -57.84856033]
[29.46499825 -57.52135849]
[36.96505737 -55.77119827]
[44.01669693 -52.65622330]
[50.37368774 -48.28218460]
[55.81348801 -42.79884338]
[60.14505768 -36.39485550]
[63.21553421 -29.29127121]
[64.91565704 -21.73391914]
[65.18363190 -13.98488140]
[64.00737762 -6.31341839]
[61.42506027 1.01339114]
[57.52381897 7.73994970]
[52.43688202 13.63105583]
[60.65118027 26.18196487]
[68.86547852 38.73287201]
[77.07978058 51.28377914]
[85.29407501 63.83468628]
[93.50837708 76.38559723]
[101.72267151 88.93650055]
[110.12741852 101.36068726]
[118.72064972 113.65525055]
[127.31388092 125.94981384]
[135.90711975 138.24438477]
[144.50035095 150.53895569]
[153.09358215 162.83351135]
[161.76385498 161.27491760]
[170.46299744 162.42645264]
[178.36721802 166.15803528]
[184.73446655 172.09626770]
[188.97396851 179.66172791]
[190.70114136 188.12541199]
[189.77227783 196.67901611]
[186.29637146 204.51211548]
[180.62271118 210.88890076]
[186.83500671 224.54200745]
[193.04731750 238.19511414]
[207.50625610 245.14628601]
[210.94599915 260.81625366]
[200.72789001 273.18432617]
[184.69036865 272.76281738]
[175.13606262 259.87506104]
[179.39421082 244.40740967]
[173.18191528 230.75430298]
[166.96960449 217.10119629]
[145.76148987 211.98118591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[26 44]
[27 43]
[28 42]
[29 41]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
