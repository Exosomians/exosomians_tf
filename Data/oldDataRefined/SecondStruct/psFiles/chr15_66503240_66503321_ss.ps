%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUCGUAGUCUUGUAGGCUCUUUUAGUACACCAAGUCUUUGUGCCUGGUUACUUCACCUUAAAGUAGUGAUGACAUUUCGU\
) } def
/len { sequence length } bind def

/coor [
[141.61714172 362.07202148]
[152.32858276 350.84506226]
[149.50671387 336.11288452]
[146.68484497 321.38070679]
[143.86297607 306.64852905]
[141.04109192 291.91635132]
[138.21922302 277.18417358]
[122.04426575 270.61734009]
[112.80714417 255.62307739]
[114.24225616 237.91601562]
[125.97506714 224.37217712]
[122.04709625 209.89561462]
[118.11913300 195.41903687]
[105.10913849 188.25834656]
[100.91939545 173.63299561]
[108.51840973 160.03546143]
[104.59043884 145.55889893]
[100.66247559 131.08232117]
[89.94325256 129.41787720]
[80.44838715 124.17197418]
[73.33382416 115.98326874]
[69.46571350 105.84868622]
[69.31497955 95.00205994]
[72.89997101 84.76390076]
[79.78424835 76.38066101]
[89.12967682 70.87293243]
[87.43006134 55.96953201]
[85.73044586 41.06613541]
[84.03083038 26.16273499]
[79.85818481 17.74831390]
[82.55991364 10.66465759]
[81.42547607 -4.29238319]
[80.29104614 -19.24942398]
[79.15661621 -34.20646286]
[70.39778900 -47.38195038]
[77.15038300 -60.65793610]
[76.01594543 -75.61497498]
[63.86565399 -85.72170258]
[62.50384521 -101.46720886]
[72.73846436 -113.50997162]
[88.49748993 -114.70523071]
[100.43137360 -104.34385681]
[101.45995331 -88.57307434]
[90.97299194 -76.74940491]
[92.10742188 -61.79236603]
[100.78511047 -49.68670654]
[94.11365509 -35.34089661]
[95.24808502 -20.38385582]
[96.38252258 -5.42681456]
[97.51695251 9.53022575]
[98.93422699 24.46311951]
[100.63384247 39.36651993]
[102.33345795 54.26992035]
[104.03307343 69.17331696]
[121.32371521 77.37591553]
[130.53428650 94.15131378]
[128.17469788 113.14292145]
[115.13904572 127.15435791]
[119.06700897 141.63093567]
[122.99497986 156.10749817]
[136.42472839 163.99923706]
[140.20202637 178.73649597]
[132.59570312 191.49107361]
[136.52366638 205.96765137]
[140.45162964 220.44421387]
[152.88986206 223.40394592]
[162.76791382 231.40571594]
[168.18258667 242.82637024]
[168.12590027 255.39234924]
[162.67228699 266.63208008]
[152.95140076 274.36230469]
[155.77326965 289.09448242]
[158.59515381 303.82666016]
[161.41702271 318.55883789]
[164.23889160 333.29101562]
[167.06076050 348.02319336]
[181.16275024 354.49725342]
[188.73675537 368.04031372]
[186.87043762 383.44473267]
[176.28141785 394.78723145]
[161.04139709 397.70639038]
[147.01048279 391.07971191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[11 65]
[12 64]
[13 63]
[16 60]
[17 59]
[18 58]
[26 54]
[27 53]
[28 52]
[29 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
