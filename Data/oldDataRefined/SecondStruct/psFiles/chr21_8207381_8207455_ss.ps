%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUGGGUGGGAGCCACUCUUUUCGGAAGAGAUCGCUAGACUCUCCGCACGGAACCCCCAUGGCCUAGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[102.05971527 157.28150940]
[90.87080383 156.58685303]
[80.03110504 153.72761536]
[69.95526123 148.81318665]
[61.02869415 142.03155518]
[53.59286499 133.64212036]
[40.40075684 140.78132629]
[27.20865059 147.92053223]
[14.01654530 155.05975342]
[0.82443881 162.19895935]
[-12.36766720 169.33816528]
[-23.42002869 182.19435120]
[-38.83339310 175.13287354]
[-36.31472015 158.36706543]
[-19.50687790 156.14605713]
[-6.31477213 149.00685120]
[6.87733412 141.86764526]
[20.06944084 134.72842407]
[33.26154709 127.58921814]
[46.45365143 120.45000458]
[42.70513916 101.64717102]
[45.36722946 82.66004181]
[54.14205933 65.61303711]
[68.04783630 52.41351700]
[85.52867126 44.53834915]
[83.67327881 29.65354156]
[81.81789398 14.76873207]
[79.96250153 -0.11607677]
[75.68788910 -8.52329254]
[78.35117340 -15.65275097]
[77.11248016 -30.60151863]
[75.87379456 -45.55028534]
[71.95025635 -54.12696838]
[74.90589142 -61.14027405]
[74.28601837 -76.12746429]
[65.05431366 -89.68134308]
[72.41922760 -104.33364868]
[88.80436707 -105.01134491]
[97.35410309 -91.01727295]
[89.27320862 -76.74733734]
[89.89308167 -61.76015091]
[90.82256317 -46.78897476]
[92.06124878 -31.84020805]
[93.29994202 -16.89144135]
[94.84731293 -1.97146630]
[96.70269775 12.91334248]
[98.55809021 27.79815102]
[100.41348267 42.68296051]
[114.94392395 44.66381836]
[128.49617004 50.26688766]
[140.18310547 59.12540436]
[149.23971558 70.65950012]
[155.07318115 84.11418152]
[157.30165100 98.60871124]
[155.77923584 113.19432068]
[150.60562134 126.91625214]
[162.81335449 135.63240051]
[175.02108765 144.34855652]
[187.22882080 153.06471252]
[199.43655396 161.78085327]
[214.11079407 156.73643494]
[228.93765259 161.31289673]
[238.21588135 173.75050354]
[238.37783813 189.26672363]
[229.36122131 201.89527893]
[214.63311768 206.78022766]
[199.85678101 202.04318237]
[190.71401978 189.50566101]
[190.72039795 173.98858643]
[178.51266479 165.27244568]
[166.30493164 156.55628967]
[154.09719849 147.84013367]
[141.88948059 139.12397766]
[133.47303772 146.52923584]
[123.77618408 152.15464783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[25 48]
[26 47]
[27 46]
[28 45]
[30 44]
[31 43]
[32 42]
[34 41]
[35 40]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
