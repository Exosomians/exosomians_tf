%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGGUAGGUUCAUGAUUGGUCCGGGCUGGGACGAAUCGAAGGCUCUAGUCUGCUCUAGCCCGCACAAGUCCCACCAUACCGGCAUCUG\
) } def
/len { sequence length } bind def

/coor [
[94.73567963 273.70138550]
[98.09508514 258.55233765]
[109.73957062 248.29632568]
[98.05956268 239.12501526]
[96.29135132 224.01448059]
[105.99026489 211.82560730]
[104.45630646 196.90425110]
[102.92234039 181.98289490]
[101.38838196 167.06152344]
[99.59988403 152.16853333]
[97.55738831 137.30824280]
[95.51488495 122.44795227]
[85.15388489 117.42469025]
[78.54907990 107.99281311]
[77.37155914 96.53868103]
[81.91924286 85.96029663]
[91.04152679 78.93408966]
[90.01789093 63.96905518]
[88.99425507 49.00402451]
[87.97061920 34.03899384]
[79.30960083 20.79900360]
[86.16032410 7.57339048]
[85.13668823 -7.39164114]
[76.47566223 -20.63162994]
[83.32638550 -33.85724258]
[82.30274963 -48.82227707]
[81.27911377 -63.78730774]
[80.25547791 -78.75234222]
[79.23184204 -93.71736908]
[78.20820618 -108.68240356]
[77.18457031 -123.64743042]
[76.16093445 -138.61245728]
[75.13729858 -153.57749939]
[67.14506531 -156.41110229]
[60.30053329 -161.37031555]
[55.15182114 -168.03887939]
[52.10581970 -175.86448669]
[51.39608002 -184.20445251]
[53.06497192 -192.37855530]
[56.96147537 -199.72444153]
[62.75471878 -205.65136719]
[69.96202850 -209.68763733]
[77.98911285 -211.51815796]
[80.53777313 -226.30004883]
[83.08642578 -241.08193970]
[85.63508606 -255.86383057]
[79.46315002 -271.05722046]
[89.74721527 -283.83102417]
[105.90791321 -281.04464722]
[111.32050323 -265.56448364]
[100.41697693 -253.31518555]
[97.86831665 -238.53327942]
[95.31966400 -223.75138855]
[92.77101135 -208.96949768]
[108.09797668 -192.59724426]
[107.13349152 -169.94311523]
[90.10233307 -154.60113525]
[91.12596893 -139.63610840]
[92.14960480 -124.67106628]
[93.17324066 -109.70603943]
[94.19687653 -94.74100494]
[95.22051239 -79.77597809]
[96.24414825 -64.81094360]
[97.26778412 -49.84591293]
[98.29141998 -34.88087845]
[106.87921906 -22.71129036]
[100.10171509 -8.41527748]
[101.12535095 6.54975414]
[109.71315765 18.71934319]
[102.93565369 33.01535797]
[103.95928955 47.98038864]
[104.98292542 62.94541931]
[106.00656128 77.91045380]
[120.05192566 88.95703888]
[121.87928009 106.73230743]
[110.37517548 120.40545654]
[112.41767883 135.26574707]
[114.46017456 150.12603760]
[118.80999756 158.40315247]
[116.30973816 165.52757263]
[117.84370422 180.44892883]
[119.37766266 195.37028503]
[120.91162872 210.29164124]
[132.88757324 220.25227356]
[134.23068237 235.40650940]
[124.66092682 246.76237488]
[138.14851379 254.43472290]
[144.51980591 268.58343506]
[141.32495117 283.76803589]
[129.79240417 294.14974976]
[114.35667419 295.73660278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[6 83]
[7 82]
[8 81]
[9 80]
[10 78]
[11 77]
[12 76]
[17 73]
[18 72]
[19 71]
[20 70]
[22 68]
[23 67]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
