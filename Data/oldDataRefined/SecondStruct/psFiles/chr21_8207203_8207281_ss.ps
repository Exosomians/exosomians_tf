%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCCCGGACCACCCCAACGCGCGUGCGCGCGUGGCCGGCCCGGGGGCGGGACUUGCGCUUGCGAGCUCCACCGGCG\
) } def
/len { sequence length } bind def

/coor [
[94.35660553 147.40104675]
[93.76770782 132.41259766]
[93.17881012 117.42417145]
[85.34133148 104.63456726]
[72.25389099 97.30525208]
[59.16645050 89.97592926]
[46.07901382 82.64661407]
[32.99157333 75.31729126]
[19.90413094 67.98797607]
[6.81669188 60.65865707]
[-9.00451279 60.66636276]
[-16.32839775 47.69678116]
[-29.41583824 40.36746216]
[-42.03086472 45.52284622]
[-55.10181427 42.43134689]
[-63.81237793 32.46638107]
[-65.08950806 19.48995018]
[-77.87911224 11.65247154]
[-90.66871643 3.81499267]
[-99.88344574 1.91682887]
[-103.79804993 -4.58964062]
[-116.27008820 -12.92319393]
[-128.74214172 -21.25674820]
[-141.21418762 -29.59030151]
[-153.68621826 -37.92385483]
[-170.07673645 -38.45589828]
[-177.57157898 -53.04217148]
[-168.46070862 -66.67756653]
[-152.11659241 -65.33515167]
[-145.35267639 -50.39589691]
[-132.88063049 -42.06234360]
[-120.40858459 -33.72879028]
[-107.93653870 -25.39523888]
[-95.46449280 -17.06168365]
[-82.83123779 -8.97460938]
[-70.04163361 -1.13713121]
[-57.25202942 6.70034742]
[-41.22021103 2.03687644]
[-26.42150307 10.46516037]
[-22.08651924 27.28002357]
[-8.99907875 34.60934067]
[5.88602448 34.07739258]
[14.14601040 47.57121658]
[27.23344994 54.90053558]
[40.32089233 62.22985077]
[53.40832901 69.55917358]
[66.49577332 76.88848877]
[79.58321381 84.21781158]
[92.67065430 91.54712677]
[97.63860321 80.18418121]
[113.19057465 74.48368835]
[132.93901062 82.09237671]
[147.75433350 84.43888855]
[162.56965637 86.78540802]
[177.42820740 88.84059143]
[192.32423401 90.60365295]
[207.22026062 92.36671448]
[222.11628723 94.12977600]
[237.01231384 95.89283752]
[251.85791016 88.92575836]
[265.15789795 98.51963043]
[263.23037720 114.80510712]
[248.05822754 121.02908325]
[235.24925232 110.78886414]
[220.35322571 109.02580261]
[205.45719910 107.26274109]
[190.56117249 105.49967957]
[175.66514587 103.73661804]
[168.46284485 106.14184570]
[160.22314453 101.60073090]
[145.40782166 99.25421906]
[130.59249878 96.90769958]
[124.98618317 101.88959503]
[128.00906372 116.58184052]
[113.77355957 111.85337830]
[108.16724396 116.83527374]
[108.75614166 131.82371521]
[109.34503937 146.81214905]
[112.29024506 165.96875000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[12 41]
[13 40]
[17 37]
[18 36]
[19 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[52 72]
[53 71]
[54 70]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
