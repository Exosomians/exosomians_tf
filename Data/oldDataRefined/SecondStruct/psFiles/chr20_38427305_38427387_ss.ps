%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACACACUUUCGAAGUCCCAAGCCUACCCUAUCCCACCUGGGAGGUUUGUGCCCCUGUUGGAGAAAGUCGCAAGGAGAGG\
) } def
/len { sequence length } bind def

/coor [
[122.06515503 312.95693970]
[120.38568115 298.05126953]
[118.70621490 283.14556885]
[103.62294769 278.22482300]
[92.11327362 267.22119141]
[86.47906494 252.26632690]
[87.87695312 236.28869629]
[96.08129883 222.44018555]
[109.51879883 213.47438049]
[107.28316498 198.64192200]
[105.04753113 183.80944824]
[102.81188965 168.97698975]
[100.57625580 154.14453125]
[98.34062195 139.31207275]
[86.17999268 136.84017944]
[75.39396667 130.70399475]
[67.05538940 121.51381683]
[61.99364853 110.18376923]
[60.71221924 97.84078979]
[63.33855438 85.71257782]
[69.61142731 75.00547028]
[78.90690613 66.78443909]
[73.42678833 52.82133484]
[67.94667816 38.85822678]
[62.46656036 24.89512062]
[56.98644638 10.93201542]
[51.50632858 -3.03109121]
[46.02621460 -16.99419785]
[39.83042145 -24.04616547]
[40.61300659 -31.58326340]
[35.65882111 -45.74151230]
[30.70463562 -59.89976501]
[15.59879208 -62.67628098]
[3.91541743 -72.64595032]
[-1.20271921 -87.12698364]
[1.62113535 -102.22405243]
[11.62737846 -113.87611389]
[26.12438011 -118.94883728]
[41.21252060 -116.07767487]
[52.83316803 -106.03495789]
[57.86042023 -91.52212524]
[54.94197845 -76.44306183]
[44.86288452 -64.85395050]
[49.81707382 -50.69569778]
[54.77125931 -36.53744888]
[59.98932266 -22.47431183]
[65.46943665 -8.51120663]
[70.94955444 5.45189953]
[76.42966461 19.41500664]
[81.90978241 33.37811279]
[87.38990021 47.34121704]
[92.87001038 61.30432510]
[103.63954926 60.82161713]
[114.13587952 63.27985764]
[123.57109070 68.49451447]
[131.23692322 76.07415009]
[136.55795288 85.44979095]
[151.29644775 82.66111755]
[163.36682129 71.55986023]
[178.93296814 76.72001648]
[181.98175049 92.83327484]
[169.37686157 103.32368469]
[154.08511353 97.39961243]
[139.34661865 100.18828583]
[132.08993530 122.76902008]
[113.17308807 137.07643127]
[115.40872192 151.90888977]
[117.64435577 166.74136353]
[119.87998962 181.57382202]
[122.11562347 196.40628052]
[124.35125732 211.23873901]
[138.12544250 214.93807983]
[149.38682556 223.61860657]
[156.42745972 235.92149353]
[158.19584656 249.94180298]
[154.45382690 263.52349854]
[145.80804443 274.59094238]
[133.61189270 281.46612549]
[135.29136658 296.37179565]
[136.97084045 311.27746582]
[147.13903809 324.14370728]
[140.83004761 339.28070068]
[124.53400421 341.11682129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[30 45]
[31 44]
[32 43]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
