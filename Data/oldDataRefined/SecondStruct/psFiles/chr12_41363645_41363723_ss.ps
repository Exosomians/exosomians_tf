%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAUUUAGUAUAAUACCGGUUCCCAGUACUACCGUCCUCAUUAGUCUCCACAAGAACACAACACUAUUCCCACCUCU\
) } def
/len { sequence length } bind def

/coor [
[179.88229370 200.59971619]
[187.17616272 187.40643311]
[176.16133118 177.22442627]
[165.14649963 167.04240417]
[149.96742249 172.21228027]
[134.14645386 169.07872009]
[121.94411469 158.39077759]
[116.69373322 142.94450378]
[119.89126587 126.85189819]
[108.48517609 117.11017609]
[94.03246307 118.14234924]
[83.01454163 108.73215485]
[81.77310944 94.29591370]
[70.36701965 84.55419159]
[58.96092606 74.81246948]
[47.55483627 65.07075500]
[27.93627548 67.95598602]
[12.48577595 56.00111389]
[10.41733551 36.87113953]
[-2.05470848 28.53758430]
[-14.52675247 20.20403099]
[-26.99879646 11.87047768]
[-40.73809433 18.73541260]
[-56.06816483 17.79495430]
[-68.86530304 9.30208206]
[-75.68713379 -4.45866442]
[-74.69863129 -19.78571320]
[-66.16568756 -32.55616379]
[-52.38362503 -39.33483505]
[-37.05974960 -38.29829025]
[-24.31610680 -29.72535896]
[-17.58067131 -15.92211723]
[-18.66524315 -0.60156620]
[-6.19319916 7.73198748]
[6.27884531 16.06554031]
[18.75088882 24.39909363]
[28.33099556 19.58615112]
[39.13125992 19.32674980]
[49.08173752 23.74090004]
[56.24531174 32.04614258]
[59.19473648 42.69534683]
[57.29655838 53.66466141]
[68.70264435 63.40638351]
[80.10873413 73.14810181]
[91.51482391 82.88982391]
[105.96753693 81.85765076]
[116.98545837 91.26784515]
[118.22689056 105.70408630]
[129.63298035 115.44580841]
[142.70071411 110.06555176]
[156.74150085 110.89519501]
[168.96817017 117.71199036]
[176.97892761 129.11045837]
[179.22903442 142.79185486]
[175.32850647 156.02757263]
[186.34333801 166.20957947]
[197.35818481 176.39158630]
[209.93852234 168.08506775]
[224.14141846 163.03125000]
[239.14114380 161.52395630]
[254.06561279 163.65083313]
[268.04714966 169.28822327]
[280.27288818 178.10836792]
[290.03201294 189.59846497]
[296.75717163 203.09053040]
[300.05737305 217.80012512]
[299.74075317 232.87205505]
[295.82568359 247.43006897]
[288.53979492 260.62777710]
[278.30670166 271.69787598]
[265.72131348 279.99676514]
[251.51536560 285.04199219]
[236.51473999 286.54016113]
[221.59155273 284.40423584]
[207.61343384 278.75839233]
[195.39306641 269.93084717]
[185.64088440 258.43481445]
[178.92390442 244.93867493]
[175.63262939 230.22709656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[9 49]
[10 48]
[13 45]
[14 44]
[15 43]
[16 42]
[19 36]
[20 35]
[21 34]
[22 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
