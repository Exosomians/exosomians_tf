%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGAAACCCAUGUGAUGUCGCUACCGAUAACUCCUCAUAGGACUCCGUACCCCCAGUCCCCAACUCCAGAACC\
) } def
/len { sequence length } bind def

/coor [
[61.77748108 235.14567566]
[49.61899567 226.36096191]
[39.54710388 215.24534607]
[31.99990654 202.28233337]
[27.30569458 188.03578186]
[25.66865349 173.12536621]
[27.15998840 158.19969177]
[31.71483421 143.90797424]
[39.13506317 130.87185669]
[49.09790802 119.65840149]
[61.17001724 110.75535583]
[74.82627869 104.54998016]
[89.47485352 101.31195831]
[77.63774109 92.09877014]
[65.80063629 82.88557434]
[53.96352768 73.67238617]
[42.12641907 64.45919800]
[29.40204811 56.51625061]
[15.92618465 49.92830276]
[2.45031953 43.34035110]
[-11.02554512 36.75240326]
[-24.50140953 30.16445541]
[-40.81549835 31.83255959]
[-50.19650650 18.38158417]
[-42.99405670 3.64873838]
[-26.61741066 2.78991079]
[-17.91346169 16.68858910]
[-4.43759632 23.27653885]
[9.03826809 29.86448669]
[22.51413345 36.45243454]
[35.98999786 43.04038620]
[38.38402939 41.98304749]
[41.35386658 41.82549667]
[44.55765152 42.79004288]
[47.58057785 44.97195053]
[49.98060226 48.31818771]
[51.33961105 52.62208939]
[63.17671967 61.83527756]
[75.01382446 71.04846954]
[86.85093689 80.26165771]
[98.68804169 89.47485352]
[113.60801697 91.02222443]
[127.08387756 84.43427277]
[140.55973816 77.84632111]
[154.03561401 71.25837708]
[167.51147461 64.67042542]
[168.48872375 49.34265518]
[177.01228333 36.56593704]
[190.78935242 29.77714729]
[206.11399841 30.80243301]
[218.86392212 39.36599731]
[225.60949707 53.16428757]
[224.53617859 68.48563385]
[215.93269348 81.20866394]
[202.11332703 87.91095734]
[186.79542542 86.78961945]
[174.09942627 78.14629364]
[160.62356567 84.73423767]
[147.14768982 91.32218933]
[133.67182922 97.91013336]
[120.19596100 104.49808502]
[133.86637878 110.67219543]
[145.95883179 119.54759979]
[155.94729614 130.73823547]
[163.39733887 143.75733948]
[167.98486328 158.03860474]
[169.51034546 172.96084595]
[167.90740967 187.87495422]
[163.24580383 202.13220215]
[155.72828674 215.11245728]
[145.68183899 226.25108337]
[133.54348755 235.06359863]
[119.84120178 241.16665649]
[105.17100525 244.29479980]
[90.17101288 244.31195068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
