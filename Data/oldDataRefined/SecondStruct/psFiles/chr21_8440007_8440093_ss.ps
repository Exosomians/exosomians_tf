%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGAGGAGCCCCACGCGCCGACCCCCAAGGGAGCGUCCCGGGCGGCCCCCGGGAGGCAGGGGGAUUCGCGUCUGGGCCGCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[82.91933441 265.22723389]
[75.16779327 251.64608765]
[78.01041412 236.26904297]
[90.10499573 226.35667419]
[90.10499573 211.35667419]
[79.42412567 201.03898621]
[79.21044159 185.82685852]
[90.10499573 174.69372559]
[86.88340759 167.85076904]
[90.38228607 159.16073608]
[90.91767120 144.17028809]
[91.45305634 129.17985535]
[91.98844147 114.18940735]
[83.70767975 99.70915222]
[92.50000000 85.53368378]
[92.50000000 70.53368378]
[92.50000000 55.53368378]
[92.50000000 40.53368378]
[92.50000000 25.53368378]
[80.68005371 18.19699669]
[74.13320160 6.04561615]
[74.50188446 -7.64322281]
[81.57975769 -19.23850822]
[93.39525604 -25.71858406]
[93.93064117 -40.70902634]
[94.46602631 -55.69947052]
[95.00141144 -70.68991089]
[95.53679657 -85.68035126]
[88.80344391 -90.20493317]
[84.21463776 -96.81028748]
[82.35656738 -104.56418610]
[83.43429565 -112.39433289]
[87.25043488 -119.23661041]
[93.23893738 -124.17969513]
[100.54853821 -126.58636475]
[103.73702240 -141.24357605]
[99.10997772 -156.37304688]
[109.37583160 -167.16477966]
[112.56431580 -181.82197571]
[115.75279236 -196.47918701]
[118.94126892 -211.13638306]
[122.12975311 -225.79359436]
[125.31822968 -240.45079041]
[128.50671387 -255.10800171]
[121.07769775 -269.32733154]
[127.69444275 -283.94232178]
[143.28112793 -287.74163818]
[155.88099670 -277.81072998]
[155.82850647 -261.76776123]
[143.16390991 -251.91950989]
[139.97543335 -237.26231384]
[136.78695679 -222.60511780]
[133.59848022 -207.94790649]
[130.41000366 -193.29071045]
[127.22151947 -178.63349915]
[124.03303528 -163.97630310]
[128.88813782 -149.89520264]
[118.39422607 -138.05508423]
[115.20574188 -123.39788818]
[124.95011139 -103.21024323]
[110.52724457 -85.14496613]
[109.99185944 -70.15452576]
[109.45647430 -55.16408539]
[108.92108917 -40.17364120]
[108.38570404 -25.18319893]
[121.57480621 -15.58691311]
[126.57328033 0.11205471]
[121.25525665 15.87963200]
[107.50000000 25.53368378]
[107.50000000 40.53368378]
[107.50000000 55.53368378]
[107.50000000 70.53368378]
[107.50000000 85.53368378]
[115.29429626 94.37782288]
[115.08387756 106.16448975]
[106.97888184 114.72479248]
[106.44349670 129.71524048]
[105.90811157 144.70567322]
[105.37272644 159.69612122]
[105.10499573 174.69372559]
[115.99954987 185.82685852]
[115.78586578 201.03898621]
[105.10499573 211.35667419]
[105.10499573 226.35667419]
[117.19957733 236.26904297]
[120.04219818 251.64608765]
[112.29065704 265.22723389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[8 80]
[10 79]
[11 78]
[12 77]
[13 76]
[15 73]
[16 72]
[17 71]
[18 70]
[19 69]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[35 59]
[36 58]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
