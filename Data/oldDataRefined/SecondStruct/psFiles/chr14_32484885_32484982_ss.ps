%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUAAAAGUAUAACUUAACGUUUAAGCUUCUUCGUCGAAGUUUGGACCGCCCCGAAGAGGGCGGAAAAAAAGGACGCCGCCCUCUUCAUCUAACUU\
) } def
/len { sequence length } bind def

/coor [
[123.47929382 175.97851562]
[114.44461823 178.20080566]
[105.21222687 179.35266113]
[95.90847778 179.41833496]
[86.66074371 178.39691162]
[77.59559631 176.30239868]
[68.83712006 173.16343689]
[60.50521088 169.02299500]
[52.71390915 163.93777466]
[45.56986618 157.97735596]
[39.17087173 151.22332764]
[33.60451126 143.76815796]
[28.94698524 135.71388245]
[25.26203918 127.17074585]
[22.60011673 118.25569916]
[20.99765587 109.09076691]
[20.47658920 99.80139160]
[21.04404831 90.51473999]
[22.69226837 81.35791779]
[25.39868736 72.45627594]
[29.12625885 63.93165970]
[33.82395935 55.90074921]
[22.18176270 46.44245911]
[10.53956604 36.98416901]
[-1.10263121 27.52587700]
[-12.74482822 18.06758690]
[-24.38702583 8.60929775]
[-36.02922058 -0.84899235]
[-47.67141724 -10.30728245]
[-59.31361771 -19.76557159]
[-70.95581055 -29.22386169]
[-82.59800720 -38.68215179]
[-98.29054260 -36.80599976]
[-110.66165924 -46.64118958]
[-112.37179565 -62.35268021]
[-102.40636444 -74.61912537]
[-86.67766571 -76.16305542]
[-74.51727295 -66.06848907]
[-73.13971710 -50.32434845]
[-61.49752426 -40.86605835]
[-49.85532761 -31.40777016]
[-38.21313095 -21.94948006]
[-26.57093239 -12.49118900]
[-14.92873478 -3.03289938]
[-3.28653812 6.42539072]
[8.35565853 15.88368034]
[19.99785614 25.34197044]
[31.64005280 34.80026245]
[43.28224945 44.25855255]
[62.88322067 29.66965675]
[85.98828888 21.72047234]
[110.41617584 21.16145897]
[133.86068726 28.04538918]
[154.10850525 41.72237015]
[169.24807739 60.90119553]
[177.85011292 83.77124023]
[192.75769043 82.10866547]
[207.66526794 80.44609070]
[222.57284546 78.78352356]
[237.48042297 77.12094879]
[252.38800049 75.45837402]
[267.29556274 73.79579926]
[282.20315552 72.13323212]
[297.11071777 70.47065735]
[312.01831055 68.80808258]
[326.92587280 67.14550781]
[331.93466187 52.72764206]
[342.70916748 41.91687775]
[357.11013794 36.85969925]
[372.27822876 38.56021881]
[385.20181274 46.68079376]
[393.31491089 59.60907745]
[395.00662231 74.77815247]
[389.94113159 89.17617798]
[379.12411499 99.94443512]
[364.70333862 104.94486237]
[349.54208374 103.18462372]
[336.65057373 95.01322174]
[328.58843994 82.05308533]
[313.68087769 83.71566010]
[298.77328491 85.37823486]
[283.86572266 87.04080200]
[268.95816040 88.70337677]
[254.05056763 90.36595154]
[239.14299011 92.02852631]
[224.23541260 93.69110107]
[209.32783508 95.35366821]
[194.42025757 97.01624298]
[179.51268005 98.67881775]
[179.12280273 107.97461700]
[177.64987183 117.16126251]
[175.11407471 126.11299896]
[171.55009460 134.70730591]
[167.00672913 142.82652283]
[161.54615784 150.35952759]
[155.24314880 157.20320129]
[148.18395996 163.26388550]
[140.46522522 168.45858765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
