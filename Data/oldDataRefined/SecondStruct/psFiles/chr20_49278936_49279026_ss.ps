%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCGACCACAUUUACUACUGAAGUGAAAAAAGGGGUAGUCUAGCUGUUACGACUGCAGAAUAUAAAACGGUCAAUCAAGACUAUGUAGC\
) } def
/len { sequence length } bind def

/coor [
[123.57230377 174.54461670]
[108.65469360 176.11460876]
[94.32533264 171.67956543]
[82.90280914 161.95712280]
[76.23534393 148.52043152]
[75.40177917 133.54360962]
[80.53697968 119.45000458]
[90.81217957 108.51855469]
[75.89081573 110.05251312]
[67.68703461 124.72842407]
[52.53457642 131.62561035]
[36.40213013 128.24172974]
[25.51827240 116.08275604]
[10.65798283 118.12525940]
[-4.20230627 120.16775513]
[-19.06259537 122.21025848]
[-33.92288589 124.25276184]
[-48.78317261 126.29525757]
[-59.58366013 138.15818787]
[-75.58240509 136.96670532]
[-84.50654602 123.63481140]
[-79.51023865 108.38959503]
[-64.42623138 102.92588806]
[-50.82567215 111.43496704]
[-35.96538544 109.39247131]
[-21.10509491 107.34996796]
[-6.24480629 105.30747223]
[8.61548328 103.26496887]
[23.47577286 101.22247314]
[28.72740555 88.82216644]
[39.53957367 80.61301422]
[53.11096573 78.85798645]
[65.85706329 84.12992859]
[74.35685730 95.13115692]
[89.27821350 93.59719086]
[96.17861938 88.16935730]
[104.90628052 88.63706970]
[117.98118591 81.28541565]
[131.05609131 73.93376160]
[144.13099670 66.58210754]
[157.20590210 59.23045731]
[170.28082275 51.87880325]
[183.35572815 44.52714920]
[186.21383667 39.65271378]
[190.30957031 36.79340363]
[194.60212708 36.07686996]
[198.16551208 37.17129898]
[211.92369080 31.19528389]
[213.94081116 17.44011116]
[222.46723938 6.59777832]
[235.15704346 1.47608495]
[248.60498047 3.33252835]
[259.26013184 11.56750298]
[273.21429443 6.06468964]
[287.16848755 0.56187660]
[301.12265015 -4.94093657]
[315.07684326 -10.44375038]
[316.14132690 -25.66970253]
[323.71411133 -38.92169571]
[336.29168701 -47.56853485]
[351.37670898 -49.89338684]
[365.97402954 -45.43464661]
[377.18539429 -35.07760620]
[382.78472900 -20.87865448]
[381.66030884 -5.65701199]
[374.03536987 7.56505680]
[361.42385864 16.16230011]
[346.32980347 18.42772865]
[331.75012207 13.91154003]
[320.57965088 3.51042676]
[306.62548828 9.01323986]
[292.67129517 14.51605320]
[278.71713257 20.01886559]
[264.76293945 25.52167892]
[261.23513794 41.45446777]
[248.83161926 52.31073761]
[232.24342346 53.72510529]
[217.89970398 44.95345306]
[204.14154053 50.92947006]
[190.70738220 57.60205460]
[177.63246155 64.95371246]
[164.55755615 72.30535889]
[151.48265076 79.65701294]
[138.40774536 87.00866699]
[125.33283997 94.36032104]
[112.25793457 101.71197510]
[126.95402527 104.71611786]
[139.27743530 113.26794434]
[147.23416138 125.98370361]
[149.53674316 140.80592346]
[145.81263733 155.33625793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 35]
[9 34]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[47 79]
[48 78]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
