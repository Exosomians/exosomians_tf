%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUCUCUUGUUCCUUUGUGUACACAAAGGAAGUAGUAGUAGUAGUAGUAGUAGUAGUAGUCCGUU\
) } def
/len { sequence length } bind def

/coor [
[72.85009003 217.57411194]
[58.00222015 219.70501709]
[43.14202499 217.66184998]
[29.42021942 211.60279846]
[17.89937210 201.99707031]
[9.47161388 189.58848572]
[4.78956318 175.33793640]
[4.21577883 160.34890747]
[7.79469299 145.78211975]
[15.24916744 132.76556396]
[26.00195503 122.30718994]
[39.22039795 115.21686554]
[53.87604523 112.04399109]
[41.24048615 103.96051025]
[28.60492897 95.87702942]
[15.96936893 87.79354858]
[3.33380985 79.71006775]
[-9.30174923 71.62658691]
[-21.93730927 63.54310989]
[-34.57286835 55.45963287]
[-47.20842743 47.37615204]
[-63.60628891 47.17068100]
[-71.39017487 32.73658752]
[-62.55270004 18.92242813]
[-46.18509293 19.93902588]
[-39.12494659 34.74059296]
[-26.48938942 42.82407379]
[-13.85382938 50.90755081]
[-1.21826994 58.99103165]
[11.41728973 67.07450867]
[24.05284882 75.15798950]
[36.68840790 83.24147034]
[49.32396698 91.32495117]
[61.95952606 99.40843201]
[66.84500122 99.05290985]
[71.79179382 100.75984192]
[86.13968658 96.38515472]
[95.82247925 86.29876709]
[109.48562622 89.26695251]
[123.83351898 84.89226532]
[134.77719116 73.46656799]
[149.20771790 77.15563965]
[163.55561829 72.78095245]
[174.49928284 61.35525513]
[188.92980957 65.04432678]
[203.27770996 60.66963959]
[214.06945801 48.32176208]
[230.10438538 51.75878906]
[234.88713074 67.44500732]
[223.49761963 79.24377441]
[207.65238953 75.01753998]
[193.30450439 79.39222717]
[183.38708496 90.50501251]
[167.93029785 87.12884521]
[153.58241272 91.50353241]
[143.66499329 102.61632538]
[128.20820618 99.24015808]
[113.86031342 103.61484528]
[104.17752075 113.70123291]
[90.51437378 110.73304749]
[76.16648102 115.10773468]
[89.42657471 122.11985779]
[100.24095917 132.51452637]
[107.77219391 145.48683167]
[111.43709564 160.03222656]
[110.95186615 175.02436829]
[106.35408020 189.30233765]
[97.99976349 201.76048279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[36 61]
[37 60]
[39 58]
[40 57]
[42 55]
[43 54]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
