%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAGUUAGUGGACUCGAGUGGUAUCAGAUUAUCUUUUGUUGGCUUUGGUUUAUUAAGUUCGUGACGAAUAAUGUUAAAAUGACCCAGAGAUAAAAUGGGAGGAUGUUCGGAGUCUCAUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[116.92672729 154.96850586]
[102.69963074 159.72137451]
[88.07029724 156.40739441]
[77.28029633 145.98741150]
[73.45804596 131.48257446]
[77.71176910 117.09835052]
[88.80596161 107.00636292]
[73.82460785 106.25867462]
[58.84325409 105.51098633]
[43.86190033 104.76329803]
[28.88054466 104.01560974]
[13.89919090 103.26792145]
[-1.08216274 102.52023315]
[-16.06351662 101.77254486]
[-31.04487038 101.02485657]
[-46.02622604 100.27716827]
[-60.19491577 107.31697083]
[-72.52069092 98.95488739]
[-87.50204468 98.20719910]
[-102.48339844 97.45951080]
[-117.46475220 96.71182251]
[-131.63343811 103.75161743]
[-143.95922852 95.38953400]
[-151.69396973 103.23209381]
[-162.26472473 105.41654968]
[-172.06475830 101.44782257]
[-177.88795471 92.88871002]
[-192.81341553 91.39519501]
[-207.73887634 89.90167999]
[-222.66433716 88.40815735]
[-234.73658752 98.60797119]
[-250.47810364 97.20072937]
[-260.54971313 85.02130890]
[-258.97610474 69.29555511]
[-246.69090271 59.35327530]
[-230.98266602 61.09304810]
[-221.17082214 73.48269653]
[-206.24536133 74.97621155]
[-191.31990051 76.46973419]
[-176.39443970 77.96324921]
[-159.51103210 68.67111969]
[-143.21153259 80.40818024]
[-130.11441040 73.31490326]
[-116.71706390 81.73046875]
[-101.73571014 82.47815704]
[-86.75435638 83.22584534]
[-71.77300262 83.97353363]
[-58.67588043 76.88024902]
[-45.27853775 85.29581451]
[-30.29718208 86.04350281]
[-15.31582832 86.79119110]
[-0.33447441 87.53887939]
[14.64687920 88.28656769]
[29.62823296 89.03425598]
[44.60958862 89.78194427]
[59.59094238 90.52963257]
[74.57229614 91.27732086]
[89.55364990 92.02500916]
[99.17230988 87.09472656]
[109.04235840 91.05236816]
[123.87481689 88.81673431]
[138.70727539 86.58110046]
[153.53974915 84.34546661]
[168.37220764 82.10983276]
[183.20466614 79.87419891]
[198.03712463 77.63856506]
[212.70152283 74.48331451]
[227.14088440 70.42070770]
[241.58024597 66.35810089]
[256.01962280 62.29549408]
[270.45898438 58.23288727]
[284.89834595 54.17028046]
[296.08715820 42.98452377]
[310.43429565 46.98557663]
[321.62310791 35.79981995]
[335.97027588 39.80086899]
[322.84249878 32.54401779]
[316.31405640 19.03923416]
[318.78118896 4.24351835]
[329.33834839 -6.41228342]
[344.11050415 -9.01690388]
[357.67541504 -2.61430383]
[365.05401611 10.44540882]
[363.53796387 25.36859894]
[353.68405151 36.67745590]
[368.64208984 35.55650330]
[383.60015869 34.43555069]
[398.55819702 33.31460190]
[405.81509399 19.70059586]
[419.29141235 12.19108963]
[434.68688965 13.18233776]
[447.08889771 22.35803604]
[452.54003906 36.79025269]
[449.30081177 51.87372208]
[438.40487671 62.79536057]
[423.32907104 66.07011414]
[408.88406372 60.65302277]
[399.67916870 48.27265930]
[384.72109985 49.39360809]
[369.76303101 50.51456070]
[354.80499268 51.63551331]
[340.03286743 54.24023438]
[329.87686157 65.13540649]
[314.49691772 61.42493820]
[304.34091187 72.32011414]
[288.96093750 68.60964203]
[274.52157593 72.67224884]
[260.08221436 76.73485565]
[245.64285278 80.79747009]
[231.20349121 84.86007690]
[216.76412964 88.92268372]
[227.95956421 98.90576935]
[227.38967896 113.89494324]
[215.46855164 122.99914551]
[200.85798645 119.60331726]
[194.17396545 106.17485046]
[200.27276611 92.47103119]
[185.44030762 94.70666504]
[170.60783386 96.94229889]
[155.77537537 99.17793274]
[140.94291687 101.41356659]
[126.11045074 103.64920044]
[111.27799225 105.88483429]
[123.32338715 114.82398224]
[128.98695374 128.71368408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[18 47]
[19 46]
[20 45]
[21 44]
[23 42]
[27 40]
[28 39]
[29 38]
[30 37]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[67 111]
[68 110]
[69 109]
[70 108]
[71 107]
[72 106]
[74 104]
[76 102]
[85 101]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
