%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGAGGAGCCCCACGCGCCGACCCCCAAGGGAGCGUCCCGGGCGGCCCCCGGGAGGCAGGGGGAUUCGCGUCUGGGCCGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[83.12625885 254.36526489]
[79.76737976 238.67776489]
[90.04914856 226.36254883]
[90.04914856 211.36254883]
[79.36827850 201.04486084]
[79.15459442 185.83273315]
[90.04914856 174.69960022]
[86.82442474 167.85044861]
[90.33311462 159.15428162]
[90.88095093 144.16429138]
[91.42877960 129.17428589]
[91.97660828 114.18430328]
[83.70642090 99.70236206]
[92.50000000 85.53213501]
[92.50000000 70.53213501]
[92.50000000 55.53213120]
[92.50000000 40.53213120]
[92.50000000 25.53213310]
[80.67622375 18.19197273]
[74.12986755 6.03458357]
[74.50428772 -7.65912676]
[81.59150696 -19.25456047]
[93.41622925 -25.72813416]
[93.96405792 -40.71812439]
[94.51189423 -55.70811844]
[95.05972290 -70.69811249]
[95.60755157 -85.68810272]
[88.85721588 -90.23097229]
[84.26397705 -96.86275482]
[82.41686249 -104.64414215]
[83.52024841 -112.49508667]
[87.37255096 -119.34471130]
[93.40074158 -124.27735138]
[100.74508667 -126.65488434]
[104.00653839 -141.29602051]
[99.45491791 -156.44836426]
[109.77440643 -167.18881226]
[113.03585815 -181.82995605]
[116.29730988 -196.47109985]
[119.55876160 -211.11222839]
[122.82021332 -225.75337219]
[126.08166504 -240.39450073]
[129.34312439 -255.03564453]
[121.98503113 -269.29180908]
[128.67449951 -283.87365723]
[144.27992249 -287.59527588]
[156.83015442 -277.60171509]
[156.69775391 -261.55923462]
[143.98425293 -251.77420044]
[140.72280884 -237.13305664]
[137.46134949 -222.49191284]
[134.19990540 -207.85078430]
[130.93844604 -193.20964050]
[127.67699432 -178.56849670]
[124.41554260 -163.92736816]
[129.20043945 -149.82226562]
[118.64767456 -138.03456116]
[115.38622284 -123.39342499]
[125.05465698 -103.17239380]
[110.59754181 -85.14027405]
[110.04971313 -70.15028381]
[109.50188446 -55.16028976]
[108.95405579 -40.17029572]
[108.40621948 -25.18030357]
[121.58506775 -15.57712364]
[126.57422638 0.12030703]
[121.25270081 15.88211441]
[107.50000000 25.53213310]
[107.50000000 40.53213120]
[107.50000000 55.53213120]
[107.50000000 70.53213501]
[107.50000000 85.53213501]
[115.29705811 94.38135529]
[115.08164978 106.17357635]
[106.96659851 114.73213196]
[106.41876984 129.72212219]
[105.87094116 144.71211243]
[105.32311249 159.70210266]
[105.04914856 174.69960022]
[115.94370270 185.83273315]
[115.73001862 201.04486084]
[105.04914856 211.36254883]
[105.04914856 226.36254883]
[115.33091736 238.67776489]
[111.97203827 254.36526489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[7 79]
[9 78]
[10 77]
[11 76]
[12 75]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[34 58]
[35 57]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
