%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCUAGUCUUGAACUGAUAGAUCUCCUUAAAAGAACUCUAAAGUAGUUAAUAAAGAGUCCAUUAGUCAGUAGUAUAGGUCAA\
) } def
/len { sequence length } bind def

/coor [
[100.25254059 373.63391113]
[108.39582062 359.39947510]
[107.84155273 344.40972900]
[107.28727722 329.41998291]
[106.73300171 314.43020630]
[106.17873383 299.44046021]
[105.62445831 284.45071411]
[94.56962585 274.53472900]
[93.79398346 259.34088135]
[104.26970673 247.81280518]
[103.71543884 232.82304382]
[102.60765076 217.86401367]
[100.94786072 202.95611572]
[99.28807068 188.04823303]
[95.32329559 181.59494019]
[97.85289001 172.56021118]
[96.74510193 157.60118103]
[95.63731384 142.64213562]
[94.52952576 127.68310547]
[93.42173767 112.72406769]
[85.71517181 101.05786133]
[91.61922455 88.38372040]
[90.51143646 73.42468262]
[86.67860413 64.86112976]
[89.64954376 57.89421463]
[89.09526825 42.90445709]
[88.54100037 27.91470146]
[80.29904175 14.40985870]
[87.56076813 1.40537369]
[87.00650024 -13.58438206]
[86.45222473 -28.57413864]
[76.10490417 -34.98960114]
[70.29994965 -45.55302048]
[70.42911530 -57.48425674]
[76.33991241 -67.70926666]
[86.40557098 -73.65211487]
[86.95984650 -88.64186859]
[87.51411438 -103.63162231]
[88.06838989 -118.62138367]
[76.34834290 -128.97389221]
[74.07587433 -144.44548035]
[82.32395935 -157.73092651]
[97.19812012 -162.55725098]
[111.67522430 -156.64561462]
[118.91963196 -142.78730774]
[115.51074982 -127.52579498]
[103.05814362 -118.06710815]
[102.50387573 -103.07735443]
[101.94960022 -88.08760071]
[101.39533234 -73.09783936]
[114.61856079 -60.69943237]
[114.82736206 -42.26126862]
[101.44197845 -29.12841034]
[101.99625397 -14.13865471]
[102.55052948 0.85110128]
[110.75283051 13.28377628]
[103.53075409 27.36042976]
[104.08502960 42.35018539]
[104.63929749 57.33993912]
[105.47047424 72.31689453]
[106.57826233 87.27593231]
[114.28482819 98.94213867]
[108.38077545 111.61627960]
[109.48856354 126.57531738]
[110.59635162 141.53434753]
[111.70413971 156.49339294]
[112.81192780 171.45242310]
[114.19595337 186.38844299]
[115.85574341 201.29632568]
[117.51553345 216.20422363]
[121.33741760 222.07678223]
[121.41334534 228.06745911]
[118.70519257 232.26876831]
[119.25946808 247.25852966]
[130.55796814 257.98147583]
[130.90653992 273.19113159]
[120.61421204 283.89642334]
[121.16848755 298.88619995]
[121.72276306 313.87594604]
[122.27703094 328.86569214]
[122.83130646 343.85543823]
[123.38557434 358.84521484]
[132.55787659 372.43936157]
[125.12889862 387.05929565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[10 74]
[11 73]
[12 70]
[13 69]
[14 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[22 61]
[23 60]
[25 59]
[26 58]
[27 57]
[29 55]
[30 54]
[31 53]
[36 50]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
