%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUUCAGUUCGGCCGCGCAGUGUCCGUGAGCCGCACGUUCGGCGGGGCGUCCACGAUGGCAGAGAAUGGA\
) } def
/len { sequence length } bind def

/coor [
[84.51682281 327.05163574]
[68.25797272 324.91110229]
[62.23312378 309.65878296]
[72.64012909 296.98495483]
[74.59802246 282.11328125]
[76.55591583 267.24160767]
[78.51380920 252.36991882]
[70.86096191 236.72883606]
[81.78967285 222.09210205]
[83.09701538 207.14918518]
[84.40435028 192.20626831]
[77.80574799 178.85307312]
[86.71636963 165.77976990]
[88.02370453 150.83683777]
[89.33103943 135.89392090]
[90.63837433 120.95100403]
[81.56641388 113.66702271]
[77.23274994 102.86997986]
[78.75132751 91.33521271]
[85.73181152 82.02770996]
[96.37988281 77.33992004]
[98.98460388 62.56780243]
[101.58933258 47.79568481]
[92.79353333 34.93988037]
[95.64553070 19.99595642]
[107.95578003 11.68973827]
[110.56050110 -3.08237767]
[113.16522980 -17.85449409]
[102.88990784 -31.82368851]
[105.68663788 -48.59993744]
[119.38984680 -58.10006332]
[121.34774017 -72.97173309]
[123.30563354 -87.84340668]
[125.26352692 -102.71508026]
[115.44485474 -115.09931183]
[117.34194946 -130.78933716]
[129.82929993 -140.47651672]
[145.49838257 -138.41365051]
[155.05300903 -125.82457733]
[152.82458496 -110.17817688]
[140.13520813 -100.75718689]
[138.17730713 -85.88551331]
[136.21942139 -71.01383972]
[134.26152039 -56.14216995]
[143.55714417 -46.95931244]
[145.80270386 -33.88777542]
[139.93333435 -21.77539825]
[127.93734741 -15.24977112]
[125.33261871 -0.47765508]
[122.72789764 14.29446125]
[131.45486450 26.31010818]
[129.02372742 41.32823944]
[116.36144257 50.40040970]
[113.75672150 65.17252350]
[111.15200043 79.94464111]
[122.13329315 93.94179535]
[119.81114197 111.58029175]
[105.58129883 122.25833893]
[104.27396393 137.20126343]
[102.96662140 152.14418030]
[101.65928650 167.08709717]
[108.16438293 181.50910950]
[99.34726715 193.51359558]
[98.03993225 208.45652771]
[96.73259735 223.39944458]
[104.49717712 233.95352173]
[102.90504456 246.55081177]
[93.38548279 254.32781982]
[91.42758942 269.19949341]
[89.46969604 284.07116699]
[87.51180267 298.94284058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[6 69]
[7 68]
[9 65]
[10 64]
[11 63]
[13 61]
[14 60]
[15 59]
[16 58]
[21 55]
[22 54]
[23 53]
[26 50]
[27 49]
[28 48]
[31 44]
[32 43]
[33 42]
[34 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
