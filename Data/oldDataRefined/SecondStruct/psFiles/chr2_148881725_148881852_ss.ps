%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:22 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCACCACUAAAUCUCCCACUUGAGUGACCUUACCCCUACGAACGUACACAUUAGAAUGAUUCUCGAUUAUCUUUCCGAUCCUGGUUUGGAUAAACAAAUACCCCACUACACUCGGGCAGAUUUGU\
) } def
/len { sequence length } bind def

/coor [
[48.75642776 437.43145752]
[42.22914124 451.22845459]
[30.35656357 460.82034302]
[15.49600697 464.30267334]
[0.59804636 460.98400879]
[-11.37931824 451.52328491]
[-18.05797195 437.79891968]
[-18.11186600 422.53588867]
[-11.53029442 408.76470947]
[0.37996235 399.21963501]
[15.25411606 395.79583740]
[18.51556969 381.15469360]
[21.77702141 366.51358032]
[25.03847504 351.87243652]
[28.29992676 337.23129272]
[31.56137848 322.59014893]
[34.82283020 307.94900513]
[37.90576553 293.26925659]
[40.80972672 278.55303955]
[43.71368408 263.83682251]
[42.16304779 261.38366699]
[41.54309464 258.13757324]
[42.17297745 254.46998596]
[44.22386169 250.86500549]
[47.68290329 247.86190796]
[52.00439072 233.49789429]
[56.32587814 219.13389587]
[60.64736176 204.76988220]
[64.96884918 190.40586853]
[51.31490326 183.84608459]
[38.84934616 175.23962402]
[27.87645912 164.79660034]
[18.66408730 152.77189636]
[11.43710232 139.45904541]
[6.37191153 125.18302155]
[3.59215569 110.29228210]
[3.16568756 95.15031433]
[5.10291719 80.12672424]
[9.35655785 65.58823395]
[15.82277775 51.88972092]
[3.41451645 43.46149445]
[-8.99374485 35.03326416]
[-25.37973595 34.37649536]
[-32.76335526 19.73360825]
[-23.54897308 6.16794777]
[-7.21555042 7.63470316]
[-0.56551594 22.62500191]
[11.84274578 31.05323219]
[24.25100708 39.48146057]
[32.08718872 30.80279350]
[40.91113281 23.13056946]
[50.59450150 16.57638168]
[60.99645233 11.23555470]
[71.96569061 7.18577051]
[83.34268188 4.48593140]
[94.96194458 3.17530513]
[106.65448761 3.27295446]
[108.83850098 -11.56719589]
[111.02252197 -26.40734673]
[105.37699127 -41.18701553]
[114.88494873 -52.65209579]
[117.06896210 -67.49224854]
[119.25298309 -82.33239746]
[108.06741333 -93.08705902]
[105.37267303 -108.36835480]
[112.20495605 -122.30031586]
[125.93709564 -129.52581787]
[141.28880310 -127.26651764]
[152.35705566 -116.39115143]
[154.88586426 -101.08152008]
[147.90284729 -87.22449493]
[134.09313965 -80.14838409]
[131.90911865 -65.30822754]
[129.72509766 -50.46807861]
[135.52684021 -36.74987793]
[125.86267090 -24.22332954]
[123.67864990 -9.38317871]
[121.49463654 5.45697212]
[146.19718933 14.75785923]
[167.47579956 30.37657738]
[183.75332642 51.15552521]
[197.25653076 44.62377167]
[210.75971985 38.09201431]
[224.26290894 31.56026077]
[229.21940613 16.55330849]
[243.37307739 9.52129078]
[258.32678223 14.63617992]
[265.20877075 28.86340332]
[259.93606567 43.76219940]
[245.63688660 50.49337769]
[230.79466248 45.06345367]
[217.29147339 51.59520721]
[203.78828430 58.12696075]
[190.28509521 64.65871429]
[193.86485291 75.71437836]
[196.09620667 87.11891174]
[196.94708252 98.70849609]
[196.40524292 110.31662750]
[194.47848511 121.77655792]
[191.19450378 132.92366028]
[186.60044861 143.59779358]
[180.76231384 153.64561462]
[173.76399231 162.92277527]
[165.70600891 171.29602051]
[156.70413208 178.64506531]
[146.88764954 184.86431885]
[136.39759827 189.86444092]
[125.38468170 193.57360840]
[114.00709534 195.93855286]
[102.42828369 196.92526245]
[90.81459808 196.51959229]
[79.33285522 194.72735596]
[75.01137543 209.09136963]
[70.68988800 223.45538330]
[66.36840057 237.81938171]
[62.04691315 252.18339539]
[58.42990112 266.74078369]
[55.52593994 281.45700073]
[52.62198257 296.17321777]
[54.03630447 305.30474854]
[49.46397018 311.21047974]
[46.20251846 325.85159302]
[42.94106674 340.49273682]
[39.67961121 355.13388062]
[36.41815948 369.77502441]
[33.15670776 384.41616821]
[29.89525414 399.05728149]
[41.90978241 408.47079468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[18 119]
[19 118]
[20 117]
[25 116]
[26 115]
[27 114]
[28 113]
[29 112]
[40 49]
[41 48]
[42 47]
[57 78]
[58 77]
[59 76]
[61 74]
[62 73]
[63 72]
[81 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
