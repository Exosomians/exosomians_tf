%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCGUCUCCUGGGAGGAGGCGAAGGGGGAGCUGCCCCAACCCCCCCUCUUCGCUCCCAAGGCGGCCGGUGGCGCCACCACCGGCUCACGCCGAGCAGCGGAU\
) } def
/len { sequence length } bind def

/coor [
[116.57257080 122.45178223]
[110.48776245 125.86000061]
[103.74787140 127.65295410]
[96.77388000 127.71867371]
[90.00139618 126.05303192]
[83.85344696 122.76008606]
[72.20558929 132.21139526]
[60.55772781 141.66271973]
[48.90987015 151.11402893]
[37.26201248 160.56535339]
[25.61415672 170.01667786]
[13.96629810 179.46798706]
[2.31843996 188.91931152]
[-6.17129946 203.59448242]
[-22.62315369 199.49900818]
[-23.24206734 182.55636597]
[-7.13287783 177.27145386]
[4.51498032 167.82012939]
[16.16283798 158.36882019]
[27.81069565 148.91749573]
[39.45855331 139.46617126]
[51.10641098 130.01486206]
[62.75426865 120.56354523]
[74.40213013 111.11222839]
[72.09421539 100.00000000]
[74.40213013 88.88777161]
[62.75426865 79.43645477]
[51.10641098 69.98513794]
[39.45855331 60.53382111]
[27.81069565 51.08250427]
[16.16283798 41.63118744]
[0.57149619 38.94406509]
[-4.43635511 24.91656685]
[-20.02769661 22.22944450]
[-25.03554916 8.20194626]
[-36.68340683 -1.24937141]
[-52.79259491 -6.53428936]
[-52.17368317 -23.47693634]
[-35.72182846 -27.57240105]
[-27.23209000 -12.89722919]
[-15.58423138 -3.44591165]
[-0.82602191 -1.43481076]
[5.01496220 13.26870823]
[19.77317238 15.27980900]
[25.61415672 29.98332787]
[37.26201248 39.43464661]
[48.90987015 48.88596344]
[60.55772781 58.33728027]
[72.20558929 67.78859711]
[83.85344696 77.23991394]
[108.15007019 73.31088257]
[126.10688782 90.14287567]
[141.04763794 88.81093597]
[155.98838806 87.47900391]
[170.92913818 86.14706421]
[185.86988831 84.81512451]
[200.81062317 83.48318481]
[213.86924744 74.55104828]
[227.23329163 81.12765503]
[234.69573975 69.79947662]
[247.15766907 64.95712280]
[259.93170166 68.17906189]
[268.35235596 78.05500793]
[283.32601929 77.16639709]
[298.29965210 76.27779388]
[313.27331543 75.38918304]
[328.19268799 73.83599091]
[343.02828979 71.62129211]
[357.86389160 69.40659332]
[372.69949341 67.19189453]
[387.53509521 64.97719574]
[402.37069702 62.76250076]
[417.20629883 60.54780197]
[432.04190063 58.33310318]
[442.70410156 46.34571838]
[458.71557617 47.35158539]
[467.79373169 60.57908630]
[462.97454834 75.88121033]
[447.95492554 81.51948547]
[434.25662231 73.16870880]
[419.42102051 75.38340759]
[404.58538818 77.59810638]
[389.74978638 79.81280518]
[374.91418457 82.02749634]
[360.07858276 84.24219513]
[345.24298096 86.45689392]
[330.40737915 88.67159271]
[327.97787476 91.43527222]
[324.01940918 93.07906342]
[319.11318970 92.86508179]
[314.16192627 90.36283875]
[299.18826294 91.25144958]
[284.21463013 92.14005280]
[269.24096680 93.02866364]
[258.70516968 106.04335022]
[241.68862915 107.51786041]
[228.56523132 96.06840515]
[216.57527161 104.90527344]
[202.14256287 98.42393494]
[187.20181274 99.75587463]
[172.26107788 101.08780670]
[157.32032776 102.41974640]
[142.37957764 103.75168610]
[127.43882751 105.08362579]
[125.32133484 111.72870636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[33 43]
[35 41]
[36 40]
[52 104]
[53 103]
[54 102]
[55 101]
[56 100]
[57 99]
[59 97]
[63 94]
[64 93]
[65 92]
[66 91]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
