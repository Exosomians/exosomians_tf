%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGUGUCGUCGAAGGAACCAUCACAUGCGUCGGACAACCAACAUACCCAACGAGAUUCCCUGGAACCUCUGUCCGG\
) } def
/len { sequence length } bind def

/coor [
[84.68729401 114.67649078]
[70.88760376 120.55599213]
[57.08791351 126.43548584]
[43.28821945 132.31498718]
[29.48852921 138.19448853]
[15.68883801 144.07398987]
[12.33507347 161.65290833]
[-0.64166826 173.75230408]
[-18.10689163 175.83288574]
[-33.29518890 167.27148438]
[-46.57703018 174.24234009]
[-54.87972260 188.38436890]
[-71.27423096 187.99449158]
[-78.89529419 173.47377014]
[-69.90301514 159.75987244]
[-53.54787827 160.96049500]
[-40.26603699 153.98963928]
[-40.27139664 141.54046631]
[-34.85101700 130.25195312]
[-25.01792336 122.38042450]
[-12.67394066 119.52959442]
[-0.24201924 122.32417297]
[9.80933857 130.27429199]
[23.60902977 124.39479065]
[37.40872192 118.51529694]
[51.20841217 112.63579559]
[65.00810242 106.75629425]
[78.80780029 100.87680054]
[82.18211365 88.49343109]
[92.08087921 80.32347107]
[104.87942505 79.35855103]
[115.89125061 85.95199585]
[129.91648865 80.63291931]
[143.94174194 75.31385040]
[157.96697998 69.99477386]
[171.99221802 64.67569733]
[186.01747131 59.35662842]
[172.23086548 53.44650269]
[161.37713623 43.09292603]
[154.82365417 29.60026550]
[153.39604187 14.66835594]
[157.27416992 0.17835239]
[165.96943665 -12.04426098]
[178.38639832 -20.45965195]
[192.96075439 -24.00763130]
[207.85638428 -22.24121475]
[221.19671631 -15.38294029]
[231.30107117 -4.29683018]
[236.89651489 9.62046432]
[237.27809143 24.61561012]
[232.39776611 38.79948425]
[222.87033081 50.38516998]
[209.89891052 57.91206741]
[224.46302795 61.50180054]
[239.02716064 65.09153748]
[254.27798462 60.88166428]
[264.78375244 71.43997192]
[279.34790039 75.02970123]
[293.91201782 78.61943817]
[309.50457764 73.53967285]
[321.51751709 84.70307159]
[317.59295654 100.62568665]
[301.76812744 104.92770386]
[290.32229614 93.18356323]
[275.75814819 89.59383392]
[261.19403076 86.00409698]
[246.98493958 90.47072601]
[235.43742371 79.65566254]
[220.87330627 76.06592560]
[206.30917358 72.47619629]
[191.33653259 73.38187408]
[177.31129456 78.70094299]
[163.28605652 84.02001953]
[149.26080322 89.33908844]
[135.23556519 94.65816498]
[121.21031952 99.97723389]
[114.90235901 115.09297943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[10 17]
[11 16]
[32 76]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[53 70]
[54 69]
[55 68]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
