%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:30 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACCCGCCUGUGCUGUAAGGGCUACCGAAGAGCCCACGGGUGAGUUGCCCUCACUAGCACAGUAAGGUUUCGCGAAAGGUAAGACUU\
) } def
/len { sequence length } bind def

/coor [
[210.19668579 301.66488647]
[203.15461731 288.42065430]
[196.11253357 275.17645264]
[189.07046509 261.93225098]
[173.74179077 253.58349609]
[174.25975037 235.27883911]
[166.75975037 222.28846741]
[150.42703247 218.71864319]
[141.46359253 204.21121216]
[145.74368286 187.35829163]
[137.79489136 174.63755798]
[129.84609985 161.91683960]
[121.89730835 149.19612122]
[113.94852448 136.47540283]
[105.99973297 123.75467682]
[98.05094147 111.03395844]
[89.88135529 98.45389557]
[81.49346161 86.01833344]
[67.36199188 78.90411377]
[66.65950775 64.02608490]
[58.27161407 51.59052277]
[49.88372040 39.15496063]
[41.49582672 26.71939659]
[33.10793304 14.28383255]
[18.97646141 7.16961479]
[18.27397346 -7.70841503]
[9.88607979 -20.14397812]
[-0.25666982 -19.11740112]
[-9.98411179 -21.96501160]
[-17.87979126 -28.22599983]
[-22.81139565 -36.94595718]
[-24.09305000 -46.82215881]
[-21.58041000 -56.39812851]
[-15.68542099 -64.27842712]
[-22.26098824 -77.76033783]
[-28.83655548 -91.24224854]
[-42.72723389 -99.95896149]
[-41.85336304 -116.33480835]
[-27.11390686 -123.52371979]
[-13.67155361 -114.13036346]
[-15.35464382 -97.81781006]
[-8.77907658 -84.33589935]
[-2.20350981 -70.85398865]
[17.50009918 -66.23024750]
[27.93584442 -48.56168747]
[22.32164383 -28.53187180]
[30.70953751 -16.09630966]
[44.24105072 -9.87156582]
[45.54349518 5.89593935]
[53.93138885 18.33150291]
[62.31928253 30.76706696]
[70.70717621 43.20262909]
[79.09506989 55.63819504]
[92.62657928 61.86293793]
[93.92903137 77.63043976]
[102.31692505 90.06600189]
[109.22701263 94.57691193]
[110.77166748 103.08516693]
[118.72045135 115.80589294]
[126.66924286 128.52661133]
[134.61802673 141.24732971]
[142.56681824 153.96804810]
[150.51560974 166.68878174]
[158.46440125 179.40950012]
[171.97653198 180.94850159]
[181.94239807 189.91159058]
[184.81507874 202.80302429]
[179.75013733 214.78846741]
[187.25013733 227.77883911]
[199.60969543 231.93838501]
[205.54937744 243.09240723]
[202.31468201 254.89016724]
[209.35675049 268.13436890]
[216.39881897 281.37860107]
[223.44090271 294.62280273]
[238.50764465 292.79037476]
[253.21794128 296.52822876]
[265.58236694 305.33084106]
[273.92871094 318.00769043]
[277.12820435 332.84439087]
[274.74813843 347.83438110]
[267.11041260 360.95037842]
[255.24795532 370.41857910]
[240.76506042 374.95846558]
[225.62043762 373.95605469]
[211.86227417 367.54690552]
[201.35122681 356.59783936]
[195.50883484 342.58956909]
[195.12524414 327.41665649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[6 69]
[7 68]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 56]
[18 55]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[26 47]
[27 46]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
