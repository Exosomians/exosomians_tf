%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUUCGAGAGCACUUCUCGGGCCUAUCGAGUCAGCCAUCUCGUAGUCUGAAAAUUAGACUCCCAGGUCCCAAGUUCAGGGACAAGCCCGCCGUACAGAAACGAAAACCCAUGGCGUGAAGCGUAUUUUACCAU\
) } def
/len { sequence length } bind def

/coor [
[96.96025085 174.31060791]
[82.95932007 179.69335938]
[69.67205811 172.73284912]
[66.12585449 158.15806580]
[74.72988129 145.87121582]
[76.92395782 131.03254700]
[79.11803436 116.19388580]
[71.63053894 115.76100159]
[62.59102249 127.73125458]
[53.55150223 139.70152283]
[44.51198196 151.67176819]
[45.29542923 167.69569397]
[33.16115570 178.19039917]
[17.41753769 175.10527039]
[10.14173222 160.80693054]
[16.91511345 146.26387024]
[32.54172516 142.63224792]
[41.58124161 130.66200256]
[50.62076187 118.69174194]
[59.66028214 106.72148132]
[60.17992783 91.73048401]
[51.99097824 79.16302490]
[43.80202866 66.59555817]
[35.61307907 54.02809525]
[22.25181198 56.41708755]
[8.98685551 53.82125854]
[-2.39259028 46.63246536]
[-10.36676598 35.85923386]
[-13.88828087 22.98543167]
[-28.78834152 21.25678444]
[-43.68840027 19.52813721]
[-58.58845901 17.79949188]
[-68.99562073 29.30908203]
[-84.18724823 32.47040939]
[-98.32186127 26.06787682]
[-105.96440125 12.56339169]
[-104.17617035 -2.85029817]
[-93.64476776 -14.24631405]
[-78.41973114 -17.24265480]
[-64.35540771 -10.68716621]
[-56.85981369 2.89943171]
[-41.95975494 4.62807846]
[-27.05969429 6.35672474]
[-12.15963459 8.08537102]
[-12.85593033 -1.74879968]
[-10.69296455 -12.34193325]
[-19.73248482 -24.31219101]
[-28.77200317 -36.28245163]
[-37.81152344 -48.25270844]
[-46.85104370 -60.22296524]
[-55.89056396 -72.19322205]
[-64.93008423 -84.16348267]
[-79.30037689 -93.15965271]
[-74.63387299 -109.45873260]
[-57.67995071 -109.48664093]
[-52.95982361 -93.20300293]
[-43.92030334 -81.23274231]
[-34.88078308 -69.26248932]
[-25.84126472 -57.29222870]
[-16.80174637 -45.32196808]
[-7.76222610 -33.35171127]
[1.27729344 -21.38145256]
[8.70537186 -22.41762543]
[2.14367127 -35.90629196]
[12.94449425 -46.31504822]
[26.18143654 -39.25931549]
[23.56152725 -24.48997116]
[30.98960686 -25.52614403]
[36.40822983 -39.51322556]
[41.82685471 -53.50030899]
[47.24547958 -67.48739624]
[52.66410828 -81.47447968]
[44.96700668 -95.08655548]
[47.87117004 -110.45209503]
[60.00534439 -120.31596375]
[75.64014435 -120.02073669]
[87.39328766 -109.70581818]
[89.71530914 -94.24159241]
[81.50981140 -80.92979431]
[66.65119171 -76.05585480]
[61.23256302 -62.06876755]
[55.81393814 -48.08168411]
[50.39531326 -34.09460068]
[44.97668839 -20.10751915]
[60.98848724 1.49743247]
[61.43304062 26.61369705]
[48.18054199 45.83914566]
[56.36949158 58.40660858]
[64.55844116 70.97407532]
[72.74739075 83.54153442]
[123.44792175 82.17547607]
[138.41192627 83.21414185]
[153.37591553 84.25280762]
[168.33990479 85.29147339]
[183.30390930 86.33013916]
[189.43955994 72.46905518]
[199.94819641 61.54457092]
[213.56083679 54.87586212]
[228.63369751 53.26821136]
[243.34666443 56.91574860]
[255.92306519 65.37802124]
[264.84423828 77.63316345]
[269.03289795 92.20130920]
[267.98327637 107.32328033]
[261.82208252 121.17302704]
[251.29335022 132.07814026]
[237.66842651 138.72174072]
[222.59263611 140.30162048]
[207.88641357 136.62696838]
[195.32563782 128.14154053]
[186.42706299 115.86997223]
[182.26524353 101.29413605]
[167.30123901 100.25547028]
[152.33724976 99.21680450]
[137.37326050 98.17813873]
[122.40925598 97.13947296]
[114.51277924 109.89273071]
[122.11257935 122.82497406]
[129.71238708 135.75721741]
[137.31217957 148.68946838]
[144.91198730 161.62171936]
[160.26988220 165.35140991]
[168.42079163 178.89166260]
[164.52893066 194.20925903]
[150.90325928 202.21656799]
[135.62765503 198.16296387]
[127.76486969 184.45341492]
[131.97973633 169.22151184]
[124.37993622 156.28927612]
[116.78013611 143.35702515]
[109.18032837 130.42477417]
[101.58052826 117.49253082]
[94.09303284 117.05964661]
[94.56243896 132.05230713]
[95.03184509 147.04495239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[21 90]
[22 89]
[23 88]
[24 87]
[29 44]
[30 43]
[31 42]
[32 41]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
