%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCUCGAAUCGACUAACCACUUGUCACUAACCAAAGGCGAAACAAGUGUCACCGAUUCAAGACGUGGA\
) } def
/len { sequence length } bind def

/coor [
[127.18045044 291.78005981]
[124.50209808 277.02111816]
[121.82374573 262.26217651]
[119.14539337 247.50323486]
[116.46704102 232.74429321]
[106.58154297 221.60310364]
[111.73038483 206.64315796]
[109.05202484 191.88420105]
[106.37367249 177.12525940]
[103.69532013 162.36631775]
[101.01696777 147.60737610]
[98.33861542 132.84843445]
[85.79972839 129.66702271]
[75.45754242 121.89629364]
[68.91193390 110.73833466]
[67.17546844 97.91921997]
[70.51676178 85.42198944]
[78.41894531 75.17989349]
[89.65959167 68.77732086]
[88.31500244 53.83770752]
[86.97041321 38.89809036]
[85.62582397 23.95847702]
[84.28123474 9.01886368]
[82.93664551 -5.92075109]
[81.59205627 -20.86036491]
[69.74339294 -30.97209167]
[68.59261322 -46.14213943]
[78.30561829 -57.37570953]
[69.25797272 -64.12643433]
[65.67375183 -74.59469604]
[68.56589508 -85.04296875]
[76.68111420 -91.88941193]
[76.68111420 -106.88941193]
[70.63477325 -122.72853851]
[84.18111420 -132.92329407]
[97.72745514 -122.72853851]
[91.68111420 -106.88941193]
[91.68111420 -91.88941193]
[102.71862793 -76.25838470]
[93.24523163 -58.72029877]
[104.80797577 -49.40158081]
[106.38439941 -34.26984024]
[96.53166962 -22.20495605]
[97.87625885 -7.26534081]
[99.22084808 7.67427349]
[100.56543732 22.61388779]
[101.91002655 37.55350113]
[103.25461578 52.49311829]
[104.59920502 67.43273163]
[120.13028717 73.98940277]
[130.37275696 87.37956238]
[132.63571167 104.08535767]
[126.32463074 119.71784973]
[113.09755707 130.17007446]
[115.77590942 144.92901611]
[118.45426941 159.68797302]
[121.13262177 174.44691467]
[123.81097412 189.20585632]
[126.48932648 203.96479797]
[136.56640625 216.16165161]
[131.22598267 230.06593323]
[133.90434265 244.82487488]
[136.58268738 259.58383179]
[139.26104736 274.34277344]
[141.93939209 289.10171509]
[154.25489807 299.38314819]
[153.75111389 315.41827393]
[140.81448364 324.90634155]
[125.36889648 320.56890869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[28 40]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
