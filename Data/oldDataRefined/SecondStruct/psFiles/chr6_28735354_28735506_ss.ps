%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUUUUCUGACCUUGAUUCAUAAGUUUCUGACUUUGCUUUACAAGUUGCUAUCUAUAUUCCUUUACAUGAACACCUUCACGACCCCUAGCUUGGGUCUCGGAGUACUUACAAUUCGUAUGCGAGAUGGUGACUCGAUGUGGGGGUGAAUG\
) } def
/len { sequence length } bind def

/coor [
[-1.52224958 856.69134521]
[-4.88113213 841.00384521]
[5.40063715 828.68865967]
[5.40063715 813.68865967]
[5.40063715 798.68865967]
[-2.94658279 789.88159180]
[-3.03364182 777.34600830]
[5.73406506 767.83251953]
[6.04004335 752.83569336]
[6.34602118 737.83880615]
[6.65199947 722.84191895]
[-0.82407331 709.95947266]
[7.19312048 696.32000732]
[7.49909830 681.32312012]
[0.02302579 668.44067383]
[8.04021931 654.80120850]
[8.34619713 639.80432129]
[8.65217590 624.80743408]
[8.95815372 609.81054688]
[1.48208106 596.92810059]
[9.49927521 583.28863525]
[9.80525303 568.29174805]
[10.11123085 553.29486084]
[10.41720867 538.29797363]
[2.25137663 529.32250977]
[2.42004299 516.78778076]
[11.37998676 507.45510864]
[11.99181557 492.46759033]
[12.60364437 477.48007202]
[13.21547318 462.49255371]
[13.82730198 447.50503540]
[2.55417442 457.40032959]
[-12.43730450 457.90585327]
[-24.35143471 448.79248047]
[-27.78749084 434.19134521]
[-21.18789482 420.72119141]
[-7.54427004 414.48806763]
[6.95866966 418.31753540]
[15.74639225 430.47262573]
[18.48493958 415.72473145]
[11.88591290 405.54177856]
[14.08893299 393.20098877]
[24.44615555 385.44812012]
[27.48496819 370.75915527]
[30.52378082 356.07019043]
[25.52530670 342.03936768]
[35.89791107 330.09283447]
[38.93672180 315.40386963]
[41.97553635 300.71490479]
[45.01435089 286.02593994]
[48.05316162 271.33697510]
[46.31799698 264.10614014]
[51.30668640 256.38076782]
[54.64450073 241.75685120]
[46.58252335 233.58515930]
[43.46063614 222.41371155]
[46.17391205 211.01240540]
[54.15538788 202.26707458]
[65.48985291 198.44912720]
[69.42137909 183.97351074]
[73.35290527 169.49790955]
[77.28443146 155.02230835]
[81.21595764 140.54670715]
[85.14748383 126.07109833]
[77.38563538 119.72029877]
[72.15019989 111.16639709]
[70.02606964 101.36502075]
[71.25054169 91.41114044]
[75.68682098 82.41679382]
[82.83930206 75.38678741]
[91.90892792 71.10649872]
[91.60295105 56.10962296]
[91.29697418 41.11274338]
[90.99099731 26.11586380]
[82.04507446 12.37168503]
[89.71511841 -2.12322354]
[106.11085510 -2.45774198]
[114.36575317 11.71225357]
[105.98787689 25.80988693]
[106.29385376 40.80676651]
[106.59983063 55.80364227]
[106.90580750 70.80052185]
[108.74658966 71.29814148]
[110.55204773 71.91167450]
[119.16961670 59.63415527]
[127.78717804 47.35663223]
[136.40475464 35.07910919]
[145.02230835 22.80158806]
[140.81758118 7.73990679]
[147.32507324 -6.47932529]
[161.47215271 -13.14222145]
[176.57899475 -9.10276604]
[185.51261902 3.73173356]
[184.05484009 19.30121994]
[172.89396667 30.25425529]
[157.29983521 31.41915512]
[148.68226624 43.69667816]
[140.06469727 55.97419739]
[131.44714355 68.25171661]
[122.82956696 80.52924347]
[129.95623779 101.70973206]
[120.46597290 121.94182587]
[99.62308502 130.00262451]
[95.69155884 144.47822571]
[91.76003265 158.95384216]
[87.82850647 173.42944336]
[83.89698029 187.90504456]
[79.96545410 202.38064575]
[90.01092529 218.38751221]
[85.30798340 236.36264038]
[69.26841736 245.09466553]
[65.93060303 259.71859741]
[62.74212646 274.37579346]
[59.70331192 289.06475830]
[56.66449738 303.75372314]
[53.62568665 318.44268799]
[50.58687210 333.13165283]
[55.36799240 348.21313477]
[45.21274185 359.10900879]
[42.17393112 373.79797363]
[39.13511658 388.48693848]
[45.33961105 405.79473877]
[33.23283386 418.46328735]
[30.49428558 433.21118164]
[28.81481934 448.11688232]
[28.20298958 463.10440063]
[27.59116173 478.09191895]
[26.97933197 493.07940674]
[26.36750412 508.06692505]
[35.30165863 524.13665771]
[25.41408730 538.60394287]
[25.10811043 553.60083008]
[24.80213165 568.59771729]
[24.49615288 583.59460449]
[31.95034027 597.54974365]
[23.95503235 610.11651611]
[23.64905548 625.11340332]
[23.34307671 640.11029053]
[23.03709793 655.10717773]
[30.49128532 669.06231689]
[22.49597740 681.62908936]
[22.18999863 696.62597656]
[29.64418602 710.58111572]
[21.64887810 723.14788818]
[21.34289932 738.14477539]
[21.03692245 753.14166260]
[20.73094368 768.13854980]
[29.99103928 784.02264404]
[20.40063667 798.68865967]
[20.40063667 813.68865967]
[20.40063667 828.68865967]
[30.68240547 841.00384521]
[27.32352448 856.69134521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 151]
[4 150]
[5 149]
[8 147]
[9 146]
[10 145]
[11 144]
[13 142]
[14 141]
[16 139]
[17 138]
[18 137]
[19 136]
[21 134]
[22 133]
[23 132]
[24 131]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[39 124]
[40 123]
[43 121]
[44 120]
[45 119]
[47 117]
[48 116]
[49 115]
[50 114]
[51 113]
[53 112]
[54 111]
[59 108]
[60 107]
[61 106]
[62 105]
[63 104]
[64 103]
[71 82]
[72 81]
[73 80]
[74 79]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
