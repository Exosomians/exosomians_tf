%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAACGUCGCUCCUCCGUUGUCUUGGAUCUUGAGGCGCGCCGUCCACUCUUAAGUUGGUGAAUUGGUGGCCACGAUUUGCAUCAAUGUA\
) } def
/len { sequence length } bind def

/coor [
[140.99948120 142.08786011]
[132.82795715 129.34936523]
[130.14888000 114.41288757]
[115.50903320 111.14568329]
[103.22180176 118.82488251]
[89.08016968 115.66886902]
[81.22376251 103.49417877]
[66.58390808 100.22697449]
[51.94405365 96.95977020]
[36.78992844 101.50543213]
[26.05352211 91.18173218]
[11.41366673 87.91452789]
[-3.22618961 84.64732361]
[-18.38031387 89.19299316]
[-29.11672020 78.86928558]
[-43.75657654 75.60208130]
[-58.39643097 72.33488464]
[-73.03628540 69.06768036]
[-91.77622223 76.10948181]
[-105.69956970 62.87102127]
[-120.52659607 60.59960175]
[-135.35362244 58.32818604]
[-147.94238281 67.88322449]
[-163.58885193 65.65531158]
[-173.01025391 52.96623993]
[-170.61705017 37.34420013]
[-157.82907104 28.05747604]
[-142.23320007 30.61571693]
[-133.08219910 43.50116348]
[-118.25518036 45.77257919]
[-103.42815399 48.04399490]
[-95.55690765 41.14008331]
[-84.95002747 39.79239655]
[-75.20550537 44.70838165]
[-69.76908112 54.42782211]
[-55.12923050 57.69502640]
[-40.48937225 60.96222687]
[-25.84951782 64.22943115]
[-11.74253273 59.45007324]
[0.04101378 70.00746918]
[14.68087006 73.27467346]
[29.32072639 76.54187775]
[43.42771149 71.76251984]
[55.21125793 82.31991577]
[69.85111237 85.58711243]
[84.49096680 88.85431671]
[96.77819824 81.17511749]
[110.91983032 84.33113098]
[118.77623749 96.50582123]
[133.41609192 99.77302551]
[142.19146729 87.39286804]
[155.00363159 79.33733368]
[169.88362122 76.80759430]
[184.55874634 80.15844727]
[196.79968262 88.84892273]
[204.75912476 101.52931976]
[207.25056458 116.25080109]
[221.89042664 119.51800537]
[236.53028870 122.78520966]
[251.17013550 126.05241394]
[265.80999756 129.31961060]
[280.44985962 132.58682251]
[295.08969116 135.85401917]
[309.83154297 138.62490845]
[324.65856934 140.89633179]
[339.48559570 143.16775513]
[354.31262207 145.43916321]
[369.13964844 147.71058655]
[380.76916504 137.25648499]
[396.39935303 136.77514648]
[408.65008545 146.49386597]
[411.73696899 161.82374573]
[404.20245361 175.52648926]
[389.60412598 181.13208008]
[374.83483887 175.99372864]
[366.86822510 162.53761292]
[352.04119873 160.26618958]
[337.21420288 157.99476624]
[322.38717651 155.72335815]
[307.56015015 153.45193481]
[303.10083008 155.63717651]
[297.20135498 154.89350891]
[291.82250977 150.49388123]
[277.18264771 147.22666931]
[262.54278564 143.95947266]
[247.90293884 140.69227600]
[233.26307678 137.42506409]
[218.62321472 134.15786743]
[203.98336792 130.89065552]
[195.46922302 143.15600586]
[182.87371826 151.24911499]
[168.09934998 153.91053772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[7 46]
[8 45]
[9 44]
[11 42]
[12 41]
[13 40]
[15 38]
[16 37]
[17 36]
[18 35]
[20 31]
[21 30]
[22 29]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
