%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUGAAGGUAUAUAUGUAAGGAACCUUUCGACUUGUUUUACUCACUUUUGAGAUAUGGCAGUAGGAGCAGUUUGACUCC\
) } def
/len { sequence length } bind def

/coor [
[98.07242584 307.57214355]
[93.75605011 293.05844116]
[94.38861847 277.92968750]
[99.90153503 263.82699585]
[109.69679260 252.28005981]
[122.71187592 244.54142761]
[119.62697601 229.86207581]
[116.54207611 215.18272400]
[106.35268402 204.31875610]
[111.08644867 189.22233582]
[108.00154877 174.54298401]
[104.91664886 159.86363220]
[101.83174896 145.18428040]
[98.74684906 130.50492859]
[95.66195679 115.82556915]
[85.52279663 104.77127075]
[71.16400146 100.43248749]
[56.80521011 96.09370422]
[42.44641495 91.75492859]
[28.08762169 87.41614532]
[18.16605759 98.96960449]
[4.40026474 105.48288727]
[-10.82475185 105.82752228]
[-24.87116432 99.94380188]
[-35.30534744 88.85111237]
[-40.31951523 74.47133636]
[-39.04493713 59.29584885]
[-31.70243454 45.95390320]
[-19.56414413 36.75706482]
[-4.73309898 33.29874802]
[10.22113419 36.17811966]
[22.70764351 44.89631653]
[30.56306648 57.94285965]
[32.42640305 73.05735016]
[46.78519821 77.39613342]
[61.14399338 81.73491669]
[75.50278473 86.07369232]
[89.86157990 90.41247559]
[79.34067535 79.72086334]
[65.26742554 74.53012848]
[54.69011688 63.89432144]
[49.57707977 49.79265976]
[50.87980270 34.84933472]
[58.35586929 21.84516525]
[70.61404419 13.20010185]
[85.37319946 10.52291203]
[99.88678741 14.31179619]
[111.45397186 23.86167908]
[117.92220306 37.39541245]
[118.08780670 52.39450073]
[111.92121124 66.06606293]
[107.08111572 80.26372528]
[118.13541412 70.12457275]
[129.18971252 59.98541641]
[140.24401855 49.84626007]
[144.64903259 34.04981232]
[160.59687805 30.22905540]
[171.68177795 42.31446075]
[166.50053406 57.87360001]
[150.38317871 60.90056229]
[139.32887268 71.03971863]
[128.27456665 81.17887115]
[117.22027588 91.31802368]
[131.44236755 86.55022430]
[145.19015503 92.55010223]
[151.36560059 106.21991730]
[146.78031921 120.50190735]
[133.80171204 128.02224731]
[119.13064575 124.89817810]
[110.34130859 112.74066925]
[113.42620850 127.42002869]
[116.51110077 142.09938049]
[119.59600067 156.77873230]
[122.68090057 171.45808411]
[125.76580048 186.13743591]
[136.17584229 198.05136108]
[131.22143555 212.09782410]
[134.30633545 226.77717590]
[137.39122009 241.45652771]
[152.42034912 243.30160522]
[166.03495789 249.92890930]
[176.75825500 260.61953735]
[183.42704773 274.21386719]
[185.31794739 289.23730469]
[182.22587585 304.06018066]
[174.48620605 317.07464600]
[162.93847656 326.86895752]
[148.83532715 332.38076782]
[133.70654297 333.01211548]
[119.19319153 328.69458008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[8 77]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
