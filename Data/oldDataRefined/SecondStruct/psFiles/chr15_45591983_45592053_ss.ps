%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGACCAGUCUCACGUCACCACAAAUGUUGAUUAACUAGUGUUGGUCAAUGUCUAAAGAAACAAGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[72.58806610 167.04525757]
[62.50255203 161.97114563]
[53.32804108 155.39141846]
[45.28743744 147.46595764]
[33.00015640 156.06961060]
[20.71287727 164.67324829]
[21.42740059 180.08406067]
[13.67701912 193.42329407]
[-0.06515128 200.43444824]
[-15.41403198 198.88029480]
[-27.47185135 189.25674438]
[-32.39100266 174.63465881]
[-28.60180473 159.67988586]
[-17.31337547 149.16442871]
[-2.12781000 146.44372559]
[12.10923100 152.38597107]
[24.39651108 143.78231812]
[36.68379211 135.17868042]
[29.34784698 115.96104431]
[27.71006393 95.45613861]
[31.90253067 75.31769562]
[41.58712006 57.16990662]
[55.98276138 42.47640228]
[73.92843628 32.42222977]
[93.97680664 27.81826782]
[114.51094818 29.03582764]
[119.02153778 14.73007298]
[123.53211975 0.42431873]
[128.04270935 -13.88143539]
[132.55329895 -28.18718910]
[137.06388855 -42.49294281]
[141.57447815 -56.79869843]
[146.08505249 -71.10445404]
[150.59564209 -85.41020966]
[155.10623169 -99.71595764]
[159.61682129 -114.02171326]
[164.12741089 -128.32746887]
[160.05165100 -144.21206665]
[171.95793152 -155.48915100]
[187.59806824 -150.55783081]
[190.88284302 -134.49102783]
[178.43316650 -123.81687927]
[173.92257690 -109.51113129]
[169.41198730 -95.20537567]
[164.90139771 -80.89962006]
[160.39080811 -66.59386444]
[155.88021851 -52.28811264]
[151.36964417 -37.98235703]
[146.85905457 -23.67660332]
[142.34846497 -9.37084866]
[137.83787537 4.93490553]
[133.32728577 19.24065971]
[128.81669617 33.54641342]
[138.79321289 38.83164215]
[147.82722473 45.60296249]
[155.69927979 53.69587326]
[162.21809387 62.91375351]
[167.22532654 73.03265381]
[170.59928894 83.80672455]
[172.25802612 94.97422028]
[172.16125488 106.26380920]
[170.31129456 117.40122986]
[166.75311279 128.11587524]
[161.57316589 138.14744568]
[154.89726257 147.25221252]
[146.88763428 155.20896912]
[137.73886108 161.82443237]
[127.67321014 166.93785095]
[116.93523407 170.42498779]
[105.78581238 172.20114136]
[94.49582672 172.22315979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
