%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUAACCCCGGAUUAUAGGGAUGGGGUGUUGUUAUGUUGAAUGAUGGAGUGGGACCGUACUCGUCUUA\
) } def
/len { sequence length } bind def

/coor [
[99.31681824 168.40115356]
[82.71221924 166.18395996]
[67.14443970 159.99746704]
[53.54713058 150.21269226]
[42.73577881 137.41647339]
[35.35877991 122.37625122]
[31.85856056 105.99403381]
[16.86223030 105.66220093]
[1.86590195 105.33037567]
[-13.13042736 104.99854279]
[-28.12675667 104.66670990]
[-43.12308502 104.33487701]
[-50.47810364 117.75733185]
[-63.23478699 126.21461487]
[-78.46174622 127.76330566]
[-92.65992737 122.04752350]
[-102.56669617 110.38071442]
[-105.90555573 95.44382477]
[-101.90925598 80.66924286]
[-91.49612427 69.45206451]
[-77.05900574 64.36991119]
[-61.91545868 66.59062195]
[-49.54535294 75.60389709]
[-42.79125595 89.33854675]
[-27.79492569 89.67037964]
[-12.79859543 90.00221252]
[2.19773316 90.33404541]
[17.19406319 90.66587830]
[32.19039154 90.99770355]
[35.25168228 77.93556213]
[40.80360413 65.72215271]
[48.63259506 54.82728577]
[58.43750381 45.67005157]
[69.84117126 38.60269165]
[82.40493774 33.89706421]
[95.64552307 31.73417473]
[109.05360413 32.19722366]
[122.11343384 35.26839828]
[134.32263184 40.82955933]
[145.21157837 48.66679382]
[154.36138916 58.47863007]
[161.42012024 69.88764191]
[166.11622620 82.45496368]
[168.26910400 95.69718170]
[167.79589844 109.10491943]
[182.35389709 112.71942902]
[196.91189575 116.33394623]
[211.46989441 119.94846344]
[220.88446045 118.97867584]
[226.58477783 124.05828094]
[240.96864319 128.31320190]
[255.35250854 132.56813049]
[269.73638916 136.82305908]
[283.50125122 129.05751038]
[298.70291138 133.38011169]
[306.32250977 147.22631836]
[301.83944702 162.38143921]
[287.91342163 169.85420227]
[272.80654907 165.21115112]
[265.48144531 151.20692444]
[251.09757996 146.95199585]
[236.71371460 142.69706726]
[222.32984924 138.44213867]
[207.85537720 134.50645447]
[193.29737854 130.89195251]
[178.73937988 127.27742767]
[164.18139648 123.66291046]
[156.50544739 138.55279541]
[145.44067383 151.13052368]
[131.65063477 160.64175415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[45 67]
[46 66]
[47 65]
[48 64]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
