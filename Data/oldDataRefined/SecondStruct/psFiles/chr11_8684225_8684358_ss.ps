%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGCUCCGAUCUCAGUGCGAACCCAUAGCCGAUAACGGACUCACACGAUCUCAGGAGCUUCUCAUUGACGACUGGAAUAAGUGACCGACACCCGGAAUACCGUGUCAGUCAGUGGUCCAAUCUCUGUACGAA\
) } def
/len { sequence length } bind def

/coor [
[63.83813477 109.61889648]
[48.86351395 110.49107361]
[35.53657532 119.01769257]
[22.38095093 112.03350830]
[7.40632772 112.90567780]
[-7.56829453 113.77784729]
[-22.54291725 114.65002441]
[-37.51753998 115.52219391]
[-52.49216080 116.39437103]
[-67.45561981 117.44071198]
[-82.40589905 118.66109467]
[-92.61574554 130.42530823]
[-107.79483795 131.44996643]
[-118.94729614 121.64394379]
[-133.89756775 122.86432648]
[-142.28547668 126.71194458]
[-149.20922852 123.93502045]
[-164.18385315 124.80718994]
[-179.15847778 125.67936707]
[-192.48542786 134.20597839]
[-205.64103699 127.22179413]
[-220.61566162 128.09396362]
[-231.09649658 139.61743164]
[-246.29531860 140.28862000]
[-257.21658325 130.22572327]
[-272.19119263 131.09790039]
[-277.95516968 145.23081970]
[-289.28610229 155.45689392]
[-303.93426514 159.74569702]
[-318.99127197 157.24571228]
[-331.46749878 148.45329285]
[-338.88580322 135.11419678]
[-339.77325439 119.87690735]
[-333.95370483 105.76679230]
[-322.58255005 95.58542633]
[-307.91763306 91.35433197]
[-292.87060547 93.91359711]
[-280.42907715 102.75507355]
[-273.06338501 116.12328339]
[-258.08874512 115.25110626]
[-248.40956116 103.98838806]
[-233.23559570 102.89055634]
[-221.48783875 113.11934662]
[-206.51321411 112.24717712]
[-194.25735474 103.78294373]
[-180.03065491 110.70474243]
[-165.05603027 109.83256531]
[-150.08140564 108.96039581]
[-135.11795044 107.91404724]
[-120.16767120 106.69367218]
[-110.75318146 95.20877075]
[-95.60885620 93.75816345]
[-83.62627411 103.71082306]
[-68.67600250 102.49044037]
[-62.20609665 98.77693939]
[-53.36433411 101.41974640]
[-38.38971329 100.54756927]
[-23.41508865 99.67539978]
[-8.44046688 98.80323029]
[6.53415537 97.93105316]
[21.50877762 97.05888367]
[33.76463318 88.59465027]
[47.99134064 95.51644897]
[62.96596527 94.64427948]
[70.62234497 76.82335663]
[86.17188263 65.22951508]
[105.43675232 62.97777176]
[123.24087524 70.67313385]
[134.80065918 86.24800110]
[149.57278442 83.64328003]
[157.56674194 79.03266144]
[164.71864319 81.15400696]
[179.54736328 78.89371490]
[192.02406311 69.16527557]
[205.77191162 74.89640808]
[220.60063171 72.63612366]
[235.42936707 70.37583923]
[250.25808716 68.11555481]
[256.97253418 56.37635803]
[269.05853271 50.75665665]
[281.97799683 53.11796188]
[291.02185059 62.37046051]
[303.72152710 52.93497086]
[317.33230591 58.98445129]
[332.20959473 57.06982803]
[347.08691406 55.15520477]
[361.96423340 53.24057770]
[374.66390991 43.80509186]
[388.27468872 49.85457230]
[403.15197754 47.93994904]
[418.02929688 46.02532196]
[432.90658569 44.11069870]
[447.78390503 42.19607162]
[453.38650513 38.41321182]
[459.17898560 38.14021683]
[463.39596558 40.55517960]
[478.34625244 39.33479691]
[491.51901245 29.56699371]
[506.45489502 36.33840942]
[507.78909302 52.68319321]
[494.14913940 61.78723145]
[479.56661987 54.28507233]
[464.61636353 55.50545120]
[449.69851685 57.07337952]
[434.82122803 58.98800278]
[419.94390869 60.90262985]
[405.06661987 62.81725311]
[390.18930054 64.73188019]
[378.55374146 74.03041840]
[363.87884521 68.11788177]
[349.00152588 70.03250885]
[334.12423706 71.94713593]
[319.24691772 73.86175537]
[307.61135864 83.16030121]
[292.93646240 77.24776459]
[283.28402710 90.96921539]
[266.36816406 93.55883789]
[252.51837158 82.94428253]
[237.68965149 85.20456696]
[222.86091614 87.46485138]
[208.03219604 89.72513580]
[196.61614990 99.29190826]
[181.80764771 93.72244263]
[166.97892761 95.98272705]
[152.17750549 98.41539764]
[137.40538025 101.02011871]
[135.60469055 111.51126862]
[130.92282104 121.07090759]
[123.73860931 128.92546082]
[114.63344574 134.43930054]
[104.34411621 137.16627502]
[93.70325470 136.88569641]
[83.57192993 133.62026978]
[74.76999664 127.63423157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 54]
[11 53]
[14 50]
[15 49]
[17 48]
[18 47]
[19 46]
[21 44]
[22 43]
[25 40]
[26 39]
[69 126]
[70 125]
[72 124]
[73 123]
[75 121]
[76 120]
[77 119]
[78 118]
[82 115]
[84 113]
[85 112]
[86 111]
[87 110]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
