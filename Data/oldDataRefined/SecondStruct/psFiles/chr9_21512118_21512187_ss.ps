%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUACCGUUAUACAACCGUAUCGUCCAAGGGUCAAGUUGUCGAUACGGUCGUAGAACGGAGGAGAGGUC\
) } def
/len { sequence length } bind def

/coor [
[124.10852051 230.71495056]
[120.17283630 216.24047852]
[116.23715210 201.76600647]
[112.30146790 187.29153442]
[107.34921265 181.48023987]
[108.52703094 172.08941650]
[105.23545074 157.45503235]
[101.94387817 142.82063293]
[98.65229797 128.18623352]
[95.36071777 113.55184174]
[86.02518463 103.14322662]
[90.00488281 89.73973083]
[86.71331024 75.10533905]
[83.42173004 60.47094345]
[72.84472656 48.70499420]
[77.60058594 34.59006882]
[74.30900574 19.95567513]
[71.01743317 5.32128048]
[67.72585297 -9.31311417]
[64.43427277 -23.94750977]
[61.14269638 -38.58190536]
[57.85112000 -53.21630096]
[54.55954361 -67.85069275]
[51.26796341 -82.48509216]
[40.66239929 -90.18661499]
[38.35729218 -102.67745209]
[45.07365036 -112.97779083]
[42.43262100 -127.74346161]
[39.79159546 -142.50912476]
[25.77005005 -149.15562439]
[18.36266136 -162.79051208]
[20.41772079 -178.17089844]
[31.14501572 -189.38272095]
[46.41968155 -192.11479187]
[60.36829758 -185.31657410]
[67.62734222 -171.60212708]
[65.40555573 -156.24493408]
[54.55726242 -145.15016174]
[57.19829178 -130.38449097]
[59.83931732 -115.61882019]
[71.87252808 -103.03674316]
[65.90235901 -85.77666473]
[69.19393921 -71.14227295]
[72.48551178 -56.50787735]
[75.77709198 -41.87348175]
[79.06867218 -27.23908806]
[82.36024475 -12.60469246]
[85.65182495 2.02970290]
[88.94340515 16.66409874]
[92.23497772 31.29849243]
[102.57654572 42.01769257]
[98.05612183 57.17936707]
[101.34770203 71.81375885]
[104.63928223 86.44815826]
[113.97481537 96.85677338]
[109.99511719 110.26026917]
[113.28668976 124.89466095]
[116.57826996 139.52905273]
[119.86985016 154.16345215]
[123.16142273 168.79785156]
[126.77593994 183.35585022]
[130.71162415 197.83032227]
[134.64730835 212.30479431]
[138.58299255 226.77926636]
[152.85464478 233.17098999]
[159.63227844 247.26345825]
[155.71572876 262.40261841]
[142.95423889 271.44024658]
[127.37342834 270.10903931]
[116.33005524 259.03756714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
