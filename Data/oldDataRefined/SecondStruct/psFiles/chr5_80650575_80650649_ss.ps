%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUUCCAAAAAAGGAUCACAGGUUUCUCGACAAGGAGAAACCUGAUUGUCAAUUUAAAUGUCCCCCUAAACCU\
) } def
/len { sequence length } bind def

/coor [
[100.90126801 140.23072815]
[98.24732208 125.46737671]
[98.25421143 110.46194458]
[86.04647827 119.17809296]
[79.31119537 133.49404907]
[64.45715332 134.59257507]
[52.24942398 143.30873108]
[40.04169083 152.02488708]
[37.68793106 167.65290833]
[24.92344475 176.97189331]
[9.32117271 174.45303345]
[0.13766667 161.59074402]
[2.82133865 146.01596069]
[15.78001404 136.96896362]
[31.32553864 139.81715393]
[43.53327179 131.10099792]
[55.74100113 122.38484955]
[61.60310745 108.69232941]
[77.33032990 106.97035980]
[89.53805542 98.25421143]
[93.81809998 83.87779999]
[88.36547852 69.90393066]
[82.91286469 55.93006516]
[77.46024323 41.95619965]
[72.00762177 27.98233414]
[66.55500031 14.00846672]
[61.10238266 0.03460081]
[55.64976501 -13.93926525]
[50.19714355 -27.91313171]
[44.74452591 -41.88699722]
[30.17252159 -48.00518799]
[24.27219582 -62.66675949]
[30.54410744 -77.17326355]
[45.26724243 -82.91825104]
[59.70662308 -76.49331665]
[65.29562378 -61.71026611]
[58.71839142 -47.33961868]
[64.17101288 -33.36575317]
[69.62363434 -19.39188576]
[75.07624817 -5.41801882]
[80.52886963 8.55584717]
[85.98149109 22.52971458]
[91.43411255 36.50358200]
[96.88672638 50.47744751]
[102.33934784 64.45130920]
[107.79196930 78.42517853]
[115.99001312 65.86364746]
[126.28589630 54.95517349]
[138.35317993 46.04560089]
[151.80929565 39.41740036]
[166.22761536 35.28071976]
[181.15101624 33.76670456]
[196.10635376 34.92335892]
[210.61947632 38.71401215]
[224.23027039 45.01848221]
[236.50720215 53.63689423]
[247.06103516 64.29599762]
[255.55717468 76.65785980]
[261.72625732 90.33055115]
[265.37268066 104.88058472]
[266.38085938 119.84667206]
[264.71881104 134.75430298]
[260.43920898 149.13085938]
[253.67779541 162.52052307]
[244.64889526 174.49879456]
[233.63877869 184.68589783]
[220.99650574 192.75888062]
[207.12289429 198.46176147]
[192.45779419 201.61375427]
[177.46617126 202.11492920]
[162.62332153 199.94938660]
[148.39981079 195.18579102]
[135.24661255 187.97515869]
[123.58071136 178.54609680]
[113.77199554 167.19757080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[6 17]
[7 16]
[8 15]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
