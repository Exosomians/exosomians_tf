%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUCGAGUCUUUUAUGGAAAGUCAGUGUGUAACUAGUCUGACCCCGCCAUAAGUUGAGUAGUGACCACUCGUCGUUAA\
) } def
/len { sequence length } bind def

/coor [
[156.90049744 253.75468445]
[151.77018738 239.65928650]
[146.63989258 225.56390381]
[141.50959778 211.46850586]
[136.10691833 197.47525024]
[130.43392944 183.58940125]
[124.76092529 169.70353699]
[107.61330414 163.87461853]
[99.79964447 147.19020081]
[106.52479553 129.70320129]
[99.79280853 116.29870605]
[85.57836151 107.59651947]
[86.44167328 90.95220184]
[79.19498444 77.81883240]
[71.94829559 64.68545532]
[64.70160675 51.55208588]
[57.45491791 38.41871262]
[50.20822906 25.28533745]
[42.96154022 12.15196419]
[26.26958275 10.35315418]
[13.99482822 -0.85801315]
[10.75937748 -16.99643326]
[17.62538338 -31.77431488]
[9.87489223 -44.61681747]
[2.12440133 -57.45932388]
[-5.62608910 -70.30182648]
[-13.37658024 -83.14432526]
[-28.45661354 -87.04693604]
[-36.13376617 -100.18146515]
[-32.32029724 -114.53392792]
[-40.07078934 -127.37642670]
[-54.68278503 -134.82099915]
[-55.27127075 -151.20957947]
[-41.23086166 -159.68301392]
[-27.00512886 -151.52455139]
[-27.22828484 -135.12692261]
[-19.47779465 -122.28441620]
[-5.00204515 -118.96955872]
[3.04100084 -106.05583954]
[-0.53407627 -90.89482117]
[7.21641445 -78.05231476]
[14.96690464 -65.20981598]
[22.71739578 -52.36730957]
[30.46788597 -39.52480698]
[43.96194458 -39.59709930]
[55.79150009 -32.88048172]
[62.75498962 -21.06770897]
[62.90574265 -7.24695349]
[56.09491348 4.90527487]
[63.34160233 18.03864861]
[70.58829498 31.17202187]
[77.83498383 44.30539703]
[85.08167267 57.43877029]
[92.32836151 70.57214355]
[99.57505035 83.70551300]
[110.69023895 87.69513702]
[116.19398499 98.14374542]
[113.19729614 109.56671906]
[119.92928314 122.97120667]
[132.02975464 124.51323700]
[141.71037292 131.73365784]
[146.53987122 142.66999817]
[145.37898254 154.44660950]
[138.64678955 164.03053284]
[144.31979370 177.91639709]
[149.99278259 191.80226135]
[156.29492188 198.78039551]
[155.60498047 206.33821106]
[160.73527527 220.43359375]
[165.86558533 234.52899170]
[170.99588013 248.62437439]
[186.13516235 251.21237183]
[197.94192505 261.03561401]
[203.24018860 275.45172119]
[200.60475159 290.58282471]
[190.74455261 302.35870361]
[176.31190491 307.61175537]
[161.18914795 304.92892456]
[149.44421387 295.03186035]
[144.23641968 280.58282471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 66]
[6 65]
[7 64]
[10 59]
[11 58]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
