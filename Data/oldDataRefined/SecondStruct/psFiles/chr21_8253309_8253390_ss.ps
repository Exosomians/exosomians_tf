%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAGCCGGCCCGGGGCCCGGGAGCUGGCCUGGCCACGCGCCCGCGACGCCGGCGUGCCGCGCUGACAGGGGCCCGGCCCGU\
) } def
/len { sequence length } bind def

/coor [
[74.88845825 344.03671265]
[60.85753250 350.66339111]
[45.61751175 347.74423218]
[35.02849579 336.40173340]
[33.16217041 320.99731445]
[40.73617935 307.45428467]
[54.83816528 300.98019409]
[57.66003799 286.24801636]
[60.48191071 271.51583862]
[55.27707291 257.56024170]
[65.47238159 245.46203613]
[68.29425812 230.72985840]
[71.11612701 215.99768066]
[73.93800354 201.26550293]
[76.75987244 186.53332520]
[71.55503845 172.57772827]
[81.75034332 160.47953796]
[84.57221985 145.74736023]
[87.39408875 131.01518250]
[89.93666840 116.23223877]
[81.43830872 104.49664307]
[83.62368011 90.17287445]
[95.23492432 81.50539398]
[97.49729156 66.67698669]
[99.75965118 51.84857941]
[101.74099731 36.98001480]
[103.44061279 22.07661438]
[105.14022827 7.17321444]
[106.83984375 -7.73018456]
[107.69102478 -22.70601463]
[107.69102478 -37.70601654]
[107.69102478 -52.70601654]
[107.69102478 -67.70601654]
[107.69102478 -82.70601654]
[96.79647064 -93.83914185]
[97.01015472 -109.05126953]
[107.69102478 -119.36895752]
[107.69102478 -134.36895752]
[107.69102478 -149.36895752]
[99.02732086 -163.29275513]
[106.99144745 -177.62818909]
[123.39059448 -177.62818909]
[131.35472107 -163.29275513]
[122.69102478 -149.36895752]
[122.69102478 -134.36895752]
[122.69102478 -119.36895752]
[133.37190247 -109.05126953]
[133.58557129 -93.83914185]
[122.69102478 -82.70601654]
[122.69102478 -67.70601654]
[122.69102478 -52.70601654]
[122.69102478 -37.70601654]
[122.69102478 -22.70601463]
[125.15525055 -19.85632515]
[126.21796417 -15.57989025]
[125.18110657 -10.62221813]
[121.74324036 -6.03056955]
[120.04363251 8.87282944]
[118.34401703 23.77622986]
[116.64440155 38.67962646]
[119.07613373 45.86045074]
[114.58806610 54.11094284]
[112.32569885 68.93935394]
[110.06333160 83.76776123]
[118.56169128 95.50335693]
[116.37631989 109.82712555]
[104.76507568 118.49460602]
[106.58867645 127.70806885]
[102.12626648 133.83705139]
[99.30439758 148.56922913]
[96.48252106 163.30140686]
[101.48551941 178.31076050]
[91.49205017 189.35520935]
[88.67018127 204.08738708]
[85.84830475 218.81956482]
[83.02642822 233.55174255]
[80.20455933 248.28390503]
[85.20755768 263.29327393]
[75.21408844 274.33770752]
[72.39221191 289.06988525]
[69.57034302 303.80206299]
[80.28178406 315.02902222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 81]
[8 80]
[9 79]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[17 71]
[18 70]
[19 69]
[20 67]
[23 64]
[24 63]
[25 62]
[26 60]
[27 59]
[28 58]
[29 57]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[37 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
