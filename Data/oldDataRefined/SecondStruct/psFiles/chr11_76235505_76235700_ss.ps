%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGCUGCCGAGCAACCAGAUCCCCAUACUAAGAGCGAAUCCCACGCUCUCCAGGGCCCAAGUUUAGGGCCUGCUCGGGAGUAAAAGAAAGGGAAGGAAAAAGGCGUAGAGGAAGGAAAAGGACGUAGAGGCAAGAGAUUUAUGUCUUGAAUAGCUCGACCUUCUUAAGAAAUCUAUCGUCGGUCCCACGUUUUU\
) } def
/len { sequence length } bind def

/coor [
[302.84396362 93.94674683]
[290.16567993 99.38560486]
[276.31509399 98.82615662]
[263.99969482 92.32067108]
[255.65139771 81.08926392]
[240.86119080 83.58921814]
[226.07098389 86.08917999]
[214.81124878 95.83943939]
[199.91455078 90.51034546]
[185.12434387 93.01030731]
[170.33413696 95.51026154]
[155.54394531 98.01022339]
[140.75373840 100.51018524]
[125.96352386 103.01013947]
[111.17331696 105.51010132]
[125.35149384 110.40698242]
[140.19737244 112.55165100]
[153.74430847 118.99221802]
[164.77954102 129.15211487]
[172.31521606 142.12182617]
[175.67672729 156.74032593]
[174.56317139 171.69892883]
[169.07421875 185.65856934]
[159.70123291 197.36955261]
[147.28329468 205.78352356]
[132.93206787 210.14727783]
[117.93227386 210.07014465]
[103.62667847 205.55903625]
[91.29593658 197.01779175]
[82.04389191 185.21102905]
[76.69879150 171.19567871]
[75.73882294 156.22990417]
[86.90409088 146.21307373]
[72.30332184 149.65075684]
[57.70255661 153.08843994]
[43.10179138 156.52612305]
[28.50102806 159.96380615]
[13.90026283 163.40148926]
[7.02353859 177.44586182]
[-7.29276848 183.73692322]
[-22.28893661 179.30419922]
[-30.88423157 166.24070740]
[-29.02022171 150.71461487]
[-17.57703209 140.05688477]
[-1.95778835 139.29974365]
[10.46257973 148.80072021]
[25.06334496 145.36303711]
[39.66410828 141.92535400]
[54.26487350 138.48767090]
[68.86563873 135.04998779]
[83.46640778 131.61230469]
[84.36129761 124.16588593]
[69.46848297 122.37586212]
[71.25876617 107.48307800]
[86.15107727 109.27304840]
[87.04596710 101.82662964]
[73.67544556 95.02742767]
[60.30492401 88.22823334]
[46.93439865 81.42903137]
[33.56387711 74.62983704]
[19.24607277 80.91748047]
[4.25096035 76.48120117]
[-4.34122705 63.41565704]
[-2.47352195 47.89001083]
[8.97220325 37.23499298]
[24.59162521 36.48157883]
[37.00973511 45.98550415]
[40.36307526 61.25931168]
[53.73359680 68.05850983]
[67.10411835 74.85770416]
[80.47464752 81.65690613]
[93.84516907 88.45610809]
[108.67336273 90.71989441]
[123.46356964 88.21993256]
[138.25376892 85.71997833]
[153.04397583 83.22001648]
[167.83418274 80.72006226]
[182.62438965 78.22010040]
[197.41459656 75.72013855]
[209.73222351 65.79106903]
[223.57102966 71.29897308]
[238.36123657 68.79901123]
[253.15144348 66.29905701]
[258.75292969 50.74803925]
[271.35812378 40.20165253]
[287.46847534 37.46361923]
[302.67440796 43.18739700]
[312.86212158 55.72338867]
[327.61059570 52.98789597]
[342.35906982 50.25240326]
[357.10751343 47.51691055]
[371.85598755 44.78141785]
[384.01370239 34.65718460]
[397.93856812 39.94371033]
[406.89819336 27.20154572]
[421.89419556 24.63746452]
[433.98669434 33.25762939]
[448.73516846 30.52213669]
[463.48361206 27.78664398]
[468.18676758 16.85298347]
[477.49197388 9.62549686]
[489.01242065 7.81140137]
[499.86294556 11.74774265]
[507.38256836 20.34595108]
[522.21075439 18.08216286]
[537.03894043 15.81837368]
[551.86712646 13.55458450]
[566.67681885 11.17263508]
[581.46704102 8.67267609]
[596.25726318 6.17271757]
[611.04742432 3.67275882]
[625.67517090 0.35160482]
[640.09478760 -3.78040051]
[654.51446533 -7.91240597]
[668.93414307 -12.04441166]
[683.35375977 -16.17641640]
[697.77343750 -20.30842209]
[703.65954590 -41.97453308]
[721.29925537 -55.65707016]
[743.49414062 -55.96618652]
[761.30273438 -42.93046570]
[775.07952881 -48.86352539]
[788.85626221 -54.79658508]
[802.63299561 -60.72964478]
[816.40972900 -66.66270447]
[830.18652344 -72.59576416]
[843.96325684 -78.52882385]
[857.73999023 -84.46188354]
[871.51672363 -90.39495087]
[885.29351807 -96.32801056]
[887.71905518 -111.56349945]
[898.01354980 -123.05381012]
[912.89202881 -127.13242340]
[927.60675049 -122.49787140]
[937.46240234 -110.62902069]
[939.31408691 -95.31317902]
[932.57080078 -81.43757629]
[919.38446045 -73.42986298]
[903.96270752 -73.84527588]
[891.22656250 -82.55126190]
[877.44982910 -76.61820221]
[863.67303467 -70.68514252]
[849.89630127 -64.75207520]
[836.11956787 -58.81901932]
[822.34283447 -52.88595581]
[808.56604004 -46.95289612]
[794.78930664 -41.01983643]
[781.01257324 -35.08677673]
[767.23583984 -29.15371513]
[767.87805176 -20.98840714]
[766.58648682 -12.88438511]
[763.42590332 -5.29408789]
[758.56530762 1.35697377]
[752.26953125 6.69407320]
[744.88427734 10.41437626]
[736.81756592 12.30411720]
[728.51684570 12.25087166]
[720.44439697 10.25021744]
[713.05157471 6.40638876]
[706.75341797 0.92687708]
[701.90545654 -5.88876438]
[687.48577881 -1.75675881]
[673.06616211 2.37524652]
[658.64648438 6.50725174]
[644.22680664 10.63925743]
[629.80718994 14.77126217]
[642.92572021 22.04478836]
[648.42510986 36.00030899]
[643.79516602 50.26789474]
[631.14929199 58.33517838]
[616.25952148 56.51988220]
[605.92230225 45.65059280]
[604.85595703 30.68854523]
[613.54742432 18.46296501]
[598.75720215 20.96292496]
[583.96697998 23.46288300]
[569.17675781 25.96284103]
[563.09844971 30.18234253]
[554.13092041 28.38277626]
[539.30273438 30.64656448]
[524.47454834 32.91035461]
[509.64636230 35.17414474]
[499.72238159 50.54699707]
[481.40121460 53.85225296]
[466.21911621 42.53510284]
[451.47064209 45.27059555]
[436.72219849 48.00608826]
[428.52536011 60.38944626]
[413.60729980 63.37372208]
[400.67407227 54.69216919]
[389.57125854 64.62074280]
[374.59146118 59.52988052]
[359.84301758 62.26537323]
[345.09454346 65.00086212]
[330.34609985 67.73635864]
[315.59762573 70.47184753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 83]
[6 82]
[7 81]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[88 196]
[89 195]
[90 194]
[91 193]
[92 192]
[94 190]
[97 187]
[98 186]
[99 185]
[104 182]
[105 181]
[106 180]
[107 179]
[108 177]
[109 176]
[110 175]
[111 174]
[112 166]
[113 165]
[114 164]
[115 163]
[116 162]
[117 161]
[121 149]
[122 148]
[123 147]
[124 146]
[125 145]
[126 144]
[127 143]
[128 142]
[129 141]
[130 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
