%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUGCUGAGGAGCAAUCAUAUCACCAAUCAUAGGGGCGGACAGUGCGCCCUCUGGCCCCAAGUUAAGGGGCUGCCCCUCCACACAUCGACGUGAAAAAACCGCUGUCAAUAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[68.25338745 185.88487244]
[58.33610153 181.53636169]
[50.43961716 194.28961182]
[42.54313660 207.04287720]
[34.64665222 219.79612732]
[26.75016975 232.54939270]
[18.85368729 245.30264282]
[10.95720577 258.05590820]
[10.99329662 274.45501709]
[-3.32457638 282.45065308]
[-17.26741219 273.81762695]
[-16.49201775 257.43682861]
[-1.79605126 250.15942383]
[6.10043097 237.40615845]
[13.99691391 224.65290833]
[21.89339638 211.89964294]
[29.78987885 199.14639282]
[37.68635941 186.39312744]
[45.58284378 173.63987732]
[35.01190948 164.50276184]
[25.95428848 153.86363220]
[18.62089920 141.97023010]
[13.18250847 129.09950256]
[9.76575375 115.55117798]
[8.45019817 101.64071655]
[9.26647472 87.69205475]
[12.19557667 74.02999115]
[17.16929626 60.97266769]
[24.07181549 48.82413864]
[32.74240112 37.86729050]
[42.97915268 28.35726738]
[54.54368973 20.51552200]
[67.16672516 14.52465534]
[80.55432129 10.52417183]
[78.58007050 -4.34533882]
[76.60581970 -19.21484947]
[74.63156891 -34.08435822]
[72.65731812 -48.95386887]
[70.68306732 -63.82337952]
[68.70881653 -78.69288635]
[60.05988312 -77.94683838]
[50.56460571 -81.80274963]
[42.54161072 -90.58025360]
[34.98452759 -103.53750610]
[27.42744255 -116.49475861]
[11.97547817 -117.91477203]
[0.33146521 -128.17131042]
[-3.02723646 -143.32052612]
[3.19086289 -157.53724670]
[16.59477615 -165.35482788]
[32.03042603 -163.76727295]
[43.56249237 -153.38502502]
[46.75665665 -138.20027161]
[40.38469696 -124.05184937]
[47.94178391 -111.09458923]
[55.49886703 -98.13733673]
[70.39314270 -99.91514587]
[74.68816376 -114.28708649]
[78.98318481 -128.65902710]
[83.27820587 -143.03097534]
[87.57323456 -157.40292358]
[78.82331085 -170.36335754]
[80.50270081 -185.91050720]
[91.81843567 -196.70346069]
[107.42758179 -197.64614868]
[119.95996857 -188.29342651]
[123.49819183 -173.06140137]
[116.37161255 -159.14213562]
[101.94517517 -153.10789490]
[97.65015411 -138.73594666]
[93.35513306 -124.36400604]
[89.06011200 -109.99206543]
[84.76508331 -95.62011719]
[83.57833099 -80.66713715]
[85.55258179 -65.79763031]
[87.52683258 -50.92811966]
[89.50108337 -36.05860901]
[91.47533417 -21.18910027]
[93.44958496 -6.31958914]
[95.42383575 8.54992104]
[114.40715027 9.57604122]
[132.76940918 14.50015068]
[149.71903992 23.10997963]
[164.52539062 35.03437805]
[176.55018616 49.75930786]
[185.27507019 66.65000916]
[190.32391357 84.97836304]
[191.47908020 103.95426178]
[188.69078064 122.75970459]
[182.07920837 140.58403015]
[194.93557739 148.31147766]
[207.79194641 156.03894043]
[220.74920654 163.59602356]
[233.80508423 170.98141479]
[246.86096191 178.36682129]
[261.44348145 172.72024536]
[276.22714233 177.81709290]
[284.23150635 191.25077820]
[281.67718506 206.67832947]
[269.77026367 216.81533813]
[254.13279724 216.87539673]
[242.14833069 206.83016968]
[239.47557068 191.42268372]
[226.41969299 184.03729248]
[213.36381531 176.65190125]
[205.89907837 176.09031677]
[200.06449890 168.89530945]
[187.20811462 161.16786194]
[174.35174561 153.44039917]
[167.52278137 161.84442139]
[159.74943542 169.38345337]
[151.14041138 175.95207214]
[141.81611633 181.45840454]
[131.90696716 185.82542419]
[121.55155182 188.99206543]
[110.89472198 190.91404724]
[100.08551025 191.56446838]
[89.27510071 190.93423462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[43 56]
[44 55]
[45 54]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[90 109]
[91 108]
[92 107]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
