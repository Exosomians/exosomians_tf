%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUUCAUUGAAACGGUUCAUUCGUAGAAAUGUGGAUUAGGGUUUCCGAGAAAAUUCUCGGUGC\
) } def
/len { sequence length } bind def

/coor [
[65.17416382 120.66029358]
[59.94169998 105.91768646]
[60.68793106 90.29187012]
[47.04345322 84.06064606]
[33.39897156 77.82942200]
[19.75449371 71.59819794]
[6.11001301 65.36697388]
[-7.53446674 59.13574600]
[-21.17894745 52.90452194]
[-34.92328262 63.34455490]
[-51.94921494 65.58942413]
[-67.76959991 59.13399506]
[-78.25784302 45.75473404]
[-80.72417450 29.02181625]
[-94.89918518 24.11579704]
[-109.07419586 19.20977783]
[-123.24921417 14.30375767]
[-138.24993896 19.99212265]
[-151.97605896 11.68709946]
[-153.89804077 -4.24040890]
[-142.54153442 -15.57218075]
[-126.61825562 -13.61544991]
[-118.34319305 0.12874572]
[-104.16818237 5.03476524]
[-89.99316406 9.94078445]
[-75.81815338 14.84680367]
[-66.91677094 5.34606647]
[-54.98772049 0.01330923]
[-41.87675476 -0.28596464]
[-29.62818718 4.53178263]
[-20.16615105 13.74934387]
[-14.99233055 25.95529556]
[-14.94772148 39.26004028]
[-1.30324173 45.49126816]
[12.34123802 51.72249222]
[25.98571777 57.95371628]
[39.63019943 64.18494415]
[53.27467728 70.41616821]
[66.91915894 76.64739227]
[77.00144958 66.67203522]
[89.90526581 60.78542709]
[104.04751587 59.70975494]
[117.69321442 63.57697678]
[129.16825867 71.91265869]
[137.06489563 83.69416046]
[140.41430664 97.47609711]
[138.80560303 111.56767273]
[152.13813782 118.44107056]
[165.47067261 125.31446838]
[178.80320740 132.18786621]
[192.13574219 139.06126404]
[205.46826172 145.93466187]
[221.81417847 144.61431885]
[230.90664673 158.26199341]
[223.39212036 172.83813477]
[207.00090027 173.34805298]
[198.59486389 159.26719666]
[185.26234436 152.39379883]
[171.92980957 145.52040100]
[158.59727478 138.64700317]
[145.26473999 131.77360535]
[131.93220520 124.90020752]
[120.11077881 135.14602661]
[105.28781128 140.14630127]
[89.67564392 139.15473938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[14 26]
[15 25]
[16 24]
[17 23]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
