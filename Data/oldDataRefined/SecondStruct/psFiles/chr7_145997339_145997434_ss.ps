%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCGUGGGUUGAAUGUGAAUCCUCUAAAGUUGAAUUGAACUGGCGAGACUCGAUUUGGAUCGGGGUUUGGGUGAGGUGGAAUGAUGGUUUGUCU\
) } def
/len { sequence length } bind def

/coor [
[71.08032990 107.88304138]
[86.00849152 106.40950775]
[71.10475922 104.71279907]
[56.20102692 103.01609039]
[41.29729843 101.31938171]
[26.39356804 99.62268066]
[11.48983669 97.92597198]
[-3.09696174 104.05261993]
[-14.86735535 94.92534637]
[-29.77108574 93.22864532]
[-44.67481613 91.53193665]
[-59.57854843 89.83522797]
[-74.16534424 95.96188354]
[-85.93573761 86.83460999]
[-100.83946991 85.13790131]
[-115.74320221 83.44119263]
[-124.81931305 85.60587311]
[-131.09922791 81.44061279]
[-145.87677002 87.09170532]
[-157.34542847 77.58806610]
[-172.18640137 75.40963745]
[-187.02737427 73.23120880]
[-197.77781677 84.42082977]
[-213.05809021 87.12132263]
[-226.99263000 80.29428864]
[-234.22331238 66.56487274]
[-231.96978760 51.21231079]
[-221.09858704 40.13997269]
[-205.78991699 37.60540009]
[-191.93025208 44.58319092]
[-184.84893799 58.39023972]
[-170.00796509 60.56866837]
[-155.16699219 62.74709702]
[-141.45098877 56.94018936]
[-128.92079163 66.59963989]
[-114.04649353 68.53746033]
[-99.14276123 70.23416901]
[-84.23902893 71.93087769]
[-70.71824646 65.68286133]
[-57.88183975 74.93149567]
[-42.97810745 76.62820435]
[-28.07437897 78.32491302]
[-13.17064762 80.02162170]
[0.35013682 73.77360535]
[13.18654442 83.02223969]
[28.09027481 84.71894836]
[42.99400711 86.41565704]
[57.89773560 88.11236572]
[72.80146790 89.80906677]
[87.70520020 91.50577545]
[101.49265289 85.59764099]
[110.54357147 73.63600159]
[119.59449005 61.67435455]
[128.64540100 49.71271515]
[137.69631958 37.75107193]
[146.74723816 25.78942871]
[148.23997498 9.45836258]
[163.24084473 2.83218479]
[176.31822205 12.72734070]
[174.01924133 28.96454239]
[158.70887756 34.84034729]
[149.65797424 46.80199051]
[140.60705566 58.76363373]
[131.55613708 70.72527313]
[122.50521088 82.68691254]
[113.45429230 94.64855957]
[118.91287231 108.62010193]
[133.67552185 111.27796173]
[148.43815613 113.93582916]
[163.20080566 116.59369659]
[178.15359497 111.42409515]
[189.30850220 121.29412079]
[202.14250183 112.07110596]
[217.72544861 114.70687866]
[226.81225586 127.63768005]
[224.01187134 143.19189453]
[210.98573303 152.14147949]
[195.46199036 149.17680359]
[186.65063477 136.05676270]
[172.75376892 141.41647339]
[160.54293823 131.35633850]
[145.78030396 128.69847107]
[131.01765442 126.04061127]
[116.25500488 123.38274384]
[122.77500153 136.89161682]
[124.09297180 151.83360291]
[120.03836060 166.27522278]
[111.13584900 178.34771729]
[98.53740692 186.48892212]
[83.87327576 189.64537048]
[69.04097748 187.40863037]
[55.95981979 180.06809998]
[46.32249069 168.57366943]
[41.37606049 154.41271973]
[41.76059341 139.41764832]
[47.42633438 125.52881622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[9 43]
[10 42]
[11 41]
[12 40]
[14 38]
[15 37]
[16 36]
[18 35]
[20 33]
[21 32]
[22 31]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[67 84]
[68 83]
[69 82]
[70 81]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
