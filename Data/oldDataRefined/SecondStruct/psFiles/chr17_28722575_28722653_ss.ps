%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGUCCCACGUCUACUACUGUGACAUUUCGCUGGUUUCAGACUUGUUUCACUAACCAUGGAGCAACAGACUACGUGG\
) } def
/len { sequence length } bind def

/coor [
[52.67483521 318.30865479]
[44.11007690 331.24789429]
[29.56377792 336.65020752]
[14.62928867 332.43823242]
[5.04922247 320.23159790]
[4.50731230 304.72399902]
[13.21193314 291.87841797]
[27.81598091 286.63421631]
[31.88758659 272.19738770]
[35.95919418 257.76055908]
[40.03079987 243.32374573]
[44.10240555 228.88691711]
[48.17401505 214.45008850]
[39.42662048 206.83084106]
[34.24723816 196.39250183]
[33.46395493 184.71382141]
[37.23656845 173.57833862]
[45.02601624 164.70211792]
[55.67102814 159.46917725]
[67.56114197 158.71588135]
[73.30139160 144.85769653]
[79.04164124 130.99949646]
[84.78189850 117.14131165]
[78.34528351 107.51586914]
[77.43466949 95.97247314]
[82.28243256 85.45685577]
[91.65149689 78.65245819]
[103.15098572 77.29567719]
[109.96084595 63.93057632]
[116.77069855 50.56547928]
[123.58055878 37.20037842]
[130.39041138 23.83528137]
[131.55975342 14.50002766]
[137.73902893 10.08700180]
[145.06834412 -3.00043797]
[152.39765930 -16.08787727]
[159.72697449 -29.17531776]
[167.05630493 -42.26276016]
[160.72657776 -56.30699921]
[163.84381104 -71.21123505]
[175.00743103 -81.30269623]
[189.79565430 -82.86679077]
[197.12496948 -95.95423126]
[192.59436035 -111.09520721]
[200.17045593 -124.96526337]
[215.35848999 -129.33554077]
[229.14765930 -121.61322784]
[233.35711670 -106.37983704]
[225.48945618 -92.67307281]
[210.21240234 -88.62491608]
[202.88308716 -75.53747559]
[209.27630615 -62.11120224]
[206.50489807 -47.31987762]
[195.42568970 -36.87455750]
[180.14373779 -34.93344116]
[172.81442261 -21.84599876]
[165.48510742 -8.75855923]
[158.15577698 4.32888079]
[150.82646179 17.41632080]
[143.75550842 30.64513969]
[136.94564819 44.01023865]
[130.13580322 57.37533569]
[123.32594299 70.74043274]
[116.51608276 84.10552979]
[122.90977478 100.74649048]
[115.44634247 116.93592834]
[98.64009094 122.88156128]
[92.89984131 136.73974609]
[87.15958405 150.59794617]
[81.41933441 164.45614624]
[92.10867310 179.97425842]
[91.60850525 198.66610718]
[80.28142548 213.36085510]
[62.61084366 218.52168274]
[58.53923416 232.95851135]
[54.46762848 247.39533997]
[50.39602280 261.83218384]
[46.32441711 276.26901245]
[42.25280762 290.70584106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[20 70]
[21 69]
[22 68]
[23 67]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
