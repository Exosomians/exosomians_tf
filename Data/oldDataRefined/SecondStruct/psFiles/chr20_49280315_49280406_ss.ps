%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACGACCGUAUAUACUACUGAAUCGAAAAAAGGGGCUGUCUAGCUGAUACAACUAGAUUGAAAAGAUUCGGUCAAAGACAGACUAUACGG\
) } def
/len { sequence length } bind def

/coor [
[83.60108185 428.23138428]
[75.53971863 441.49011230]
[61.21169281 447.44723511]
[46.12641907 443.81210327]
[36.08449554 431.98251343]
[34.94724655 416.50717163]
[43.15196609 403.33666992]
[57.54377365 397.53533936]
[61.05776978 382.95275879]
[64.57176971 368.37014771]
[68.08576202 353.78756714]
[71.59976196 339.20498657]
[75.11376190 324.62240601]
[78.62775421 310.03982544]
[70.66119385 297.50708008]
[74.01715088 282.66821289]
[87.21665192 274.39712524]
[90.73065186 259.81451416]
[92.50000000 244.91925049]
[92.50000000 229.91925049]
[92.50000000 214.91925049]
[92.50000000 199.91925049]
[92.50000000 184.91925049]
[92.50000000 169.91925049]
[92.50000000 154.91925049]
[92.50000000 139.91925049]
[82.83663940 136.81324768]
[74.24511719 131.40830994]
[67.26194763 124.04196167]
[62.32323074 115.17422485]
[59.73738098 105.35887909]
[59.66587830 95.20886993]
[62.11319351 85.35807037]
[66.92649078 76.42163086]
[73.80519104 68.95764160]
[82.31972504 63.43220139]
[91.93836975 60.19037628]
[102.06044769 59.43461227]
[97.77137756 44.20587540]
[108.27494049 33.64536285]
[111.78893280 19.06277466]
[115.30293274 4.48018885]
[118.81692505 -10.10239697]
[122.33092499 -24.68498421]
[125.84492493 -39.26757050]
[121.55584717 -54.49630737]
[132.05941772 -65.05682373]
[135.57341003 -79.63940430]
[133.40589905 -96.45423126]
[148.96356201 -103.19183350]
[159.74465942 -90.10732269]
[150.15599060 -76.12541199]
[146.64199829 -61.54282379]
[151.18241882 -47.35713196]
[140.42750549 -35.75357437]
[136.91351318 -21.17098618]
[133.39952087 -6.58840036]
[129.88551331 7.99418592]
[126.37152100 22.57677269]
[122.85752106 37.15935898]
[127.39794159 51.34505081]
[116.64303589 62.94860840]
[132.53366089 75.68215942]
[140.24736023 94.52769470]
[137.84539795 114.74862671]
[125.93147278 131.26268005]
[107.50000000 139.91925049]
[107.50000000 154.91925049]
[107.50000000 169.91925049]
[107.50000000 184.91925049]
[107.50000000 199.91925049]
[107.50000000 214.91925049]
[107.50000000 229.91925049]
[107.50000000 244.91925049]
[119.08261871 235.38809204]
[134.08198547 235.24946594]
[145.83879089 244.56491089]
[149.13334656 259.19863892]
[142.50297546 272.65368652]
[128.89135742 278.95635986]
[114.34168243 275.30850220]
[105.31323242 263.32852173]
[101.79924011 277.91110229]
[109.78250885 291.28665161]
[106.01107788 306.02542114]
[93.21034241 313.55380249]
[89.69634247 328.13638306]
[86.18235016 342.71899414]
[82.66835022 357.30157471]
[79.15435028 371.88415527]
[75.64035797 386.46673584]
[72.12635803 401.04931641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 92]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[17 83]
[18 82]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[38 62]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
