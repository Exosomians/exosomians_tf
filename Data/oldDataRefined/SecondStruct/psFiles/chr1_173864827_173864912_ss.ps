%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUAUGUAGUCUAUCCUCGCUUUCUGAAUUAUAACGAGUAGUCGCAAUCAGACGACUUGAUACAAUAGUAGUAACAUAGCCGAAA\
) } def
/len { sequence length } bind def

/coor [
[140.47409058 304.24038696]
[130.98539734 292.75936890]
[136.65574646 277.98919678]
[134.49665833 263.14541626]
[132.33757019 248.30160522]
[130.17846680 233.45780945]
[128.01937866 218.61401367]
[125.86029816 203.77021790]
[114.45402527 197.49339294]
[108.72572327 185.58415222]
[111.00867462 172.36859131]
[120.67884827 162.79537964]
[119.05706024 147.88330078]
[117.43527985 132.97123718]
[115.81349182 118.05916595]
[90.88262177 119.21183014]
[81.48426819 99.35913849]
[67.98656464 92.81604767]
[54.48886490 86.27295685]
[40.99116135 79.72985840]
[29.90390396 90.09504700]
[15.81954575 95.75148773]
[0.64288425 95.93419647]
[-13.57356262 90.61845398]
[-24.90713692 80.52318573]
[-31.82506752 67.01367950]
[-33.39175797 51.91699600]
[-29.39532852 37.27482986]
[-20.37626266 25.06741905]
[-7.55431604 16.94571304]
[7.33644962 14.00810623]
[22.28218079 16.65188599]
[35.26158905 24.51950455]
[44.51931381 36.54692841]
[48.80332947 51.10754776]
[47.53425598 66.23216248]
[61.03195572 72.77525330]
[74.52965546 79.31834412]
[88.02735901 85.86143494]
[103.61401367 79.04385376]
[120.75202179 87.93544769]
[127.05036163 74.32181549]
[133.34869385 60.70818329]
[139.64703369 47.09455109]
[145.94537354 33.48092270]
[138.26443481 19.99823189]
[140.00881958 4.57951736]
[150.50775146 -6.84641218]
[165.72419739 -9.88605404]
[179.80711365 -3.37060308]
[187.34133911 10.19461632]
[185.42979431 25.59350014]
[174.80752563 36.90486526]
[159.55900574 39.77925873]
[153.26066589 53.39289093]
[146.96232605 67.00652313]
[140.66398621 80.62015533]
[134.36566162 94.23377991]
[145.07388306 83.72978973]
[159.51451111 79.67169189]
[174.12678528 83.06013489]
[185.30760193 93.05960083]
[190.30001831 107.20441437]
[187.87298584 122.00676727]
[178.62496948 133.81668091]
[164.83634949 139.72209167]
[149.90711975 138.26684570]
[137.51849365 129.80975342]
[130.72555542 116.43737793]
[132.34735107 131.34945679]
[133.96913147 146.26152039]
[135.59091187 161.17358398]
[149.37486267 171.76228333]
[151.31373596 188.69854736]
[140.70408630 201.61111450]
[142.86318970 216.45492554]
[145.02227783 231.29872131]
[147.18136597 246.14251709]
[149.34045410 260.98629761]
[151.49954224 275.83010864]
[161.14265442 288.37286377]
[155.31788635 302.08129883]
[167.26522827 312.78833008]
[166.19937134 328.79595947]
[152.93794250 337.82446289]
[137.65397644 332.94799805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[12 72]
[13 71]
[14 70]
[15 69]
[17 39]
[18 38]
[19 37]
[20 36]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
