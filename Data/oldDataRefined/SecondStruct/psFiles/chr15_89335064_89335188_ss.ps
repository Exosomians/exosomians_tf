%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGCUGCCCGGCGCACCGGAUUACCUAUUCCGCAGACUGAAGCCUAGUCUUCUAACGUCCAAGCUCAGGACGGCGCCAGCUUCCCUCCAAUACUAAUUGAAAAUCAAAUAAGGAGGGAGUCCU\
) } def
/len { sequence length } bind def

/coor [
[199.94105530 166.94583130]
[186.76773071 159.77203369]
[173.59440613 152.59822083]
[160.42108154 145.42440796]
[147.24775696 138.25059509]
[134.07443237 131.07678223]
[126.61377716 130.63607788]
[120.66537476 123.55637360]
[107.67499542 116.05637360]
[92.81581116 118.10692596]
[82.34226227 128.84492493]
[71.86870575 139.58293152]
[61.39515686 150.32093811]
[57.87510300 166.33784485]
[42.16431808 171.03924561]
[30.42471123 159.58876038]
[34.73298264 143.76565552]
[50.65715408 139.84738159]
[61.13070679 129.10937500]
[71.60425568 118.37137604]
[82.07781219 107.63336945]
[81.42414093 100.16191101]
[67.08466339 104.56410980]
[52.74518204 108.96630096]
[40.56599045 117.72229004]
[25.61273193 116.53903961]
[14.96220684 105.97653961]
[13.65489674 91.03362274]
[22.30949974 78.78218079]
[36.83012772 75.02034760]
[50.34467697 81.52841187]
[65.23074341 83.37370300]
[80.11680603 85.21899414]
[79.46313477 77.74752808]
[63.74165344 75.97397614]
[57.92449570 62.26230240]
[45.74542618 53.50614929]
[33.56635666 44.74999237]
[21.38728714 35.99383926]
[9.20821667 27.23768425]
[-2.97085333 18.48152924]
[-18.97196960 19.64075279]
[-29.74851608 7.75607347]
[-27.03364754 -8.05560112]
[-12.90997887 -15.66490650]
[1.78801990 -9.23463535]
[5.78530169 6.30245876]
[17.96437263 15.05861378]
[30.14344215 23.81476974]
[42.32251358 32.57092285]
[54.50158310 41.32707977]
[66.68064880 50.08323288]
[81.53100586 51.23049164]
[88.21929169 65.56845856]
[95.13036346 62.65520096]
[96.99549103 47.77161026]
[108.95250702 56.82867813]
[115.86357880 53.91541672]
[118.09921265 39.08295441]
[120.33484650 24.25049400]
[122.57048035 9.41803074]
[124.80611420 -5.41443157]
[114.32398224 -17.01869392]
[113.80493927 -32.64765930]
[123.49407196 -44.92181396]
[138.81645203 -48.04566956]
[152.53733826 -40.54424286]
[158.17813110 -25.95947647]
[153.07543945 -11.17785168]
[139.63858032 -3.17879772]
[137.40293884 11.65366459]
[135.16731262 26.48612785]
[132.93167114 41.31858826]
[130.69604492 56.15105057]
[115.17499542 103.06598663]
[128.16537476 110.56598663]
[141.24824524 117.90346527]
[154.42156982 125.07727814]
[167.59489441 132.25108337]
[180.76821899 139.42489624]
[193.94154358 146.59870911]
[207.11485291 153.77250671]
[220.70947266 160.11178589]
[234.67257690 165.59190369]
[248.63569641 171.07202148]
[262.59878540 176.55213928]
[276.56188965 182.03224182]
[290.52499390 187.51235962]
[304.48812866 192.99247742]
[318.45123291 198.47259521]
[327.27166748 186.23941040]
[338.85778809 176.58476257]
[352.48129272 170.11550903]
[367.28576660 167.23834229]
[382.34060669 168.13410950]
[396.69946289 172.74650574]
[409.45971680 180.78559875]
[419.81921387 191.74603271]
[427.12680054 204.93882751]
[430.92309570 219.53468323]
[430.96945190 234.61608887]
[427.26296997 249.23501587]
[420.03662109 262.47247314]
[409.74468994 273.49639893]
[397.03411865 281.61380005]
[382.70388794 286.31436157]
[367.65484619 287.30267334]
[352.83294678 284.51657104]
[339.16992188 278.13119507]
[327.52465820 268.54797363]
[318.62918091 256.36923218]
[313.04266357 242.36061096]
[311.11627197 227.40267944]
[312.97109985 212.43569946]
[299.00799561 206.95558167]
[285.04489136 201.47546387]
[271.08178711 195.99536133]
[257.11868286 190.51524353]
[243.15557861 185.03512573]
[229.19247437 179.55500793]
[215.22935486 174.07489014]
[218.12577820 188.79260254]
[208.62097168 200.39685059]
[193.62109375 200.45606995]
[184.02496338 188.92723083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[8 76]
[9 75]
[10 21]
[11 20]
[12 19]
[13 18]
[34 54]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[83 121]
[84 120]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
