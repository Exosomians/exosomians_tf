%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUGAUUUUAACCUUGCUAUGUCUCUUCUAAUCGUACCGGGGACGCGUUCCUACUGUGCGUUUAAGCACUUCGCAAGGUAUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[72.80410767 372.93988037]
[60.49678802 382.24221802]
[45.11227417 383.39120483]
[31.55970001 376.02023315]
[24.16364861 362.48132324]
[25.28417015 347.09472656]
[34.56370926 334.77020264]
[49.04120255 329.44049072]
[52.19439697 314.77566528]
[55.34759140 300.11083984]
[58.50078583 285.44598389]
[61.65398026 270.78115845]
[64.54786682 256.06295776]
[67.18155670 241.29597473]
[69.81524658 226.52899170]
[72.44892883 211.76202393]
[75.08261871 196.99504089]
[77.71630096 182.22805786]
[80.34999084 167.46107483]
[69.90844727 156.87277222]
[67.67752838 141.99032593]
[74.72003937 128.49009705]
[88.52104950 121.64624023]
[91.15473938 106.87925720]
[93.52739716 92.06809998]
[95.63829803 77.21736908]
[93.61843872 72.78671265]
[93.30407715 68.40640259]
[94.43881226 64.65261841]
[96.59250641 61.94154739]
[99.23633575 60.48365402]
[103.41611481 46.07777023]
[107.59590149 31.67189026]
[104.01050568 16.26229858]
[114.98783112 6.19514227]
[119.16761017 -8.21073914]
[123.34738922 -22.61662102]
[127.52717590 -37.02250290]
[131.70695496 -51.42838287]
[125.84310150 -70.55750275]
[139.89410400 -83.64519501]
[143.04730225 -98.31002808]
[146.20050049 -112.97486115]
[149.35368347 -127.63969421]
[152.50688171 -142.30453491]
[146.96372986 -157.73843384]
[157.76339722 -170.07939148]
[173.79611206 -166.63208008]
[178.56880188 -150.94279480]
[167.17172241 -139.15133667]
[164.01852417 -124.48650360]
[160.86532593 -109.82166290]
[157.71214294 -95.15682983]
[154.55894470 -80.49199677]
[160.99034119 -72.20460510]
[161.69107056 -61.51499557]
[156.17234802 -52.07482147]
[146.11283875 -47.24860382]
[141.93305969 -32.84272003]
[137.75328064 -18.43684006]
[133.57348633 -4.03095770]
[129.39370728 10.37492371]
[133.27807617 24.75411034]
[122.00178528 35.85167313]
[117.82199860 50.25755310]
[113.64221954 64.66343689]
[110.48902130 79.32826996]
[108.37812805 94.17900085]
[110.48301697 102.16207123]
[105.92171478 109.51294708]
[103.28803253 124.27993011]
[113.87218475 135.47286987]
[115.81340790 150.57534790]
[108.57513428 163.76896667]
[95.11696625 170.09477234]
[92.48328400 184.86174011]
[89.84959412 199.62872314]
[87.21591187 214.39570618]
[84.58222198 229.16268921]
[81.94853973 243.92967224]
[79.31484985 258.69665527]
[80.90477753 267.92413330]
[76.31881714 273.93435669]
[73.16561890 288.59918213]
[70.01242828 303.26400757]
[66.85923004 317.92886353]
[63.70603561 332.59368896]
[74.71334839 343.40307617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[23 71]
[24 70]
[25 68]
[26 67]
[31 66]
[32 65]
[33 64]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
