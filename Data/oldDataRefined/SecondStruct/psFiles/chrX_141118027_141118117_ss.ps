%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:28 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUUUAUACCUUGCGAAGUGCUUAAACGCACAGUAGGAACGCGUCCCCGGUACGAUUAGAAGAGACAUAGCAAGGUUAAAAUCAUAUA\
) } def
/len { sequence length } bind def

/coor [
[90.59404755 356.79650879]
[85.71815491 342.33316040]
[87.60906219 327.18762207]
[95.89132690 314.36706543]
[108.92049408 306.41702271]
[107.38653564 291.49566650]
[105.85256958 276.57427979]
[104.31861115 261.65292358]
[102.78464508 246.73156738]
[98.88718414 240.26487732]
[101.46199036 231.27587891]
[100.43835449 216.31083679]
[99.41471863 201.34580994]
[98.39108276 186.38078308]
[97.36744690 171.41575623]
[96.34381104 156.45071411]
[95.32017517 141.48568726]
[73.21866608 132.02690125]
[59.99751663 111.94840240]
[60.04070663 87.90794373]
[73.33390808 67.87706757]
[65.98225403 54.80216217]
[58.63060379 41.72725677]
[51.27894974 28.65234947]
[43.92729950 15.57744217]
[27.19799232 13.89973831]
[14.83505630 2.74957895]
[11.51160526 -13.39542389]
[18.32781219 -28.22237015]
[10.53405380 -41.03866196]
[2.74029422 -53.85494995]
[-5.05346489 -66.67124176]
[-20.32441902 -65.64334869]
[-34.31917191 -71.84056091]
[-43.82183456 -83.83880615]
[-46.64876175 -98.88098145]
[-42.15034866 -113.51050568]
[-31.36029816 -124.36561584]
[-16.75808334 -128.95188904]
[-1.69918573 -126.21543121]
[10.35596943 -116.78506470]
[16.63719559 -102.82781219]
[15.70111275 -87.55095673]
[7.76282597 -74.46500397]
[15.55658531 -61.64871216]
[23.35034370 -48.83242035]
[31.14410400 -36.01612854]
[44.61005783 -36.13956451]
[56.44716644 -29.49306107]
[63.46375275 -17.74442863]
[63.70632935 -3.95321822]
[57.00220490 8.22578907]
[64.35385895 21.30069542]
[71.70551300 34.37560272]
[79.05716705 47.45051193]
[86.40882111 60.52541733]
[94.09457397 58.67096710]
[101.99212646 58.29874802]
[109.81822968 59.42210770]
[117.29220581 62.00075531]
[124.14601898 65.94221497]
[130.13385010 71.10512543]
[135.04096985 77.30432892]
[138.69136047 84.31748962]
[140.95413208 91.89308929]
[141.74810791 99.75942993]
[141.04483032 107.63440704]
[138.86952209 115.23558044]
[135.30018616 122.29034424]
[130.46484375 128.54568481]
[124.53690338 133.77725220]
[117.72897339 137.79743958]
[110.28520203 140.46205139]
[111.30883789 155.42707825]
[112.33247375 170.39212036]
[113.35611725 185.35714722]
[114.37975311 200.32217407]
[115.40338898 215.28720093]
[116.42702484 230.25224304]
[117.70600891 245.19761658]
[119.23996735 260.11895752]
[120.77393341 275.04034424]
[122.30789185 289.96170044]
[123.84185791 304.88305664]
[138.21600342 310.01596069]
[148.93345642 320.88330078]
[153.86625671 335.32733154]
[152.03500366 350.48019409]
[143.80329895 363.33328247]
[130.80552673 371.33459473]
[115.62243652 372.89544678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[29 47]
[30 46]
[31 45]
[32 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
