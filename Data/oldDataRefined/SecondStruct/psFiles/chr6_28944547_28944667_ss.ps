%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCAACCAAUUCGCCCUCUCUGUCAACGGAGGAAUCGCGUCAUCCGUCGCGCAGUCAGAGUAUUAGACUUCCAGGACUCAAGCUUGGAGUCUCCCCCGUUCCGCAGACAAAACGGUAAA\
) } def
/len { sequence length } bind def

/coor [
[56.78810120 390.36334229]
[49.25025558 390.05355835]
[41.91809464 388.31387329]
[34.52987289 401.36816406]
[27.14165306 414.42242432]
[34.41915131 428.02542114]
[33.16425705 443.40167236]
[23.77740479 455.64465332]
[9.25390530 460.84768677]
[-5.77184582 457.35049438]
[-16.50518608 446.26901245]
[-19.52114677 431.13934326]
[-13.85734463 416.78924561]
[-1.32107818 407.79782104]
[14.08737469 407.03421021]
[21.47559547 393.97991943]
[28.86381721 380.92565918]
[16.14530182 360.83673096]
[17.30663872 336.98144531]
[32.04780197 318.05413818]
[55.09700775 311.02398682]
[58.16529083 296.34115601]
[61.23357010 281.65829468]
[64.30184937 266.97546387]
[67.37013245 252.29263306]
[60.96606445 236.00845337]
[73.20671844 222.32559204]
[75.89592743 207.56861877]
[78.58514404 192.81166077]
[81.27435303 178.05468750]
[83.96356201 163.29771423]
[78.63337708 149.38951111]
[88.71942139 137.20007324]
[91.40863800 122.44309998]
[94.09784698 107.68613434]
[87.33642578 107.31732178]
[80.60963440 102.57389069]
[76.32811737 93.70236969]
[65.58583832 83.23320770]
[54.84355545 72.76404572]
[44.10127258 62.29487991]
[28.81804466 58.20421600]
[25.10358429 43.78020477]
[9.08524132 40.26669693]
[4.37740564 24.55783653]
[15.82309437 12.81355095]
[31.64796448 17.11535645]
[35.57274628 33.03792191]
[50.08761215 36.37976074]
[54.57043457 51.55259705]
[65.31271362 62.02175903]
[76.05500031 72.49092102]
[86.79727936 82.96008301]
[82.38922882 68.62240601]
[71.82612610 57.97248077]
[66.37220764 43.99912262]
[66.92794800 29.00942039]
[73.40160370 15.47827530]
[84.72431183 5.63977003]
[99.02663422 1.11830580]
[113.94715118 2.66040611]
[127.02239990 10.01146030]
[136.09355164 21.95775986]
[139.66291809 36.52689362]
[137.14115906 51.31340027]
[128.94464111 63.87592697]
[116.42568207 72.14071655]
[109.17803192 85.27355957]
[121.83466339 77.22311401]
[134.49130249 69.17266846]
[147.14793396 61.12222672]
[152.79345703 53.78713608]
[160.23571777 53.03232193]
[173.09542847 45.31042862]
[185.95515442 37.58853531]
[198.81486511 29.86664391]
[211.67459106 22.14475250]
[213.94641113 6.67307281]
[225.66601562 -3.67993903]
[241.29977417 -4.02590752]
[253.46589661 5.79852295]
[256.41992188 21.15455627]
[248.76702881 34.79154587]
[234.12071228 40.27051544]
[219.39648438 35.00447083]
[206.53675842 42.72636414]
[193.67704773 50.44825745]
[180.81732178 58.17014694]
[167.95761108 65.89203644]
[155.19837952 73.77886200]
[142.54173279 81.82930756]
[129.88510132 89.87974548]
[117.22846985 97.93019104]
[108.85481262 110.37534332]
[106.16560364 125.13231659]
[103.47639465 139.88928223]
[108.61422729 154.85301208]
[98.72053528 165.98692322]
[96.03131866 180.74389648]
[93.34210968 195.50086975]
[90.65290070 210.25784302]
[87.96368408 225.01480103]
[94.67226410 236.12165833]
[92.04932404 248.41821289]
[82.05297089 255.36091614]
[78.98468781 270.04376221]
[75.91640472 284.72659302]
[72.84812164 299.40942383]
[69.77984619 314.09225464]
[76.51863861 317.74075317]
[82.43137360 322.60205078]
[87.30306244 328.49520874]
[90.95737457 335.20184326]
[93.26300049 342.47421265]
[94.13840485 350.04440308]
[93.55465698 357.63412476]
[91.53642273 364.96502686]
[88.16090393 371.76885986]
[83.55491638 377.79733276]
[77.89010620 382.83108521]
[71.37657928 386.68774414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[27 102]
[28 101]
[29 100]
[30 99]
[31 98]
[33 96]
[34 95]
[35 94]
[38 53]
[39 52]
[40 51]
[41 50]
[43 48]
[68 93]
[69 92]
[70 91]
[71 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
