%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUAGUCGGUCAUGCUUAUGCGCUAUUUAGUCAAGGUGUAGUUGUCAGUGUCCACAGUAGUGAAGGGUCUCC\
) } def
/len { sequence length } bind def

/coor [
[107.73721313 222.62268066]
[113.49280548 208.48635864]
[124.81770325 198.25358582]
[120.53765869 183.87718201]
[115.96141052 169.59228516]
[111.09091949 155.40502930]
[106.22042847 141.21777344]
[94.76982117 131.69239807]
[97.60697937 116.12765503]
[84.69188690 105.61154175]
[87.75063324 89.23984528]
[82.29801178 75.26598358]
[70.07353973 65.22243500]
[72.65507507 50.55324936]
[67.20245361 36.57938385]
[61.74983597 22.60551834]
[55.72440720 8.86891842]
[49.13645554 -4.60694647]
[33.98655319 -7.39740181]
[23.50719643 -18.44441223]
[21.56509590 -33.36729050]
[28.69721985 -46.41607666]
[22.10927010 -59.89194107]
[15.52132130 -73.36780548]
[8.93337250 -86.84366608]
[2.34542394 -100.31953430]
[-4.24252510 -113.79540253]
[-19.57029533 -114.77264404]
[-32.34701157 -123.29620361]
[-39.13580322 -137.07328796]
[-38.11051941 -152.39791870]
[-29.54695129 -165.14785767]
[-15.74866104 -171.89343262]
[-0.42731780 -170.82011414]
[12.29571438 -162.21661377]
[18.99800301 -148.39724731]
[17.87666702 -133.07934570]
[9.23333931 -120.38334656]
[15.82128811 -106.90748596]
[22.40923691 -93.43161774]
[28.99718666 -79.95575714]
[35.58513641 -66.47988892]
[42.17308426 -53.00402451]
[56.85105133 -50.61754227]
[67.43443298 -39.91913223]
[69.71552277 -24.86422920]
[62.61231995 -11.19489479]
[69.20027161 2.28096962]
[73.61678314 4.71661043]
[76.38951874 10.09774113]
[75.72370148 17.15289879]
[81.17632294 31.12676430]
[86.62894440 45.10063171]
[98.46340942 54.14467239]
[96.27188110 69.81336212]
[101.72450256 83.78723145]
[112.23050690 89.21841431]
[116.30103302 100.32268524]
[111.79424286 111.25716400]
[123.59322357 121.79730988]
[120.40768433 136.34727478]
[125.27817535 150.53453064]
[130.14866638 164.72180176]
[136.05760193 172.07286072]
[134.91406250 179.59713745]
[139.19410706 193.97354126]
[154.27172852 196.34594727]
[166.82196045 205.03239441]
[174.35295105 218.30819702]
[175.36941528 233.53742981]
[169.66952515 247.69631958]
[158.38502502 257.97360229]
[143.75643921 262.32873535]
[128.68827820 259.89697266]
[116.17234802 251.16116333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 63]
[6 62]
[7 61]
[9 59]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[17 48]
[18 47]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
