%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGACUGUGCGACAGGAGACCGCUGGACAGCGACCUCUCCAACCCGGAGGCCUACGCGCGCCCCGAGACCGGAUGGCCACUGGGCCGAUCGGCCGGCGCGAGGACGAACUCGGCGGACGGC\
) } def
/len { sequence length } bind def

/coor [
[107.39196777 265.18746948]
[91.63481903 263.96777344]
[81.41889191 251.90916443]
[82.80512238 236.16578674]
[94.97107697 226.07791138]
[96.12870789 211.12265015]
[97.28634644 196.16738892]
[98.44397736 181.21212769]
[91.71198273 167.92568970]
[100.49124146 154.76379395]
[86.84476471 152.31413269]
[74.45451355 146.57386780]
[64.08518219 138.01376343]
[56.34677887 127.27443695]
[51.65913391 115.11930847]
[36.83781815 117.42766571]
[22.01649857 119.73602295]
[7.19517994 122.04438019]
[-7.62613869 124.35273743]
[-22.60013771 137.73066711]
[-40.36531067 130.27517700]
[-55.04814529 133.34346008]
[-69.73097992 136.41174316]
[-84.41381836 139.48002625]
[-96.27103424 150.80868530]
[-111.93243408 145.94529724]
[-115.28691101 129.89289856]
[-102.88366699 119.16481781]
[-87.48210144 124.79718781]
[-72.79926300 121.72891235]
[-58.11642838 118.66062927]
[-43.43359375 115.59234619]
[-38.54464722 106.45496368]
[-29.20810127 101.46966553]
[-18.45534515 102.53323364]
[-9.93449688 109.53142548]
[4.88682127 107.22306061]
[19.70813942 104.91470337]
[34.52945709 102.60634613]
[49.35077667 100.29798889]
[50.54788589 89.04916382]
[54.21176910 78.34658051]
[60.15966415 68.72412872]
[68.09487915 60.66177368]
[77.62158966 54.56169510]
[73.05986786 40.27216339]
[68.49814606 25.98263359]
[62.84266281 18.65522194]
[64.00806427 11.26611710]
[59.81578064 -3.13613081]
[55.62349701 -17.53837967]
[40.97607040 -22.66015625]
[32.16425323 -35.43244934]
[32.57636261 -50.94404984]
[42.05393600 -63.23043442]
[56.95265198 -67.56723022]
[71.54365540 -62.28686142]
[80.21640015 -49.41972733]
[79.63603973 -33.91350937]
[70.02574158 -21.73066330]
[74.21802521 -7.32841539]
[78.41030884 7.07383299]
[82.78768158 21.42091179]
[87.34940338 35.71044159]
[91.91112518 49.99997330]
[104.73512268 49.57172012]
[117.25524902 52.37974167]
[128.66799927 58.24382401]
[138.24096680 66.78763580]
[150.89759827 58.73719406]
[163.55422974 50.68674850]
[176.21086121 42.63630676]
[183.70252991 28.70126152]
[198.59407043 28.39912796]
[211.25070190 20.34868622]
[223.90734863 12.29824257]
[236.56398010 4.24779987]
[249.22061157 -3.80264282]
[256.31939697 -18.58571625]
[272.68960571 -19.55955124]
[281.49096680 -5.72235155]
[273.66940308 8.69135857]
[257.27105713 8.85399055]
[244.61442566 16.90443420]
[231.95777893 24.95487595]
[219.30114746 33.00531769]
[206.64451599 41.05576324]
[200.05813599 54.41498566]
[184.26130676 55.29294205]
[171.60467529 63.34338379]
[158.94804382 71.39382935]
[146.29141235 79.44426727]
[151.31941223 93.91352844]
[151.83943176 109.52955627]
[147.62356567 124.89305115]
[138.87635803 138.57388306]
[150.39456177 148.18278503]
[159.09912109 151.33018494]
[162.08148193 158.19039917]
[173.34846497 168.09268188]
[184.61544800 177.99496460]
[195.88241577 187.89724731]
[211.63586426 186.63053894]
[223.61660767 196.93768311]
[224.71670532 212.70362854]
[214.28346252 224.57473755]
[198.50675964 225.50807190]
[186.74662781 214.94992065]
[185.98013306 199.16423035]
[174.71316528 189.26194763]
[163.44618225 179.35966492]
[152.17919922 169.45738220]
[140.78565979 159.70098877]
[129.26745605 150.09208679]
[115.44650269 155.92143250]
[122.09569550 170.27757263]
[113.39923859 182.36976624]
[112.24160767 197.32502747]
[111.08397675 212.28028870]
[109.92634583 227.23554993]
[120.39495087 239.07546997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[7 118]
[8 117]
[10 115]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[21 32]
[22 31]
[23 30]
[24 29]
[45 65]
[46 64]
[47 63]
[49 62]
[50 61]
[51 60]
[69 92]
[70 91]
[71 90]
[72 89]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
[96 114]
[97 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
