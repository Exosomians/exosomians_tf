%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAACGACUUUCGGCAAAGGGCACAAACCUCCCAAGUGUGGACAGGGAAAGUUUACGACCGCGAAAGUGUGUGAG\
) } def
/len { sequence length } bind def

/coor [
[92.26939392 302.33679199]
[92.26939392 287.33679199]
[92.26939392 272.33679199]
[92.26939392 257.33679199]
[80.13098145 248.74629211]
[75.32167053 234.48675537]
[79.88442230 219.95971680]
[92.26939392 210.79901123]
[92.26939392 195.79901123]
[92.26939392 180.79901123]
[92.26939392 165.79901123]
[92.26939392 150.79901123]
[92.26939392 135.79901123]
[92.26939392 120.79901886]
[89.02849579 113.91786957]
[92.58786011 105.19030762]
[90.15378571 101.79152679]
[89.37642670 97.27688599]
[90.74028015 92.48391724]
[94.30203247 88.44295502]
[96.73917389 73.64227295]
[84.97696686 63.86486053]
[79.72268677 49.60690308]
[82.29347229 34.73217773]
[91.90022278 23.21843529]
[105.88603210 18.09370613]
[108.32317352 3.29301953]
[110.76031494 -11.50766754]
[113.19745636 -26.30835533]
[106.24402618 -43.21575546]
[117.57022858 -56.45971298]
[119.40164185 -71.34748840]
[121.23305511 -86.23526764]
[123.06447601 -101.12304688]
[115.68316650 -111.92436218]
[117.69669342 -124.44129944]
[127.45053864 -131.89074707]
[129.88768005 -146.69143677]
[123.60137939 -161.83786011]
[133.78884888 -174.68884277]
[149.97009277 -172.02436829]
[155.49923706 -156.58543396]
[144.68836975 -144.25428772]
[142.25122070 -129.45359802]
[149.38739014 -113.55515289]
[137.95225525 -99.29163361]
[136.12083435 -84.40385437]
[134.28941345 -69.51607513]
[132.45800781 -54.62829971]
[139.71800232 -44.73263168]
[138.12353516 -32.15544510]
[127.99813843 -23.87121201]
[125.56099701 -9.07052517]
[123.12385559 5.73016167]
[120.68671417 20.53084946]
[132.29095459 29.86933899]
[137.69879150 43.85544586]
[135.36450195 58.76911163]
[125.81603241 70.58958435]
[111.53986359 76.07941437]
[109.10272217 90.88010406]
[107.57537079 105.80213928]
[107.26939392 120.79901886]
[107.26939392 135.79901123]
[107.26939392 150.79901123]
[107.26939392 165.79901123]
[107.26939392 180.79901123]
[107.26939392 195.79901123]
[107.26939392 210.79901123]
[119.65437317 219.95971680]
[124.21712494 234.48675537]
[119.40781403 248.74629211]
[107.26939392 257.33679199]
[107.26939392 272.33679199]
[107.26939392 287.33679199]
[107.26939392 302.33679199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[16 62]
[20 61]
[21 60]
[26 55]
[27 54]
[28 53]
[29 52]
[31 49]
[32 48]
[33 47]
[34 46]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
