%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGAUGGUGCUGGCUGCGGUGCGGCUCAGCUAACCGUUGUGUCUGCUCGGCCAGCUCCAGGCCAGCUC\
) } def
/len { sequence length } bind def

/coor [
[53.64966202 330.80212402]
[40.92094421 339.22485352]
[25.79711533 341.28219604]
[11.28102779 336.56561279]
[0.25486058 326.01165771]
[-5.09213305 311.71575928]
[-3.69830394 296.51641846]
[4.15960264 283.43145752]
[16.92139244 275.05892944]
[32.05320358 273.06115723]
[36.68846130 258.79531860]
[41.32371521 244.52947998]
[45.95896912 230.26362610]
[50.59422684 215.99777222]
[55.22948074 201.73193359]
[59.86473465 187.46607971]
[54.61920547 176.33970642]
[58.61599350 164.27854919]
[70.18243408 158.10389709]
[75.45305634 144.06037903]
[72.68116760 129.42596436]
[84.77413177 119.22445679]
[90.04475403 105.18093109]
[94.99893951 91.02268219]
[99.63419342 76.75683594]
[104.26944733 62.49098969]
[108.90470123 48.22514343]
[105.81057739 32.70944214]
[117.10213470 22.99604225]
[121.73738861 8.73019505]
[126.37264252 -5.53565264]
[119.45162964 -19.49048615]
[124.35565948 -33.89205170]
[137.70211792 -40.40417862]
[142.33737183 -54.67002869]
[134.93995667 -68.63619995]
[139.66456604 -83.71776581]
[153.70816040 -90.96710205]
[168.73893738 -86.08330536]
[175.83938599 -71.96385193]
[170.79695129 -56.98555374]
[156.60321045 -50.03477478]
[151.96795654 -35.76892471]
[158.93774414 -22.65565491]
[154.44015503 -8.12202644]
[140.63848877 -0.90039766]
[136.00323486 13.36544991]
[131.36798096 27.63129807]
[134.79365540 42.12660980]
[123.17054749 52.86039734]
[118.53529358 67.12624359]
[113.90003967 81.39208984]
[109.26478577 95.65793610]
[109.96268463 103.97728729]
[104.08827209 110.45156097]
[98.81764984 124.49507904]
[101.21254730 140.13397217]
[89.49657440 149.33099365]
[84.22595215 163.37452698]
[87.77082825 181.28726196]
[74.13058472 192.10133362]
[69.49533081 206.36718750]
[64.86006927 220.63302612]
[60.22481918 234.89888000]
[55.58956146 249.16473389]
[50.95430756 263.43057251]
[46.31905365 277.69641113]
[57.38669586 288.20690918]
[62.78994370 302.48162842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[19 59]
[20 58]
[22 56]
[23 55]
[24 53]
[25 52]
[26 51]
[27 50]
[29 48]
[30 47]
[31 46]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
