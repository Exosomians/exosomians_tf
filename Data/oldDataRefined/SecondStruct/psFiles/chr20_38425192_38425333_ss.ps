%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:07 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGUACAUGCUUUCGAGGUCUCAAACCUUCCCUAUCCUCACCUGGGAAGUUUGUGCCCCUUCGCGAAAGUAACUAAGGAGAGGGACGUGAUAGUUACUGGUCCCGUUUCCGUCGGGUGCUAGUGAAAGCUUAUGUCCCUG\
) } def
/len { sequence length } bind def

/coor [
[173.23292542 126.65184784]
[158.70910645 122.90235138]
[144.18528748 119.15285492]
[129.66146851 115.40335846]
[120.05796814 126.73469543]
[106.49291992 132.78579712]
[91.64548492 132.36152649]
[78.44811249 125.54569244]
[69.50734711 113.68444824]
[66.58903503 99.12046051]
[52.06521988 95.37096405]
[37.54140091 91.62146759]
[23.01758385 87.87197113]
[8.49376583 84.12247467]
[-6.03005123 80.37297821]
[-20.55386925 76.62348175]
[-35.07768631 72.87398529]
[-49.71715546 69.60505676]
[-64.45638275 66.82023621]
[-79.19561005 64.03541565]
[-91.30873871 75.78778839]
[-107.87189484 78.01095581]
[-122.36503601 70.02857208]
[-129.20092773 55.14287186]
[-143.99777222 52.68250656]
[-158.79461670 50.22214127]
[-173.59146118 47.76177597]
[-188.38830566 45.30141068]
[-197.44642639 46.98735809]
[-203.48168945 42.62104416]
[-218.22091675 39.83622360]
[-232.96014404 37.05140305]
[-247.69937134 34.26658630]
[-262.43859863 31.48176575]
[-271.89373779 43.51749039]
[-285.86389160 49.76998520]
[-301.13879395 48.80247116]
[-314.20837402 40.83727646]
[-322.06936646 27.70474243]
[-322.91537476 12.42263222]
[-316.55194092 -1.49733794]
[-304.44140625 -10.85646152]
[-289.36663818 -13.50407982]
[-274.79171753 -8.83178997]
[-264.06585693 2.08674979]
[-259.65377808 16.74254036]
[-244.91455078 19.52735901]
[-230.17532349 22.31217766]
[-215.43609619 25.09699821]
[-200.69686890 27.88181686]
[-185.92794800 30.50456810]
[-171.13110352 32.96493149]
[-156.33425903 35.42529678]
[-141.53741455 37.88566208]
[-126.74056244 40.34602737]
[-118.10384369 30.10929298]
[-105.42837524 25.45803833]
[-92.00636292 27.71481895]
[-81.38092041 36.39288330]
[-76.41078949 49.29618835]
[-61.67156219 52.08100891]
[-46.93233871 54.86582947]
[-43.78104019 53.12690353]
[-39.61262894 52.87417221]
[-35.15679550 54.57682800]
[-31.32818985 58.35017014]
[-16.80437279 62.09966660]
[-2.28055525 65.84915924]
[12.24326229 69.59865570]
[26.76708031 73.34815216]
[41.29089737 77.09764862]
[55.81471634 80.84714508]
[70.33853149 84.59664154]
[79.94203186 73.26530457]
[93.50708008 67.21421051]
[108.35451508 67.63847351]
[121.55188751 74.45430756]
[130.49266052 86.31555176]
[133.41096497 100.87953949]
[147.93478394 104.62903595]
[162.45860291 108.37853241]
[176.98242188 112.12802887]
[191.58509827 115.55757141]
[206.25958252 118.66549683]
[220.93408203 121.77342987]
[235.60858154 124.88135529]
[250.28306580 127.98928833]
[264.95755005 131.09721375]
[279.63204956 134.20515442]
[294.30654907 137.31307983]
[308.98104858 140.42100525]
[323.65554810 143.52894592]
[336.02392578 132.04548645]
[352.63192749 130.18672180]
[366.94619751 138.48554993]
[373.45346069 153.51782227]
[388.19268799 156.30264282]
[402.93191528 159.08746338]
[417.67114258 161.87228394]
[432.41033936 164.65710449]
[447.14956665 167.44192505]
[461.88879395 170.22674561]
[476.62802124 173.01156616]
[491.39697266 175.63430786]
[506.19381714 178.09468079]
[520.99066162 180.55503845]
[535.78747559 183.01541138]
[547.54943848 172.71049500]
[563.18444824 172.42858887]
[575.31024170 182.30278015]
[578.20129395 197.67079163]
[570.49261475 211.27630615]
[555.82397461 216.69522095]
[541.12145996 211.36889648]
[533.32714844 197.81225586]
[518.53027344 195.35188293]
[503.73342896 192.89152527]
[488.93658447 190.43115234]
[481.76699829 192.45246887]
[473.84320068 187.75079346]
[459.10397339 184.96597290]
[444.36474609 182.18115234]
[429.62554932 179.39633179]
[414.88632202 176.61151123]
[400.14709473 173.82669067]
[385.40786743 171.04187012]
[370.66864014 168.25704956]
[361.80911255 178.30158997]
[349.03451538 182.67327881]
[335.66534424 180.12219238]
[325.23309326 171.21281433]
[320.54760742 158.20343018]
[305.87310791 155.09550476]
[291.19860840 151.98757935]
[276.52413940 148.87963867]
[261.84963989 145.77171326]
[247.17514038 142.66378784]
[232.50064087 139.55584717]
[217.82615662 136.44792175]
[203.15165710 133.33999634]
[188.47717285 130.23205566]
[183.99844360 132.08392334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 62]
[19 61]
[20 60]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[83 141]
[84 140]
[85 139]
[86 138]
[87 137]
[88 136]
[89 135]
[90 134]
[91 133]
[92 132]
[96 127]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
