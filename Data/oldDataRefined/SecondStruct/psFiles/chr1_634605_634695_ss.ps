%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGAAGCUAUGCCCUAUUAGGAUAAAUAAUGGAGUCUUCAAAAAAAGAAGCGUCCUAAAAAGACUCGGAAAAUGGUGAGGUCGGAUCG\
) } def
/len { sequence length } bind def

/coor [
[109.01863861 342.98077393]
[118.43601990 329.99261475]
[117.41238403 315.02758789]
[116.38874817 300.06256104]
[115.36511230 285.09750366]
[114.34147644 270.13247681]
[99.88248444 259.16137695]
[97.78715515 240.81694031]
[109.80081177 226.38577271]
[107.75830841 211.52548218]
[105.71581268 196.66519165]
[103.67330933 181.80490112]
[101.63081360 166.94461060]
[73.82080078 161.63513184]
[50.69049835 145.30798340]
[36.37458420 120.88173676]
[21.68832207 123.93357086]
[7.00205994 126.98541260]
[-7.27561808 136.12785339]
[-20.01322365 124.93903351]
[-12.78778648 109.60184479]
[3.95021987 112.29915619]
[18.63648033 109.24731445]
[33.32274246 106.19547272]
[33.16614914 95.81945038]
[34.61452866 85.54383087]
[37.63310242 75.61535645]
[42.14937973 66.27246857]
[48.05490112 57.73952866]
[55.20785522 50.22144699]
[63.43646622 43.89876556]
[72.54312134 38.92332077]
[82.30914307 35.41459656]
[92.50000000 33.45685196]
[92.50000000 18.45685196]
[92.50000000 3.45685196]
[81.60544586 -7.67627287]
[81.81912994 -22.88840675]
[92.50000000 -33.20608902]
[92.50000000 -48.20608902]
[92.50000000 -63.20608902]
[92.50000000 -78.20608521]
[80.40541840 -88.11846161]
[77.56279755 -103.49550629]
[85.31433868 -117.07665253]
[100.00000000 -122.44930267]
[114.68566132 -117.07665253]
[122.43720245 -103.49550629]
[119.59458160 -88.11846161]
[107.50000000 -78.20608521]
[107.50000000 -63.20608902]
[107.50000000 -48.20608902]
[107.50000000 -33.20608902]
[118.18087006 -22.88840675]
[118.39455414 -7.67627287]
[107.50000000 3.45685196]
[107.50000000 18.45685196]
[107.50000000 33.45685196]
[118.23528290 35.56619644]
[128.48382568 39.39543915]
[137.97204590 44.84237289]
[146.44671631 51.76160049]
[153.68159485 59.96842957]
[159.48358154 69.24380493]
[163.69779968 79.34013367]
[166.21177673 89.98793030]
[166.95838928 100.90297699]
[165.91770935 111.79392242]
[163.11752319 122.37004852]
[158.63256836 132.34907532]
[152.58256531 141.46461487]
[145.12901306 149.47335815]
[136.47084045 156.16154480]
[126.83917236 161.35063171]
[116.49110413 164.90211487]
[118.53359985 179.76240540]
[120.57610321 194.62269592]
[122.61859894 209.48298645]
[124.66110229 224.34326172]
[135.56431580 229.67823792]
[142.38594055 239.57160950]
[143.47363281 251.41778564]
[138.66658020 262.16662598]
[129.30650330 269.10885620]
[130.33013916 284.07388306]
[131.35377502 299.03890991]
[132.37741089 314.00393677]
[133.40104675 328.96896362]
[144.49926758 340.55383301]
[142.21876526 356.43399048]
[128.30895996 364.42752075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[16 24]
[17 23]
[18 22]
[34 58]
[35 57]
[36 56]
[39 53]
[40 52]
[41 51]
[42 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
