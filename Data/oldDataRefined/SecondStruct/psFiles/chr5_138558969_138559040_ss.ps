%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUACGAGUCAGUGUCUUUCAGUGGUGUAUGAAAAGAAGUCUCACUACACAACUGUUUAUGUAGUGCCGUGU\
) } def
/len { sequence length } bind def

/coor [
[82.52001953 230.34071350]
[75.18000793 215.67591858]
[84.43472290 202.13772583]
[85.08005524 187.15162659]
[85.72538757 172.16551208]
[86.37071991 157.17939758]
[83.42111206 150.14805603]
[87.37998962 141.56649780]
[84.73561096 134.41476440]
[89.06002045 126.01148224]
[90.99124146 111.13632202]
[85.79526520 98.15581512]
[94.13359833 86.93245697]
[96.06481934 72.05729675]
[82.46705627 63.39128876]
[73.97683716 49.75080490]
[72.21772766 33.83834076]
[77.48545837 18.78135872]
[88.69958496 7.51758814]
[103.62470245 2.22189403]
[104.91416931 -12.72257900]
[106.20364380 -27.66705132]
[107.49311829 -42.61152267]
[100.97078705 -57.02574539]
[109.77354431 -69.04077148]
[111.06301117 -83.98523712]
[112.35248566 -98.92971039]
[113.64196014 -113.87418365]
[114.93142700 -128.81866455]
[115.89905548 -143.78741455]
[116.54438782 -158.77352905]
[117.18972015 -173.75964355]
[104.52326965 -182.56671143]
[98.65014648 -196.83239746]
[101.44445801 -212.00459290]
[112.01454163 -223.24188232]
[126.98752594 -226.95851135]
[141.58558655 -221.96849060]
[151.15052795 -209.86413574]
[152.63021851 -194.50790405]
[145.55250549 -180.79989624]
[132.17584229 -173.11430359]
[131.53050232 -158.12818909]
[130.88516235 -143.14208984]
[133.83477783 -136.11073303]
[129.87590027 -127.52919006]
[128.58642578 -112.58471680]
[127.29695892 -97.64024353]
[126.00748444 -82.69577026]
[124.71801758 -67.75129700]
[131.33258057 -54.40600204]
[122.43759155 -41.32205200]
[121.14811707 -26.37757874]
[119.85864258 -11.43310642]
[118.56917572 3.51136613]
[130.96620178 10.08510685]
[139.90528870 20.95809364]
[143.98281860 34.47605515]
[142.53820801 48.56544876]
[135.76058960 61.05151749]
[124.66490173 69.99398804]
[110.93997955 73.98851776]
[109.00875854 88.86367798]
[114.20473480 101.84418488]
[105.86640167 113.06754303]
[103.93518066 127.94270325]
[102.32445526 142.85597229]
[101.35683441 157.82473755]
[100.71150208 172.81083679]
[100.06616211 187.79695129]
[99.42082977 202.78306580]
[107.47747803 217.06671143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[8 67]
[10 66]
[11 65]
[13 63]
[14 62]
[20 55]
[21 54]
[22 53]
[23 52]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 44]
[31 43]
[32 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
