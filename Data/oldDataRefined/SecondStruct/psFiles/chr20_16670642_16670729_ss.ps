%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUGAUCAGUUCACUUCGUCACCCUCACCUCUUCCUUGUUUCUUUAGACAUUGACCAACACUAGUUAAUCAACAUUUGUGGUGACG\
) } def
/len { sequence length } bind def

/coor [
[8.13523865 264.67794800]
[2.58841753 276.00021362]
[-7.24513102 283.77365112]
[-19.39961243 286.52462769]
[-31.47965622 283.77563477]
[-41.21130753 295.19030762]
[-50.94295883 306.60501099]
[-51.10858154 322.64718628]
[-63.84230042 332.40588379]
[-79.37590027 328.39501953]
[-85.79332733 313.69140625]
[-78.17168427 299.57440186]
[-62.35763931 296.87335205]
[-52.62598801 285.45867920]
[-42.89433670 274.04397583]
[-47.87857056 257.28936768]
[-41.91353226 240.69429016]
[-27.14705467 230.77474976]
[-9.22012520 231.54046631]
[-0.31789529 219.46774292]
[8.58433533 207.39503479]
[17.48656464 195.32232666]
[26.38879585 183.24961853]
[35.29102707 171.17691040]
[44.19325638 159.10420227]
[42.71810532 146.95762634]
[50.22797394 136.79086304]
[63.06630325 134.48645020]
[72.38905334 122.73542786]
[67.22374725 115.52533722]
[63.93525314 107.15598297]
[62.77936935 98.11444855]
[63.88587570 88.94296265]
[67.24702454 80.20632935]
[72.71446991 72.45719147]
[80.00487518 66.20115662]
[88.71423340 61.86392593]
[98.34004974 59.76275253]
[108.31025696 60.08390045]
[109.36833954 45.12126541]
[110.42642212 30.15863228]
[111.48450470 15.19599628]
[112.54259491 0.23336062]
[104.88264465 -14.26688766]
[113.83814240 -28.00483131]
[130.19644165 -26.84805298]
[137.12951660 -11.98654556]
[127.50522614 1.29144502]
[126.44714355 16.25407982]
[125.38906097 31.21671486]
[124.33097839 46.17935181]
[123.27288818 61.14198685]
[134.68757629 70.87363434]
[149.29447937 67.46212006]
[163.90138245 64.05060577]
[178.50827026 60.63909149]
[186.87184143 47.49799347]
[201.73391724 44.24631500]
[214.21040344 52.30068207]
[228.81730652 48.88916779]
[243.42420959 45.47764969]
[255.01269531 33.87424469]
[270.78375244 38.36928940]
[274.51348877 54.33867264]
[262.36505127 65.35446167]
[246.83572388 60.08455276]
[232.22882080 63.49606705]
[217.62191772 66.90758514]
[210.00382996 79.65514374]
[195.23895264 83.32298279]
[181.91978455 75.24599457]
[167.31289673 78.65750885]
[152.70599365 82.06902313]
[138.09909058 85.48053741]
[139.50935364 104.55403900]
[132.13716125 121.68662262]
[118.05133057 133.17585754]
[100.71495819 136.76089478]
[84.14006805 132.05818176]
[74.81731415 143.80918884]
[72.64921570 161.99034119]
[56.26596451 168.00643921]
[47.36373520 180.07914734]
[38.46150589 192.15185547]
[29.55927467 204.22456360]
[20.65704346 216.29727173]
[11.75481319 228.36997986]
[2.85258317 240.44268799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[28 80]
[29 79]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[53 74]
[54 73]
[55 72]
[56 71]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
