%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:30 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUCCCGUACGUCCGGACCUACCCCGUCGACCCUACCAGGUUUUCCCACCGGAGUGGUCGGGACACAAGGGAUCCC\
) } def
/len { sequence length } bind def

/coor [
[85.22803497 374.00335693]
[75.15119171 362.32171631]
[73.01220703 347.04336548]
[79.49362946 333.04354858]
[92.52725983 324.78958130]
[92.52725983 309.78958130]
[92.52725983 294.78958130]
[92.52725983 279.78958130]
[79.55993652 272.46060181]
[71.95153809 259.53897095]
[71.83170319 244.44419861]
[79.33274841 231.22940063]
[92.52725983 223.49298096]
[92.52725983 208.49298096]
[92.52725983 193.49298096]
[92.52725983 178.49298096]
[84.78995514 165.76570129]
[92.52725983 151.96553040]
[92.52725983 136.96553040]
[92.52725983 121.96553802]
[92.52725983 106.96553802]
[89.30719757 99.31665802]
[92.83734894 91.37215424]
[93.43370056 76.38401031]
[86.25115967 62.28713989]
[94.48833466 49.87754059]
[95.08468628 34.88940048]
[95.68103027 19.90125847]
[79.55479431 5.63494253]
[78.48874664 -15.60430431]
[92.74568939 -31.02444649]
[90.36972046 -45.83507538]
[87.99375153 -60.64570618]
[85.61777496 -75.45633698]
[72.66809082 -84.51619720]
[69.99987793 -100.09362793]
[79.19614410 -112.94680786]
[94.80091095 -115.45017242]
[107.55614471 -106.11852264]
[109.89438629 -90.48816681]
[100.42840576 -77.83230591]
[102.80438232 -63.02167892]
[105.18035126 -48.21104813]
[107.55632019 -33.40041733]
[116.53077698 -30.78101921]
[124.10795593 -25.22934723]
[129.35975647 -17.38781548]
[131.63014221 -8.18147469]
[130.61697388 1.29107249]
[126.41179657 9.88877010]
[119.49250793 16.56555367]
[110.66917419 20.49760628]
[110.07282257 35.48574829]
[109.47647858 50.47388840]
[116.70166779 63.49870682]
[108.42183685 76.98036194]
[107.82549286 91.96849823]
[107.52725983 106.96553802]
[107.52725983 121.96553802]
[107.52725983 136.96553040]
[107.52725983 151.96553040]
[115.26455688 165.76570129]
[107.52725983 178.49298096]
[107.52725983 193.49298096]
[107.52725983 208.49298096]
[107.52725983 223.49298096]
[120.72177124 231.22940063]
[128.22280884 244.44419861]
[128.10298157 259.53897095]
[120.49458313 272.46060181]
[107.52725983 279.78958130]
[107.52725983 294.78958130]
[107.52725983 309.78958130]
[107.52725983 324.78958130]
[120.56089020 333.04354858]
[127.04231262 347.04336548]
[124.90332794 362.32171631]
[114.82648468 374.00335693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 74]
[6 73]
[7 72]
[8 71]
[13 66]
[14 65]
[15 64]
[16 63]
[18 61]
[19 60]
[20 59]
[21 58]
[23 57]
[24 56]
[26 54]
[27 53]
[28 52]
[31 44]
[32 43]
[33 42]
[34 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
