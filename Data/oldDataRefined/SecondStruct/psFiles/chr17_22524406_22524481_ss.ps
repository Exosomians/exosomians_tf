%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUGCUGGAGCUACAACCUAGUCCUGUAGGGUUACCACGUCGGCGAUAAUUUCCAAGCAAACAAGUUGCUAAUC\
) } def
/len { sequence length } bind def

/coor [
[194.83464050 198.81198120]
[192.67124939 183.18807983]
[195.94464111 167.73135376]
[183.16304016 159.88084412]
[170.38143921 152.03031921]
[157.59983826 144.17979431]
[144.81822205 136.32928467]
[132.03662109 128.47875977]
[119.25502777 120.62824249]
[106.47342682 112.77772522]
[92.50330353 112.20552826]
[85.67605591 100.00388336]
[72.84583282 109.47050476]
[57.41619110 113.33604431]
[41.71374512 111.04753876]
[28.09489822 102.97774506]
[18.59220505 90.36477661]
[14.61104393 75.12223816]
[16.72183228 59.54891205]
[3.63065696 52.22626877]
[-9.46051979 44.90362549]
[-22.55169678 37.58098221]
[-37.69036102 42.11931229]
[-51.56427383 34.55029297]
[-55.94229507 19.36449432]
[-48.22701645 5.57137871]
[-32.99577713 1.35415757]
[-19.28500366 9.21483326]
[-15.22905254 24.48980713]
[-2.13787651 31.81245041]
[10.95329952 39.13509369]
[24.04447556 46.45773697]
[34.84503937 37.27453995]
[48.17592621 32.36275101]
[62.41300964 32.34289551]
[75.81412506 37.23814774]
[86.73226929 46.46896362]
[93.81798553 58.92161942]
[96.18618011 73.08253479]
[93.52657318 87.22227478]
[107.49669647 87.79447174]
[114.32394409 99.99611664]
[127.10554504 107.84664154]
[139.88714600 115.69715881]
[152.66874695 123.54767609]
[165.45034790 131.39819336]
[178.23194885 139.24871826]
[191.01354980 147.09924316]
[203.79515076 154.94975281]
[214.93055725 145.70812988]
[228.37113953 140.40434265]
[242.77362061 139.55395508]
[256.70312500 143.22819519]
[268.77606201 151.04817200]
[277.79766846 162.22392273]
[282.88006592 175.63417053]
[283.52984619 189.93882751]
[279.69573975 203.71293640]
[292.14651489 212.07826233]
[304.59725952 220.44360352]
[317.04800415 228.80892944]
[329.49874878 237.17425537]
[345.45504761 235.50793457]
[356.60324097 247.04470825]
[354.39141846 262.93457031]
[340.51626587 270.98815918]
[325.62167358 265.02746582]
[321.13342285 249.62501526]
[308.68267822 241.25968933]
[296.23193359 232.89434814]
[283.78115845 224.52902222]
[271.33041382 216.16369629]
[258.84902954 225.54440308]
[243.89929199 230.13981628]
[228.25071716 229.38713074]
[213.76196289 223.35768127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[12 40]
[19 32]
[20 31]
[21 30]
[22 29]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
