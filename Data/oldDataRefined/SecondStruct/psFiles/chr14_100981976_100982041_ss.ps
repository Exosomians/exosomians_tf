%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:22 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGUUACUACUGGUGACCACCGCAUACUCAGUAUACACUACUUAUGCACAGACCUUGAGACUCC\
) } def
/len { sequence length } bind def

/coor [
[79.65191650 155.80717468]
[70.90264130 151.78639221]
[62.91794968 146.40483093]
[55.90764618 139.80389404]
[50.05593872 132.15707397]
[36.51968384 138.62002563]
[22.98343086 145.08297729]
[9.44717598 151.54592896]
[-4.08907938 158.00889587]
[-17.62533379 164.47184753]
[-29.31368828 176.75267029]
[-44.35023499 168.92077637]
[-40.98694229 152.30378723]
[-24.08829117 150.93559265]
[-10.55203533 144.47264099]
[2.98421955 138.00967407]
[16.52047539 131.54672241]
[30.05673027 125.08377075]
[43.59298325 118.62081146]
[40.83948898 94.65959167]
[47.83945465 71.57881927]
[63.43883896 53.18368149]
[85.06585693 42.50689316]
[109.15499115 41.30867004]
[113.31958771 26.89839172]
[117.48418427 12.48811340]
[121.64878845 -1.92216408]
[125.81338501 -16.33244133]
[124.34191895 -22.09586716]
[125.38306427 -27.22980881]
[128.18128967 -30.80733490]
[131.70661926 -32.39367294]
[137.85047913 -46.07771683]
[143.99433899 -59.76176071]
[150.13819885 -73.44580078]
[145.80264282 -88.89192200]
[155.29229736 -101.82737732]
[171.32749939 -102.32920074]
[181.60742188 -90.01242828]
[178.24617004 -74.32543945]
[163.82223511 -67.30194855]
[157.67837524 -53.61790466]
[151.53453064 -39.93386078]
[145.39067078 -26.24981880]
[140.22366333 -12.16784191]
[136.05906677 2.24243593]
[131.89447021 16.65271378]
[127.72986603 31.06299210]
[123.56526184 45.47327042]
[132.06538391 49.99703217]
[139.72294617 55.83470154]
[146.33671570 62.83288193]
[151.73292542 70.80769348]
[155.76976013 79.54956818]
[158.34115601 88.82881927]
[159.37954712 98.40161133]
[158.85765076 108.01639557]
[156.78918457 117.42053986]
[153.22846985 126.36693573]
[148.26911926 134.62049866]
[142.04139709 141.96435547]
[134.70898438 148.20552063]
[126.46453857 153.18002319]
[117.52469635 156.75712585]
[108.12435913 158.84284973]
[98.51054382 159.38238525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[32 44]
[33 43]
[34 42]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
