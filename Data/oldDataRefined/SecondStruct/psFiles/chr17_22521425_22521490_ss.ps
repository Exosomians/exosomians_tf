%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUCAGUGCCCUCGAGAGGUACGUAAACCAUAAAAUUAGACCCCCCACACGUGCGCUAUCGUAAC\
) } def
/len { sequence length } bind def

/coor [
[93.47372437 219.70028687]
[80.35197449 227.22854614]
[65.54566956 230.33152771]
[50.50537872 228.70521545]
[36.70460129 222.50895691]
[25.49539375 212.34977722]
[17.97592354 199.22297668]
[14.88286781 184.41459656]
[16.51925468 169.37539673]
[22.72476768 155.57878113]
[32.89145279 144.37638855]
[46.02328491 136.86570740]
[60.83373642 133.78257751]
[75.87183380 135.42904663]
[82.01568604 121.74499512]
[88.15954590 108.06095123]
[86.93270111 94.13304901]
[98.15641785 85.79518890]
[104.30027008 72.11114502]
[110.12165070 58.28683853]
[115.61734772 44.32985687]
[121.11304474 30.37287903]
[126.60874939 16.41589928]
[132.10444641 2.45891976]
[137.60014343 -11.49805927]
[125.29766846 -20.21083641]
[115.43831635 -31.61507034]
[108.59529877 -45.04773712]
[105.16645050 -59.72787476]
[105.35113525 -74.80200195]
[109.13860321 -89.39373016]
[116.30867004 -102.65470886]
[126.44445801 -113.81397247]
[138.95671082 -122.22273254]
[153.11795044 -127.39210510]
[168.10488892 -129.02156067]
[183.04620361 -127.01636505]
[197.07319641 -121.49308777]
[209.37039185 -112.77285767]
[219.22283936 -101.36264801]
[226.05770874 -87.92583466]
[229.47766113 -73.24362183]
[229.28382874 -58.16960526]
[225.48751831 -43.58017731]
[218.30941772 -30.32354546]
[208.16685486 -19.17043114]
[195.64952087 -10.76926231]
[181.48513794 -5.60847187]
[166.49722290 -3.98810220]
[151.55712891 -6.00235891]
[146.06143188 7.95462036]
[140.56573486 21.91160011]
[135.07002258 35.86857986]
[129.57432556 49.82555771]
[124.07862854 63.78253937]
[124.57780457 71.42372131]
[117.98431396 78.25500488]
[111.84045410 91.93904877]
[113.06729889 105.86695099]
[101.84358215 114.20481110]
[95.69972992 127.88885498]
[89.55587769 141.57289124]
[100.77868652 151.71704102]
[108.31574249 164.83374023]
[111.42864227 179.63796997]
[109.81240845 194.67935181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 62]
[15 61]
[16 60]
[18 58]
[19 57]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
