%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUUGUCUGUAGCGCUCGGUCGGUCCUCAGCUUGGAUCUUAGAAGACUAGGCAUCAGUCUGCGCAAUAGGUAACGCGGUGACCGGGGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[66.85773468 325.12182617]
[57.18954468 336.85189819]
[43.76605606 343.98480225]
[28.63424492 345.43283081]
[14.10160637 340.97515869]
[2.38426185 331.29153442]
[-4.73097944 317.85867310]
[-6.15909433 302.72497559]
[-1.68230641 288.19821167]
[8.01670742 276.49362183]
[21.45891762 269.39605713]
[36.59448624 267.98785400]
[40.99323654 253.64732361]
[45.39198685 239.30677795]
[49.79073715 224.96624756]
[48.72122574 217.50108337]
[54.57926941 210.22865295]
[59.44976044 196.04139709]
[64.32025146 181.85414124]
[69.19074249 167.66688538]
[74.06124115 153.47961426]
[78.93173218 139.29235840]
[83.80222321 125.10510254]
[88.67271423 110.91784668]
[79.18604279 122.53692627]
[64.68300629 126.36603546]
[50.69717026 120.94419098]
[42.56474686 108.34008026]
[43.38861847 93.36272430]
[52.85443878 81.72664642]
[67.35058594 77.87153625]
[81.34444427 83.26692963]
[76.94569397 68.92639160]
[72.54694366 54.58585358]
[68.14818573 40.24531555]
[63.74943924 25.90477943]
[59.35068893 11.56424332]
[53.73629761 4.10210514]
[55.05204773 -3.32361341]
[51.12984848 -17.80174637]
[47.20764923 -32.27988052]
[35.20457077 -43.45387650]
[39.14319229 -59.37302399]
[54.97179413 -63.66107178]
[66.40727234 -51.90684128]
[61.68578339 -36.20207977]
[65.60797882 -21.72394562]
[69.53018188 -7.24581242]
[73.69122314 7.16549253]
[78.08997345 21.50602913]
[82.48872375 35.84656525]
[86.88747406 50.18710327]
[91.28622437 64.52764130]
[95.68497467 78.86817932]
[95.34918976 63.87193680]
[105.15606689 52.52182007]
[120.04230499 50.67792130]
[132.32209778 59.29225159]
[135.65536499 73.91720581]
[128.32113647 87.00189209]
[114.10403442 91.79057312]
[129.08558655 91.04681396]
[144.06713867 90.30305481]
[159.04869080 89.55930328]
[174.03022766 88.81554413]
[180.96922302 75.11350250]
[193.83834839 66.73011780]
[209.17588806 65.92049408]
[222.85612488 72.90239716]
[231.19911194 85.79773712]
[231.96066284 101.13774109]
[224.93591309 114.79601288]
[212.01448059 123.09855652]
[196.67218018 123.81201935]
[183.03598022 116.74449158]
[174.77398682 103.79709625]
[159.79243469 104.54085541]
[144.81089783 105.28460693]
[129.82934570 106.02836609]
[114.84779358 106.77211761]
[102.85997009 115.78833771]
[97.98947906 129.97560120]
[93.11898804 144.16285706]
[88.24849701 158.35011292]
[83.37800598 172.53736877]
[78.50751495 186.72462463]
[73.63702393 200.91189575]
[68.76652527 215.09915161]
[64.13127136 229.36499023]
[59.73252106 243.70553589]
[55.33377075 258.04608154]
[50.93502045 272.38659668]
[62.67780304 282.03936768]
[69.82836151 295.45346069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 92]
[13 91]
[14 90]
[15 89]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[39 48]
[40 47]
[41 46]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
