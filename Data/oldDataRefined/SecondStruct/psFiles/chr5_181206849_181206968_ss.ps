%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCGACGACUCUCAUCCACCCCUACAUCGAGUCACCAUCUCGCGUACGAAACGUACAUACUCCGGGGCCCAAGCUAGGGGCCGUAGAGGUCACAUCAAAACGUGUAAGUUAAUAACAAA\
) } def
/len { sequence length } bind def

/coor [
[61.79018784 149.25631714]
[74.65090179 141.53610229]
[89.19076538 137.84930420]
[104.17626190 138.50872803]
[118.34060669 143.46076965]
[109.58695984 131.27990723]
[100.83332062 119.09902191]
[86.24097443 115.62575531]
[72.93831635 122.55677795]
[59.63565063 129.48780823]
[46.33298492 136.41883850]
[33.03032303 143.34985352]
[35.30856323 158.31944275]
[32.60029221 173.21722412]
[25.19928741 186.42721558]
[13.90834808 196.51649475]
[-0.04776599 202.39064026]
[-15.15520000 203.41247559]
[-29.77521324 199.47116089]
[-42.32193375 190.99421692]
[-51.43439102 178.90116882]
[-56.12413406 164.50378418]
[-55.88245010 149.36375427]
[-50.73555756 135.12338257]
[-41.24175262 123.32734680]
[-28.43085289 115.25519562]
[-13.69248867 111.78253937]
[1.37463260 113.28606415]
[15.13614273 119.60267639]
[26.09929466 130.04719543]
[39.40195847 123.11617279]
[52.70462418 116.18514252]
[66.00728607 109.25411987]
[79.30995178 102.32308960]
[81.51618195 95.15493011]
[66.51908875 94.85984039]
[52.28365326 99.58767700]
[38.52297211 93.61745453]
[32.25033188 79.99196625]
[36.66266632 65.65560150]
[49.51116943 57.91506195]
[64.24745178 60.71541214]
[73.36110687 72.62978363]
[85.92864990 80.81860352]
[88.13488007 73.65044403]
[81.03175354 60.43887711]
[73.92861938 47.22730637]
[66.82549286 34.01573944]
[59.72236252 20.80417061]
[46.89642715 9.71671391]
[54.00000763 -5.67729330]
[70.75888062 -3.11280751]
[72.93392944 13.70104027]
[80.03706360 26.91260910]
[87.14019012 40.12417603]
[94.24332428 53.33574677]
[101.34645081 66.54731750]
[108.78334045 67.51821899]
[117.90186310 55.60802460]
[123.65712738 69.46002197]
[131.09400940 70.43092346]
[141.35086060 59.48573303]
[151.60771179 48.54054642]
[155.39837646 33.18016052]
[169.74690247 29.18402290]
[173.53756714 13.82363892]
[187.88609314 9.82749939]
[198.14292908 -1.11768806]
[208.39978027 -12.06287575]
[218.65663147 -23.00806236]
[228.91346741 -33.95325089]
[226.86628723 -49.45625305]
[235.30674744 -62.62031555]
[250.24954224 -67.22977448]
[264.63912964 -61.10818100]
[271.68118286 -47.14596558]
[268.05065918 -31.93566132]
[255.46180725 -22.65910530]
[239.85865784 -23.69640541]
[229.60180664 -12.75121784]
[219.34497070 -1.80603039]
[209.08811951 9.13915730]
[198.83128357 20.08434486]
[195.77424622 34.66185760]
[180.69209290 39.44086838]
[177.63505554 54.01837921]
[162.55288696 58.79738998]
[152.29605103 69.74257660]
[142.03919983 80.68776703]
[113.01419067 110.34538269]
[121.76783752 122.52625275]
[130.52148438 134.70712280]
[141.98428345 144.38204956]
[155.46240234 150.96539307]
[168.94052124 157.54873657]
[182.41862488 164.13208008]
[197.28150940 158.75895691]
[211.55484009 165.54476929]
[216.77053833 180.46362305]
[209.83419800 194.66441345]
[194.86103821 199.72209167]
[180.73435974 192.63600159]
[175.83528137 177.61019897]
[162.35717773 171.02685547]
[148.87905884 164.44351196]
[135.40093994 157.86016846]
[142.65994263 170.98674011]
[145.82846069 185.64826965]
[144.63768005 200.60093689]
[139.18864441 214.57620239]
[129.94361877 226.38845825]
[117.68691254 235.03559875]
[103.45834351 239.78404236]
[88.46500397 240.23095703]
[73.97886658 236.33839417]
[61.22889328 228.43663025]
[51.29673004 217.19596863]
[45.02499008 203.57006836]
[42.94574356 188.71487427]
[45.23538208 173.89065552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 92]
[6 91]
[7 90]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[61 89]
[62 88]
[63 87]
[65 85]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
