%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUCCGCCCCGCGGCGCCCUGGCGGGAGCACAGACACCGCCACCCUAGGGCGCCGGCACAAAAGGACCACCGGGCCGGCACGGACU\
) } def
/len { sequence length } bind def

/coor [
[144.05978394 205.40193176]
[144.68853760 197.39541626]
[148.21195984 190.10122681]
[140.18350220 177.43063354]
[132.15504456 164.76004028]
[124.12658691 152.08946228]
[116.09812927 139.41886902]
[99.98261261 142.57929993]
[83.86968231 139.40570068]
[70.15627289 130.37019348]
[60.88235855 116.81686401]
[57.42751694 100.76189423]
[60.30567932 84.59358215]
[69.08869934 70.71710205]
[60.18647003 58.64439011]
[51.28424072 46.57168198]
[42.38200760 34.49897385]
[33.47977829 22.42626572]
[24.57754898 10.35355663]
[15.67531776 -1.71915233]
[6.77308750 -13.79186058]
[-2.12914276 -25.86457062]
[-11.03137302 -37.93727875]
[-19.93360329 -50.00998688]
[-27.72294426 -55.20618057]
[-28.92803383 -62.66953659]
[-37.39865494 -75.04889679]
[-52.67679596 -78.08471680]
[-61.09086227 -90.75981903]
[-58.10251236 -105.30648041]
[-66.57313538 -117.68584442]
[-81.99075317 -117.13757324]
[-95.24562073 -125.03137207]
[-102.10814667 -138.84835815]
[-100.38854218 -154.17959595]
[-90.63550568 -166.13291931]
[-75.96121216 -170.89407349]
[-61.04817200 -166.94380188]
[-50.65507507 -155.54261780]
[-48.09832764 -140.32858276]
[-54.19377518 -126.15646362]
[-45.72315216 -113.77709961]
[-31.08185005 -111.29358673]
[-22.31508636 -98.85982513]
[-25.01929474 -83.51951599]
[-16.54867363 -71.14015961]
[-7.86089468 -58.91221619]
[1.04133558 -46.83950806]
[9.94356632 -34.76679993]
[18.84579659 -22.69409180]
[27.74802589 -10.62138271]
[36.65025711 1.45132601]
[45.55248642 13.52403450]
[54.45471573 25.59674263]
[63.35694885 37.66945267]
[72.25917816 49.74216080]
[81.16140747 61.81486893]
[94.02671051 57.84176636]
[107.48934937 58.08453369]
[120.20304108 62.51888657]
[130.89640808 70.70139313]
[138.50010681 81.81378937]
[142.25375366 94.74482727]
[141.78198242 108.20138550]
[137.13197327 120.83779907]
[128.76872253 131.39041138]
[136.79718018 144.06100464]
[144.82563782 156.73158264]
[152.85409546 169.40217590]
[160.88255310 182.07276917]
[182.44874573 190.40171814]
[184.19535828 212.75125122]
[194.32379150 223.81536865]
[204.45222473 234.87950134]
[219.85464478 232.99673462]
[233.40576172 240.55628967]
[239.89489746 254.65135193]
[236.82682800 269.86209106]
[225.38130188 280.33966064]
[209.95935059 282.05523682]
[196.49104309 274.34912109]
[190.15519714 260.18447876]
[193.38809204 245.00793457]
[183.25965881 233.94380188]
[173.13122559 222.87966919]
[165.61441040 224.47396851]
[157.96327209 223.21849060]
[151.23060608 219.23492432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[26 46]
[27 45]
[30 42]
[31 41]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
