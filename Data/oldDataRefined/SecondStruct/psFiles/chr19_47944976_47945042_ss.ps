%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCAAGGUCCCGUGCUCAAGCUCCGGUCGGACCAGGUGUACCCAGCCUUUUUUCCUGAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[139.90867615 332.22634888]
[133.81945801 318.42114258]
[131.51171875 303.51016235]
[133.14283752 288.51010132]
[138.60157776 274.44366455]
[147.51574707 262.26992798]
[159.27758789 252.81893921]
[153.21878052 239.09703064]
[147.15995789 225.37512207]
[141.10115051 211.65321350]
[135.04232788 197.93130493]
[120.46829224 194.97572327]
[110.30903625 183.87376404]
[108.61524200 168.74153137]
[116.24474335 155.35881042]
[110.18592834 141.63691711]
[104.12711334 127.91500092]
[98.06829834 114.19309235]
[86.89654541 105.78574371]
[88.20979309 91.86572266]
[73.74662018 86.08174896]
[67.79759979 72.07946777]
[73.40086365 58.32669067]
[60.74864960 48.82763290]
[62.68587112 34.05954742]
[56.62705612 20.33763695]
[50.56824112 6.61572933]
[37.01862335 -2.62222862]
[38.51377869 -18.95307541]
[53.51561737 -25.57703590]
[66.59153748 -15.67994690]
[64.29015350 0.55691445]
[70.34896851 14.27882290]
[76.40778351 28.00073051]
[88.62662506 36.51830292]
[87.12277222 52.26787567]
[101.06109619 57.39219666]
[107.40106964 71.22185516]
[101.93170166 85.80690765]
[113.10345459 94.21425629]
[111.79020691 108.13427734]
[117.84902191 121.85618591]
[123.90783691 135.57809448]
[129.96664429 149.30000305]
[144.99655151 152.67761230]
[155.03829956 164.12385559]
[156.39849854 179.11097717]
[148.76423645 191.87248230]
[154.82305908 205.59439087]
[160.88186646 219.31629944]
[166.94068909 233.03820801]
[172.99949646 246.76011658]
[187.90777588 244.43511963]
[202.90971375 246.04884338]
[216.98246765 251.49128723]
[229.16651917 260.39135742]
[238.63114929 272.14224243]
[244.73103333 285.94274902]
[247.05027771 300.85192871]
[245.43075562 315.85324097]
[239.98287964 329.92388916]
[231.07809448 342.10449219]
[219.32356262 351.56457520]
[205.52070618 357.65914917]
[190.61064148 359.97262573]
[175.60995483 358.34732056]
[161.54141235 352.89401245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[15 44]
[16 43]
[17 42]
[18 41]
[20 39]
[23 36]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
