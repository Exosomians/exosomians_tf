%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGACGGGUCGGGAGGACGAGACCACUGACUCCUGGCGGUCCGUCCCCGACCACGACCCGCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.99814606 313.66650391]
[123.08152008 300.44259644]
[121.67689514 285.50851440]
[120.27227020 270.57443237]
[118.86765289 255.64033508]
[107.91944122 242.12004089]
[115.26498413 225.41400146]
[113.16191101 210.56216431]
[110.71125031 195.76371765]
[107.91435242 181.02677917]
[105.11744690 166.28984070]
[102.32054901 151.55290222]
[99.52365112 136.81596375]
[96.72674561 122.07902527]
[93.92984772 107.34208679]
[90.08750153 103.22534180]
[89.03256989 97.19025421]
[91.62962341 91.09796906]
[90.22499847 76.16387939]
[88.82037354 61.22978973]
[87.41575623 46.29570007]
[83.37641144 37.70359039]
[86.31218719 30.63124847]
[85.60910034 15.64773560]
[84.90602112 0.66422176]
[84.20293427 -14.31929207]
[75.82729340 -27.74163055]
[82.95953369 -40.81758118]
[82.25644684 -55.80109406]
[81.55336761 -70.78460693]
[70.70565796 -82.60436249]
[73.32553864 -98.43205261]
[87.40326691 -106.12602997]
[102.13961029 -99.78412628]
[106.23010254 -84.27130890]
[96.53688049 -71.48769379]
[97.23996735 -56.50417709]
[97.94304657 -41.52066422]
[106.26840210 -29.17004395]
[99.18644714 -15.02237511]
[99.88953400 -0.03886219]
[100.59261322 14.94465160]
[101.29570007 29.92816544]
[102.34984589 44.89107895]
[103.75446320 59.82516861]
[105.15908813 74.75925446]
[106.56371307 89.69334412]
[108.66678619 104.54518127]
[111.46368408 119.28211975]
[114.26058197 134.01905823]
[117.05748749 148.75599670]
[119.85438538 163.49293518]
[122.65129089 178.22987366]
[125.44818878 192.96681213]
[130.27435303 201.14291382]
[128.01374817 208.45909119]
[130.11682129 223.31092834]
[140.07969666 231.85627747]
[141.35787964 244.51193237]
[133.80174255 254.23571777]
[135.20635986 269.16979980]
[136.61099243 284.10388184]
[138.01560974 299.03799438]
[149.40541077 310.33630371]
[147.53028870 326.26937866]
[133.82867432 334.61474609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[7 57]
[8 56]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[14 49]
[15 48]
[18 47]
[19 46]
[20 45]
[21 44]
[23 43]
[24 42]
[25 41]
[26 40]
[28 38]
[29 37]
[30 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
