%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUACAAGACACCACGACACGUGCUCAAGGAAACCGUCUUCACAGGAUAAAUAACUAGCUAAAUCUCCGUAAACAGACUCUUCCCA\
) } def
/len { sequence length } bind def

/coor [
[123.18161774 118.92333984]
[117.39670563 124.34819794]
[110.38993073 128.06295776]
[102.65341949 129.80670166]
[94.73054504 129.45697021]
[87.17776489 127.03831482]
[80.52556610 122.72061920]
[75.24115753 116.80713654]
[61.11514664 121.85250854]
[47.08252716 127.15209961]
[33.14787674 132.70417786]
[19.21322632 138.25624084]
[15.51750946 153.32679749]
[3.64765668 163.32110596]
[-11.83213234 164.39616394]
[-24.96956253 156.13858032]
[-30.71302414 141.72358704]
[-26.85404015 126.69401550]
[-14.87646580 116.82905579]
[0.61407524 115.92198944]
[13.66115379 124.32159424]
[27.59580421 118.76952362]
[41.53045654 113.21745300]
[46.69724655 107.68925476]
[56.06976700 107.72650146]
[70.19577789 102.68112183]
[76.96466064 80.89887238]
[97.11734009 70.21459198]
[118.94487762 76.83598328]
[131.04821777 67.97544098]
[143.15155029 59.11490250]
[155.25489807 50.25436020]
[155.80039978 36.65798950]
[164.01754761 26.05887794]
[176.67369080 22.25548744]
[189.00111389 26.44307137]
[201.41644287 18.02526474]
[213.83178711 9.60745907]
[226.24711609 1.18965268]
[223.72158813 -14.77254009]
[228.33961487 -30.19920921]
[239.14271545 -42.06285095]
[253.96383667 -48.05781937]
[269.86175537 -47.04834747]
[283.70492554 -39.28333664]
[295.80825806 -48.14387894]
[307.91159058 -57.00442123]
[303.16754150 -71.36927795]
[303.09667969 -86.49707794]
[307.70599365 -100.90573883]
[316.54385376 -113.18365479]
[328.74444580 -122.12796021]
[343.11248779 -126.86238098]
[358.24032593 -126.92309570]
[372.64590454 -122.30413818]
[384.91790771 -113.45804596]
[393.85403442 -101.25145721]
[398.57882690 -86.88025665]
[398.62939453 -71.75238037]
[394.00079346 -57.34990692]
[385.14648438 -45.08384323]
[372.93389893 -36.15589523]
[358.55953979 -31.44073296]
[343.43161011 -31.40029716]
[329.03225708 -36.03855133]
[316.77212524 -44.90108490]
[304.66879272 -36.04054260]
[292.56546021 -27.18000031]
[295.76791382 -13.55812931]
[293.48687744 0.29216224]
[286.03909302 12.24165535]
[274.53814697 20.44032478]
[260.72811890 23.60372925]
[246.71913147 21.21415138]
[234.66493225 13.60498810]
[222.24958801 22.02279282]
[209.83425903 30.44059944]
[197.41891479 38.85840607]
[195.04164124 55.40071106]
[181.22999573 65.39243317]
[164.11543274 62.35769653]
[152.01210022 71.21823883]
[139.90876770 80.07878113]
[127.80541992 88.93932343]
[129.73440552 96.63174438]
[129.57498169 104.56072998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 23]
[11 22]
[12 21]
[29 84]
[30 83]
[31 82]
[32 81]
[36 78]
[37 77]
[38 76]
[39 75]
[45 68]
[46 67]
[47 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
