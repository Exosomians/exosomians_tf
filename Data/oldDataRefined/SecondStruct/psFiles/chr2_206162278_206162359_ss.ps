%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGACACCCUUUCUUUGACAAUUGUGUUUGUGGAGAAAGAAUCGUUUUGUCUUUCACCCAUAUAUACACACUGUCUGUGUU\
) } def
/len { sequence length } bind def

/coor [
[62.25451279 285.92749023]
[45.96097565 284.06933594]
[39.67245102 268.92382812]
[49.85803223 256.07138062]
[51.55764771 241.16796875]
[53.25726318 226.26457214]
[54.95687866 211.36117554]
[56.65649414 196.45776367]
[51.18661118 192.98617554]
[46.86811829 188.11259460]
[44.05151749 182.20497131]
[42.97298431 175.71623230]
[43.73468018 169.14939880]
[46.29536438 163.01876831]
[50.47220230 157.80949402]
[55.95370865 153.93931580]
[62.32292938 151.72499084]
[69.08914185 151.35649109]
[75.15559387 137.63795471]
[81.22204590 123.91941833]
[87.28849792 110.20088959]
[83.73569489 98.94512177]
[88.71267700 88.24259186]
[99.60927582 83.70620728]
[106.19050598 70.22705841]
[112.77174377 56.74791718]
[119.35298157 43.26877213]
[125.93421936 29.78962708]
[123.40230560 9.96255589]
[139.43179321 -0.57785040]
[144.97476196 -14.51612186]
[150.51774597 -28.45439339]
[156.06071472 -42.39266205]
[161.60369873 -56.33093643]
[158.43379211 -74.35099792]
[172.36122131 -84.84887695]
[177.37277222 -98.98692322]
[182.38433838 -113.12496185]
[187.39590454 -127.26300812]
[192.40747070 -141.40104675]
[197.41902161 -155.53909302]
[187.89204407 -167.67335510]
[186.46046448 -183.03414917]
[193.58110046 -196.71990967]
[206.98178101 -204.36355591]
[222.38638306 -203.52604675]
[234.87937927 -194.47459412]
[240.47428894 -180.09751892]
[237.38578796 -164.98246765]
[226.59942627 -153.95260620]
[211.55706787 -150.52752686]
[206.54550171 -136.38948059]
[201.53395081 -122.25144196]
[196.52238464 -108.11340332]
[191.51081848 -93.97535706]
[186.49925232 -79.83731842]
[191.44154358 -68.62507629]
[187.18685913 -56.70421219]
[175.54196167 -50.78795624]
[169.99899292 -36.84968567]
[164.45600891 -22.91141510]
[158.91304016 -8.97314358]
[153.37005615 4.96512699]
[158.34880066 14.23706055]
[157.24197388 24.92674446]
[150.18272400 33.32308197]
[139.41336060 36.37086487]
[132.83212280 49.85000992]
[126.25089264 63.32915115]
[119.66965485 76.80829620]
[113.08841705 90.28743744]
[114.77867126 106.87249756]
[101.00702667 116.26734161]
[94.94057465 129.98587036]
[88.87412262 143.70440674]
[82.80767059 157.42294312]
[89.54652405 181.57965088]
[71.55989075 198.15737915]
[69.86027527 213.06077576]
[68.16065979 227.96418762]
[66.46104431 242.86758423]
[64.76143646 257.77096558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 82]
[5 81]
[6 80]
[7 79]
[8 78]
[18 76]
[19 75]
[20 74]
[21 73]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
