%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUAGAGUCAAUUUACGACUUUAGUUAUGACGUAAGUAUACAAGUCUGUAAAUAAAAAUGUUGUAGUGACUAUUC\
) } def
/len { sequence length } bind def

/coor [
[71.74596405 337.19226074]
[57.23505402 332.32482910]
[46.65667343 321.26333618]
[42.44166183 306.54965210]
[45.55858994 291.56488037]
[55.29121780 279.75241089]
[69.40305328 273.82666016]
[70.62569427 258.87655640]
[71.84833527 243.92648315]
[73.07097626 228.97639465]
[74.29360962 214.02630615]
[71.74587250 209.67991638]
[72.10914612 203.64503479]
[76.27442932 197.92402649]
[78.71157074 183.12333679]
[81.14871216 168.32264709]
[83.58585358 153.52195740]
[86.02299500 138.72126770]
[88.46013641 123.92058563]
[90.89727783 109.11989594]
[92.42462921 94.19786072]
[93.03645325 79.21034241]
[93.64828491 64.22282410]
[94.26010895 49.23530960]
[87.09214020 35.13102722]
[95.34213257 22.72994232]
[95.95395660 7.74242544]
[96.56578827 -7.24509144]
[97.17761230 -22.23260880]
[97.48359680 -37.22948837]
[97.48359680 -52.22948837]
[97.48359680 -67.22948456]
[83.70972443 -73.80545044]
[74.15979767 -85.71182251]
[70.72995758 -100.58457947]
[74.10120392 -115.47073364]
[83.60417175 -127.41461945]
[97.35203552 -134.04476929]
[112.61515045 -134.04476929]
[126.36302185 -127.41461945]
[135.86598206 -115.47073364]
[139.23722839 -100.58457947]
[135.80738831 -85.71182251]
[126.25746155 -73.80545044]
[112.48359680 -67.22948456]
[112.48359680 -52.22948837]
[112.48359680 -37.22948837]
[115.72448730 -30.34834099]
[112.16513062 -21.62077904]
[111.55330658 -6.63326263]
[110.94147491 8.35425377]
[110.32964325 23.34177208]
[117.54138184 36.37404633]
[109.24762726 49.84713745]
[108.63580322 64.83465576]
[108.02397156 79.82217407]
[107.41213989 94.80969238]
[109.84621429 98.20847321]
[110.62357330 102.72311401]
[109.25971985 107.51608276]
[105.69796753 111.55704498]
[103.26082611 126.35772705]
[100.82368469 141.15841675]
[98.38654327 155.95910645]
[95.94940186 170.75979614]
[93.51226044 185.56047058]
[91.07511902 200.36116028]
[89.24369812 215.24894714]
[88.02106476 230.19903564]
[86.79842377 245.14912415]
[85.57578278 260.09921265]
[84.35314178 275.04928589]
[97.31467438 283.18914795]
[104.99873352 296.42599487]
[105.63957977 311.71807861]
[99.08995056 325.55139160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 57]
[22 56]
[23 55]
[24 54]
[26 52]
[27 51]
[28 50]
[29 49]
[30 47]
[31 46]
[32 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
