%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:33 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAGGGACUGGCCCUUAACUUGGGCCCAGCACCGCCACUCUCGCGGCUUAGGAUUGGUG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 188.80709839]
[92.50000000 172.96797180]
[92.50000000 157.96797180]
[92.50000000 142.96797180]
[92.50000000 127.96797180]
[92.50000000 112.96797180]
[85.32618713 99.79464722]
[72.72579956 91.65645599]
[57.46289062 94.76792145]
[44.80023575 86.33514404]
[41.92798233 71.76511383]
[29.32759285 63.62691879]
[16.72720337 55.48872375]
[4.12681532 47.35052872]
[-8.67254829 39.52900314]
[-21.66292953 32.02900314]
[-34.65330887 24.52900124]
[-49.28496552 30.04703140]
[-64.02318573 24.82028961]
[-71.90903473 11.31668377]
[-69.21905518 -4.08779669]
[-57.22337723 -14.11962700]
[-41.58598709 -14.04208374]
[-29.69038391 -3.89178014]
[-27.15331078 11.53862095]
[-14.16292858 19.03862000]
[-1.17254782 26.53862000]
[6.48355389 27.17677116]
[12.26500893 34.75014114]
[24.86539841 42.88833618]
[37.46578598 51.02652740]
[50.06617737 59.16472244]
[64.52816010 55.79033279]
[77.42268372 63.86412048]
[80.86399841 79.05606079]
[93.46438599 87.19425964]
[114.69458771 80.41448975]
[128.65769958 74.93437958]
[142.62080383 69.45426178]
[152.64025879 57.21004105]
[167.31449890 59.76269531]
[177.11059570 46.61094666]
[193.36470032 48.78722382]
[199.35598755 64.05275726]
[188.92112732 76.70368195]
[172.79461670 73.72580719]
[163.77388000 85.57804871]
[148.10090637 83.41736603]
[134.13780212 88.89748383]
[120.17469788 94.37759399]
[135.16510010 93.84111786]
[146.64546204 103.49520111]
[148.68844604 118.35542297]
[140.23925781 130.74942017]
[125.66022491 134.27813721]
[112.47854614 127.11970520]
[107.50000000 112.96797180]
[107.50000000 127.96797180]
[107.50000000 142.96797180]
[107.50000000 157.96797180]
[107.50000000 172.96797180]
[113.54634094 188.80709839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[7 36]
[8 35]
[11 32]
[12 31]
[13 30]
[14 29]
[15 27]
[16 26]
[17 25]
[37 50]
[38 49]
[39 48]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
