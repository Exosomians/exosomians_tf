%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUUUUCUAGUCCGACACAGUCUUCACCCUAAGCUUGGGUGCGGAGGUAUGCCUCUGGUCUUCUGGGCUUGUGUCCUUCGUCAUUCGAACUCAGACCGCGGAAUCUGGUGAGCCGGUAGGACUGUGACACU\
) } def
/len { sequence length } bind def

/coor [
[81.55207825 336.99884033]
[70.90667725 347.69174194]
[57.85600281 355.26422119]
[43.28986740 359.19995117]
[28.20141029 359.23062134]
[13.61939335 355.35412598]
[0.53804040 347.83477783]
[-10.15074062 337.18524170]
[-17.71817017 324.13165283]
[-21.64828873 309.56399536]
[-21.67313385 294.47552490]
[-17.79101372 279.89501953]
[-10.26661396 266.81655884]
[0.38703722 256.13189697]
[13.44355583 248.56951904]
[28.01272774 244.64501953]
[43.10120010 244.62599182]
[46.95495987 230.12950134]
[50.80871964 215.63299561]
[54.66247559 201.13648987]
[58.51623535 186.63999939]
[62.36999130 172.14349365]
[66.22374725 157.64698792]
[70.07750702 143.15049744]
[73.93126678 128.65399170]
[65.00022125 116.60257721]
[50.00963974 116.07122040]
[35.01905441 115.53985596]
[20.02846718 115.00849152]
[5.03788137 114.47713470]
[-5.29670715 126.21298981]
[-20.76479912 128.50910950]
[-34.06283188 120.28133392]
[-38.91188431 105.41456604]
[-33.02238083 90.92844391]
[-19.17516518 83.66286469]
[-3.90846705 87.04841614]
[5.56924295 99.48654938]
[20.55982780 100.01790619]
[35.55041504 100.54927063]
[50.54100037 101.08063507]
[65.53158569 101.61199188]
[68.30838013 86.19725800]
[77.62477112 73.57207489]
[67.33591461 62.65697098]
[57.04706573 51.74186707]
[46.75821686 40.82675934]
[36.46936417 29.91165352]
[20.61435318 25.72230339]
[16.57662964 9.82800102]
[28.50985909 -1.42055762]
[44.13815689 3.54817939]
[47.38447189 19.62280273]
[57.67332077 30.53790855]
[67.96217346 41.45301437]
[78.25102234 52.36812210]
[88.53987122 63.28322601]
[103.45521545 61.69181061]
[111.20944977 48.85156631]
[118.96368408 36.01132584]
[126.71791840 23.17108154]
[134.47215271 10.33083916]
[125.34265900 -3.41381550]
[124.85121155 -20.78824997]
[134.07238770 -36.55204010]
[151.01481628 -45.46619797]
[154.52510071 -60.04967499]
[158.03540039 -74.63315582]
[161.54568481 -89.21663666]
[156.38099670 -104.78127289]
[167.47875977 -116.85488129]
[183.42253113 -113.01715851]
[187.81074524 -97.21602631]
[176.12916565 -85.70633698]
[172.61888123 -71.12286377]
[169.10858154 -56.53938293]
[165.59828186 -41.95590591]
[178.52922058 -34.35385513]
[189.56507874 -44.51308060]
[200.60093689 -54.67230225]
[211.63679504 -64.83152771]
[213.73374939 -80.73694611]
[227.55032349 -88.89058685]
[242.48762512 -83.03767395]
[247.08703613 -67.66806030]
[237.82026672 -54.57199860]
[221.79602051 -53.79566956]
[210.76016235 -43.63644409]
[199.72430420 -33.47722244]
[188.68844604 -23.31799698]
[189.10343933 -3.98044705]
[179.59222412 11.83031654]
[163.90258789 19.71746063]
[147.31239319 18.08507538]
[139.55816650 30.92531776]
[131.80392456 43.76556015]
[124.04969025 56.60580444]
[116.29545593 69.44604492]
[128.09437561 85.44629669]
[128.42942810 103.56957245]
[142.30451965 109.26888275]
[156.17959595 114.96818542]
[168.42337036 110.71806335]
[179.89726257 115.82315826]
[184.62374878 127.02292633]
[198.36035156 133.04835510]
[214.59156799 130.70750427]
[224.52043152 143.75930786]
[217.93296814 158.77722168]
[201.60580444 160.31207275]
[192.33493042 146.78495789]
[178.59832764 140.75952148]
[161.33282471 143.66473389]
[150.48028564 128.84327698]
[136.60520935 123.14395905]
[122.73012543 117.44465637]
[114.58641815 126.90406799]
[102.51742554 132.45745850]
[88.42776489 132.50775146]
[84.57401276 147.00424194]
[80.72025299 161.50074768]
[76.86649323 175.99725342]
[73.01273346 190.49375916]
[69.15897369 204.99024963]
[65.30522156 219.48675537]
[61.45146179 233.98326111]
[57.59770203 248.47975159]
[70.68486023 255.98899841]
[81.38185883 266.63027954]
[88.95936584 279.67800903]
[92.90073395 294.24264526]
[92.93723297 309.33108521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[66 77]
[67 76]
[68 75]
[69 74]
[78 90]
[79 89]
[80 88]
[81 87]
[100 116]
[101 115]
[102 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
