%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:12 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGAGCUCGAAUUACUACUGACAAAAAAAACUAACGAACUUCGUUACACUUUUUGUGUAAAGUGGCCGAGACUUUCGAGAACUCAA\
) } def
/len { sequence length } bind def

/coor [
[141.33283997 240.35058594]
[136.59584045 226.11820984]
[125.23522186 216.48567200]
[128.21849060 200.94827271]
[123.48149109 186.71589661]
[118.74449921 172.48350525]
[113.75422668 158.33793640]
[108.51226044 144.28369141]
[103.27030182 130.22943115]
[98.02833557 116.17519379]
[87.63476562 110.61251068]
[83.71289825 99.49546051]
[88.31534576 88.64247894]
[83.57835388 74.41009521]
[78.84136200 60.17770386]
[74.10437012 45.94531631]
[69.36737061 31.71292686]
[54.40492249 28.53923416]
[43.11450958 18.36950874]
[38.46128845 4.00935745]
[41.59968948 -10.65373993]
[51.58892822 -21.70275307]
[46.85193634 -35.93514252]
[42.11494064 -50.16753006]
[37.37794876 -64.39991760]
[32.64095306 -78.63230896]
[27.90395927 -92.86470032]
[23.16696548 -107.09708405]
[9.63497162 -110.32559204]
[-0.41425133 -119.78764343]
[-4.38736725 -132.89239502]
[-1.33348203 -146.12950134]
[7.83096504 -156.00929260]
[3.60497642 -170.40168762]
[-0.62101185 -184.79408264]
[-4.84700012 -199.18647766]
[-9.07298851 -213.57887268]
[-13.29897690 -227.97126770]
[-23.56279564 -241.46534729]
[-13.43737316 -255.06358337]
[2.43243885 -249.09823608]
[1.09341764 -232.19725037]
[5.31940603 -217.80485535]
[9.54539394 -203.41246033]
[13.77138233 -189.02006531]
[17.99737167 -174.62767029]
[22.22336006 -160.23527527]
[37.76802444 -155.29518127]
[47.46843719 -141.97811890]
[47.40195084 -125.33799744]
[37.39935303 -111.83408356]
[42.13634872 -97.60169220]
[46.87334061 -83.36930084]
[51.61033630 -69.13691711]
[56.34732819 -54.90452576]
[61.08432388 -40.67213821]
[65.82131958 -26.43974686]
[80.43954468 -23.58088303]
[91.73922729 -13.72324276]
[96.61985016 0.56121987]
[93.67589569 15.46859837]
[83.59976196 26.97593307]
[88.33675385 41.20832062]
[93.07375336 55.44070816]
[97.81074524 69.67309570]
[102.54773712 83.90548706]
[115.36672974 94.57892609]
[112.08258057 110.93322754]
[117.32454681 124.98747253]
[122.56650543 139.04171753]
[127.80847168 153.09596252]
[133.87260437 160.23635864]
[132.97688293 167.74650574]
[137.71388245 181.97889709]
[142.45086670 196.21128845]
[154.15031433 206.86181641]
[150.82823181 221.38121033]
[155.56523132 235.61360168]
[170.62681580 238.62091064]
[182.15629578 248.76815796]
[187.05229187 263.32580566]
[183.99778748 278.37789917]
[173.81443787 289.87551880]
[159.24153137 294.72583008]
[144.19908142 291.62417603]
[132.73344421 281.40484619]
[127.92881775 266.81680298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[4 75]
[5 74]
[6 73]
[7 71]
[8 70]
[9 69]
[10 68]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
