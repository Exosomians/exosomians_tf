%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGACAUGCCUCCCCUUGCUAGUCUGAAUCGGUCGACAGGAUUCGGUCUGUCUCUGGAGGUAUAUAAAUACAU\
) } def
/len { sequence length } bind def

/coor [
[104.38531494 356.62179565]
[96.08282471 343.95895386]
[92.34422302 329.28579712]
[93.57503510 314.19396973]
[99.64176178 300.32046509]
[109.88632965 289.17025757]
[123.19747925 281.95275879]
[120.69594574 267.16281128]
[118.19441223 252.37287903]
[115.69288635 237.58293152]
[113.19135284 222.79299927]
[110.68981934 208.00305176]
[108.18828583 193.21311951]
[105.68675995 178.42317200]
[91.67877960 173.35935974]
[82.02201080 161.88754272]
[79.38652039 147.02413940]
[84.57870483 132.74345398]
[96.29824066 122.91494751]
[93.79671478 108.12500763]
[89.33692932 101.10179138]
[91.51368713 92.66438293]
[89.63368988 77.78266907]
[80.22777557 65.06105042]
[86.30891418 51.46439743]
[84.42891693 36.58267975]
[82.54891968 21.70095825]
[80.66892242 6.81923723]
[78.78892517 -8.06248379]
[76.90892792 -22.94420433]
[75.02893066 -37.82592392]
[61.06357574 -44.38126373]
[52.87862015 -57.45834732]
[53.08584976 -72.88431549]
[61.61913681 -85.73680878]
[75.75554657 -91.91463470]
[90.98419189 -89.44647980]
[102.44567871 -79.11991119]
[106.48268127 -64.23011017]
[101.80700684 -49.52835846]
[89.91064453 -39.70592117]
[91.79064941 -24.82420158]
[93.67064667 -9.94248199]
[95.55064392 4.93923855]
[97.43064117 19.82095909]
[99.31063843 34.70267868]
[101.19063568 49.58440018]
[110.46207428 61.24157333]
[104.51541138 75.90266418]
[106.39540863 90.78438568]
[108.58665466 105.62347412]
[111.08818054 120.41341400]
[125.38811493 125.84105682]
[134.98793030 137.61987305]
[137.38710022 152.52323914]
[132.04017639 166.53274536]
[120.47669983 175.92164612]
[122.97823334 190.71159363]
[125.47975922 205.50152588]
[127.98129272 220.29147339]
[130.48281860 235.08140564]
[132.98435974 249.87135315]
[135.48588562 264.66128540]
[137.98741150 279.45123291]
[152.93174744 281.88964844]
[166.27340698 289.05056763]
[176.56520081 300.15722656]
[182.69076538 314.00482178]
[183.98562622 329.09130859]
[180.30932617 343.78021240]
[172.06066895 356.47817993]
[160.13436890 365.80783081]
[145.82412720 370.75714111]
[130.68222046 370.78927612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[19 52]
[20 51]
[22 50]
[23 49]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
