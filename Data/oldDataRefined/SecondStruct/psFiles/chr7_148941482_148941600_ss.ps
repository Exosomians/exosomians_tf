%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUGUCAACCAGGCUCACAACACCCAAUAACAAUUCAACUAAAUUGUAACAGAGGGGGGUGUUGGCGCGAACUGAUCGAACGACAAAACGUGAUUAUUGUCAUCAUCUGUUGCAAAU\
) } def
/len { sequence length } bind def

/coor [
[192.95547485 183.18159485]
[193.50851440 175.98867798]
[181.14662170 167.49258423]
[168.78472900 158.99649048]
[161.39923096 157.78616333]
[156.21441650 150.11267090]
[144.07916260 141.29589844]
[131.94390869 132.47911072]
[119.80865479 123.66233826]
[107.66010284 129.89334106]
[94.01207733 130.27265930]
[81.53619385 124.72603607]
[72.67464447 114.33924103]
[69.16208649 101.14550781]
[71.68611908 87.72753906]
[59.78582001 78.59611511]
[44.12723923 76.33351898]
[38.74018478 62.44723511]
[29.91013145 59.65531158]
[26.65204620 52.91771317]
[14.99485683 43.47790909]
[3.33766723 34.03810120]
[-8.31952190 24.59829521]
[-19.97671127 15.15849018]
[-31.63390160 5.71868420]
[-43.29109192 -3.72112179]
[-54.94828033 -13.16092777]
[-72.92205048 -5.04097080]
[-92.47368622 -6.96572161]
[-108.39426422 -18.34549522]
[-116.48063660 -36.08188248]
[-114.64495850 -55.41101837]
[-127.43456268 -63.24849701]
[-140.22416687 -71.08597565]
[-153.01376343 -78.92345428]
[-165.80335999 -86.76093292]
[-178.59297180 -94.59841156]
[-193.90014648 -90.66573334]
[-207.46206665 -98.78051758]
[-211.23269653 -114.12841797]
[-202.97497559 -127.60378265]
[-187.58807373 -131.21192932]
[-174.20075989 -122.81221008]
[-170.75549316 -107.38801575]
[-157.96589661 -99.55053711]
[-145.17628479 -91.71305847]
[-132.38668823 -83.87557983]
[-119.59708405 -76.03810120]
[-106.80747986 -68.20062256]
[-98.46369934 -74.98780060]
[-88.51862335 -79.13961792]
[-77.78343201 -80.30435181]
[-67.13748932 -78.37448120]
[-57.45627594 -73.49645996]
[-49.53940582 -66.05969238]
[-44.04458618 -56.66545868]
[-41.43298340 -46.07832336]
[-41.93053818 -35.16390610]
[-45.50847244 -24.81811714]
[-33.85128403 -15.37831116]
[-22.19409561 -5.93850517]
[-10.53690624 3.50130057]
[1.12028360 12.94110680]
[12.77747345 22.38091278]
[24.43466187 31.82071877]
[36.09185028 41.26052475]
[47.87160492 50.54693222]
[62.67900085 52.15639114]
[68.91724396 66.69581604]
[80.81754303 75.82723999]
[95.51309967 69.46875763]
[111.41668701 71.33036041]
[124.24650574 80.91083527]
[130.54830933 95.63079071]
[128.62542725 111.52708435]
[140.76068115 120.34386444]
[152.89593506 129.16064453]
[165.03120422 137.97741699]
[177.28082275 146.63459778]
[189.64271545 155.13069153]
[202.00460815 163.62678528]
[225.84552002 162.80137634]
[236.21998596 183.50572205]
[249.75877380 189.96339417]
[263.29754639 196.42105103]
[276.83633423 202.87872314]
[290.37512207 209.33639526]
[303.03826904 200.75782776]
[318.19503784 199.67662048]
[331.76776123 206.28324890]
[340.15512085 218.71337891]
[341.18759155 233.57270813]
[354.72637939 240.03036499]
[368.26516724 246.48803711]
[381.80392456 252.94570923]
[395.34271240 259.40338135]
[411.63995361 257.57800293]
[421.15026855 270.93786621]
[414.09024048 285.73950195]
[397.72265625 286.75622559]
[388.88504028 272.94213867]
[375.34628296 266.48449707]
[361.80749512 260.02682495]
[348.26870728 253.56915283]
[334.72991943 247.11148071]
[322.53231812 255.66038513]
[307.59396362 256.96472168]
[293.91802979 250.57440186]
[285.21984863 238.11495972]
[283.91744995 222.87516785]
[270.37866211 216.41751099]
[256.83987427 209.95983887]
[243.30110168 203.50216675]
[229.76232910 197.04450989]
[224.20344543 201.04585266]
[217.60910034 203.08140564]
[210.65779114 202.90693665]
[204.07591248 200.50744629]
[198.56181335 196.10215759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[6 78]
[7 77]
[8 76]
[9 75]
[15 70]
[16 69]
[18 67]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[83 114]
[84 113]
[85 112]
[86 111]
[87 110]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
