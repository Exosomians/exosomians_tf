%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGAGACUUUUCUCGGAAAUCUAGCUGGUGAAUUUUUAUACGGAAUCCGGGCGAGGGGCGCCUACGCCG\
) } def
/len { sequence length } bind def

/coor [
[83.84771729 130.17486572]
[84.33958435 115.18193817]
[73.16284943 125.18596649]
[61.98611832 135.19000244]
[50.80938721 145.19403076]
[39.63265610 155.19807434]
[28.45592499 165.20210266]
[23.85921669 180.94383240]
[7.86610222 184.57044983]
[-3.07107186 172.35119629]
[2.29892087 156.85618591]
[18.45189285 154.02537537]
[29.62862396 144.02133179]
[40.80535507 134.01730347]
[51.98208618 124.01326752]
[63.15881729 114.00923920]
[74.33554840 104.00520325]
[60.06121445 108.61425781]
[45.11851120 109.92406464]
[30.26000023 107.86866760]
[16.23400307 102.55157471]
[3.74691653 94.24058533]
[-6.57237339 83.35424805]
[-14.20415401 70.44084930]
[-18.76406288 56.15073776]
[-20.02245140 41.20361710]
[-17.91594124 26.35226631]
[-12.55062389 12.34464836]
[-4.19671297 -0.11376978]
[6.72506189 -10.39554214]
[19.66464615 -17.98284531]
[33.97035980 -22.49356079]
[48.92172241 -23.70051193]
[63.76573944 -21.54291534]
[77.75481415 -16.12943268]
[90.18441010 -7.73270512]
[100.42854309 3.22438169]
[107.97128296 16.18999481]
[112.43274689 30.51114464]
[113.58824921 45.46657181]
[111.37959290 60.30307388]
[105.91786194 74.27371216]
[117.93502045 65.29663086]
[129.95216370 56.31954193]
[139.02302551 41.99627304]
[155.29759216 46.74755859]
[155.23724365 63.70139694]
[138.92926025 68.33669281]
[126.91210175 77.31378174]
[114.89495087 86.29086304]
[115.22678375 101.28719330]
[127.62925720 109.72393036]
[140.03173828 118.16067505]
[152.43421936 126.59741211]
[165.02029419 134.75772095]
[177.78381348 142.63758850]
[190.54733276 150.51747131]
[206.94638062 150.46003723]
[214.96066284 164.76750183]
[206.34577942 178.72155762]
[189.96398926 177.96748352]
[182.66746521 163.28099060]
[169.90393066 155.40112305]
[157.14041138 147.52124023]
[149.55378723 146.66162109]
[143.99746704 138.99989319]
[131.59500122 130.56315613]
[119.19252014 122.12641144]
[106.79003906 113.68966675]
[109.26239777 128.48451233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[42 50]
[43 49]
[44 48]
[51 69]
[52 68]
[53 67]
[54 66]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
