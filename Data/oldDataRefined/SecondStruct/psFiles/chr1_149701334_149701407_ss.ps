%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACUGGCCCUUAGCUUGGGCCCGGCACCGCGAAAGUCGUGGCUUAGGAUCGGUGAUCUGUUGGUACGUCUA\
) } def
/len { sequence length } bind def

/coor [
[87.04589081 124.76194000]
[74.96170807 112.41155243]
[60.22739792 115.22226715]
[51.33290863 128.00999451]
[36.35018158 130.65055847]
[24.21385956 122.09222412]
[9.47955132 124.90293884]
[-5.25475740 127.71366119]
[-19.98906708 130.52438354]
[-34.66128159 133.64305115]
[-49.26496506 137.06831360]
[-63.86864853 140.49357605]
[-70.75731659 154.53210449]
[-85.07896423 160.81098938]
[-100.07135773 156.36552429]
[-108.65554047 143.29472351]
[-106.77832794 127.77021790]
[-95.32607269 117.12221527]
[-79.70619202 116.37836456]
[-67.29390717 125.88990021]
[-52.69022751 122.46463776]
[-38.08654404 119.03937531]
[-32.12025833 114.30690002]
[-22.79978561 115.79006958]
[-8.06547737 112.97935486]
[6.66883135 110.16863251]
[21.40314102 107.35791016]
[29.53667068 94.93288422]
[44.43931580 91.87252045]
[57.41667938 100.48796082]
[72.15098572 97.67723846]
[75.89113617 85.86757660]
[84.36860657 76.83489227]
[95.91760254 72.35408020]
[108.26878357 73.30561829]
[118.99516296 79.50252533]
[125.98905182 89.72712708]
[140.90687561 88.15920258]
[153.82269287 79.02177429]
[167.28900146 85.38632965]
[182.20683289 83.81840515]
[197.12466431 82.25047302]
[212.04249573 80.68254852]
[224.95829773 71.54512024]
[238.42462158 77.90967560]
[246.24055481 64.63498688]
[260.21105957 58.57874680]
[274.89520264 61.87118149]
[284.70745850 73.04515076]
[299.62530518 71.47722626]
[314.54312134 69.90929413]
[329.46093750 68.34136963]
[344.37878418 66.77344513]
[359.49911499 59.10458755]
[371.05401611 71.51107788]
[362.33108521 86.04885101]
[345.94671631 81.69126892]
[331.02886963 83.25920105]
[316.11105347 84.82712555]
[301.19320679 86.39505005]
[286.27539062 87.96298218]
[279.00076294 100.93285370]
[265.32202148 107.20634460]
[250.39764404 104.18708038]
[239.99253845 92.82749939]
[228.14375305 101.85278320]
[213.61041260 95.60037231]
[198.69258118 97.16830444]
[183.77476501 98.73622894]
[168.85693359 100.30415344]
[157.00814819 109.32943726]
[142.47480774 103.07702637]
[127.55697632 104.64495850]
[119.55821228 119.96094513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[6 27]
[7 26]
[8 25]
[9 24]
[10 22]
[11 21]
[12 20]
[37 73]
[38 72]
[40 70]
[41 69]
[42 68]
[43 67]
[45 65]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
