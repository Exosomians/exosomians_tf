%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:30 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCCUGCUUUAGGUUCGCGUCGACCUUACGAGACCUCUGUUGUCGACGAAAACCCUAAGGCAACGGGCGACAGGUCGGCAACCG\
) } def
/len { sequence length } bind def

/coor [
[206.66304016 290.70181274]
[199.87731934 277.32443237]
[193.09159851 263.94708252]
[186.06547546 250.69439697]
[178.80122375 237.57072449]
[171.53698730 224.44705200]
[163.80368042 211.59419250]
[155.61138916 199.02890015]
[147.41909790 186.46362305]
[139.22682190 173.89833069]
[131.03453064 161.33303833]
[122.84224701 148.76776123]
[114.64996338 136.20246887]
[106.45767212 123.63718414]
[98.26538849 111.07189178]
[89.84757996 98.65655518]
[81.20700073 86.39522552]
[65.88843536 83.57044220]
[57.30032730 71.01261902]
[60.08772278 56.42611694]
[51.44714355 44.16478348]
[42.80656052 31.90344810]
[34.16597748 19.64211273]
[25.52539444 7.38077736]
[16.88481331 -4.88055754]
[8.24423027 -17.14189339]
[-2.84926391 -18.43380356]
[-11.14423180 -25.57576180]
[-13.95294285 -35.92485428]
[-10.55063820 -45.85936737]
[-18.28394508 -58.71222305]
[-25.55930138 -64.62109375]
[-26.05475807 -72.17166901]
[-33.31900406 -85.29533386]
[-47.64204025 -93.28174591]
[-47.61654282 -109.68087006]
[-33.26874161 -117.62270355]
[-19.35842705 -108.93736267]
[-20.19533539 -92.55958557]
[-12.93108845 -79.43591309]
[-5.43108797 -66.44553375]
[2.30221987 -53.59267426]
[19.83368301 -45.77266693]
[20.50556564 -25.78247452]
[29.14614868 -13.52114010]
[37.78673172 -1.25980496]
[46.42731094 11.00152969]
[55.06789398 23.26286507]
[63.70847702 35.52420044]
[72.34906006 47.78553391]
[87.02323151 50.06684113]
[95.96067810 62.37849045]
[93.46833801 77.75463867]
[102.10891724 90.01597595]
[109.11907959 94.39169312]
[110.83067322 102.87960815]
[119.02296448 115.44489288]
[127.21524811 128.01017761]
[135.40753174 140.57546997]
[143.59982300 153.14076233]
[151.79209900 165.70603943]
[159.98439026 178.27133179]
[168.17668152 190.83662415]
[176.36895752 203.40191650]
[182.41169739 206.91801453]
[185.17610168 212.21971130]
[184.66064453 217.18280029]
[191.92489624 230.30647278]
[199.18914795 243.43014526]
[206.24642944 249.59782410]
[206.46897888 257.16134644]
[213.25468445 270.53872681]
[220.04040527 283.91610718]
[235.65444946 293.47134399]
[234.29153442 310.86706543]
[241.55578613 323.99072266]
[248.82003784 337.11441040]
[263.77972412 342.90985107]
[268.43820190 358.26165771]
[259.22186279 371.39324951]
[243.20069885 372.23120117]
[232.66477966 360.13265991]
[235.69636536 344.37866211]
[228.43211365 331.25497437]
[221.16786194 318.13131714]
[209.50685120 314.40689087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 69]
[5 68]
[6 67]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 54]
[17 53]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[30 42]
[31 41]
[33 40]
[34 39]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
