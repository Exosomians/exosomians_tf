%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUCAAUGGUCUUACCGGCUCACCAAUUCCGCAACCUGAAUUCUAGGUUACCUAAGUAUAGGCGCACCCAAGCUUGGGGUGAAGACCAUUUCUCCUCAACAAAAAGGACCGUUUUUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[200.51261902 240.89895630]
[196.80644226 233.40753174]
[194.89765930 225.38702393]
[194.83389282 217.25630188]
[196.56771851 209.42857361]
[199.96166992 202.29043579]
[204.79757690 196.18270874]
[195.91943359 184.09228516]
[187.04127502 172.00186157]
[178.16311646 159.91143799]
[169.28495789 147.82101440]
[160.40679932 135.73059082]
[151.52864075 123.64015961]
[142.65049744 111.54973602]
[133.77233887 99.45931244]
[120.59745026 123.15504456]
[96.26581573 127.95604706]
[78.71378326 113.89174652]
[64.29253387 118.01818848]
[49.87128448 122.14463043]
[46.22513580 137.06445312]
[35.59597778 148.15122986]
[20.84299850 152.42266846]
[5.93467569 148.72976685]
[-5.11872625 138.06590271]
[-9.34389782 123.29961395]
[-5.60428905 108.40293884]
[5.09416389 97.38301086]
[19.87363052 93.20414734]
[34.75851059 96.99043274]
[45.74484253 107.72337341]
[60.16609573 103.59693146]
[74.58734894 99.47048950]
[74.92571259 95.83302307]
[75.78202820 92.28163147]
[63.47057724 83.71260834]
[51.15912628 75.14358521]
[38.84767532 66.57456207]
[26.53622246 58.00553513]
[14.22477055 49.43651199]
[-1.75676429 50.84011459]
[-12.71366310 39.12150192]
[-10.24073029 23.27018738]
[3.76501060 15.44594479]
[18.55955505 21.65086365]
[22.79379463 37.12506104]
[35.10524368 45.69408417]
[47.41669846 54.26310730]
[59.72814941 62.83213043]
[72.03959656 71.40115356]
[84.35105133 79.97017670]
[92.01679993 71.49954987]
[103.94305420 66.45427704]
[101.29675293 51.68955231]
[98.65045929 36.92482758]
[96.00416565 22.16010284]
[85.01991272 9.98314285]
[90.33007050 -5.53247070]
[106.47200012 -8.42560482]
[116.84026337 4.27994919]
[110.76889038 19.51380730]
[113.41518402 34.27853012]
[116.06147766 49.04325867]
[118.70777893 63.80798340]
[133.36129761 67.01333618]
[141.93032837 54.70188904]
[150.49934387 42.39043427]
[152.87487793 33.44918060]
[159.44465637 29.87938690]
[168.32281494 17.78896332]
[177.20097351 5.69853878]
[186.07913208 -6.39188528]
[187.33711243 -22.74271011]
[202.24124146 -29.58369064]
[215.45942688 -19.87741280]
[213.39392090 -3.60886168]
[198.16955566 2.48627043]
[189.29139709 14.57669449]
[180.41323853 26.66711807]
[171.53507996 38.75754166]
[162.81079102 50.95945740]
[154.24177551 63.27091217]
[145.67274475 75.58235931]
[145.86276245 90.58116150]
[154.74092102 102.67158508]
[163.61906433 114.76200867]
[172.49722290 126.85243225]
[181.37538147 138.94285583]
[190.25354004 151.03327942]
[199.13169861 163.12370300]
[208.00985718 175.21412659]
[216.88800049 187.30455017]
[242.33685303 184.46818542]
[264.06820679 200.40367126]
[269.54080200 228.15904236]
[282.83618164 235.10400391]
[296.13159180 242.04895020]
[309.42700195 248.99389648]
[323.26303101 241.96942139]
[338.58016968 244.45237732]
[349.48864746 255.48800659]
[351.79391479 270.83288574]
[344.60955811 284.58660889]
[330.69812012 291.46057129]
[315.40881348 288.81158447]
[304.62069702 277.65829468]
[302.48202515 262.28930664]
[289.18664551 255.34434509]
[275.89123535 248.39939880]
[262.59582520 241.45445251]
[251.72395325 251.78895569]
[257.98657227 265.41903687]
[264.24920654 279.04913330]
[277.93499756 288.08413696]
[276.68338013 304.43545532]
[261.78192139 311.28225708]
[248.55996704 301.58111572]
[250.61912537 285.31176758]
[244.35649109 271.68167114]
[238.09385681 258.05157471]
[229.16931152 258.20492554]
[220.54785156 256.38092041]
[212.65625000 252.72161865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[18 33]
[19 32]
[20 31]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[53 64]
[54 63]
[55 62]
[56 61]
[65 83]
[66 82]
[67 81]
[69 80]
[70 79]
[71 78]
[72 77]
[95 110]
[96 109]
[97 108]
[98 107]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
