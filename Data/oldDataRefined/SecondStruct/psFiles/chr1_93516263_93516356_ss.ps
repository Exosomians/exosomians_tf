%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUGUAGGACCUUCCCCCGUGGGCCUAAACUUGGCCCCUGGAGAACUAGACGUCAGUUUACGAGAUGGUGGACUCGAUAUGGGGGAAAUGGA\
) } def
/len { sequence length } bind def

/coor [
[78.73850250 303.48989868]
[72.33577728 317.30746460]
[60.86221695 327.32131958]
[46.30568695 331.79650879]
[31.18819618 329.95767212]
[18.12893677 322.12341309]
[9.39050770 309.65106201]
[6.48689365 294.70150757]
[9.92116356 279.86486816]
[19.09831047 267.71170044]
[32.42833710 260.34756470]
[47.60173416 259.04840088]
[52.47222519 244.86112976]
[56.87097549 230.52059937]
[60.79317474 216.04246521]
[64.71537781 201.56433105]
[68.63757324 187.08619690]
[72.55977631 172.60806274]
[76.48197174 158.12992859]
[80.40417480 143.65179443]
[84.32637024 129.17366028]
[88.24857330 114.69552612]
[82.22313690 100.95892334]
[68.91479492 94.03881073]
[55.60645294 87.11869049]
[42.29811096 80.19857025]
[28.98976898 73.27845764]
[14.61555862 79.43605804]
[-0.33872411 74.86403656]
[-8.81212521 61.72114563]
[-6.80376291 46.21306992]
[4.73807478 35.66223907]
[20.36368561 35.05043793]
[32.69513321 44.66653824]
[35.90988541 59.97011566]
[49.21822739 66.89022827]
[62.52656937 73.81034851]
[75.83491516 80.73046875]
[89.14325714 87.65058136]
[101.42263031 79.03565216]
[99.44424438 64.16669464]
[97.46586609 49.29773331]
[95.48748016 34.42877197]
[85.06301880 21.76927948]
[91.06684875 6.50867224]
[107.32273102 4.34575272]
[117.10801697 17.50554848]
[110.35643768 32.45038986]
[112.33482361 47.31934738]
[114.31320953 62.18830872]
[116.29158783 77.05727386]
[114.96657562 83.22633362]
[112.52130127 88.76702118]
[109.08421326 93.51249695]
[123.49551392 89.35144806]
[137.90681458 85.19040680]
[152.24736023 80.79165649]
[166.51319885 76.15640259]
[180.77905273 71.52114868]
[195.04490662 66.88588715]
[209.31074524 62.25063705]
[223.57659912 57.61537933]
[237.84243774 52.98012543]
[244.79322815 38.78638840]
[259.77151489 33.74395370]
[273.89099121 40.84440613]
[278.77478027 55.87517929]
[271.52542114 69.91877747]
[256.44387817 74.64338684]
[242.47770691 67.24597168]
[228.21185303 71.88122559]
[213.94599915 76.51648712]
[199.68016052 81.15174103]
[185.41430664 85.78699493]
[171.14846802 90.42224884]
[156.88261414 95.05750275]
[151.38569641 100.22048950]
[142.06787109 99.60170746]
[127.65656281 103.76275635]
[113.24525452 107.92379761]
[102.72669983 118.61772156]
[98.80450439 133.09585571]
[94.88230133 147.57398987]
[90.96010590 162.05212402]
[87.03791046 176.53025818]
[83.11570740 191.00839233]
[79.19351196 205.48652649]
[75.27130890 219.96466064]
[71.34911346 234.44279480]
[72.73698425 241.23866272]
[70.65788269 246.79878235]
[66.65948486 249.73162842]
[61.78899384 263.91888428]
[72.96495819 274.26382446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 93]
[13 92]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[40 51]
[41 50]
[42 49]
[43 48]
[54 80]
[55 79]
[56 78]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
