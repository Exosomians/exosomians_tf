%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGACUUCACUACUAAGUGUAAGUACAGAGAAGAGACUAUUUAAGAACUUCUUUUAAAAACACACAGACUAGUCC\
) } def
/len { sequence length } bind def

/coor [
[54.84100342 360.64929199]
[39.48735046 365.30169678]
[26.35939789 356.08016968]
[25.52778816 340.05868530]
[37.63045883 329.52755737]
[40.00643158 314.71691895]
[42.38240051 299.90628052]
[44.75837326 285.09564209]
[47.13434219 270.28503418]
[37.55809021 263.72192383]
[31.20513153 253.94261169]
[29.08189964 242.42265320]
[31.55296516 230.91880798]
[38.27917480 221.20100403]
[48.26356125 214.78010559]
[59.99897766 212.67304993]
[64.12079620 198.25048828]
[56.68625641 185.39500427]
[60.66091156 170.70974731]
[74.19532013 162.99888611]
[78.31713867 148.57630920]
[82.43895721 134.15373230]
[86.56077576 119.73116302]
[77.55165100 108.12423706]
[77.04576111 93.43992615]
[85.23473358 81.24050903]
[99.01665497 76.14701843]
[103.13847351 61.72444534]
[102.49697113 52.33251572]
[107.72149658 46.81653976]
[112.41344452 32.56924057]
[117.10539246 18.32193756]
[121.79734039 4.07463551]
[126.48928833 -10.17266655]
[131.18124390 -24.41996765]
[135.87318420 -38.66727066]
[128.39982605 -50.06698990]
[128.93780518 -63.49097443]
[137.05874634 -73.94602966]
[149.55625916 -77.67596436]
[154.81092834 -91.72546387]
[149.49482727 -106.86213684]
[158.13636780 -120.37891388]
[174.10649109 -121.90689087]
[185.15428162 -110.27392578]
[182.80482483 -94.40383911]
[168.86042786 -86.47080231]
[163.60575867 -72.42130280]
[171.24119568 -57.57598114]
[165.79463196 -41.44264603]
[150.12049866 -33.97532272]
[145.42854309 -19.72801971]
[140.73658752 -5.48071766]
[136.04464722 8.76658440]
[131.35269165 23.01388550]
[126.66074371 37.26118851]
[121.96879578 51.50849152]
[117.56104279 65.84626007]
[113.43922424 80.26883698]
[122.44834900 91.87576294]
[122.95423889 106.56007385]
[114.76526642 118.75949097]
[100.98334503 123.85298157]
[96.86152649 138.27555847]
[92.73971558 152.69813538]
[88.61789703 167.12069702]
[96.03381348 180.81893921]
[91.64825439 195.38676453]
[78.54337311 202.37229919]
[74.42155457 216.79487610]
[86.81037903 230.98469543]
[88.45587921 249.60441589]
[78.89684296 265.49893188]
[61.94497299 272.66098022]
[59.56900024 287.47161865]
[57.19303131 302.28225708]
[54.81706238 317.09289551]
[52.44108963 331.90350342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[16 70]
[17 69]
[20 66]
[21 65]
[22 64]
[23 63]
[27 59]
[28 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
