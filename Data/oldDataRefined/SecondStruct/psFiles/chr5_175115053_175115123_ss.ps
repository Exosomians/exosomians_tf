%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAUUGGUCUGUUUAGUGAGGUGGUUGAUUCUUACCGGUACGUGGUGGUGGGUGUCUUAGCUCUUUCUC\
) } def
/len { sequence length } bind def

/coor [
[56.09180450 287.38458252]
[43.28774643 295.32208252]
[29.03828621 300.21090698]
[14.05816936 301.80584717]
[-0.90121007 300.02688599]
[-15.08949375 294.96325684]
[-27.79500389 286.86895752]
[-38.38043976 276.14996338]
[-46.31483459 263.34399414]
[-51.20020676 249.09335327]
[-52.79150772 234.11285400]
[-51.00891876 219.15390015]
[-45.94185257 204.96684265]
[-37.84447098 192.26329041]
[-27.12293816 181.68045044]
[-14.31503677 173.74916077]
[-0.06320878 168.86724854]
[14.91768074 167.27957153]
[29.87619591 169.06578064]
[44.06202316 174.13629150]
[52.12151718 161.48541260]
[60.18101120 148.83454895]
[60.49379730 133.94322205]
[74.43419647 126.46152496]
[82.49369049 113.81065369]
[90.55318451 101.15978241]
[90.57830811 95.56871033]
[93.90496826 90.47787476]
[99.90740204 87.80057526]
[109.03882599 75.90027618]
[118.17024994 63.99997711]
[120.43284607 48.34139252]
[134.31913757 42.95433807]
[143.45054626 31.05403900]
[152.58197021 19.15373993]
[161.71339417 7.25343895]
[170.84481812 -4.64686108]
[179.97624207 -16.54716110]
[189.10766602 -28.44746208]
[184.57162476 -43.28673172]
[189.65600586 -57.94717407]
[202.40577698 -66.79154968]
[217.91838074 -66.41902161]
[230.22891235 -56.97282028]
[234.60369873 -42.08521652]
[229.36058044 -27.48079109]
[216.51560974 -18.77524567]
[201.00796509 -19.31604004]
[191.87654114 -7.41574001]
[182.74511719 4.48456049]
[173.61369324 16.38486099]
[164.48226929 28.28516006]
[155.35086060 40.18545914]
[146.21943665 52.08576202]
[144.60997009 66.89315796]
[130.07054138 73.13139343]
[120.93912506 85.03170013]
[111.80770111 96.93199921]
[103.20405579 109.21927643]
[95.14456177 121.87014771]
[87.08506775 134.52102661]
[86.19581604 150.31721497]
[72.83188629 156.89404297]
[64.77239227 169.54490662]
[56.71289444 182.19578552]
[67.30352020 192.90962219]
[75.24412537 205.71176147]
[80.13640594 219.96003723]
[81.73496246 234.93975830]
[79.95962524 249.89956665]
[74.89942932 264.08908081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 65]
[21 64]
[22 63]
[24 61]
[25 60]
[26 59]
[29 58]
[30 57]
[31 56]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
