%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUUGGCUAAAGUCUACCACGAUCUUUUAAUAUAACUGAGACUUGUGGUUUUCUUUAGUCAG\
) } def
/len { sequence length } bind def

/coor [
[79.53432465 280.97463989]
[64.09002686 283.42568970]
[50.71018600 275.33163452]
[45.71235657 260.51422119]
[51.45635986 245.96978760]
[65.23005676 238.56578064]
[68.11195374 223.84521484]
[70.99385834 209.12466431]
[73.87575531 194.40411377]
[76.75765991 179.68356323]
[79.63955688 164.96301270]
[82.52145386 150.24246216]
[85.40335846 135.52191162]
[88.28525543 120.80136108]
[78.32283020 110.00159454]
[76.57151031 95.41331482]
[83.69470215 82.56243134]
[96.99418640 76.31674194]
[99.87609100 61.59618759]
[102.75798798 46.87563705]
[105.63989258 32.15508652]
[108.52178955 17.43453407]
[111.40369415 2.71398163]
[114.28559113 -12.00657082]
[116.81095123 -26.79246140]
[118.97828674 -41.63505936]
[121.14562225 -56.47765350]
[123.31295776 -71.32025146]
[110.89315796 -80.26492310]
[104.06314850 -93.96198273]
[104.39240265 -109.26395416]
[111.80527496 -122.65454102]
[124.59833527 -131.05670166]
[139.83183289 -132.53965759]
[154.00521851 -126.76266479]
[163.86155701 -115.05321503]
[167.13592529 -100.10205841]
[163.07591248 -85.34486389]
[152.61445618 -74.17272186]
[138.15554810 -69.15291595]
[135.98822021 -54.31031799]
[133.82087708 -39.46772003]
[131.65354919 -24.62512589]
[133.88633728 -17.28766060]
[129.00614929 -9.12467003]
[126.12424469 5.59588242]
[123.24234009 20.31643486]
[120.36044312 35.03698730]
[117.47854614 49.75753784]
[114.59664154 64.47808838]
[111.71474457 79.19863892]
[121.67716980 89.99840546]
[123.42848969 104.58668518]
[116.30529785 117.43756866]
[103.00581360 123.68325806]
[100.12390900 138.40380859]
[97.24201202 153.12435913]
[94.36010742 167.84490967]
[91.47821045 182.56546021]
[88.59630585 197.28602600]
[85.71440887 212.00657654]
[82.83250427 226.72712708]
[79.95060730 241.44767761]
[89.91543579 253.49906921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 43]
[26 42]
[27 41]
[28 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
