%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAGGACUCGUGUUACAUCGUAUUCGCGCAGUCCUACCGGCUCGCCAGAUUCCGCGACGCAAGUCCAGCGUCAGAGGGGACCUCCGCACCCAAGCUUAGGGUGAGGACUGUCAAGCAUGAAAAUCAUAAAUCUGUGUUUAGCUCAAAUUCAAAU\
) } def
/len { sequence length } bind def

/coor [
[-42.39487839 335.83886719]
[-49.37268066 335.61489868]
[-56.19380569 334.16284180]
[-62.64406586 331.53091431]
[-68.52138519 327.80441284]
[-79.69529724 337.81161499]
[-90.86920929 347.81878662]
[-102.04312134 357.82595825]
[-113.21703339 367.83316040]
[-124.39094543 377.84033203]
[-135.46417236 387.95880127]
[-146.43562317 398.18756104]
[-157.40705872 408.41632080]
[-168.37849426 418.64508057]
[-173.32409668 436.35580444]
[-190.52926636 439.68927002]
[-201.29385376 450.13549805]
[-212.05842590 460.58172607]
[-219.21444702 475.95144653]
[-235.96447754 473.32986450]
[-238.08219910 456.50869751]
[-222.50466919 449.81716919]
[-211.74008179 439.37091064]
[-200.97550964 428.92468262]
[-200.46922302 416.80368042]
[-191.53756714 408.01132202]
[-178.60725403 407.67364502]
[-167.63581848 397.44488525]
[-156.66436768 387.21612549]
[-145.69293213 376.98736572]
[-142.92959595 370.08721924]
[-134.39811707 366.66641235]
[-123.22421265 356.65924072]
[-112.05030060 346.65206909]
[-100.87638855 336.64486694]
[-89.70247650 326.63769531]
[-78.52856445 316.63052368]
[-84.09204865 293.12124634]
[-74.80654907 270.70007324]
[-54.06464386 257.89303589]
[-29.64138603 259.65118408]
[-21.41733742 247.10664368]
[-13.19328690 234.56213379]
[-4.96923685 222.01760864]
[-4.94678831 204.49249268]
[11.51040077 196.28948975]
[19.48180389 183.58293152]
[27.32567787 170.79724121]
[35.04124069 157.93373108]
[42.75680542 145.07020569]
[50.47237015 132.20669556]
[58.18793106 119.34317780]
[65.90349579 106.47966003]
[66.35365295 91.48641205]
[59.42372894 78.18317413]
[46.18604279 69.51863861]
[47.16817856 54.65645218]
[40.10550308 41.42321396]
[32.91078186 28.26130104]
[25.71606064 15.09938622]
[18.52133942 1.93747163]
[11.32661724 -11.22444248]
[-4.04035568 -14.12101746]
[-13.91021442 -26.25031662]
[-13.62271214 -41.88525772]
[-3.31359911 -53.64349747]
[12.14947605 -55.97315598]
[25.46532249 -47.77423859]
[30.34660530 -32.91802597]
[24.48853111 -18.41916466]
[31.68325233 -5.25724983]
[38.87797546 7.90466452]
[46.07269669 21.06657791]
[53.26741791 34.22849274]
[59.26883316 38.61379623]
[60.47141647 47.72652435]
[73.21343231 55.43952560]
[72.72696686 71.25325012]
[79.65689087 84.55648804]
[91.63294220 70.99690247]
[112.26144409 67.39881897]
[122.59945679 56.53026581]
[132.93746948 45.66170883]
[136.81159973 27.68618965]
[153.78579712 23.32650185]
[163.90428162 12.25327110]
[174.02275085 1.18003976]
[177.62007141 -14.22677231]
[191.91723633 -18.40292931]
[202.03572083 -29.47616005]
[212.15419006 -40.54939270]
[222.27265930 -51.62262344]
[232.39114380 -62.69585419]
[230.14927673 -78.17189789]
[238.42362976 -91.44100189]
[253.30729675 -96.23789978]
[267.77267456 -90.29763794]
[274.98965454 -76.42503357]
[271.55059814 -61.17029953]
[259.07931519 -51.73625946]
[243.46437073 -52.57737732]
[233.34590149 -41.50414658]
[223.22741699 -30.43091583]
[213.10894775 -19.35768509]
[202.99047852 -8.28445339]
[200.11689758 6.33032751]
[185.09597778 11.29851532]
[174.97750854 22.37174606]
[164.85903931 33.44497681]
[165.08085632 45.57453918]
[156.69279480 54.88689804]
[143.80603027 55.99972153]
[133.46801758 66.86827850]
[123.12999725 77.73683167]
[125.20368958 84.94445801]
[139.61900330 80.79729462]
[143.76593018 95.21266937]
[129.35107422 99.35969543]
[131.42475891 106.56732178]
[145.95797729 110.28022003]
[160.49119568 113.99312592]
[175.02441406 117.70602417]
[191.86727905 115.76845551]
[198.39169312 131.41671753]
[185.16111755 142.01803589]
[171.31150818 132.23924255]
[156.77828979 128.52633667]
[142.24507141 124.81343842]
[127.71186066 121.10053253]
[99.07235718 130.17161560]
[78.76701355 114.19522095]
[71.05145264 127.05873871]
[63.33588791 139.92225647]
[55.62032318 152.78576660]
[47.90475845 165.64929199]
[40.18919754 178.51280212]
[38.44206619 187.53697205]
[32.18836594 191.55432129]
[24.21696281 204.26089478]
[26.32859039 217.02209473]
[19.38229179 227.45419312]
[7.57528400 230.24165344]
[-0.64876586 242.78617859]
[-8.87281609 255.33070374]
[-17.09686470 267.87521362]
[-12.50073242 273.25775146]
[-8.93195152 279.36145020]
[-6.50060940 285.99279785]
[-5.28078556 292.94213867]
[-5.30829954 299.99026489]
[-6.57966232 306.91528320]
[-9.05226898 313.49966431]
[-12.64582348 319.53704834]
[-17.24494171 324.83868408]
[-22.70285225 329.23941040]
[-28.84608841 332.60272217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 30]
[12 29]
[13 28]
[14 27]
[16 24]
[17 23]
[18 22]
[41 145]
[42 144]
[43 143]
[44 142]
[46 139]
[47 138]
[48 136]
[49 135]
[50 134]
[51 133]
[52 132]
[53 131]
[54 79]
[55 78]
[57 76]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[81 114]
[82 113]
[83 112]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
