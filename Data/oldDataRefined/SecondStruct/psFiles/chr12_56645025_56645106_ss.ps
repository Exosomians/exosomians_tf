%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAGAGUCAUGGAUUUACACCGAAGUCGUUUGAGUCUUCUUGCUUUCAGUAAAACUAUUUUAGUAGUAUCUUCCGUCUG\
) } def
/len { sequence length } bind def

/coor [
[199.97505188 139.08926392]
[199.45326233 124.71546936]
[184.67031860 122.17288971]
[169.88737488 119.63031769]
[155.10444641 117.08774567]
[140.32150269 114.54517365]
[125.53855896 112.00259399]
[110.75562286 109.46002197]
[97.57202148 114.11666870]
[86.70180511 105.32291412]
[71.91886902 102.78034210]
[57.13592529 100.23777008]
[43.17479706 110.57614136]
[26.36504364 107.79746246]
[16.85459900 94.06582642]
[1.98603177 92.08448029]
[-12.88253498 90.10313416]
[-27.75110054 88.12179565]
[-42.61966705 86.14044952]
[-55.01937103 95.93957520]
[-70.70637512 94.01773834]
[-80.37385559 81.51512909]
[-78.28627777 65.84931946]
[-65.68215179 56.31455994]
[-50.03929138 58.56765366]
[-40.63832474 71.27188110]
[-25.76975632 73.25322723]
[-10.90118980 75.23457336]
[3.96737647 77.21591187]
[18.83594322 79.19725800]
[28.00160027 69.93566895]
[41.03559494 67.68823242]
[53.12709427 73.51559448]
[59.67850113 85.45482635]
[74.46144104 87.99740601]
[89.24437714 90.53997803]
[102.42797852 85.88333130]
[113.29819489 94.67708588]
[128.08113098 97.21965790]
[142.86407471 99.76222992]
[157.64701843 102.30480194]
[172.42994690 104.84738159]
[187.21289062 107.38995361]
[201.99583435 109.93252563]
[207.93659973 95.34060669]
[216.91104126 82.39967346]
[228.48530579 71.73027039]
[242.10096741 63.84323120]
[257.10195923 59.11526871]
[272.76617432 57.77093887]
[288.34027100 59.87200546]
[303.07586670 65.31458282]
[316.26547241 73.83431244]
[327.27651978 85.01913452]
[335.58166504 98.32928467]
[340.78405762 113.12330627]
[342.63632202 128.68896484]
[357.56921387 130.10623169]
[372.50210571 131.52351379]
[387.43499756 132.94079590]
[402.36788940 134.35806274]
[417.04800415 127.04871368]
[430.56680298 136.33169556]
[429.01733398 152.65748596]
[413.99353027 159.23149109]
[400.95062256 149.29095459]
[386.01773071 147.87368774]
[371.08483887 146.45640564]
[356.15194702 145.03912354]
[341.21905518 143.62185669]
[337.01495361 157.30032349]
[330.16830444 169.87202454]
[320.95153809 180.83222961]
[309.73242188 189.74043274]
[296.95919800 196.23805237]
[283.14270020 200.06286621]
[268.83599854 201.05963135]
[254.61222839 199.18629456]
[241.04156494 194.51586914]
[228.66847229 187.23352051]
[217.98979187 177.62925720]
[209.43479919 166.08634949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[10 36]
[11 35]
[12 34]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
