%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAUUUUUUGCUACCAAUCUACGGUGCUUCAUCCACCGUUACGGAAUUGGCAUACGCACAACAGUCCGGGCUCCCG\
) } def
/len { sequence length } bind def

/coor [
[95.97733307 228.80186462]
[80.98443604 231.03541565]
[66.13241577 228.00335693]
[53.21473694 220.07182312]
[43.79126358 208.19857788]
[38.99993134 193.81736755]
[39.41931534 178.66482544]
[44.99876785 164.57064819]
[55.06455231 153.23681641]
[68.40116882 146.03192139]
[83.39816284 143.82600403]
[86.39854431 129.12915039]
[89.39893341 114.43228912]
[81.77195740 127.34853363]
[68.20535278 133.74752808]
[53.38735199 131.41795349]
[42.43865204 121.16486359]
[39.14282227 106.53142548]
[44.63881302 92.57455444]
[57.02735519 84.11737061]
[72.02731323 84.08243561]
[84.45533752 92.48210144]
[75.44420624 80.49045563]
[66.43306732 68.49881744]
[57.42193604 56.50717163]
[48.41080093 44.51553345]
[39.39966965 32.52389145]
[23.77596092 31.86524391]
[12.26580906 21.27985764]
[10.30395222 5.76582813]
[18.81671906 -7.35159540]
[33.78464127 -11.87876606]
[48.14032745 -5.67809296]
[55.10545731 8.32265663]
[51.39130783 23.51275635]
[60.40244293 35.50439835]
[69.41357422 47.49604034]
[78.42471313 59.48768234]
[87.43584442 71.47932434]
[96.44697571 83.47096252]
[102.93917847 84.30079651]
[108.26452637 87.43739319]
[111.70200348 92.12921143]
[126.39886475 89.12882996]
[141.09573364 86.12844086]
[155.79258728 83.12805939]
[169.93391418 69.02861023]
[188.06646729 75.24216461]
[202.47424316 71.06890106]
[216.88200378 66.89563751]
[231.20281982 62.43309402]
[245.43086243 57.68307495]
[255.89459229 45.05601501]
[272.01425171 48.07070541]
[277.20733643 63.62589645]
[266.13165283 75.71973419]
[250.18089294 71.91111755]
[235.95283508 76.66114044]
[230.45520020 81.91116333]
[221.05526733 81.30341339]
[206.64750671 85.47667694]
[192.23973083 89.64993286]
[187.95442200 99.29734039]
[178.79551697 104.98154449]
[167.80267334 104.52107239]
[158.79296875 97.82491302]
[144.09611511 100.82530212]
[129.39924622 103.82568359]
[114.70239258 106.82607269]
[104.09578705 117.43267059]
[101.09540558 132.12953186]
[98.09501648 146.82640076]
[111.02729797 154.73411560]
[120.47263336 166.58998108]
[125.29045868 180.96232605]
[124.89900208 196.11561584]
[119.34552765 210.22004700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 72]
[12 71]
[13 70]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[43 69]
[44 68]
[45 67]
[46 66]
[48 62]
[49 61]
[50 60]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
