%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCACCGGGACAUCGAGUCGCCAACCUCGCGACCAGAGCAUUUGGAUCCCCAGCACUCAAGUUUAGAGUGGUCCCGGAUUGUCUGACGGGAAACCCAAGACCACAAAUGGAUGUGAAGA\
) } def
/len { sequence length } bind def

/coor [
[201.37789917 207.52478027]
[195.78300476 200.63296509]
[191.81985474 192.78164673]
[189.63885498 184.34622192]
[189.30619812 175.72187805]
[190.80229187 167.30511475]
[194.02424622 159.47549438]
[182.02665710 150.47227478]
[170.02906799 141.46907043]
[158.03147888 132.46585083]
[146.03388977 123.46263885]
[134.03630066 114.45942688]
[122.03871918 105.45620728]
[109.98476410 129.90559387]
[74.51294708 131.28500366]
[59.75597763 133.97421265]
[50.75641632 146.68820190]
[35.75244141 149.20523071]
[23.68705177 140.54716492]
[8.93008232 143.23638916]
[-5.82688665 145.92559814]
[-20.58385658 148.61480713]
[-35.34082413 151.30401611]
[-42.92427063 164.97973633]
[-57.54254913 170.53311157]
[-72.29335785 165.34199524]
[-80.21181488 151.85748291]
[-77.55906677 136.44654846]
[-65.58766174 126.38576508]
[-49.95013428 126.42552185]
[-38.03003693 136.54704285]
[-23.27306747 133.85783386]
[-8.51609802 131.16862488]
[6.24087095 128.47941589]
[20.99784088 125.79019928]
[29.23347855 113.43261719]
[44.16083527 110.49515533]
[57.06676483 119.21723938]
[71.82373810 116.52803040]
[74.73841095 109.61755371]
[60.91754532 103.78799438]
[66.74732208 89.96722412]
[80.56775665 95.79660034]
[83.48242950 88.88612366]
[75.10877228 76.44097137]
[66.73511505 63.99581528]
[58.36146164 51.55065918]
[43.40050888 44.83485794]
[42.00549698 28.49515343]
[55.61149216 19.34043312]
[70.22181702 26.78828812]
[70.80661774 43.17700577]
[79.18027496 55.62216187]
[87.55392456 68.06731415]
[95.92758179 80.51247406]
[110.56969452 77.25540161]
[112.87805939 62.43408203]
[115.18641663 47.61276627]
[117.49477386 32.79144669]
[119.80313110 17.97012901]
[109.37804413 6.31459284]
[108.93566895 -9.31673241]
[118.68488312 -21.54321289]
[134.02239990 -24.59187889]
[147.70632935 -17.02324295]
[153.27552795 -2.41098428]
[148.10038757 12.34543610]
[134.62445068 20.27848625]
[132.31608582 35.09980392]
[130.00773621 49.92112350]
[127.69937134 64.74243927]
[125.39101410 79.56375885]
[131.04193115 93.45861816]
[143.03952026 102.46183777]
[155.03710938 111.46504974]
[167.03469849 120.46826172]
[179.03228760 129.47148132]
[191.02987671 138.47468567]
[203.02746582 147.47790527]
[223.34973145 136.60296631]
[246.95727539 138.83280945]
[265.91726685 154.15335083]
[273.45526123 178.03163147]
[288.41052246 179.18927002]
[303.36578369 180.34690857]
[318.32104492 181.50453186]
[326.27639771 173.86961365]
[336.91500854 171.97937012]
[346.60842896 176.22924805]
[352.18798828 184.96206665]
[367.06381226 186.88804626]
[381.93966675 188.81402588]
[398.42404175 184.85145569]
[406.79507446 199.59465027]
[394.94537354 211.71987915]
[380.01367188 203.68986511]
[365.13784790 201.76388550]
[350.26199341 199.83790588]
[333.12518311 208.64221191]
[317.16342163 196.45979309]
[302.20816040 195.30216980]
[287.25286865 194.14453125]
[272.29760742 192.98689270]
[264.74194336 205.94497681]
[273.11560059 218.39012146]
[281.48925781 230.83528137]
[289.86291504 243.28044128]
[305.41952515 246.06744385]
[314.38031006 259.08587646]
[311.42898560 274.61215210]
[298.31652832 283.43481445]
[282.82232666 280.31948853]
[274.13879395 267.11450195]
[277.41775513 251.65409851]
[269.04409790 239.20893860]
[260.67044067 226.76377869]
[252.29678345 214.31863403]
[243.65837097 217.94665527]
[234.52655029 219.63873291]
[225.32582092 219.35166931]
[216.47647095 217.13342285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[15 39]
[16 38]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[44 55]
[45 54]
[46 53]
[47 52]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[83 103]
[84 102]
[85 101]
[86 100]
[90 98]
[91 97]
[92 96]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
