%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGUCCACCGGCCAAUCGAGUCAACCAAUCUCGCACCACGAUUAUUGCGGUUCCAGCGCCCAAGCUAGGGGCAUGCCCGGUUGAAACAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[87.58417511 278.30343628]
[82.59124756 263.99096680]
[82.79768372 248.83401489]
[88.17855072 234.66284180]
[98.08409119 223.18869019]
[111.31815338 215.79713440]
[108.89968872 200.99337769]
[99.21159363 189.68011475]
[104.62265015 174.81300354]
[102.20418549 160.00924683]
[99.78572083 145.20549011]
[97.36725616 130.40174866]
[94.94879150 115.59799957]
[90.68915558 129.98046875]
[77.19757080 136.53616333]
[63.25779724 130.99696350]
[57.94538879 116.96919250]
[64.71900940 103.58569336]
[79.16822815 99.55979919]
[64.40558624 96.90193176]
[49.64293671 94.24406433]
[34.88029099 91.58620453]
[24.44748116 102.95106506]
[9.52074718 106.84928894]
[-5.13684750 102.03696442]
[-14.84811687 90.04968262]
[-16.51423073 74.71255493]
[-9.60353851 60.91959000]
[3.67878342 53.07207870]
[19.09439468 53.67412949]
[31.72422981 62.53363419]
[37.53815460 76.82355499]
[52.30080032 79.48141479]
[67.06344604 82.13928223]
[81.82609558 84.79714966]
[70.14490509 75.38706207]
[59.87113953 64.45775604]
[54.88385391 50.31113052]
[56.03194809 35.35513306]
[63.11999893 22.13546753]
[74.94152832 12.90229988]
[89.48435974 9.22723389]
[104.27310944 11.73581600]
[116.79052734 20.00105286]
[124.90599823 32.61608887]
[127.23815918 47.43368149]
[123.39003754 61.93167877]
[114.01636505 73.64255524]
[107.20132446 87.00501251]
[119.58838654 78.54566193]
[131.97544861 70.08630371]
[144.22390747 61.42747116]
[156.33053589 52.57143784]
[168.43717957 43.71540070]
[180.54380798 34.85936737]
[192.65045166 26.00333023]
[204.61209106 16.95241165]
[216.42559814 7.70898581]
[228.23910522 -1.53444135]
[229.90484619 -17.25070190]
[242.24813843 -27.12080765]
[257.94589233 -25.28899765]
[267.68496704 -12.84205437]
[265.68728638 2.83547211]
[253.13807678 12.44238377]
[237.48254395 10.27906990]
[225.66902161 19.52249718]
[213.85551453 28.76592445]
[210.46321106 35.49488831]
[201.50648499 38.10996628]
[189.39984131 46.96600342]
[177.29321289 55.82203674]
[165.18656921 64.67807007]
[153.07994080 73.53411102]
[149.47151184 80.14969635]
[140.43479919 82.47336578]
[128.04774475 90.93272400]
[115.66068268 99.39207458]
[109.75254059 113.17953491]
[112.17100525 127.98328400]
[114.58946991 142.78703308]
[117.00793457 157.59078979]
[119.42639923 172.39453125]
[129.28749084 184.76666260]
[123.70344543 198.57490540]
[126.12191010 213.37866211]
[141.02023315 216.17428589]
[154.06234741 223.89952087]
[163.67333984 235.62149048]
[168.69262695 249.92472839]
[168.51412964 265.08203125]
[163.15937805 279.26309204]
[153.27500916 290.75549316]
[140.05458069 298.17141724]
[125.09455109 300.61541748]
[110.20139313 297.79235840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 86]
[7 85]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[19 35]
[20 34]
[21 33]
[22 32]
[49 78]
[50 77]
[51 76]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
