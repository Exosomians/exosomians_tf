%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGACGUGUGAUAAUUUCGAGUCCCACCUCCGGUCAGAACCGAGUACUUGAAGACUCACAGCCUUCACACGAUAUAGUUACCGUCCUAAAAGCGAUUGUGGUCAUCUCGAACGGAGAUACUGACCUCAAACCAUCAUGAGCGACGGUGUAUCU\
) } def
/len { sequence length } bind def

/coor [
[83.37928772 146.38481140]
[71.87638092 140.45812988]
[62.31312561 131.74111938]
[55.34909058 120.83494568]
[51.46457291 108.49182129]
[36.46769333 108.79779816]
[21.47081375 109.10377502]
[6.47393560 109.40975189]
[-8.52294350 109.71572876]
[-23.51982307 110.02170563]
[-38.51670074 110.32769012]
[-43.45512772 124.63982391]
[-52.97435379 136.37678528]
[-65.91048431 144.13415527]
[-80.69227600 146.99223328]
[-95.53201294 144.62498474]
[-108.64166260 137.33721924]
[-118.44834900 126.02536774]
[-123.78306580 112.06735992]
[-138.77993774 112.37333679]
[-153.77682495 112.67931366]
[-168.77369690 112.98529053]
[-183.77058411 113.29126740]
[-199.26380920 123.19155121]
[-214.30874634 114.20733643]
[-229.29626465 114.81916046]
[-238.45347595 129.00610352]
[-254.09925842 134.90194702]
[-270.02282715 130.37712097]
[-280.02783203 117.39743805]
[-294.98959351 118.46752167]
[-309.93969727 119.69016266]
[-324.88977051 120.91280365]
[-339.83987427 122.13544464]
[-353.01116943 131.90524292]
[-367.94805908 125.13607788]
[-369.28472900 108.79149628]
[-355.64614868 99.68540192]
[-341.06250000 107.18535614]
[-326.11242676 105.96271515]
[-311.16232300 104.74007416]
[-296.21224976 103.51743317]
[-289.76315308 99.81539154]
[-280.94525146 102.42552185]
[-274.82769775 90.52147675]
[-263.52801514 83.14838409]
[-249.95179749 82.33035278]
[-237.65399170 88.38912964]
[-229.90809631 99.83164978]
[-214.92057800 99.21981812]
[-206.46133423 90.52031708]
[-193.93974304 89.92201996]
[-184.07655334 98.29438782]
[-169.07968140 97.98841095]
[-154.08279419 97.68243408]
[-139.08592224 97.37645721]
[-124.08904266 97.07048035]
[-119.32809448 82.90648651]
[-109.99095917 71.20404816]
[-97.18948364 63.38762283]
[-82.45865631 60.41706085]
[-67.57257843 62.66982269]
[-54.33080673 69.89308929]
[-44.34076691 81.23200989]
[-38.82267761 95.33081055]
[-23.82579994 95.02483368]
[-8.82892132 94.71884918]
[6.16795731 94.41287231]
[21.16483688 94.10689545]
[36.16171646 93.80091858]
[51.15859604 93.49494171]
[56.27843475 77.27944946]
[66.60558319 63.77001572]
[80.91006470 54.57563400]
[97.48818970 50.79136658]
[114.36547089 52.86793137]
[129.53179932 60.55800247]
[141.18084717 72.94567871]
[147.92518616 88.55557251]
[162.87527466 87.33293152]
[177.82536316 86.11029053]
[192.77545166 84.88765717]
[207.72554016 83.66501617]
[222.67562866 82.44237518]
[237.62571716 81.21973419]
[252.56256104 79.84467316]
[267.48458862 78.31732941]
[270.73669434 62.86538315]
[278.58663940 49.18674469]
[290.25854492 38.60932541]
[304.60620117 32.15571213]
[320.22561646 30.44432068]
[335.59234619 33.63014221]
[349.21032715 41.39080048]
[359.75756836 52.95912170]
[366.21432495 67.19895935]
[381.10211182 65.36754608]
[395.98989868 63.53612900]
[408.74212646 54.17179489]
[422.31887817 60.29727936]
[437.20663452 58.46586609]
[452.09442139 56.63445282]
[466.98220825 54.80303574]
[481.86999512 52.97162247]
[496.69476318 50.68556976]
[511.44265747 47.94702148]
[526.19055176 45.20847702]
[540.93841553 42.46992874]
[551.16955566 30.11257744]
[567.20660400 30.55094337]
[576.74737549 43.44874954]
[572.47296143 58.91190338]
[557.66235352 65.07839203]
[543.67700195 57.21782303]
[528.92907715 59.95636749]
[514.18121338 62.69491577]
[499.43331909 65.43346405]
[497.12966919 68.17765808]
[493.35629272 69.91416168]
[488.61486816 69.95264435]
[483.70138550 67.85939789]
[468.81362915 69.69081116]
[453.92584229 71.52223206]
[439.03805542 73.35364532]
[424.15029907 75.18505859]
[412.46292114 84.41839600]
[397.82131958 78.42391205]
[382.93353271 80.25532532]
[368.04574585 82.08673859]
[365.66693115 96.17135620]
[359.40060425 109.02532959]
[349.74880981 119.59841156]
[337.49047852 127.02389526]
[323.61880493 130.68966675]
[309.26055908 130.28862000]
[295.58477783 125.84439850]
[283.70742798 117.71019745]
[274.60040283 106.54068756]
[269.01193237 93.23936462]
[254.08990479 94.76670837]
[247.71768188 98.59953308]
[238.84835815 96.16982269]
[223.89826965 97.39246368]
[208.94818115 98.61510468]
[193.99809265 99.83774567]
[179.04800415 101.06037903]
[164.09791565 102.28302002]
[149.14782715 103.50566101]
[146.54031372 116.18016815]
[140.72297668 127.73875427]
[132.09701538 137.38423157]
[121.25737000 144.45135498]
[108.95162964 148.45272827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[25 50]
[26 49]
[30 44]
[31 42]
[32 41]
[33 40]
[34 39]
[79 148]
[80 147]
[81 146]
[82 145]
[83 144]
[84 143]
[85 142]
[86 140]
[87 139]
[96 129]
[97 128]
[98 127]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
