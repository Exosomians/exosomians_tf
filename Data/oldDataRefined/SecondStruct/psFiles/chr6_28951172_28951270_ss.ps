%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCUGUCUAAAGUAUAUGACGUUUUUAAGUGGUUUGGGACAUCUUGGGGUUUAAAAUUUGGUGCUUAUCCGCUCAUUGAGACUACGGUUUAUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[108.80429840 277.39038086]
[95.80129242 269.91229248]
[85.10012054 259.40109253]
[77.39034271 246.53411865]
[73.16873169 232.14044189]
[72.70731354 217.14753723]
[76.03396606 202.52658081]
[64.18164062 211.72019958]
[52.32931900 220.91380310]
[54.49322510 236.11949158]
[48.74949265 250.36396790]
[36.64315414 259.81552124]
[21.43075180 261.93176270]
[7.20434999 256.14340210]
[-2.20922327 244.00750732]
[-4.27776384 228.78854370]
[1.55515528 214.58036804]
[13.72050858 205.20487976]
[28.94587708 203.18405151]
[43.13571167 209.06147766]
[54.98803711 199.86787415]
[66.84036255 190.67425537]
[74.87776184 178.00933838]
[78.14990997 163.37059021]
[81.42205811 148.73184204]
[84.69421387 134.09309387]
[87.96636200 119.45433807]
[77.64302063 104.84202576]
[80.99547577 87.26784515]
[95.97302246 77.48193359]
[98.31954193 62.66661072]
[100.66605377 47.85128403]
[103.01257324 33.03596115]
[105.35909271 18.22063446]
[98.38044739 7.23368835]
[100.75862122 -5.15273428]
[110.65677643 -12.30089188]
[113.46749878 -27.03520012]
[116.27822113 -41.76950836]
[119.08893585 -56.50381851]
[117.61231232 -65.70584869]
[122.22630310 -71.65358734]
[125.49845123 -86.29234314]
[128.77059937 -100.93109131]
[132.04275513 -115.56984711]
[119.25919342 -123.71579742]
[110.03512573 -135.74459839]
[105.48439026 -150.20373535]
[106.15651703 -165.34719849]
[111.97033691 -179.34631348]
[122.22380829 -190.51063538]
[135.67877197 -197.49201965]
[150.71047974 -199.44741821]
[165.50376892 -196.14073181]
[178.27229309 -187.97123718]
[187.47418213 -175.92544556]
[191.99826050 -161.45794678]
[191.29823303 -146.31576538]
[185.45861816 -132.32737732]
[175.18460083 -121.18197632]
[161.71678162 -114.22539520]
[146.68150330 -112.29769135]
[143.40934753 -97.65894318]
[140.13720703 -83.02019501]
[136.86505127 -68.38143921]
[133.82324219 -53.69309998]
[131.01252747 -38.95878983]
[128.20181274 -24.22448158]
[125.39109039 -9.49017239]
[132.09585571 6.64351797]
[120.17441559 20.56715202]
[117.82789612 35.38247681]
[115.48138428 50.19780350]
[113.13486481 65.01313019]
[110.78834534 79.82845306]
[119.22898102 87.60943604]
[122.82679749 98.51099396]
[120.67567444 109.78755188]
[113.31739044 118.59911346]
[102.60511017 122.72648621]
[99.33296204 137.36523438]
[96.06081390 152.00398254]
[92.78866577 166.64274597]
[89.51651764 181.28149414]
[101.33418274 172.04338074]
[115.09717560 166.07847595]
[129.91865540 163.77113342]
[144.84356689 165.27001953]
[158.91023254 170.47857666]
[171.21223450 179.06115723]
[180.95687866 190.46475220]
[187.51626587 203.95454407]
[190.46771240 218.66130066]
[189.62106323 233.63739014]
[185.03085327 247.91780090]
[176.99287415 260.58233643]
[166.02505493 270.81500244]
[152.83412170 277.95635986]
[138.27005005 281.54632568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[37 69]
[38 68]
[39 67]
[40 66]
[42 65]
[43 64]
[44 63]
[45 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
