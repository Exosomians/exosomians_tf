%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCCUUUUUUUAUGGCUCGGGGAACGGCACGGUAACAAGGGUGUUACGGCACUGAGCCUAAGCUUGGCUCCAACGACGCCGGUGUUGCGUCUCAUGAUUGGUGAUAUGCUAGUGCCGCUCGAUGGCCCCUGGGCAUCCC\
) } def
/len { sequence length } bind def

/coor [
[95.90328217 219.69868469]
[88.42543793 219.12257385]
[79.50236511 231.17987061]
[70.57928467 243.23718262]
[61.65620804 255.29449463]
[52.73313141 267.35180664]
[43.81005478 279.40911865]
[51.66829300 292.42126465]
[53.94387817 307.45092773]
[50.28979492 322.20611572]
[41.26327133 334.43682861]
[28.24077606 342.27795410]
[13.20815372 344.53375244]
[-1.54223347 340.86026001]
[-13.76105785 331.81765747]
[-21.58503723 318.78488159]
[-23.82107353 303.74929810]
[-20.12818336 289.00375366]
[-11.06950951 276.79684448]
[1.97356737 268.98999023]
[17.01207352 266.77374268]
[31.75274467 270.48602295]
[40.67582321 258.42871094]
[49.59889984 246.37141418]
[58.52197647 234.31410217]
[67.44505310 222.25680542]
[76.36813354 210.19949341]
[81.84094238 196.23352051]
[83.48532104 181.32392883]
[85.12969971 166.41432190]
[86.77407074 151.50473022]
[88.41844940 136.59513855]
[90.06282806 121.68554688]
[77.87920380 112.27217102]
[73.47913361 96.58395386]
[79.62458801 80.52891541]
[94.88612366 70.81870270]
[89.41331482 56.85272980]
[83.94050598 42.88676071]
[78.46768951 28.92078781]
[64.26219177 22.53005028]
[58.91093445 8.28860760]
[65.09107208 -5.21478081]
[59.61825943 -19.18075180]
[54.14544678 -33.14672089]
[48.67263794 -47.11269379]
[43.19982529 -61.07866287]
[37.72701645 -75.04463196]
[21.59724236 -81.71954346]
[15.37158871 -97.66702271]
[22.42984772 -112.89348602]
[16.65156174 -126.73586273]
[2.30910110 -132.81300354]
[-3.35371304 -146.93345642]
[2.52829647 -160.56935120]
[-3.24998999 -174.41172791]
[-9.02827644 -188.25410461]
[-14.80656242 -202.09648132]
[-20.58484840 -215.93885803]
[-26.36313629 -229.78123474]
[-39.72193146 -239.29304504]
[-37.89471817 -255.59008789]
[-22.76117134 -261.90734863]
[-9.88939095 -251.74618530]
[-12.52075863 -235.55952454]
[-6.74247217 -221.71714783]
[-0.96418560 -207.87477112]
[4.81410074 -194.03239441]
[10.59238720 -180.19001770]
[16.37067413 -166.34764099]
[30.20181847 -160.94068909]
[36.25901413 -146.98486328]
[30.49393845 -132.51416016]
[36.27222443 -118.67177582]
[48.79904175 -115.46772003]
[57.30165482 -105.46896362]
[58.48604965 -92.20150757]
[51.69298553 -80.51744843]
[57.16579819 -66.55147552]
[62.63860703 -52.58550262]
[68.11141968 -38.61953354]
[73.58422852 -24.65356255]
[79.05703735 -10.68759155]
[92.76607513 -4.97812223]
[98.51522827 9.10739613]
[92.43366241 23.44797707]
[97.90647125 37.41394806]
[103.37928772 51.37992096]
[108.85209656 65.34589386]
[122.28385925 72.02328491]
[136.72180176 67.95564270]
[151.15975952 63.88800430]
[165.59770203 59.82036209]
[176.78260803 48.63070297]
[191.13114929 52.62675095]
[205.56910706 48.55910873]
[220.00704956 44.49146652]
[234.44499207 40.42382431]
[243.51058960 27.18772316]
[259.52111816 26.16667175]
[270.19467163 38.14393997]
[267.34341431 53.93158722]
[253.15457153 61.41868591]
[238.51263428 54.86177063]
[224.07469177 58.92941284]
[209.63674927 62.99705505]
[195.19879150 67.06469727]
[185.04658508 77.96340942]
[169.66534424 74.25830841]
[155.22740173 78.32595062]
[140.78944397 82.39359283]
[126.35150146 86.46123505]
[127.44167328 103.78869629]
[118.87901306 117.55238342]
[104.97241974 123.32991791]
[103.32804871 138.23951721]
[101.68367004 153.14910889]
[100.03929138 168.05870056]
[98.39491272 182.96830750]
[96.75054169 197.87789917]
[105.16819763 196.32643127]
[114.71934509 198.39312744]
[124.02751160 204.46754456]
[131.61863708 214.45620728]
[138.58949280 227.73805237]
[145.56033325 241.01989746]
[152.53118896 254.30172729]
[165.79548645 262.92547607]
[164.85910034 277.79061890]
[171.82994080 291.07244873]
[184.54452515 302.28744507]
[177.28758240 317.60974121]
[160.55514526 314.87802124]
[158.54811096 298.04330444]
[151.57725525 284.76147461]
[138.81156921 277.08773804]
[139.24934387 261.27258301]
[132.27848816 247.99073792]
[125.30764771 234.70889282]
[118.33679962 221.42706299]
[110.85896301 220.85093689]
[109.70646667 235.80659485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[28 120]
[29 119]
[30 118]
[31 117]
[32 116]
[33 115]
[37 89]
[38 88]
[39 87]
[40 86]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[51 74]
[52 73]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[90 112]
[91 111]
[92 110]
[93 109]
[95 107]
[96 106]
[97 105]
[98 104]
[124 140]
[125 139]
[126 138]
[127 137]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
