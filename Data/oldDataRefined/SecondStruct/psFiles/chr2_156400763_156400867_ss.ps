%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGACCCCCUACAUCGAGUCACCAUCUCGCGCGCGAAGCGUACACACUCCAGGGCCCAAGUUAGGGGCCGUAGAGGUUUAGUCGGCUGCAAACGAAAAAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[215.42364502 252.33959961]
[207.79568481 239.42395020]
[200.16770935 226.50830078]
[192.53974915 213.59263611]
[184.91177368 200.67698669]
[177.28381348 187.76133728]
[168.90411377 175.32025146]
[159.80210876 163.39743042]
[145.92916870 157.97610474]
[143.70524597 142.31198120]
[134.60324097 130.38916016]
[125.50124359 118.46634674]
[116.39924622 106.54352570]
[113.90921021 116.28994751]
[105.55271912 124.56426239]
[92.49931335 127.95915222]
[77.78608704 124.01222992]
[63.10773468 127.10190582]
[48.42938995 130.19158936]
[41.22079849 144.06855774]
[26.75901031 150.01756287]
[11.87243652 145.22967529]
[3.59006262 131.96557617]
[5.82257223 116.48816681]
[17.51584244 106.10542297]
[33.14867020 105.71974182]
[45.33971024 115.51323700]
[60.01805496 112.42356110]
[74.69640350 109.33388519]
[77.34975433 94.57041931]
[64.66581726 86.56307220]
[51.98187637 78.55572510]
[39.29793930 70.54837036]
[23.39558411 72.66844177]
[11.92335129 61.45383072]
[13.68175602 45.50743484]
[27.32189941 37.06195831]
[42.38023376 42.59605408]
[47.30529022 57.86442947]
[59.98922729 65.87178040]
[72.67317200 73.87913513]
[85.35710907 81.88648224]
[92.64727783 80.12483978]
[85.35500336 67.01672363]
[73.04431915 58.44659424]
[68.51769257 44.14590836]
[73.65479279 30.05299568]
[86.32244873 22.01991272]
[101.26044464 23.38238144]
[112.26580048 33.57463837]
[114.76856995 48.36437225]
[107.72969818 61.60995102]
[107.22762299 76.60154724]
[114.51779938 74.83990479]
[122.14575958 61.92424774]
[129.77372742 49.00859451]
[137.40170288 36.09293747]
[145.02966309 23.17728424]
[139.65644836 8.49182987]
[145.02853394 -6.19403744]
[158.60939026 -13.94609928]
[173.98654175 -11.10407066]
[183.89938354 0.99013162]
[183.66735840 16.62599373]
[173.40002441 28.42074013]
[157.94531250 30.80525208]
[150.31735229 43.72090530]
[142.68937683 56.63655853]
[135.06141663 69.55221558]
[127.43344879 82.46786499]
[128.32206726 97.44152069]
[137.42405701 109.36434174]
[146.52606201 121.28715515]
[155.62806702 133.20997620]
[170.15203857 139.48410034]
[171.72492981 154.29542542]
[180.82691956 166.21824646]
[185.25497437 167.84782410]
[188.51730347 170.59349060]
[190.39848328 173.91462708]
[190.89514160 177.25808716]
[190.19946289 180.13336182]
[197.82743835 193.04902649]
[205.45539856 205.96467590]
[213.08335876 218.88032532]
[220.71133423 231.79598999]
[228.33929443 244.71163940]
[243.03862000 241.18722534]
[258.12362671 242.15374756]
[272.25296021 247.52526855]
[284.17025757 256.82415771]
[292.81582642 269.22357178]
[297.42095947 283.62094116]
[297.57611084 298.73608398]
[293.26751709 313.22494507]
[284.87829590 325.79922485]
[273.15438843 335.34078979]
[259.13827515 341.00122070]
[244.07630920 342.27719116]
[229.30773926 339.05526733]
[216.14579773 331.62194824]
[205.76081848 320.63812256]
[199.07626343 307.08056641]
[196.68647766 292.15472412]
[198.80397034 277.18783569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 77]
[8 76]
[10 74]
[11 73]
[12 72]
[13 71]
[17 29]
[18 28]
[19 27]
[30 42]
[31 41]
[32 40]
[33 39]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
