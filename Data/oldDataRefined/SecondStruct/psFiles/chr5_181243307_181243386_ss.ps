%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGUCGAGUCUUUGUCGGAGACCUAAAGUCGUGGCUGUGAGUCUACCGUACAACCCCAGUAGUGGCGGGGCGGGCCG\
) } def
/len { sequence length } bind def

/coor [
[93.64725494 182.07627869]
[91.32947540 167.25642395]
[89.01169586 152.43658447]
[86.69390869 137.61672974]
[84.37612915 122.79689026]
[72.04949188 131.34405518]
[57.11114120 132.70259094]
[43.44488144 126.51927185]
[34.60380173 114.40171051]
[32.88648605 99.50034332]
[38.73941422 85.68936157]
[50.64089584 76.55947876]
[65.49666595 74.48436737]
[79.44438171 80.00353241]
[88.85836029 91.68331909]
[83.18535614 77.79745483]
[77.51235962 63.91159821]
[71.83936310 50.02573776]
[65.89816284 36.25249481]
[59.69100571 22.59705162]
[53.48384476 8.94160748]
[47.01305389 -4.59090376]
[40.28106689 -17.99539375]
[33.54907990 -31.39988327]
[26.81709099 -44.80437088]
[11.55394840 -45.79620361]
[-1.08002400 -54.23892212]
[-7.74745464 -67.78188324]
[-6.74755621 -82.74370575]
[1.55121946 -95.11286163]
[-5.18076801 -108.51734924]
[-11.91275597 -121.92183685]
[-25.90391541 -130.47633362]
[-25.22064018 -146.86125183]
[-10.56582737 -154.22117615]
[2.98490977 -144.98484802]
[1.49173367 -128.65382385]
[8.22372150 -115.24933624]
[14.95570946 -101.84484863]
[29.83297729 -101.11514282]
[42.43130112 -92.98260498]
[49.31290817 -79.54720306]
[48.54052734 -64.37155914]
[40.22158051 -51.53636169]
[46.95356750 -38.13187027]
[53.68555450 -24.72738075]
[60.41754532 -11.32289124]
[66.38835907 -6.63825798]
[67.13928986 2.73444700]
[73.34645081 16.38989067]
[79.55361176 30.04533577]
[85.33828735 34.95796585]
[85.72521973 44.35274124]
[91.39822388 58.23859787]
[97.07122040 72.12445831]
[102.74421692 86.01031494]
[114.04575348 95.87313843]
[128.57160950 99.61475372]
[143.16728210 103.07399750]
[157.82728577 106.24954987]
[172.48728943 109.42510986]
[187.92964172 103.90550232]
[200.25410461 114.72398376]
[196.78234863 130.75141907]
[181.08580017 135.50016785]
[169.31173706 124.08512115]
[154.65173340 120.90956116]
[139.99171448 117.73400116]
[132.59681702 119.44040680]
[124.82998657 114.14060211]
[110.30413818 110.39898682]
[99.19597626 120.47910309]
[101.51375580 135.29895020]
[103.83154297 150.11880493]
[106.14932251 164.93864441]
[108.46710205 179.75849915]
[120.52832031 190.33708191]
[119.63379669 206.35517883]
[106.46972656 215.52507019]
[91.13446045 210.81239319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[15 56]
[16 55]
[17 54]
[18 53]
[19 51]
[20 50]
[21 49]
[22 47]
[23 46]
[24 45]
[25 44]
[30 39]
[31 38]
[32 37]
[57 71]
[58 70]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
