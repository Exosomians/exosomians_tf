%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGCCGACCAGGCUCACGUCACCACAAAUGUUGAUUAACUAGUGUUGGUCAAUGUCUAAAGAAACAAGGAAGAGGUGAGGGUGACGAAGUGAACUGAUCGGAAAACGACACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[86.49558258 289.17312622]
[82.97890472 274.50018311]
[83.38067627 259.41702271]
[87.67348480 244.95210266]
[95.56464386 232.09162903]
[106.51612854 221.71244812]
[119.78124237 214.52223206]
[116.27955627 199.93667603]
[112.77787781 185.35113525]
[109.27619934 170.76557922]
[98.78155518 160.19619751]
[103.08348846 144.97108459]
[99.58181000 130.38554382]
[96.08013153 115.79999542]
[86.48120880 109.06903076]
[83.89381409 97.63441467]
[89.65991211 87.42670441]
[86.54123688 72.75449371]
[83.42256165 58.08227921]
[80.30388641 43.41006470]
[76.61158752 28.87160110]
[72.35135651 14.48930550]
[68.09112549 0.10700932]
[63.83089447 -14.27528667]
[59.57066345 -28.65758324]
[55.31043243 -43.03987885]
[29.80100060 -45.25627136]
[8.08566284 -58.73416138]
[-5.17244101 -80.52870178]
[-7.14916372 -105.91466522]
[2.53917575 -129.41082764]
[-8.34144020 -139.73614502]
[-19.22205544 -150.06146240]
[-30.10267067 -160.38677979]
[-40.98328781 -170.71209717]
[-51.86390305 -181.03741455]
[-62.74451828 -191.36273193]
[-73.62512970 -201.68806458]
[-84.50574493 -212.01338196]
[-95.38636780 -222.33869934]
[-106.26698303 -232.66401672]
[-117.14759827 -242.98933411]
[-133.21125793 -246.28941345]
[-138.12767029 -261.93426514]
[-126.83924866 -273.82977295]
[-110.95854950 -269.73889160]
[-106.82227325 -253.86994934]
[-95.94165802 -243.54463196]
[-85.06104279 -233.21931458]
[-74.18042755 -222.89399719]
[-63.29981613 -212.56867981]
[-52.41919708 -202.24334717]
[-41.53858185 -191.91802979]
[-30.65796852 -181.59271240]
[-19.77735138 -171.26739502]
[-8.89673710 -160.94207764]
[1.98387885 -150.61676025]
[12.86449432 -140.29144287]
[18.94323921 -144.52976990]
[25.54177666 -147.90838623]
[32.53922272 -150.36454773]
[39.80725861 -151.85241699]
[47.21251297 -152.34391785]
[54.61897278 -151.82928467]
[61.89052200 -150.31719971]
[68.89340973 -147.83473206]
[75.49871826 -144.42677307]
[81.58475494 -140.15527344]
[87.03926849 -135.09808350]
[91.76154327 -129.34757996]
[95.66423798 -123.00892639]
[98.67500305 -116.19818878]
[100.73784637 -109.04019165]
[101.81414032 -101.66623688]
[101.88336945 -94.21169281]
[100.94351196 -86.81350708]
[99.01109314 -79.60771179]
[96.12088013 -72.72686768]
[92.32529449 -66.29769897]
[87.69342041 -60.43869400]
[82.30975342 -55.25797272]
[76.27270508 -50.85125732]
[69.69272614 -47.30010986]
[73.95295715 -32.91781235]
[78.21318817 -18.53551674]
[82.47341919 -4.15322065]
[86.73365021 10.22907543]
[90.99388123 24.61137199]
[94.02909088 26.62657166]
[96.18605042 30.27261734]
[96.68099213 35.09431458]
[94.97609711 40.29138947]
[98.09477234 54.96360397]
[101.21344757 69.63581848]
[104.33212280 84.30802917]
[115.87757874 96.40727234]
[110.66567993 112.29830933]
[114.16735840 126.88385773]
[117.66903687 141.46940613]
[128.41413879 153.08204651]
[123.86174774 167.26390076]
[127.36342621 181.84944153]
[130.86511230 196.43499756]
[134.36679077 211.02053833]
[149.45037842 211.40484619]
[163.92027283 215.68089294]
[176.78988647 223.55714417]
[187.18174744 234.49659729]
[194.38732910 247.75337219]
[197.91532898 262.42361450]
[197.52520752 277.50704956]
[193.24357605 291.97528076]
[185.36233521 304.84185791]
[174.41888428 315.22949219]
[161.15931702 322.42996216]
[146.48773193 325.95230103]
[131.40443420 325.55633545]
[116.93785095 321.26913452]
[104.07432556 313.38293457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 104]
[8 103]
[9 102]
[10 101]
[12 99]
[13 98]
[14 97]
[17 95]
[18 94]
[19 93]
[20 92]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
