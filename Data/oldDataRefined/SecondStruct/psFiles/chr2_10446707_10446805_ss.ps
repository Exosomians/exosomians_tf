%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAAGGUGACACGUUGGGUGAAGUCACGGUCGUCGGAUGCCCGUGUCUCCGGUCCGUUACCAAGCCCCUGUGUCAAACGAGACCGUACCCCAUGAUA\
) } def
/len { sequence length } bind def

/coor [
[85.75195312 320.72811890]
[87.23915100 305.80203247]
[92.78191376 291.86367798]
[101.95102692 279.99240112]
[114.03646088 271.10745239]
[128.10237122 265.89688110]
[143.05953979 264.76412964]
[157.74974060 267.79696655]
[171.03144836 274.75765991]
[164.64476013 261.18524170]
[158.25807190 247.61283875]
[151.87138367 234.04043579]
[145.48469543 220.46803284]
[139.09800720 206.89561462]
[132.71131897 193.32321167]
[121.34645844 188.86120605]
[115.96262360 177.45535278]
[119.98966980 165.07806396]
[114.03245544 151.31173706]
[108.07523346 137.54542542]
[102.11801910 123.77909851]
[87.79197693 120.51574707]
[78.09022522 109.48120880]
[76.68769836 94.85527802]
[84.11566162 82.17811584]
[78.15844727 68.41179657]
[65.57678986 58.81947708]
[67.62312317 44.06611252]
[61.66590881 30.29979324]
[55.70869064 16.53347397]
[49.75147247 2.76715469]
[39.21420670 -0.73522997]
[32.56220627 -9.34764385]
[31.86548424 -19.98521805]
[37.11447525 -29.00800896]
[32.03340530 -43.12121964]
[26.95233727 -57.23443222]
[21.87126923 -71.34764099]
[16.79019928 -85.46085358]
[4.83568096 -95.82425690]
[7.80434847 -110.42001343]
[2.72327948 -124.53322601]
[-10.14475155 -134.69914246]
[-7.50741148 -150.88482666]
[7.92223120 -156.43984985]
[20.27148247 -145.64965820]
[16.83649063 -129.61430359]
[21.91756058 -115.50108337]
[33.50864792 -106.14715576]
[30.90341187 -90.54192352]
[35.98447800 -76.42871094]
[41.06554794 -62.31549835]
[46.14661789 -48.20228958]
[51.22768784 -34.08907700]
[66.89442444 -22.94072914]
[63.51779175 -3.19006348]
[69.47500610 10.57625580]
[75.43222809 24.34257507]
[81.38944244 38.10889435]
[93.54499817 46.71655655]
[91.92476654 62.45457840]
[97.88198090 76.22090149]
[112.20802307 79.48425293]
[121.90977478 90.51879120]
[123.31230164 105.14472198]
[115.88433838 117.82188416]
[121.84155273 131.58819580]
[127.79877472 145.35452271]
[133.75599670 159.12083435]
[148.76556396 169.64230347]
[146.28372192 186.93652344]
[152.67041016 200.50892639]
[159.05709839 214.08134460]
[165.44378662 227.65374756]
[171.83047485 241.22615051]
[178.21717834 254.79855347]
[184.60386658 268.37097168]
[190.92761230 272.35238647]
[193.80986023 278.48822021]
[206.72099304 286.12384033]
[219.63212585 293.75946045]
[236.02709961 293.39004517]
[244.31214905 307.54241943]
[235.96429443 321.65786743]
[219.57112122 321.21560669]
[211.99649048 306.67059326]
[199.08537292 299.03497314]
[186.17424011 291.39935303]
[191.85531616 305.28189087]
[193.49085999 320.19247437]
[190.95422363 334.97644043]
[184.44181824 348.48895264]
[174.45796204 359.68371582]
[161.77574158 367.69378662]
[147.37724304 371.89895630]
[132.37742615 371.97351074]
[117.93783569 367.91174316]
[105.17659760 360.02816772]
[95.08190918 348.93325806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[15 71]
[18 69]
[19 68]
[20 67]
[21 66]
[25 62]
[26 61]
[28 59]
[29 58]
[30 57]
[31 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
