%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCGACCACAACACUUAGUCCGGCAACGGUUAGUCUCUUGCCGAUGAAGUGUUGUGGUCCCGG\
) } def
/len { sequence length } bind def

/coor [
[82.57831573 352.77011108]
[82.57831573 337.77011108]
[82.57831573 322.77011108]
[74.14254761 313.79217529]
[74.23477173 301.06753540]
[83.36308289 291.62893677]
[84.07681274 276.64593506]
[84.79054260 261.66290283]
[85.50427246 246.67990112]
[86.21800232 231.69689941]
[86.93172455 216.71388245]
[87.64545441 201.73086548]
[88.35918427 186.74786377]
[89.07291412 171.76484680]
[89.78664398 156.78184509]
[90.50037384 141.79882812]
[91.21410370 126.81582642]
[91.92782593 111.83280945]
[85.69227600 99.31843567]
[93.08915710 87.45346069]
[93.80288696 72.47045135]
[94.51661682 57.48743820]
[91.72671509 48.40395737]
[95.63763428 41.81354523]
[97.06347656 26.88146591]
[98.48931885 11.94938755]
[99.91516113 -2.98269153]
[101.34100342 -17.91477013]
[94.95052338 -32.38793182]
[103.86259460 -44.32209778]
[105.28843689 -59.25417709]
[96.22386169 -72.49098206]
[101.05872345 -87.78815460]
[116.08412933 -93.41102600]
[129.77388000 -85.04619598]
[131.62635803 -69.11045074]
[120.22051239 -57.82833481]
[118.79467010 -42.89625549]
[125.28713226 -29.49113655]
[116.27307892 -16.48892975]
[114.84723663 -1.55685103]
[113.42139435 13.37522793]
[111.99555969 28.30730629]
[110.56971741 43.23938370]
[109.49962616 58.20116806]
[108.78589630 73.18417358]
[108.07217407 88.16719055]
[114.30772400 100.68156433]
[106.91084290 112.54653931]
[106.19711304 127.52954865]
[105.48338318 142.51255798]
[104.76965332 157.49557495]
[104.05592346 172.47857666]
[103.34219360 187.46159363]
[102.62846375 202.44459534]
[101.91474152 217.42761230]
[101.20101166 232.41062927]
[100.48728180 247.39363098]
[99.77355194 262.37664795]
[99.05982208 277.35964966]
[98.34609222 292.34265137]
[107.21346283 308.28887939]
[97.57831573 322.77011108]
[97.57831573 337.77011108]
[97.57831573 352.77011108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[20 47]
[21 46]
[22 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[30 38]
[31 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
