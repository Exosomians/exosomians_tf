%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUUUCGUGCCGACGGAGGGGCAGCCCCUUAGCUUGGGGCCAGAGGGCGCACUGUCCGCCCCUAUGAGUGGUGAUAUGAUUGCUCCUGCUGCCGCUG\
) } def
/len { sequence length } bind def

/coor [
[54.20477295 238.82244873]
[53.49327469 253.80555725]
[44.30012512 265.65823364]
[29.96501732 270.07464600]
[15.69560242 265.45037842]
[6.67567301 253.46536255]
[6.18250895 238.47163391]
[-4.42409277 249.07823181]
[-15.03069496 259.68484497]
[-25.63729668 270.29144287]
[-29.35674858 286.26321411]
[-45.12491989 290.76840210]
[-56.72087097 279.17245483]
[-52.21567535 263.40429688]
[-36.24389648 259.68484497]
[-25.63729668 249.07823181]
[-15.03069496 238.47163391]
[-4.42409277 227.86502075]
[4.76951313 216.01269531]
[12.40513420 203.10156250]
[12.22402287 188.20806885]
[25.90870285 180.26828003]
[33.54432297 167.35714722]
[41.17994308 154.44602966]
[48.81556702 141.53489685]
[56.45118713 128.62376404]
[64.08680725 115.71263123]
[60.81465912 101.07388306]
[48.40845108 92.64263153]
[36.00224304 84.21138000]
[23.59603310 75.78012848]
[8.12059879 78.98738098]
[-5.04401112 70.24274445]
[-8.08746624 54.73426437]
[0.79586226 41.66284561]
[16.33565140 38.78352356]
[29.31242180 47.80455780]
[32.02728271 63.37392044]
[44.43349457 71.80516815]
[56.83970261 80.23641968]
[69.24591064 88.66767120]
[77.53504181 78.59353638]
[88.56069946 73.04045105]
[100.19120026 72.45930481]
[104.37606812 58.05489731]
[103.77198029 48.75474167]
[108.92523193 43.26761246]
[113.56048584 29.00176620]
[118.19573975 14.73591900]
[122.83099365 0.47007090]
[127.46624756 -13.79577732]
[119.02671051 -26.96043205]
[121.07498932 -42.46329117]
[132.64395142 -52.98437119]
[148.27107239 -53.55595016]
[160.57772827 -43.90813446]
[163.75308228 -28.59633636]
[156.29782104 -14.85031509]
[141.73210144 -9.16052151]
[137.09684753 5.10532570]
[132.46159363 19.37117386]
[127.82633209 33.63702011]
[123.19107819 47.90287018]
[118.78047180 62.23976517]
[114.59560394 76.64417267]
[120.80697632 81.95571136]
[125.18614197 88.85617065]
[127.34749603 96.73793030]
[142.16282654 99.08444977]
[156.97814941 101.43096161]
[171.79347229 103.77748108]
[186.60879517 106.12400055]
[201.42411804 108.47051239]
[216.23944092 110.81703186]
[228.87644958 101.32590485]
[244.51142883 103.63306427]
[253.86842346 116.36972046]
[251.39608765 131.97943115]
[238.56121826 141.20123291]
[222.97851562 138.56401062]
[213.89292908 125.63235474]
[199.07760620 123.28584290]
[184.26228333 120.93932343]
[169.44694519 118.59280396]
[154.63162231 116.24628448]
[139.81629944 113.89977264]
[125.00097656 111.55325317]
[114.02252197 125.71076965]
[95.69093323 130.73016357]
[76.99794006 123.34825134]
[69.36231995 136.25938416]
[61.72669601 149.17051697]
[54.09107590 162.08164978]
[46.45545197 174.99276733]
[38.81983185 187.90390015]
[38.45479202 203.72090149]
[25.31626511 210.73719788]
[17.68064308 223.64831543]
[32.32404327 220.39703369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 18]
[8 17]
[9 16]
[10 15]
[19 98]
[20 97]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 41]
[29 40]
[30 39]
[31 38]
[44 65]
[45 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
