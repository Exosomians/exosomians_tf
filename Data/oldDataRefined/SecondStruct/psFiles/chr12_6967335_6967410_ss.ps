%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACAGUCUAGGUUCCAACGCGAGUCCACCGAACACGGGUCGGGAUGGCACCUGGGGUGGACACCCGGAGGGACGU\
) } def
/len { sequence length } bind def

/coor [
[65.22633362 296.77517700]
[54.76607895 307.80474854]
[40.87919617 313.98724365]
[25.68332863 314.37982178]
[11.49574089 308.92263794]
[0.47993401 298.44787598]
[-5.68426132 284.55288696]
[-6.05684948 269.35650635]
[-0.58101434 255.17611694]
[9.90821934 244.17408752]
[23.81132126 238.02818298]
[39.00816727 237.67558289]
[44.39320755 223.67553711]
[49.77824783 209.67549133]
[55.16328812 195.67544556]
[60.54832840 181.67538452]
[54.28355408 168.21105957]
[59.54531479 153.93630981]
[73.71041870 147.45652771]
[79.09545898 133.45648193]
[76.44308472 118.79994202]
[88.61888885 108.69744873]
[86.63093567 94.85766602]
[97.38106537 85.91751099]
[102.76610565 71.91745758]
[108.15114594 57.91741180]
[113.53618622 43.91736603]
[118.92122650 29.91731644]
[124.30626678 15.91726875]
[129.69131470 1.91722119]
[128.75141907 -3.81091475]
[130.15818787 -8.73499680]
[133.13444519 -12.04366493]
[136.68475342 -13.39629650]
[138.02951050 -22.72533798]
[144.30613708 -27.02155495]
[151.89430237 -39.96063614]
[159.48246765 -52.89971924]
[167.07061768 -65.83879852]
[174.65878296 -78.77787781]
[181.98143005 -91.86905670]
[177.13523865 -106.91199493]
[184.41967773 -120.93741608]
[199.51300049 -125.62429810]
[213.46063232 -118.19198608]
[217.98767090 -103.04994202]
[210.40830994 -89.18167114]
[195.21925354 -84.81497955]
[194.84339905 -77.21811676]
[187.59786987 -71.18972015]
[180.00970459 -58.25063705]
[172.42153931 -45.31155777]
[164.83338928 -32.37247467]
[157.24522400 -19.43339539]
[149.92257690 -6.34221840]
[143.69136047 7.30226183]
[138.30632019 21.30230904]
[132.92127991 35.30235672]
[127.53623199 49.30240631]
[122.15119171 63.30245209]
[116.76615143 77.30249786]
[111.38111115 91.30255127]
[113.36906433 105.14233398]
[102.61893463 114.08248901]
[104.88613892 129.74040222]
[93.09551239 138.84152222]
[87.71047211 152.84156799]
[93.88193512 167.14369202]
[88.22129822 181.26502991]
[74.54837799 187.06044006]
[69.16333771 201.06048584]
[63.77829361 215.06053162]
[58.39325333 229.06057739]
[53.00821304 243.06062317]
[64.05154419 253.50636292]
[70.25227356 267.38510132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 74]
[13 73]
[14 72]
[15 71]
[16 70]
[19 67]
[20 66]
[22 64]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[34 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
