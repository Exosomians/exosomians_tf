%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUGAAAUUUUACCUAGAGUAGCCUUAGACUUGUUUUACUCACUGGUUUAGUGAAGACACGGUG\
) } def
/len { sequence length } bind def

/coor [
[95.14026642 110.48666382]
[91.11075592 108.81017303]
[87.72568512 105.55548096]
[72.93026733 103.08656311]
[58.13484573 100.61764526]
[43.25003815 98.76225281]
[28.30126953 97.52356720]
[13.35250282 96.28487396]
[-1.59626460 95.04618835]
[-16.54503250 93.80749512]
[-31.49379921 92.56880188]
[-40.59930038 95.02715302]
[-47.03047180 90.95747375]
[-61.91528320 89.10208893]
[-76.80008698 87.24669647]
[-86.00170135 99.54409027]
[-100.12554169 105.57838440]
[-115.37236786 103.72638702]
[-127.64086151 94.48627472]
[-133.63085938 80.34358215]
[-131.73106384 65.10263824]
[-122.45254517 52.86317444]
[-108.29115295 46.91754150]
[-93.05623627 48.86508560]
[-80.84591675 58.18193054]
[-74.94470215 72.36189270]
[-60.05989075 74.21727753]
[-45.17508316 76.07266998]
[-30.25510979 77.62004089]
[-15.30634212 78.85872650]
[-0.35757443 80.09741974]
[14.59119320 81.33610535]
[29.53996086 82.57479858]
[44.48872757 83.81349182]
[48.84182358 81.26623535]
[54.88382339 81.63882446]
[60.60376358 85.82222748]
[75.39918518 88.29114532]
[90.19460297 90.76006317]
[105.14337158 91.99875641]
[120.14337158 91.99875641]
[135.14337158 91.99875641]
[150.14016724 91.68875122]
[165.12734985 91.06887817]
[180.11454773 90.44900513]
[195.10173035 89.82912445]
[210.08891296 89.20925140]
[214.98242188 86.06369781]
[220.07075500 85.40061951]
[224.29496765 86.82640839]
[226.94427490 89.55767822]
[241.89303589 90.79636383]
[256.84179688 92.03505707]
[271.79058838 93.27374268]
[286.73934937 94.51243591]
[301.68811035 95.75112915]
[317.97244263 91.03342438]
[327.01373291 105.37537384]
[315.73513794 118.03356934]
[300.44943237 110.69989014]
[285.50064087 109.46120453]
[270.55187988 108.22251129]
[255.60311890 106.98382568]
[240.65435791 105.74513245]
[225.70558167 104.50643921]
[210.70878601 104.19644165]
[195.72160339 104.81631470]
[180.73442078 105.43618774]
[165.74722290 106.05606079]
[150.76004028 106.67593384]
[144.01477051 110.20063019]
[135.14337158 106.99875641]
[120.14337158 106.99875641]
[105.14337158 106.99875641]
[102.64502716 109.27310181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[13 28]
[14 27]
[15 26]
[40 74]
[41 73]
[42 72]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
