%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCGAGCACUAAGAGCAGGUAGGAGGCUGGGCCAGGGCGAGGCCCUCUGGCCGCGCGGGGGUGGCACCCU\
) } def
/len { sequence length } bind def

/coor [
[60.79870987 143.83442688]
[56.48243713 145.08122253]
[52.72691345 144.32911682]
[39.73653030 151.82911682]
[35.54224014 166.83064270]
[22.26130486 174.25166321]
[7.98549414 170.16059875]
[-5.00488710 177.66059875]
[-7.54196072 193.09098816]
[-19.43756294 203.24130249]
[-35.07495499 203.31884766]
[-47.07063675 193.28701782]
[-49.76061630 177.88253784]
[-41.87476349 164.37892151]
[-27.13654327 159.15217590]
[-12.50488663 164.67021179]
[0.48549405 157.17021179]
[4.08043242 142.76145935]
[17.14768600 134.97035217]
[32.23653030 138.83874512]
[45.22691345 131.33874512]
[57.69895554 123.00518799]
[69.59925842 113.87377167]
[81.49955750 104.74234772]
[83.49482727 90.39086151]
[94.99013519 81.57019806]
[109.36901855 83.35735321]
[121.26932526 74.22592926]
[133.16961670 65.09451294]
[136.27117920 58.67603683]
[141.46684265 55.50608063]
[146.52882385 55.74029160]
[159.17970276 47.68079758]
[171.83056641 39.62130356]
[172.90219116 24.25387764]
[182.70260620 12.60032272]
[197.31301880 8.99480724]
[211.08013916 14.61656857]
[223.73101807 6.55707502]
[236.38188171 -1.50241923]
[243.86358643 -15.44281960]
[258.75491333 -15.75560474]
[271.40579224 -23.81509972]
[284.05664062 -31.87459373]
[296.70751953 -39.93408585]
[303.79574585 -54.72223282]
[320.16525269 -55.70777893]
[328.97650146 -41.87687683]
[321.16525269 -27.45757675]
[304.76702881 -27.28321457]
[292.11614990 -19.22372055]
[279.46527100 -11.16422749]
[266.81439209 -3.10473299]
[260.23757935 10.25919819]
[244.44137573 11.14845276]
[231.79051208 19.20794678]
[219.13963318 27.26744080]
[218.41644287 42.12055588]
[208.97410583 53.83833313]
[194.27056885 57.79551697]
[179.89006042 52.27217484]
[167.23919678 60.33166885]
[154.58831787 68.39116669]
[142.30104065 76.99481201]
[130.40074158 86.12622833]
[118.50044250 95.25765228]
[116.50517273 109.60913849]
[105.00986481 118.42980194]
[90.63098145 116.64264679]
[78.73067474 125.77407074]
[66.83037567 134.90548706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[7 17]
[8 16]
[22 71]
[23 70]
[24 69]
[27 66]
[28 65]
[29 64]
[32 63]
[33 62]
[34 61]
[38 57]
[39 56]
[40 55]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
