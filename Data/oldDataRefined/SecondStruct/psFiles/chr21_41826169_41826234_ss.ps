%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCACCCCUGUCUUCGCACCGUCAAAUUCAUUGUAGUGAACGUGUGACAAACCGUAGUCGUGAUU\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 272.86740112]
[92.50000000 257.02825928]
[92.50000000 242.02825928]
[92.50000000 227.02825928]
[92.50000000 212.02825928]
[92.50000000 197.02825928]
[81.81912994 186.71057129]
[81.60544586 171.49844360]
[92.50000000 160.36531067]
[92.50000000 145.36531067]
[92.50000000 130.36531067]
[76.30487061 120.41674042]
[68.85961151 102.92890167]
[72.91351318 84.35951233]
[86.96961212 71.56566620]
[84.17271423 56.82872391]
[81.37580872 42.09178925]
[78.57891083 27.35484886]
[75.78200531 12.61791134]
[72.98510742 -2.11902714]
[68.15893555 -10.29513168]
[70.41954803 -17.61130905]
[68.31647491 -32.46314621]
[65.12207031 -35.90005112]
[63.36981201 -39.79661560]
[63.02658081 -43.63988876]
[63.89480591 -46.98167801]
[65.64854431 -49.48696518]
[67.88258362 -50.96672058]
[69.28720856 -65.90081024]
[70.69182587 -80.83489990]
[72.09645081 -95.76898956]
[64.77466583 -110.44289398]
[74.04618835 -123.96956635]
[90.37327576 -122.43392181]
[96.96002197 -107.41571045]
[87.03054047 -94.36436462]
[85.62591553 -79.43027496]
[84.22129822 -64.49618530]
[82.81667328 -49.56209946]
[83.16831207 -34.56621933]
[85.27138519 -19.71438217]
[87.72204590 -4.91592789]
[90.51894379 9.82101059]
[93.31584930 24.55794907]
[96.11274719 39.29488754]
[98.90965271 54.03182602]
[101.70655060 68.76876068]
[112.47324371 71.31688690]
[121.67916107 77.45412445]
[128.17237854 86.41251373]
[131.14039612 97.07109833]
[130.21182251 108.09617615]
[125.50286865 118.10818481]
[117.60274506 125.85431671]
[107.50000000 130.36531067]
[107.50000000 145.36531067]
[107.50000000 160.36531067]
[118.39455414 171.49844360]
[118.18087006 186.71057129]
[107.50000000 197.02825928]
[107.50000000 212.02825928]
[107.50000000 227.02825928]
[107.50000000 242.02825928]
[107.50000000 257.02825928]
[113.54634094 272.86740112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[9 58]
[10 57]
[11 56]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[22 42]
[23 41]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
