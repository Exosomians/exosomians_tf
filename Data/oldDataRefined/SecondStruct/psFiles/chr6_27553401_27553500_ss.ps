%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUAAAGUUUGCAUCAGCCGUCCUAAGCUUGGACGCGCCCCUCUGGGGUUACCCAAAGAUCAGGUAGUGGAAUUGGUGAGCCGGUGCUGAUGUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[93.12017059 309.87677002]
[79.25115204 315.91873169]
[64.19365692 317.37722778]
[49.42287827 314.10931396]
[36.38589859 306.43518066]
[26.35994911 295.10665894]
[20.32727432 281.23358154]
[18.87888908 266.17510986]
[22.15669632 251.40652466]
[29.83956528 238.37469482]
[41.17480850 228.35633850]
[55.05191803 222.33296204]
[70.11135101 220.89466858]
[73.35161591 206.24882507]
[76.59188080 191.60298157]
[79.83215332 176.95713806]
[83.07241821 162.31129456]
[86.31268311 147.66546631]
[89.55295563 133.01962280]
[92.79322052 118.37377930]
[84.82685089 105.66405487]
[70.23317719 102.19641113]
[55.63949585 98.72876740]
[41.04581833 95.26112366]
[26.45214081 91.79347992]
[14.01229668 101.26893616]
[-1.60535991 100.47974396]
[-13.02664852 89.79853821]
[-14.85878658 74.26865387]
[-6.23669481 61.22282791]
[8.76853943 56.82090378]
[23.07190323 63.14133072]
[29.91978455 77.19979858]
[44.51346207 80.66744232]
[59.10714340 84.13508606]
[73.70082092 87.60272980]
[88.29449463 91.07038116]
[79.36929321 79.75793457]
[73.22272491 66.24938965]
[68.18997192 52.11887741]
[63.15722275 37.98836517]
[58.12447357 23.85785103]
[53.09172440 9.72733688]
[42.08156967 -3.16502118]
[51.42217636 -17.31385231]
[67.60380554 -12.25506687]
[67.22223663 4.69458628]
[72.25498962 18.82509995]
[77.28773499 32.95561218]
[82.32048798 47.08612823]
[87.35324097 61.21664047]
[102.23728943 63.07812500]
[110.59506989 50.62230301]
[118.95285797 38.16648483]
[127.31063843 25.71066475]
[121.08666229 11.59451389]
[123.50506592 -3.64211607]
[133.79412842 -15.13727283]
[148.67066956 -19.22289467]
[163.38761902 -14.59527206]
[173.24885559 -2.73106503]
[175.10771179 12.58390236]
[168.37101746 26.46267891]
[155.18841553 34.47660065]
[139.76646423 34.06844711]
[131.40867615 46.52426910]
[123.05088806 58.98008728]
[114.69310760 71.43590546]
[117.20948029 78.50116730]
[129.09321594 69.34818268]
[141.47047424 77.82187653]
[137.23626709 92.21185303]
[122.24223328 92.63167572]
[124.75860596 99.69693756]
[139.10847473 104.06515503]
[153.45834351 108.43338013]
[167.80821228 112.80159760]
[182.15806580 117.16981506]
[198.00138855 112.93643951]
[209.39620972 124.73007202]
[204.62054443 140.41844177]
[188.58717346 143.86270142]
[177.78985596 131.51968384]
[163.43998718 127.15146637]
[149.09011841 122.78324127]
[134.74024963 118.41502380]
[120.39038849 114.04679871]
[107.43906403 121.61404419]
[104.19879150 136.25988770]
[100.95852661 150.90573120]
[97.71826172 165.55157471]
[94.47798920 180.19740295]
[91.23772430 194.84324646]
[87.99745941 209.48908997]
[84.75718689 224.13493347]
[97.80444336 231.79159546]
[107.84556580 243.10667419]
[113.89682770 256.97164917]
[115.36538696 272.02816772]
[112.10737610 286.80111694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[52 68]
[53 67]
[54 66]
[55 65]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
