%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:20 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUGUCCCUGUACUUGGGACCUGGGAGUCUAAUUUUCAGACUACGAGAUAGUUGACUCGAUAGACCCAACAA\
) } def
/len { sequence length } bind def

/coor [
[95.41108704 109.70846558]
[81.35186005 114.93704224]
[67.29262543 120.16562653]
[53.23339844 125.39420319]
[42.01243591 139.81964111]
[24.89639473 136.57246399]
[11.06844711 142.38519287]
[-2.75950003 148.19792175]
[-16.58744812 154.01066589]
[-30.41539383 159.82339478]
[-34.86640549 174.81414795]
[-47.94037628 183.39349365]
[-63.46417999 181.51054382]
[-74.10794830 170.05435181]
[-74.84602356 154.43420410]
[-65.32991028 142.02543640]
[-50.05281830 138.68708801]
[-36.22812653 145.99545288]
[-22.40018082 140.18270874]
[-8.57223415 134.36997986]
[5.25571346 128.55725098]
[19.08366013 122.74451447]
[24.06514931 111.51963806]
[35.78022766 106.65381622]
[48.00481796 111.33497620]
[62.06404877 106.10639191]
[76.12327576 100.87781525]
[90.18251038 95.64923096]
[103.17288971 88.14923096]
[114.73059082 78.58787537]
[126.28828430 69.02651215]
[137.84597778 59.46515274]
[149.40368652 49.90379333]
[144.37617493 35.62270355]
[144.53771973 20.51158524]
[149.84953308 6.39404535]
[159.65242004 -5.03281784]
[172.74862671 -12.40242290]
[187.54803467 -14.84212494]
[202.26130676 -12.07651138]
[215.11622620 -4.45834446]
[226.67391968 -14.01970482]
[238.23161316 -23.58106422]
[249.78932190 -33.14242554]
[261.34701538 -42.70378494]
[264.28219604 -58.47604370]
[278.51065063 -65.88756561]
[293.11752319 -59.25286484]
[296.89764404 -43.66151428]
[286.95126343 -31.07386589]
[270.90838623 -31.14608574]
[259.35067749 -21.58472633]
[247.79296875 -12.02336597]
[236.23527527 -2.46200585]
[224.67758179 7.09935427]
[229.75202942 21.15407562]
[229.71166992 36.12496185]
[224.54205322 50.20507431]
[214.84899902 61.68837738]
[201.78765869 69.17646027]
[186.92483521 71.74881744]
[172.05111694 69.07595825]
[158.96504211 61.46149063]
[147.40734863 71.02285004]
[135.84963989 80.58421326]
[124.29194641 90.14556885]
[112.73424530 99.70693207]
[127.46467590 102.53793335]
[137.94850159 113.26590729]
[140.43968201 128.05760193]
[134.04811096 141.62770081]
[121.05757904 149.12742615]
[106.10978699 147.87701416]
[94.54580688 138.32324219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
