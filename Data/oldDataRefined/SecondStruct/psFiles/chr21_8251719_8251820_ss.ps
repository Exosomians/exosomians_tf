%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCUCCUGGGAGGAGGCGAAGGGGGAGCUGCCCCAACCCCCCCUCUUCGCUCCCAAGGCGGCCGGUGGCGCCACCACCGGCUCACGCCGAGCAGCGGAUG\
) } def
/len { sequence length } bind def

/coor [
[99.93697357 125.30866241]
[90.84416199 123.59455109]
[81.51738739 135.34237671]
[72.19061279 147.09019470]
[62.86384201 158.83801270]
[53.53706360 170.58583069]
[44.21028900 182.33364868]
[34.88351440 194.08146667]
[25.55673981 205.82929993]
[20.44362640 221.99383545]
[3.49535012 221.55532837]
[-0.77503484 205.14801025]
[13.80892086 196.50251770]
[23.13569641 184.75469971]
[32.46247101 173.00688171]
[41.78924561 161.25906372]
[51.11602020 149.51124573]
[60.44279480 137.76341248]
[69.76956940 126.01560211]
[79.09634399 114.26777649]
[75.18701935 104.98480225]
[75.20792389 94.91226196]
[62.06772995 87.67793274]
[48.92753983 80.44361115]
[35.78735352 73.20928955]
[22.64716339 65.97496796]
[9.50697327 58.74064636]
[-6.31376076 58.86296082]
[-13.73140335 45.94677353]
[-29.55213737 46.06908798]
[-36.96977997 33.15290451]
[-50.10997009 25.91858101]
[-66.90132904 23.57622528]
[-69.29882050 6.79265118]
[-53.83485031 -0.15730406]
[-42.87564850 12.77839184]
[-29.73545837 20.01271439]
[-14.85459805 19.37295341]
[-6.49708128 32.80658722]
[8.38377762 32.16682434]
[16.74129486 45.60045624]
[29.88148499 52.83478165]
[43.02167511 60.06910324]
[56.16186523 67.30342102]
[69.30205536 74.53775024]
[82.44224548 81.77207184]
[103.84474945 74.98500061]
[122.22124481 87.88601685]
[136.92741394 84.93162537]
[151.63359070 81.97722626]
[166.33976746 79.02283478]
[181.04594421 76.06843567]
[195.75212097 73.11404419]
[207.75802612 62.81023026]
[221.75993347 67.88920593]
[227.94517517 55.80984116]
[239.81109619 49.63759232]
[252.86491394 51.45406342]
[262.31015015 60.36306000]
[277.09957886 57.85852051]
[291.88903809 55.35398102]
[306.67846680 52.84944534]
[321.33786011 49.67112732]
[335.83657837 45.82567978]
[350.33529663 41.98023224]
[364.83398438 38.13478851]
[379.33270264 34.28934097]
[393.83142090 30.44389534]
[408.33010864 26.59844971]
[422.82882690 22.75300217]
[432.09661865 9.65767574]
[448.12094116 8.88261223]
[458.60928345 21.02237511]
[455.51593018 36.76437759]
[441.21380615 44.03269958]
[426.67428589 37.25171280]
[412.17556763 41.09715652]
[397.67684937 44.94260406]
[383.17813110 48.78805161]
[368.67944336 52.63349533]
[354.18072510 56.47894287]
[339.68200684 60.32438660]
[325.18331909 64.16983795]
[323.07348633 67.19579315]
[319.31024170 69.27351379]
[314.39401245 69.59828949]
[309.18298340 67.63887787]
[294.39355469 70.14341736]
[279.60412598 72.64794922]
[264.81469727 75.15248871]
[255.75457764 89.22924042]
[239.00352478 92.54391479]
[224.71432495 82.59538269]
[213.76029968 92.68788147]
[198.70651245 87.82022095]
[184.00033569 90.77461243]
[169.29415894 93.72901154]
[154.58798218 96.68340302]
[139.88182068 99.63779449]
[125.17563629 102.59219360]
[122.56133270 111.46815491]
[116.93134308 118.81121826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[29 39]
[31 37]
[32 36]
[48 100]
[49 99]
[50 98]
[51 97]
[52 96]
[53 95]
[55 93]
[59 90]
[60 89]
[61 88]
[62 87]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
