%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCUCUCGAUCGUGGCCUCGCAACCACCAUAUCACCAUUCGUAUCGACGGAAGGUUCGUCAACUGGGCCCAAGCUAAGGGCCGGUUGCGUUCAGCAAAACCCACAAAAAAGGGGGGGG\
) } def
/len { sequence length } bind def

/coor [
[121.64104462 500.21490479]
[121.64104462 485.21490479]
[121.64104462 470.21490479]
[121.64104462 455.21490479]
[121.64104462 440.21490479]
[121.64104462 425.21490479]
[121.64104462 410.21490479]
[121.64104462 395.21490479]
[121.64104462 380.21490479]
[108.15798187 373.83740234]
[98.74224854 362.19036865]
[95.30305481 347.55026245]
[98.57469940 332.80859375]
[107.96054840 320.90090942]
[121.64104462 314.22219849]
[121.64104462 299.22219849]
[121.64104462 284.22219849]
[121.64104462 269.22219849]
[102.56641388 258.32662964]
[93.49254608 238.18803406]
[98.01719666 216.44407654]
[114.55083466 201.43362427]
[111.48255920 186.75077820]
[108.41427612 172.06794739]
[105.34599304 157.38511658]
[102.27770996 142.70228577]
[99.20943451 128.01943970]
[96.14115143 113.33660889]
[96.05753326 128.33638000]
[88.35925293 141.21025085]
[75.18481445 148.38200378]
[60.19392014 147.85940552]
[47.55087662 139.78764343]
[40.76778412 126.40893555]
[41.72890472 111.43975830]
[50.16725540 99.03837585]
[63.74054718 92.64944458]
[54.13164902 81.13123322]
[44.52275085 69.61302948]
[29.74113274 63.97260666]
[27.52945137 49.24312210]
[17.92055321 37.72491455]
[8.31165600 26.20670891]
[-1.29724157 14.68850231]
[-10.90613937 3.17029524]
[-26.47832108 -1.97161210]
[-29.54600334 -18.08127785]
[-16.95341873 -28.58646011]
[-1.65473807 -22.68032837]
[0.61206740 -6.43860245]
[10.22096539 5.07960415]
[19.82986259 16.59781075]
[29.43876076 28.11601830]
[39.04765701 39.63422394]
[53.14198303 44.45078659]
[56.04095840 60.00413132]
[65.64985657 71.52233887]
[75.25875092 83.04054260]
[82.74321747 83.52303314]
[79.83274078 68.80810547]
[71.79130554 56.14575195]
[74.29721069 41.35655212]
[86.06109619 32.05004883]
[101.03004456 33.01474762]
[111.50202942 43.75428009]
[112.08886719 58.74279785]
[102.48790741 70.26859283]
[97.71214294 84.48802185]
[105.19660950 84.97052002]
[116.20488739 74.78141785]
[127.21317291 64.59231567]
[138.22145081 54.40321732]
[149.22973633 44.21411514]
[148.28874207 28.60486984]
[157.64282227 16.07349586]
[172.87524414 12.53692532]
[186.79373169 19.66501999]
[192.82640076 34.09210968]
[188.12480164 49.00616455]
[174.90890503 57.36522293]
[159.41883850 55.22239685]
[148.41055298 65.41149902]
[137.40226746 75.60059357]
[126.39398956 85.78969574]
[115.38571167 95.97879791]
[110.82398987 110.26832581]
[113.89226532 124.95116425]
[116.96054840 139.63400269]
[120.02883148 154.31683350]
[123.09710693 168.99966431]
[126.16539001 183.68251038]
[129.23367310 198.36534119]
[137.95925903 199.52244568]
[146.13261414 202.74601746]
[153.27301025 207.83821106]
[158.96250916 214.49151611]
[162.87036133 222.30735779]
[164.77226257 230.81993103]
[164.56317139 239.52394104]
[162.26316833 247.90467834]
[158.01570129 255.46838379]
[152.07875061 261.77136230]
[144.80912781 266.44598389]
[136.64103699 269.22219849]
[136.64103699 284.22219849]
[136.64103699 299.22219849]
[136.64103699 314.22219849]
[150.32154846 320.90090942]
[159.70739746 332.80859375]
[162.97903442 347.55026245]
[159.53984070 362.19036865]
[150.12409973 373.83740234]
[136.64103699 380.21490479]
[136.64103699 395.21490479]
[136.64103699 410.21490479]
[136.64103699 425.21490479]
[136.64103699 440.21490479]
[136.64103699 455.21490479]
[136.64103699 470.21490479]
[136.64103699 485.21490479]
[136.64103699 500.21490479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[15 107]
[16 106]
[17 105]
[18 104]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[37 58]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
