%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGUAGCCACGUACCCACCAAGUCACCAUCUUAAGAGCGGACGGUGCGCCCUCCGGGCCCAAGCUAAGGGCCGGGUACGUCGUGCGGGAGGGUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[105.15706635 156.97232056]
[94.74006653 146.17944336]
[91.43011475 131.54919434]
[96.18552399 117.32543182]
[87.06953430 129.23756409]
[77.95354462 141.14968872]
[68.83755493 153.06181335]
[71.16891479 168.69319153]
[61.69736481 181.34489441]
[46.04220200 183.51084900]
[33.49135971 173.90606689]
[31.49102592 158.22888184]
[41.22797012 145.78028870]
[56.92543030 143.94581604]
[66.04141998 132.03369141]
[75.15740967 120.12156677]
[84.27339935 108.20944214]
[81.03313446 93.56360626]
[67.74296570 86.60865021]
[54.45279312 79.65369415]
[41.16262054 72.69874573]
[34.26285934 72.58734894]
[29.29785538 69.38446808]
[27.28238678 64.87574005]
[14.45031166 57.10799408]
[1.61823690 49.34024811]
[-13.54757595 52.89494705]
[-26.45046997 44.83454895]
[-29.74586868 30.35435867]
[-38.88249588 28.53373718]
[-42.85090637 22.14020920]
[-55.43519974 13.97714710]
[-71.83143616 13.66819286]
[-79.52407837 -0.81473941]
[-70.59959412 -14.57285023]
[-54.23872757 -13.45297527]
[-47.27213669 1.39285457]
[-34.68784332 9.55591774]
[-21.97812462 17.52228355]
[-7.62055445 13.72810841]
[5.50364876 21.42290878]
[9.38598156 36.50817490]
[22.21805573 44.27591705]
[35.05013275 52.04366302]
[48.11757660 59.40857315]
[61.40774536 66.36352539]
[74.69791412 73.31848145]
[87.98808289 80.27342987]
[103.56784058 81.09475708]
[112.23799896 90.68141937]
[126.93246460 87.66931915]
[141.62692261 84.65721130]
[156.32138062 81.64510345]
[171.01585388 78.63299561]
[185.71031189 75.62089539]
[200.40476990 72.60878754]
[208.43542480 51.84116364]
[236.08053589 46.10488892]
[248.40487671 37.55440521]
[260.72921753 29.00392151]
[273.05352783 20.45343781]
[285.37786865 11.90295315]
[286.62780762 -3.68459630]
[297.64154053 -14.78556824]
[313.21875000 -16.15842247]
[326.00433350 -7.15493965]
[329.96133423 7.97371149]
[323.22140503 22.08424377]
[308.96688843 28.51409531]
[293.92834473 24.22728729]
[281.60403442 32.77777100]
[269.27969360 41.32825470]
[256.95535278 49.87873840]
[244.63102722 58.42922211]
[245.44590759 65.88481903]
[247.07569885 80.79602051]
[247.89057922 88.25161743]
[261.77099609 93.93794250]
[275.65139771 99.62426758]
[289.53179932 105.31060028]
[306.48080444 105.71998596]
[310.77935791 122.11994171]
[296.21029663 130.79048157]
[283.84548950 119.19100189]
[269.96508789 113.50467682]
[256.08465576 107.81835175]
[242.20425415 102.13202667]
[216.45452881 102.98643494]
[203.41688538 87.30324554]
[188.72241211 90.31535339]
[174.02795410 93.32746124]
[159.33349609 96.33956909]
[144.63902283 99.35166931]
[129.94456482 102.36377716]
[115.25010681 105.37588501]
[130.12658691 107.29687500]
[141.85028076 116.65396118]
[147.02203369 130.73419189]
[144.14239502 145.45518494]
[134.04624939 156.54878235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[18 48]
[19 47]
[20 46]
[21 45]
[24 44]
[25 43]
[26 42]
[29 39]
[31 38]
[32 37]
[50 95]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
