%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGAGUACUACUUGUGUAUACGGAGACUCGACGACACUAAAGACCGAAGUUUCAUUUGCGAGACUUC\
) } def
/len { sequence length } bind def

/coor [
[132.67457581 155.60458374]
[121.45094299 160.82232666]
[109.43727112 163.79995728]
[97.07602692 164.42785645]
[84.82247162 162.68286133]
[73.12790680 158.62924194]
[62.42304611 152.41632080]
[53.10214233 144.27288818]
[45.50849152 134.49888611]
[39.92176819 123.45429230]
[36.54772949 111.54586792]
[35.51064301 99.21221161]
[36.84870529 86.90756989]
[40.51263428 75.08512878]
[46.36748886 64.18029785]
[54.19762802 54.59471130]
[44.84528351 42.86723709]
[35.49293518 31.13976479]
[26.14058876 19.41229248]
[10.74601650 19.97207260]
[-1.87874281 11.45920849]
[-7.00935125 -2.68790603]
[-2.87524796 -16.97241402]
[-12.22759533 -28.69988632]
[-21.57994270 -40.42736053]
[-37.03484726 -45.91169739]
[-39.74623871 -62.08514404]
[-26.92486763 -72.30984497]
[-11.76026344 -66.06750488]
[-9.85246944 -49.77970505]
[-0.50012273 -38.05223465]
[8.85222435 -26.32476234]
[23.69851494 -27.17661285]
[36.34926224 -19.02660942]
[41.83942032 -4.82408905]
[37.86806107 10.05994606]
[47.22040558 21.78741837]
[56.57275391 33.51488876]
[65.92510223 45.24236298]
[82.58780670 37.90077972]
[100.63838959 35.50899124]
[118.63809967 38.25764084]
[135.15220642 45.92763901]
[148.86439514 57.90762329]
[158.68171692 73.24270630]
[163.82165527 90.71054840]
[163.87449646 108.91883087]
[158.83605957 126.41621399]
[171.71278381 134.10971069]
[184.58952332 141.80319214]
[197.46624756 149.49668884]
[210.34298706 157.19017029]
[223.21971130 164.88366699]
[236.09645081 172.57714844]
[248.97317505 180.27064514]
[264.23526001 176.16645813]
[277.88739014 184.12858582]
[281.82995605 199.43319702]
[273.72396851 213.00038147]
[258.37850952 216.78092957]
[244.89779663 208.53193665]
[241.27969360 193.14736938]
[228.40295410 185.45388794]
[215.52622986 177.76039124]
[202.64949036 170.06690979]
[189.77276611 162.37341309]
[176.89602661 154.67993164]
[164.01930237 146.98643494]
[151.14256287 139.29295349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 39]
[17 38]
[18 37]
[19 36]
[23 32]
[24 31]
[25 30]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
