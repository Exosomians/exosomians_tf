%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:53 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGUGAGUCUGUAGGUUCCUUCUUGACCGGUUGUAUUCCUUUUUGUAAAGACCACCUUUGACGCUUACAGACCGUUGGUUAGUAGUAUCACUC\
) } def
/len { sequence length } bind def

/coor [
[159.19528198 348.39282227]
[162.02163696 329.21832275]
[162.51759338 314.22650146]
[163.01353455 299.23471069]
[163.50949097 284.24291992]
[164.00544739 269.25112915]
[164.50138855 254.25932312]
[161.30189514 239.60452271]
[154.60276794 226.18357849]
[147.90364075 212.76263428]
[141.20449829 199.34169006]
[134.50537109 185.92076111]
[127.80623627 172.49981689]
[121.10710907 159.07887268]
[114.40797424 145.65794373]
[107.70883942 132.23699951]
[101.00971222 118.81605530]
[92.13106537 117.12142944]
[85.06310272 111.48706055]
[81.43220520 103.20945740]
[82.07386780 94.19333649]
[86.84043121 86.51336670]
[81.50352478 72.49489594]
[66.33709717 71.98985291]
[52.55661774 65.73353577]
[42.24914551 54.70767212]
[36.96263123 40.61369324]
[37.47349167 25.61022949]
[43.67276382 11.98252106]
[54.58742905 1.79432333]
[49.25052261 -12.22414398]
[43.91361237 -26.24261093]
[38.57670593 -40.26107788]
[24.05371475 -51.43062973]
[27.28337860 -68.59293365]
[21.48589134 -82.42727661]
[15.68840408 -96.26162720]
[0.55489504 -99.69040680]
[-9.64764214 -111.38176727]
[-10.99612331 -126.84013367]
[-2.97202992 -140.12145996]
[11.33920956 -146.11878967]
[26.43463135 -142.52604675]
[36.50973892 -130.72470093]
[37.69044876 -115.25260925]
[29.52275085 -102.05911255]
[35.32023621 -88.22476959]
[41.11772537 -74.39041901]
[52.28931427 -69.43660736]
[57.17240143 -57.79508972]
[52.59517288 -45.59798431]
[57.93207932 -31.57951736]
[63.26898956 -17.56105042]
[68.60589600 -3.54258442]
[83.53260040 -3.19233918]
[97.22511292 2.86245775]
[107.58430481 13.72762871]
[113.00907135 27.76898193]
[112.64369965 42.85805511]
[106.51274109 56.69475937]
[95.52199554 67.15798950]
[100.85890198 81.17645264]
[117.25603485 92.43080139]
[114.43064880 112.11692810]
[121.12978363 125.53786469]
[127.82891083 138.95880127]
[134.52804565 152.37974548]
[141.22717285 165.80068970]
[147.92631531 179.22161865]
[154.62544250 192.64256287]
[161.32456970 206.06350708]
[168.02371216 219.48445129]
[174.72283936 232.90538025]
[178.20104980 218.31422424]
[186.58412170 205.87541199]
[198.80313110 197.17506409]
[213.29997253 193.32260132]
[228.22612000 194.80923462]
[241.67828369 201.44543457]
[251.94116211 212.38496399]
[257.70608521 226.23291016]
[258.23794556 241.22348022]
[253.46894836 255.44517517]
[244.00718689 267.08453369]
[231.05914307 274.65740967]
[216.27589417 277.19815063]
[201.54246521 274.38278198]
[188.73759460 266.57028198]
[179.49319458 254.75526428]
[178.99723816 269.74707031]
[178.50129700 284.73886108]
[178.00534058 299.73065186]
[177.50938416 314.72247314]
[177.01344299 329.71426392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[22 62]
[23 61]
[30 54]
[31 53]
[32 52]
[33 51]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
