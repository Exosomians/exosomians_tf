%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAACCUUUAGAUUGGUCUUUUACCGCUGCGACACUCGUCCUAAACUUGGACGCGCCCCUUGGGGGUAACCUAAAGCUCAGGUUGUGGAAUUGGUGAGCCGGUAGUGUCGAGGCUCCUG\
) } def
/len { sequence length } bind def

/coor [
[19.75440979 322.48275757]
[8.73466110 329.94561768]
[-3.75729203 334.50637817]
[-16.97228050 335.89691162]
[-30.11909103 334.03915405]
[-42.41183853 329.04925537]
[-51.41505051 341.04684448]
[-60.41826630 353.04443359]
[-55.72327042 367.83419800]
[-60.65007401 382.54833984]
[-73.30421448 391.52899170]
[-88.81992340 391.32293701]
[-101.23108673 382.00936890]
[-105.76536560 367.16955566]
[-100.67923737 352.50970459]
[-87.92841339 343.66683960]
[-72.41585541 344.04122925]
[-63.41263962 332.04364014]
[-54.40942764 320.04605103]
[-64.36122131 306.58837891]
[-69.74225616 290.72067261]
[-70.02999115 273.95016479]
[-65.18624115 257.87329102]
[-55.66183472 244.02383423]
[-42.35466003 233.72644043]
[-26.52503967 227.97001648]
[-9.67636395 227.31275940]
[6.58768845 231.82803345]
[14.63813114 219.17138672]
[22.68857384 206.51475525]
[22.99070740 191.62321472]
[36.92575455 184.13154602]
[44.97619629 171.47491455]
[53.02663803 158.81828308]
[61.07707977 146.16165161]
[69.12752533 133.50502014]
[77.17797089 120.84838104]
[85.22840881 108.19174957]
[84.07077789 93.23648834]
[74.16849518 81.96950531]
[64.26621246 70.70252991]
[54.36393356 59.43555069]
[44.46165085 48.16857147]
[28.83335114 48.70733643]
[16.54697990 39.03371048]
[13.40378475 23.71527863]
[20.88788795 9.98493862]
[35.46552277 4.32573748]
[50.25357819 9.40977669]
[58.26958466 22.83652687]
[55.72863007 38.26628876]
[65.63091278 49.53326797]
[75.53319550 60.80024719]
[85.43547821 72.06723022]
[95.33776093 83.33420563]
[102.48252106 81.05334473]
[123.91681671 74.21076202]
[125.45913696 59.29026413]
[127.00144958 44.36976624]
[128.54376221 29.44926643]
[130.08607483 14.52876854]
[125.70037842 -1.84810531]
[140.22315979 -10.59597778]
[152.64945984 0.93759102]
[145.00657654 16.07108307]
[143.46426392 30.99158096]
[141.92195129 45.91207886]
[140.37963867 60.83257675]
[138.83731079 75.75307465]
[144.34146118 80.84762573]
[160.85388184 96.13127899]
[175.61083984 93.44206238]
[190.36781311 90.75285339]
[194.75120544 82.16664124]
[202.52290344 76.70027161]
[211.81011963 75.51271057]
[220.44731140 78.75032043]
[226.48114014 85.54261780]
[241.40164185 84.00030518]
[256.32214355 82.45798492]
[271.24264526 80.91567230]
[286.16314697 79.37335968]
[301.03897095 77.44738007]
[315.86029053 75.13902283]
[330.68161011 72.83066559]
[345.50292969 70.52230835]
[357.92761230 59.81906509]
[373.31790161 65.48223877]
[375.84155273 81.68603516]
[362.90249634 91.76138306]
[347.81127930 85.34362793]
[332.98995972 87.65198517]
[318.16867065 89.96034241]
[303.34735107 92.26869965]
[299.79840088 95.62478638]
[294.06671143 96.70944977]
[287.70544434 94.29385376]
[272.78494263 95.83617401]
[257.86447144 97.37848663]
[242.94395447 98.92079926]
[228.02346802 100.46311951]
[212.60809326 114.08737183]
[193.05702209 105.50981903]
[178.30006409 108.19903564]
[163.54309082 110.88824463]
[97.88504028 116.24219513]
[89.83460236 128.89883423]
[81.78415680 141.55546570]
[73.73371124 154.21209717]
[65.68327332 166.86872864]
[57.63282776 179.52536011]
[49.58238602 192.18199158]
[48.70442963 207.97882080]
[35.34520721 214.56520081]
[27.29476547 227.22183228]
[19.24432182 239.87846375]
[28.27815247 249.75193787]
[34.63974380 261.51391602]
[37.95296478 274.45825195]
[38.02452850 287.80914307]
[34.85526276 300.76779175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[28 116]
[29 115]
[30 114]
[32 112]
[33 111]
[34 110]
[35 109]
[36 108]
[37 107]
[38 106]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[71 105]
[72 104]
[73 103]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
