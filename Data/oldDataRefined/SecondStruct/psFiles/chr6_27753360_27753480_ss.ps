%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUGUCUUAAUCGCUAUCUUUUUUUUCGCUGAGAGAAACAAAGGCGGGCCAAAGCUUGGCCCCUGGAAAGCGCACAAUCCGCUUGCACUAUUGGUGAUGUGAUGCCUUUGGUUGCCAA\
) } def
/len { sequence length } bind def

/coor [
[84.65241241 104.79650879]
[70.36288452 109.35823059]
[56.07335281 113.91995239]
[41.78382111 118.48167419]
[27.49428940 123.04339600]
[13.20475960 127.60512543]
[-1.08477128 132.16683960]
[-15.37430191 136.72856140]
[-26.16780663 148.29623413]
[-40.64528275 144.79595947]
[-54.93481445 149.35768127]
[-62.22742844 163.12196350]
[-76.78402710 167.54463196]
[-89.86122894 160.50741577]
[-104.15075684 165.06913757]
[-118.38037109 169.81446838]
[-132.54771423 174.74259949]
[-133.78518677 189.92115784]
[-141.09504700 203.28102112]
[-153.21081543 212.50749207]
[-168.03337097 216.00205994]
[-182.99459839 213.15925598]
[-195.50238037 204.47161865]
[-203.38967896 191.44432068]
[-205.28996277 176.33442688]
[-200.87399292 161.75982666]
[-190.90686035 150.24563599]
[-177.11544800 143.78678894]
[-161.88919067 143.50228882]
[-147.86613464 149.44145203]
[-137.47584534 160.57527161]
[-123.30850983 155.64712524]
[-117.96143341 150.41589355]
[-108.71247864 150.77961731]
[-94.42295074 146.21789551]
[-87.84217072 132.90515137]
[-73.41554260 128.07536316]
[-59.49653625 135.06814575]
[-45.20700455 130.50642395]
[-35.43558502 119.26504517]
[-19.93602371 122.43903351]
[-5.64649391 117.87731171]
[8.64303684 113.31558990]
[22.93256760 108.75386810]
[37.22209930 104.19214630]
[51.51163101 99.63042450]
[65.80116272 95.06870270]
[80.09069061 90.50698090]
[87.64636993 77.54890442]
[84.57809448 62.86606979]
[81.50981140 48.18323517]
[78.44152832 33.50040054]
[75.37325287 18.81756401]
[72.30496979 4.13472939]
[69.23668671 -10.54810619]
[60.07826614 -24.81554031]
[71.25282288 -37.56566620]
[86.59809113 -30.35740280]
[83.91952515 -13.61638641]
[86.98780060 1.06644845]
[90.05608368 15.74928379]
[93.12436676 30.43211937]
[96.19264984 45.11495590]
[99.26092529 59.79779053]
[102.32920837 74.48062134]
[109.34708405 77.12626648]
[110.04228973 62.14238358]
[124.50769043 58.17347336]
[132.75224304 70.70452881]
[123.38283539 82.41754913]
[130.40071106 85.06318665]
[142.39830017 76.05997467]
[154.39588928 67.05676270]
[166.39347839 58.05354309]
[178.39106750 49.05033112]
[179.06002808 33.42706299]
[189.65301514 21.92390060]
[205.16833496 19.97228813]
[218.28013611 28.49371529]
[222.79742432 43.46462250]
[216.58726501 57.81621170]
[202.58192444 64.77209473]
[187.39428711 61.04792023]
[175.39669800 70.05113220]
[163.39910889 79.05434418]
[151.40151978 88.05756378]
[139.40393066 97.06077576]
[139.79014587 112.05580139]
[152.23530579 120.42945862]
[164.68045044 128.80311584]
[177.23239136 137.01583862]
[189.88902283 145.06628418]
[202.54565430 153.11672974]
[217.78657532 149.89927673]
[230.50752258 158.24386597]
[233.48095703 172.79359436]
[246.13758850 180.84403992]
[258.79421997 188.89447021]
[273.17752075 183.07208252]
[288.22799683 186.84861755]
[298.15847778 198.77192688]
[299.15045166 214.25726318]
[290.82250977 227.35018921]
[276.37689209 233.01622009]
[261.36825562 229.07662964]
[251.56770325 217.04629517]
[250.74377441 201.55111694]
[238.08714294 193.50067139]
[225.43051147 185.45022583]
[210.99230957 188.92501831]
[198.04200745 180.94102478]
[194.49520874 165.77336121]
[181.83857727 157.72291565]
[169.18194580 149.67248535]
[161.76158142 148.72628784]
[156.30679321 141.24827576]
[143.86164856 132.87461853]
[131.41648865 124.50096130]
[115.99055481 131.23318481]
[101.14986420 130.31455994]
[90.09945679 123.59081268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[10 39]
[11 38]
[14 35]
[15 34]
[16 32]
[17 31]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[88 118]
[89 117]
[90 116]
[91 114]
[92 113]
[93 112]
[96 109]
[97 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
