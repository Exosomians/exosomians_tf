%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCACAGCGGGCCGAUCGAGUCAGCCAUCUCGUACUCUGAGAAUUAGAGUCCCAGCACCCAAGCUCGGGGUGCAACCCGCUAAGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[90.94448853 290.58908081]
[101.11154938 278.48922729]
[99.57758331 263.56787109]
[89.17405701 258.31698608]
[82.61055756 248.54119873]
[81.66964722 236.68246460]
[86.71109772 225.77386475]
[96.54930878 218.66390991]
[96.03718567 203.67265320]
[95.52507019 188.68139648]
[95.01295471 173.69013977]
[94.50083923 158.69888306]
[93.98872375 143.70762634]
[83.34629059 140.85519409]
[73.74250793 135.45471191]
[65.77633667 127.84301758]
[59.94461060 118.49481964]
[56.61103439 107.99314880]
[55.98352051 96.99296570]
[41.41001511 93.44149780]
[26.83650970 89.89002991]
[12.26300240 86.33856964]
[0.51693583 96.47807312]
[-14.94846439 97.74338531]
[-28.18643570 89.64797211]
[-34.10670853 75.30467987]
[-30.43281746 60.22880173]
[-18.57744789 50.21731567]
[-3.09923196 49.11984634]
[10.05014133 57.35839081]
[15.81446838 71.76506042]
[30.38797569 75.31652832]
[44.96148300 78.86799622]
[59.53498840 82.41945648]
[70.44127655 67.24676514]
[86.64974976 57.94927597]
[84.60724640 43.08898544]
[82.56475067 28.22869682]
[80.52224731 13.36840820]
[78.47975159 -1.49188125]
[76.43724823 -16.35217094]
[74.39475250 -31.21245956]
[66.24796295 -46.08075714]
[78.27994537 -58.02511597]
[93.08830261 -49.76987457]
[89.25504303 -33.25495911]
[91.29753876 -18.39467049]
[93.34004211 -3.53438091]
[95.38253784 11.32590771]
[97.42504120 26.18619728]
[99.46753693 41.04648590]
[101.51004028 55.90677643]
[111.61494446 57.43727493]
[121.09658051 61.25175095]
[129.44615173 67.14551544]
[136.21557617 74.80229950]
[141.04164124 83.81122589]
[155.72790527 80.75939178]
[170.41416931 77.70755005]
[185.10041809 74.65570831]
[199.78668213 71.60386658]
[214.47294617 68.55202484]
[221.71726990 54.69368362]
[236.19435120 48.78196716]
[251.06852722 53.60821152]
[259.31671143 66.89360809]
[257.04431152 82.36520386]
[245.32431030 92.71778107]
[229.69055176 93.06317139]
[217.52479553 83.23828888]
[202.83853149 86.29013062]
[188.15226746 89.34197235]
[173.46600342 92.39380646]
[158.77973938 95.44564819]
[144.09347534 98.49748993]
[140.05538940 118.49481964]
[127.45265198 134.53758240]
[108.97998047 143.19551086]
[109.49209595 158.18676758]
[110.00421143 173.17802429]
[110.51632690 188.16928101]
[111.02844238 203.16053772]
[111.54055786 218.15179443]
[125.83154297 230.33187866]
[126.88358307 248.76560974]
[114.49894714 262.03390503]
[116.03290558 276.95529175]
[128.44909668 286.73348999]
[130.23144531 302.43698120]
[120.32249451 314.74908447]
[104.60105896 316.36529541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[19 34]
[20 33]
[21 32]
[22 31]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
