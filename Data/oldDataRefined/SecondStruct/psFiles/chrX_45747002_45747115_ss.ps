%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGACUUCGUCUUCGAUCUUCUACGGUAGUCUCUGGGUCAUCGGUCUACAUCGACGACUAAUGCUUUCUGUCCUAGAUGUGACCGAUGACUCGGUAACUCCCAUGGAUGUGGA\
) } def
/len { sequence length } bind def

/coor [
[60.81935120 255.01280212]
[57.07106018 263.62554932]
[49.83706665 269.39678955]
[40.87993240 271.08657837]
[34.53034592 284.67639160]
[28.18075752 298.26620483]
[26.95386314 315.17568970]
[10.36555862 318.67776489]
[2.40825295 303.70718384]
[14.59095478 291.91659546]
[20.94054413 278.32681274]
[27.29013062 264.73699951]
[23.50480461 244.52534485]
[40.86335754 232.11622620]
[46.07913208 218.05224609]
[43.25015640 203.42877197]
[55.30321503 193.18014526]
[60.51898956 179.11614990]
[55.74878311 167.90751648]
[60.08516693 156.09413147]
[71.69357300 150.27163696]
[77.29156494 136.35536194]
[82.88954926 122.43908691]
[88.48753357 108.52281952]
[86.71093750 94.65431976]
[97.59619904 85.87919617]
[103.19418335 71.96292877]
[101.16610718 56.27224350]
[113.09420013 47.35205460]
[118.69218445 33.43578339]
[124.29016876 19.51951408]
[118.33760071 5.12490654]
[124.21299744 -8.90842438]
[137.97274780 -14.49457645]
[143.57072449 -28.41084671]
[149.16871643 -42.32711411]
[154.76669312 -56.24338531]
[160.36468506 -70.15965271]
[165.96266174 -84.07592773]
[171.56065369 -97.99219513]
[177.15863037 -111.90846252]
[182.75662231 -125.82473755]
[188.35459900 -139.74099731]
[193.95259094 -153.65727234]
[199.55058289 -167.57354736]
[205.14855957 -181.48980713]
[210.74655151 -195.40608215]
[211.06491089 -204.67431641]
[216.69218445 -209.62261963]
[222.66819763 -223.38079834]
[228.64422607 -237.13896179]
[234.62023926 -250.89714050]
[240.59625244 -264.65530396]
[232.88624573 -277.99179077]
[234.48883057 -293.13397217]
[244.58099365 -304.29693604]
[259.13696289 -307.34030151]
[265.11297607 -321.09844971]
[271.08898926 -334.85662842]
[261.44277954 -346.73977661]
[258.43521118 -361.74685669]
[262.75741577 -376.42941284]
[273.41619873 -387.41345215]
[287.96221924 -392.17495728]
[303.05291748 -389.61972046]
[315.22058105 -380.33496094]
[321.66912842 -366.45425415]
[320.91677856 -351.16723633]
[313.13638306 -337.98678589]
[300.11584473 -329.94168091]
[284.84716797 -328.88061523]
[278.87115479 -315.12243652]
[272.89514160 -301.36425781]
[280.60614014 -288.64901733]
[279.33630371 -273.65396118]
[269.36370850 -262.14739990]
[254.35441589 -258.67929077]
[248.37840271 -244.92111206]
[242.40238953 -231.16294861]
[236.42637634 -217.40478516]
[230.45036316 -203.64660645]
[224.66281128 -189.80810547]
[219.06483459 -175.89183044]
[213.46684265 -161.97555542]
[207.86886597 -148.05929565]
[202.27087402 -134.14302063]
[196.67289734 -120.22675323]
[191.07490540 -106.31047821]
[185.47691345 -92.39421082]
[179.87893677 -78.47794342]
[174.28094482 -64.56166840]
[168.68296814 -50.64540100]
[163.08497620 -36.72912979]
[157.48699951 -22.81286049]
[151.88900757 -8.89659119]
[157.94766235 4.66174221]
[152.46875000 18.85456467]
[138.20643616 25.11749840]
[132.60845947 39.03376770]
[127.01046753 52.95003891]
[129.43894958 67.64533234]
[117.11045074 77.56091309]
[111.51246643 91.47718048]
[113.28906250 105.34568024]
[102.40380096 114.12080383]
[96.80581665 128.03707886]
[91.20783234 141.95333862]
[85.60984802 155.86961365]
[88.66947174 173.96377563]
[74.58297729 184.33193970]
[69.36720276 198.39591980]
[71.82311249 214.02534485]
[60.14311981 223.26802063]
[54.92734146 237.33201599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 12]
[5 11]
[6 10]
[14 114]
[15 113]
[17 111]
[18 110]
[21 108]
[22 107]
[23 106]
[24 105]
[26 103]
[27 102]
[29 100]
[30 99]
[31 98]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[57 73]
[58 72]
[59 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
