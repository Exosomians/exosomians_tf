%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUACACUCCCGCUAGACCGACGCUGUAGACAGUGGGGUAACUAGCGGUCCCAACUAAGCCGACUAGACCGACCGAUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.14595032 161.03599548]
[96.04294586 161.74685669]
[82.14604950 159.24160767]
[69.17907715 153.65075684]
[57.81742477 145.26547241]
[48.65287018 134.52252197]
[42.16274643 121.98146057]
[38.68509293 108.29547882]
[38.40105438 94.17742920]
[41.32541275 80.36264801]
[47.30586243 67.57068634]
[35.57838821 58.21833801]
[23.85091591 48.86599350]
[12.12344456 39.51364517]
[0.39597237 30.16129875]
[-11.33150005 20.80895233]
[-23.05897141 11.45660496]
[-35.12793732 2.54930186]
[-47.52151871 -5.90049934]
[-59.91510391 -14.35029984]
[-72.87345123 -12.73684406]
[-83.06951141 -20.23155212]
[-85.25179291 -32.28572464]
[-97.32076263 -41.19302750]
[-109.38972473 -50.10033035]
[-121.45869446 -59.00763321]
[-133.52766418 -67.91493225]
[-149.87539673 -69.21237183]
[-156.68040466 -84.13296509]
[-146.94226074 -97.32768250]
[-130.67874146 -95.22293091]
[-124.62035370 -79.98390198]
[-112.55139160 -71.07659912]
[-100.48242188 -62.16929626]
[-88.41345978 -53.26199341]
[-76.34449005 -44.35469055]
[-58.92490768 -43.45347977]
[-51.46530151 -26.74388123]
[-39.07172012 -18.29408073]
[-26.67813873 -9.84428024]
[-21.67543411 -9.90125656]
[-16.64060593 -6.64250088]
[-13.70662498 -0.27086771]
[-1.97915280 9.08147907]
[9.74831963 18.43382645]
[21.47579193 27.78617287]
[33.20326233 37.13851929]
[44.93073654 46.49086761]
[56.65820694 55.84321594]
[69.28967285 46.28586197]
[83.93379211 40.24876785]
[99.63084412 38.12757874]
[115.35208893 40.06131363]
[130.06719971 45.92324448]
[142.81181335 55.32918930]
[152.75067139 67.66271973]
[159.23240662 82.11553955]
[161.83224487 97.74044037]
[160.37979126 113.51343536]
[154.97024536 128.40080261]
[167.36381531 136.85060120]
[183.12463379 138.23165894]
[189.28182983 151.79403687]
[201.67539978 160.24383545]
[214.68196106 156.21693420]
[227.42253113 160.43153381]
[235.23016357 171.10398865]
[235.38470459 184.13044739]
[250.97315979 181.52740479]
[263.78778076 190.77734375]
[266.22586060 206.39244080]
[256.84094238 219.10853577]
[241.20094299 221.38139343]
[228.58479309 211.86256409]
[226.47740173 196.19940186]
[210.09378052 199.46421814]
[196.07511902 189.77680969]
[193.22560120 172.63742065]
[180.83203125 164.18762207]
[165.95768738 163.41094971]
[158.91401672 149.24418640]
[146.52044678 140.79437256]
[136.05955505 150.27963257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 40]
[19 39]
[20 38]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[60 82]
[61 81]
[63 79]
[64 78]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
