%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:33 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCGACCCAUCGCACCGGCUCGCCAGAUUCCGCGACCUAAUUCCGAGGUCAGAGAAGCCCCCGCACCCAAGCUUAGGGUGGCGACGGUCCCAACGACAGAAAAACAGGGGCGACGUAUGUGAGGACCGAGUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[125.39806366 169.47761536]
[118.84620667 155.98417664]
[112.29434967 142.49072266]
[105.74249268 128.99726868]
[99.19063568 115.50382996]
[85.55255890 109.25858307]
[71.05638885 113.11357880]
[56.56021500 116.96856689]
[42.06404114 120.82355499]
[37.01662064 125.30256653]
[31.32044029 126.33830261]
[26.82546806 124.50934601]
[12.16990376 127.70535278]
[-2.48565912 130.90136719]
[-7.38449478 147.70330811]
[-20.01853371 159.68649292]
[-36.88364410 163.65016174]
[-53.36367416 158.60099792]
[-64.99390411 146.00015259]
[-79.49007416 149.85513306]
[-87.05512238 155.12702942]
[-94.35747528 153.62948608]
[-108.93707275 157.15588379]
[-123.51666260 160.68228149]
[-138.09625244 164.20867920]
[-143.88534546 178.60542297]
[-157.04887390 186.82133484]
[-172.52517700 185.69725037]
[-184.36331177 175.66539001]
[-188.01127625 160.58322144]
[-182.06634521 146.25013733]
[-168.81446838 138.17749023]
[-153.35127258 139.46940613]
[-141.62265015 149.62908936]
[-127.04306030 146.10269165]
[-112.46347046 142.57629395]
[-97.88388062 139.04989624]
[-83.34506989 135.35896301]
[-68.84889221 131.50396729]
[-66.86223602 118.93439484]
[-60.21989059 108.02490997]
[-49.88969803 100.43375397]
[-37.40312958 97.33061981]
[-24.62827301 99.21653748]
[-13.49037075 105.84336853]
[-5.68166685 116.24579620]
[8.97389603 113.04978943]
[23.62945938 109.85378265]
[38.20905304 106.32738495]
[52.70522690 102.47238922]
[67.20140076 98.61740112]
[81.69757080 94.76241302]
[68.71528625 87.24841309]
[63.92152786 73.03504181]
[69.70110321 59.19320297]
[83.17877960 52.60895920]
[97.64965057 56.55785370]
[105.91472626 69.07538605]
[103.86208344 83.93464661]
[114.04098511 72.91693115]
[124.21988678 61.89921951]
[134.39878845 50.88150406]
[144.57768250 39.86379242]
[151.58314514 26.60017395]
[154.94456482 11.98166370]
[158.30598450 -2.63684773]
[161.50198364 -17.29241180]
[164.53218079 -31.98315430]
[167.56236267 -46.67389679]
[170.59255981 -61.36464310]
[160.74975586 -73.51590729]
[161.07209778 -89.15016937]
[171.40737915 -100.88540649]
[186.87561035 -103.18059540]
[200.17315674 -94.95202637]
[205.02131653 -80.08496857]
[199.13095093 -65.59920502]
[185.28329468 -58.33445358]
[182.25311279 -43.64371109]
[179.22291565 -28.95296478]
[176.19273376 -14.26222134]
[177.93692017 -7.01482153]
[172.92448425 0.72457045]
[169.56306458 15.34308147]
[166.20166016 29.96159172]
[172.09545898 34.59980392]
[186.02278137 29.02934647]
[183.88308716 43.87622452]
[189.77690125 48.51443481]
[203.19544983 41.81051636]
[216.61399841 35.10659409]
[223.03561401 20.40481377]
[238.57034302 16.39838600]
[251.30128479 26.16070175]
[251.46234131 42.20294571]
[238.92994690 52.21888351]
[223.31791687 48.52514267]
[209.89936829 55.22906494]
[196.48081970 61.93298340]
[211.47073364 62.48293686]
[213.56495667 77.33602142]
[208.58190918 91.48413849]
[197.64186096 101.74646759]
[183.20439148 105.81580353]
[168.51536560 102.77728271]
[156.87721252 93.31402588]
[150.90643311 79.55358124]
[151.94474792 64.59166718]
[155.59539795 50.04269028]
[145.41650391 61.06040192]
[135.23759460 72.07811737]
[125.05870056 83.09583282]
[114.87979889 94.11354828]
[112.68408203 108.95196533]
[119.23593903 122.44541931]
[125.78779602 135.93887329]
[132.33966064 149.43231201]
[138.89151001 162.92576599]
[152.15893555 161.93934631]
[164.93397522 165.53704834]
[175.68472290 173.26466370]
[183.12979126 184.17417908]
[186.39103699 196.93991089]
[185.09713745 210.01972961]
[179.42564392 221.84121704]
[170.07907104 230.99079895]
[176.01451111 244.76652527]
[181.94993591 258.54223633]
[193.77026367 270.69610596]
[185.36357117 285.41900635]
[168.88883972 281.41656494]
[168.17420959 264.47769165]
[162.23878479 250.70195007]
[156.30334473 236.92622375]
[139.48025513 236.73274231]
[124.36610413 229.21812439]
[113.99012756 215.83508301]
[110.45510864 199.21774292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[5 114]
[6 52]
[7 51]
[8 50]
[9 49]
[12 48]
[13 47]
[14 46]
[19 39]
[20 38]
[22 37]
[23 36]
[24 35]
[25 34]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[64 85]
[65 84]
[66 83]
[67 81]
[68 80]
[69 79]
[70 78]
[89 99]
[90 98]
[91 97]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
