%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUGAGACCAAAGAGAAGUUUAGCAUAUUUAGAAAGCGGAAAAUGAUUUCUAAAGGCACCUCUCUUUGCUCACACUCAGACUUUGGUUAAAAAACUCCGGAACGCAAAGAAUCGUCCCGAAUAAAAU\
) } def
/len { sequence length } bind def

/coor [
[35.29931641 127.73580933]
[31.06610870 114.26786804]
[29.60538101 100.22608948]
[30.97588348 86.17521667]
[16.66555977 81.67914581]
[2.35523510 77.18308258]
[-11.95508862 72.68701172]
[-18.64633942 73.77704620]
[-24.03102112 71.58452606]
[-26.84308815 67.60793304]
[-40.91753769 62.42045975]
[-54.99198914 57.23298645]
[-69.06643677 52.04551697]
[-83.14089203 46.85804367]
[-97.21533966 41.67057419]
[-111.28978729 36.48310089]
[-125.36423492 31.29562950]
[-140.98869324 33.78297806]
[-150.25485229 22.12160492]
[-164.32929993 16.93413353]
[-169.67701721 17.86802483]
[-174.34829712 16.70646667]
[-177.64074707 14.08259296]
[-179.21842957 10.81988811]
[-192.87667847 4.61888647]
[-202.94474792 9.06753922]
[-213.57154846 7.21990776]
[-221.22692871 -0.06168908]
[-223.50611877 -10.15194893]
[-236.84625244 -17.01058388]
[-250.18638611 -23.86921883]
[-263.52651978 -30.72785378]
[-276.86663818 -37.58648682]
[-290.20678711 -44.44512177]
[-303.54690552 -51.30375671]
[-316.88705444 -58.16239166]
[-332.69793701 -57.59130859]
[-340.47900391 -70.29186249]
[-353.81915283 -77.15049744]
[-369.47286987 -73.63752747]
[-381.88858032 -83.79771423]
[-381.54205322 -99.83702087]
[-368.69906616 -109.45147705]
[-353.21170044 -105.26568604]
[-346.96051025 -90.49063110]
[-333.62039185 -83.63199615]
[-318.76367188 -84.69365692]
[-310.02841187 -71.50252533]
[-296.68826294 -64.64389038]
[-283.34814453 -57.78525543]
[-270.00799561 -50.92662048]
[-256.66787720 -44.06798553]
[-243.32774353 -37.20935059]
[-229.98760986 -30.35071564]
[-216.64747620 -23.49208069]
[-197.52886963 -25.94533920]
[-186.67567444 -9.03935623]
[-173.01742554 -2.83835411]
[-159.14183044 2.85968399]
[-145.06738281 8.04715538]
[-130.44961548 5.18876362]
[-120.17676544 17.22117996]
[-106.10231781 22.40865135]
[-92.02787018 27.59612274]
[-77.95341492 32.78359604]
[-63.87896729 37.97106552]
[-49.80451584 43.15853882]
[-35.73006821 48.34600830]
[-21.65561676 53.53348160]
[-7.45902061 58.37668610]
[6.85130310 62.87275696]
[21.16162682 67.36882019]
[35.47195053 71.86489105]
[46.19240570 54.61061478]
[61.39339828 41.13588715]
[79.80914307 32.56275177]
[99.90616608 29.60508156]
[120.01100922 32.50916290]
[138.44953918 41.03317642]
[153.68640137 54.46733093]
[166.09466553 46.03910065]
[178.50292969 37.61087418]
[185.15295410 22.62057304]
[201.48637390 21.15381813]
[210.70075989 34.71947861]
[203.31713867 49.36236572]
[186.93115234 50.01913452]
[174.52288818 58.44736481]
[162.11462402 66.87559509]
[165.12242126 73.26943207]
[167.47409058 79.93258667]
[169.14591980 86.79793549]
[170.12109375 93.79629517]
[170.38975525 100.85715485]
[169.94923401 107.90938568]
[168.80393982 114.88192749]
[166.96542358 121.70452118]
[164.45219421 128.30844116]
[161.28959656 134.62713623]
[173.48893738 143.35502625]
[185.68829346 152.08290100]
[201.41384888 153.81999207]
[207.26278687 167.51814270]
[219.46212769 176.24601746]
[231.66148376 184.97390747]
[246.34056091 179.94358826]
[261.16302490 184.53430176]
[270.42929077 196.98081970]
[270.57632446 212.49719238]
[261.54757690 225.11708069]
[246.81478882 229.98785400]
[232.04301453 225.23661804]
[222.91229248 212.69030762]
[222.93359375 197.17324829]
[210.73425293 188.44537354]
[198.53489685 179.71748352]
[183.68193054 178.60467529]
[176.96040344 164.28225708]
[164.76106262 155.55436707]
[152.56170654 146.82649231]
[142.16110229 156.37281799]
[130.06478882 163.65188599]
[116.75929260 168.37089539]
[102.77974701 170.34007263]
[88.68840790 169.48022461]
[75.05200958 165.82591248]
[62.41900253 159.52412415]
[51.29748154 150.82832336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[19 60]
[20 59]
[24 58]
[25 57]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[38 46]
[39 45]
[80 89]
[81 88]
[82 87]
[99 120]
[100 119]
[101 118]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
