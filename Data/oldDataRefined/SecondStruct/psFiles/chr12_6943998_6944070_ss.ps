%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCCGACGCGGCCUACGACAAAGGAAAGGCGAGGGUCCCCGCAACCCUUGCCAACAUCCUGCACCGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[66.95198822 178.15971375]
[59.82122803 176.23028564]
[49.44214249 187.05963135]
[39.06306076 197.88896179]
[28.68397903 208.71830750]
[18.30489540 219.54765320]
[7.92581224 230.37699890]
[1.33129263 245.99584961]
[-15.50271702 243.98277283]
[-18.22843170 227.24937439]
[-2.90352917 219.99790955]
[7.47555399 209.16856384]
[17.85463715 198.33923340]
[28.23372078 187.50988770]
[38.61280441 176.68054199]
[48.99188614 165.85119629]
[50.67213058 142.75004578]
[72.65283203 133.57522583]
[79.96825409 120.48001099]
[72.42154694 107.75439453]
[72.23045349 92.96055603]
[79.44593048 80.04425049]
[92.14350891 72.45046234]
[106.93653107 72.20456696]
[114.25196075 59.10935593]
[121.56738281 46.01414490]
[128.88281250 32.91893387]
[122.92005157 15.19265842]
[131.38648987 -1.13387048]
[148.71418762 -6.29543209]
[154.89271545 -19.96385956]
[161.07122803 -33.63228607]
[167.24974060 -47.30071259]
[173.42826843 -60.96914291]
[179.60678101 -74.63756561]
[185.78530884 -88.30599976]
[191.96382141 -101.97442627]
[198.14233398 -115.64285278]
[191.20433044 -129.65705872]
[194.94787598 -144.83993530]
[207.60539246 -154.02259827]
[223.20039368 -152.86927795]
[234.36938477 -141.92451477]
[235.83871460 -126.35611725]
[226.91461182 -113.51499176]
[211.81077576 -109.46433258]
[205.63224792 -95.79590607]
[199.45373535 -82.12747955]
[193.27520752 -68.45905304]
[187.09669495 -54.79062271]
[180.91818237 -41.12219620]
[174.73965454 -27.45376778]
[168.56114197 -13.78534126]
[162.38261414 -0.11691358]
[168.77832031 9.74994755]
[169.48374939 21.60918999]
[164.19555664 32.38338470]
[154.18133545 39.21731567]
[141.97801208 40.23435593]
[134.66259766 53.32956696]
[127.34716797 66.42478180]
[120.03174591 79.51998901]
[127.57845306 92.24560547]
[127.76954651 107.03944397]
[120.55406952 119.95574951]
[107.85649109 127.54953766]
[93.06346893 127.79543304]
[85.74803925 140.89064026]
[89.73950958 147.54257202]
[91.27851105 155.09194946]
[90.22402191 162.67068481]
[86.73118591 169.41918945]
[81.22967529 174.58390808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[18 68]
[19 67]
[24 62]
[25 61]
[26 60]
[27 59]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
