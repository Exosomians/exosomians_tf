%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCGUCCCGGUCACCGCGUUACCUAUUGCGCAGACUGAUGCCUAGUCUUCUAAGGUCCAAGCUGAGGACCGACCGAGCCACAUUCGUCCCAGCAAAAUGUUGAAAGACUGAGGCGUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[-14.49952888 208.34815979]
[-18.12645531 208.15071106]
[-30.14995956 217.11929321]
[-42.17346573 226.08786011]
[-54.19696808 235.05644226]
[-66.22047424 244.02500916]
[-78.24398041 252.99359131]
[-77.05148315 266.78906250]
[-82.81226349 279.26116943]
[-93.91173553 287.17129517]
[-107.36492157 288.52435303]
[-119.61882019 283.07131958]
[-131.86390686 291.73489380]
[-144.10899353 300.39849854]
[-150.90576172 314.68536377]
[-165.76438904 315.72003174]
[-178.00947571 324.38360596]
[-187.44738770 338.46774292]
[-203.59376526 333.29751587]
[-203.09538269 316.35092163]
[-186.67306519 312.13851929]
[-174.42797852 303.47494507]
[-168.50706482 289.80773926]
[-152.77258301 288.15341187]
[-140.52749634 279.48980713]
[-128.28240967 270.82623291]
[-128.62500000 254.46546936]
[-119.08579254 240.96589661]
[-103.23558807 235.72142029]
[-87.21255493 240.97007751]
[-75.18904877 232.00151062]
[-63.16554642 223.03292847]
[-51.14204025 214.06436157]
[-39.11853409 205.09577942]
[-27.09502983 196.12721252]
[-15.41809559 186.71183777]
[-4.10432482 176.86305237]
[-2.93007207 164.75328064]
[6.51301908 156.45838928]
[19.47738838 156.88032532]
[31.03508568 147.31896973]
[42.59278488 137.75761414]
[54.15048218 128.19624329]
[65.70818329 118.63488770]
[77.26588440 109.07352448]
[88.82357788 99.51216888]
[100.26021576 89.80632782]
[111.57398987 79.95754242]
[122.88775635 70.10875702]
[134.20152283 60.25996780]
[145.51530457 50.41118240]
[156.82907104 40.56239700]
[162.15766907 25.66553116]
[176.83743286 23.14485359]
[188.15119934 13.29606819]
[199.46498108 3.44728160]
[204.79356384 -11.44958401]
[219.47332764 -13.97026062]
[230.78710938 -23.81904602]
[228.55882263 -37.48548508]
[233.36375427 -50.35612488]
[243.83584595 -59.07984161]
[257.14889526 -61.44245911]
[269.77874756 -56.92795181]
[281.33642578 -66.48931122]
[292.89413452 -76.05067444]
[304.45184326 -85.61203003]
[309.13760376 -93.58641052]
[316.42224121 -95.26403046]
[328.21655273 -104.53192139]
[340.01089478 -113.79981995]
[351.80520630 -123.06771088]
[356.68988037 -130.92181396]
[364.01437378 -132.41584778]
[376.03790283 -141.38441467]
[373.57330322 -156.49018860]
[378.42202759 -171.00737000]
[389.46984863 -181.60002136]
[404.17807007 -185.83401489]
[419.16687012 -182.73641968]
[430.99188232 -173.01904297]
[436.93585205 -158.91485596]
[435.63287354 -143.66491699]
[427.38235474 -130.77352905]
[414.08023071 -123.20304871]
[398.78323364 -122.69311523]
[385.00646973 -129.36091614]
[372.98297119 -120.39234161]
[361.07312012 -111.27338409]
[349.27877808 -102.00549316]
[337.48446655 -92.73759460]
[325.69012451 -83.46970367]
[314.01318359 -74.05432892]
[302.45550537 -64.49297333]
[290.89779663 -54.93161392]
[279.34008789 -45.37025452]
[280.91412354 -29.08178329]
[272.41888428 -14.90200138]
[257.00875854 -8.47848701]
[240.63589478 -12.50527573]
[229.32212830 -2.65648961]
[224.80276489 11.53592491]
[209.31376648 14.76105213]
[197.99998474 24.60983849]
[186.68621826 34.45862579]
[182.16685486 48.65103912]
[166.67785645 51.87616730]
[155.36408997 61.72495270]
[144.05030823 71.57373810]
[132.73654175 81.42252350]
[121.42277527 91.27130890]
[110.10900116 101.12010193]
[106.52874756 108.45078278]
[98.38494110 111.06986237]
[86.82723999 120.63122559]
[75.26953888 130.19258118]
[63.71184158 139.75395203]
[52.15414429 149.31530762]
[40.59644699 158.87666321]
[29.03874779 168.43801880]
[23.08451462 185.80802917]
[5.74446106 188.17681885]
[-5.56930923 198.02560425]
[-7.32543278 203.18078613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[12 26]
[13 25]
[14 24]
[16 22]
[17 21]
[36 123]
[37 122]
[40 120]
[41 119]
[42 118]
[43 117]
[44 116]
[45 115]
[46 114]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[52 107]
[54 105]
[55 104]
[56 103]
[58 101]
[59 100]
[64 96]
[65 95]
[66 94]
[67 93]
[69 92]
[70 91]
[71 90]
[72 89]
[74 88]
[75 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
