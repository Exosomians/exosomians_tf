%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:14 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGGGCAUCUAGGCUAGAACACCACUUCACCUGGCGUGUUCGAGCGAAGAUACCCAGACA\
) } def
/len { sequence length } bind def

/coor [
[92.72973633 278.60000610]
[100.68862152 264.26165771]
[99.94093323 249.28030396]
[99.19324493 234.29895020]
[98.44555664 219.31759644]
[97.69786835 204.33624268]
[96.95018005 189.35488892]
[88.58809662 177.02911377]
[95.62789917 162.86041260]
[94.88021088 147.87905884]
[94.13252258 132.89770508]
[93.38483429 117.91635895]
[82.71193695 108.11659241]
[81.98969269 93.64508057]
[91.63381195 82.83132935]
[90.88612366 67.84997559]
[90.13843536 52.86862564]
[81.72286987 39.47127914]
[88.81615448 26.37415504]
[88.06846619 11.39280128]
[87.32077789 -3.58855200]
[86.57308960 -18.56990623]
[85.82540131 -33.55125809]
[85.07771301 -48.53261185]
[73.64176178 -59.10884857]
[73.09691620 -74.31272125]
[83.25021362 -85.14997864]
[70.67657471 -94.44715881]
[67.07100677 -109.66339874]
[74.13594818 -123.61405182]
[88.53554535 -129.71203613]
[103.47075653 -125.07808685]
[111.88962555 -111.90020752]
[109.81702423 -96.40058136]
[98.23156738 -85.89766693]
[109.41345978 -76.12520599]
[110.38513184 -60.94263458]
[100.05906677 -49.28030014]
[100.80675507 -34.29894638]
[101.55444336 -19.31759453]
[102.30213165 -4.33624029]
[103.04981995 10.64511299]
[103.79750824 25.62646675]
[112.15959167 37.95224380]
[105.11978912 52.12093735]
[105.86747742 67.10228729]
[106.61516571 82.08364105]
[117.28806305 91.88340759]
[118.01030731 106.35491943]
[108.36618805 117.16867065]
[109.11387634 132.15002441]
[109.86156464 147.13137817]
[110.60925293 162.11273193]
[119.02481842 175.51007080]
[111.93153381 188.60719299]
[112.67922211 203.58854675]
[113.42691040 218.56990051]
[114.17459869 233.55125427]
[114.92228699 248.53260803]
[115.66997528 263.51397705]
[125.01695251 276.98861694]
[117.77729034 291.70321655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[6 56]
[7 55]
[9 53]
[10 52]
[11 51]
[12 50]
[15 47]
[16 46]
[17 45]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[27 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
