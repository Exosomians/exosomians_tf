%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGCUUAUGUCUUUCGUUGUUUUGAUGUUACCUCUACGGCCCCUAGCUUGGGCCCCGGAGUAUGUACGUUUCGUACGCGAGAUGGUGACUCGAUGUAGGGGGAGGGAAAGGACAUGAACGAAAA\
) } def
/len { sequence length } bind def

/coor [
[51.44778824 535.71844482]
[57.49412918 519.87927246]
[57.49412918 504.87930298]
[57.49412918 489.87930298]
[57.49412918 474.87930298]
[57.49412918 459.87930298]
[49.75682831 447.15200806]
[57.49412918 433.35183716]
[57.49412918 418.35183716]
[57.49412918 403.35183716]
[57.49412918 388.35183716]
[57.49412918 373.35183716]
[57.49412918 358.35183716]
[57.49412918 343.35183716]
[57.49412918 328.35183716]
[57.49412918 313.35183716]
[57.49412918 298.35183716]
[54.73387909 294.33679199]
[54.53955841 288.52343750]
[57.88031387 282.62036133]
[58.61632919 267.63842773]
[51.51284790 254.54682922]
[59.91796875 241.14292908]
[60.65398407 226.16099548]
[61.38999939 211.17906189]
[50.36176682 221.34657288]
[35.48658371 223.27760315]
[22.22782516 216.26295471]
[15.45519066 202.87895203]
[17.65613747 188.04130554]
[28.02230263 177.19960022]
[42.74638367 174.33578491]
[56.42050171 180.50169373]
[64.02242279 193.43273926]
[67.66712189 178.88226318]
[71.31182861 164.33178711]
[74.95652771 149.78132629]
[78.60123444 135.23085022]
[82.24593353 120.68038940]
[85.89063263 106.12992096]
[82.24593353 91.57945251]
[72.17254639 80.46518707]
[62.09916306 69.35091400]
[52.02577972 58.23664856]
[41.95239639 47.12238312]
[26.33415985 47.90002441]
[13.90132523 38.41537476]
[10.52429581 23.14678764]
[17.79760170 9.30362988]
[32.28701019 3.42221403]
[47.15106583 8.27956486]
[55.37141800 21.58219147]
[53.06666183 37.04899979]
[63.14004898 48.16326523]
[73.21343231 59.27753067]
[83.28681946 70.39179993]
[93.36019897 81.50606537]
[100.85511780 81.23001099]
[107.87162018 67.97223663]
[115.84495544 80.67790222]
[123.33987427 80.40184784]
[132.56834412 68.57665253]
[141.79681396 56.75145721]
[151.02529907 44.92626190]
[145.98301697 33.35635376]
[146.37899780 20.81428146]
[152.07478333 9.71463966]
[161.91766357 2.16770220]
[173.97328186 -0.42172915]
[185.90574646 2.38450432]
[195.70333862 -8.97362804]
[205.50093079 -20.33176041]
[215.29852295 -31.68989372]
[225.09611511 -43.04802704]
[234.89370728 -54.40615845]
[244.69129944 -65.76428986]
[247.22570801 -81.96641541]
[262.61975098 -87.61937714]
[275.03732300 -76.90789795]
[271.70431519 -60.85103226]
[256.04943848 -55.96669769]
[246.25183105 -44.60856628]
[236.45423889 -33.25043488]
[226.65664673 -21.89230156]
[216.85905457 -10.53416824]
[207.06146240 0.82396430]
[197.26387024 12.18209743]
[202.12330627 29.07300568]
[195.89076233 45.67348099]
[180.85372925 55.36164093]
[162.85049438 54.15473557]
[153.62200928 65.97992706]
[144.39353943 77.80513000]
[135.16506958 89.63032532]
[129.52937317 104.95821381]
[118.90812683 113.48357391]
[107.88650513 114.49771881]
[100.44110870 109.77462006]
[96.79640198 124.32508850]
[93.15170288 138.87556458]
[89.50699615 153.42602539]
[85.86229706 167.97650146]
[82.21759033 182.52696228]
[78.57289124 197.07743835]
[76.37193298 211.91508484]
[75.63591766 226.89701843]
[74.89990234 241.87895203]
[81.95073700 256.04214478]
[73.59825897 268.37445068]
[72.86224365 283.35635376]
[72.49412537 298.35183716]
[72.49412537 313.35183716]
[72.49412537 328.35183716]
[72.49412537 343.35183716]
[72.49412537 358.35183716]
[72.49412537 373.35183716]
[72.49412537 388.35183716]
[72.49412537 403.35183716]
[72.49412537 418.35183716]
[72.49412537 433.35183716]
[80.23143005 447.15200806]
[72.49412537 459.87930298]
[72.49412537 474.87930298]
[72.49412537 489.87930298]
[72.49412537 504.87930298]
[72.49412537 519.87927246]
[78.54046631 535.71844482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[8 120]
[9 119]
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[16 112]
[17 111]
[20 110]
[21 109]
[23 107]
[24 106]
[25 105]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[61 94]
[62 93]
[63 92]
[64 91]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
