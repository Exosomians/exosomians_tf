%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUAUACUGCAUCAGCCGUCCUAAGCUUGGACGCGCCCCUCUGGGGUUACCUAAAGAUCAGGUAGCGGAAUUGGUGAGCCGGUGCUGAUGCUCCGAA\
) } def
/len { sequence length } bind def

/coor [
[82.13137054 347.16915894]
[67.19367981 349.56094360]
[52.24830627 347.21765137]
[38.75944901 340.36886597]
[28.04860497 329.68554688]
[21.16511536 316.21435547]
[18.78335381 301.27508545]
[21.13665962 286.33126831]
[27.99448395 272.84701538]
[38.68496323 262.14334106]
[52.16075516 255.26885986]
[67.10163879 252.89710999]
[69.42510986 238.07815552]
[71.74858093 223.25920105]
[74.07205963 208.44024658]
[76.39553070 193.62129211]
[78.71900177 178.80233765]
[81.04247284 163.98338318]
[83.36594391 149.16441345]
[74.62483215 136.97454834]
[59.84379959 134.42089844]
[45.06277084 131.86724854]
[30.28174019 129.31359863]
[15.50071049 126.75994110]
[3.67401600 136.99044800]
[-11.96249294 137.17372131]
[-24.02573586 127.22324371]
[-26.81981659 111.83730316]
[-19.02545738 98.28067780]
[-4.32291508 92.95439911]
[10.34571838 98.37336731]
[18.05436325 111.97890472]
[32.83539581 114.53256226]
[47.61642456 117.08621216]
[62.39745331 119.63986969]
[77.17848206 122.19351959]
[68.40287018 106.45912170]
[69.52144623 88.24288940]
[80.43280792 73.32195282]
[74.10528564 59.72186661]
[67.77775574 46.12177658]
[54.04906845 37.15209961]
[55.22273636 20.79500580]
[70.09139252 13.87727165]
[83.35944366 23.51526833]
[81.37784576 39.79425430]
[87.70537567 53.39434052]
[94.03289795 66.99443054]
[109.01657867 67.69403839]
[116.58381653 54.74271011]
[124.15106201 41.79138565]
[131.71830750 28.84005928]
[139.28555298 15.88873482]
[146.85278320 2.93740892]
[154.42002869 -10.01391697]
[148.97793579 -24.67398262]
[154.28100586 -39.38491058]
[167.82531738 -47.20064926]
[183.21563721 -44.43084717]
[193.18515015 -32.38331985]
[193.02653503 -16.74654198]
[182.81469727 -4.90371990]
[167.37135315 -2.44667363]
[159.80412292 10.50465202]
[152.23687744 23.45597839]
[144.66963196 36.40730286]
[137.10238647 49.35862732]
[129.53514099 62.30995560]
[121.96790314 75.26127625]
[130.72181702 88.59101105]
[132.17028809 104.32022095]
[126.11515808 118.74523163]
[114.10836792 128.53643799]
[128.70204163 132.00407410]
[143.29573059 135.47172546]
[157.88940430 138.93936157]
[172.48307800 142.40701294]
[188.03256226 137.19683838]
[200.13854980 148.25924683]
[196.34745789 164.21417236]
[180.55921936 168.64855957]
[169.01544189 157.00068665]
[154.42175293 153.53305054]
[139.82807922 150.06539917]
[125.23439789 146.59774780]
[110.64072418 143.13011169]
[98.18490601 151.48789978]
[95.86142731 166.30685425]
[93.53795624 181.12580872]
[91.21448517 195.94476318]
[88.89101410 210.76371765]
[86.56754303 225.58267212]
[84.24406433 240.40162659]
[81.92059326 255.22059631]
[95.41861725 262.05130005]
[106.14376831 272.72024536]
[113.04531097 286.18218994]
[115.44709015 301.11825562]
[113.11380768 316.06521606]
[106.27406311 329.55865479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 94]
[13 93]
[14 92]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[39 48]
[40 47]
[41 46]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
