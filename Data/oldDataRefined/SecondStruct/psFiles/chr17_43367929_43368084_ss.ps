%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGGUUCAGCUACGCGUCUCACCUUUUUUGGUCGAGGAUAAAGUAGAAAGAUAAGGUUUUGGGGUGAAUUUAUAUAGCAGGAGUCUGGUUUUUUUUAGUCAAUAAGUUGACUUUUUUUGUACGAUGUAACCUAGAAUCAGUUUUUCGGUUUUUUC\
) } def
/len { sequence length } bind def

/coor [
[91.04604340 278.77578735]
[77.78386688 285.78399658]
[63.13845444 289.02618408]
[48.15750504 288.27044678]
[33.91272736 283.57083130]
[21.42316628 275.26354980]
[11.58229733 263.94290161]
[5.09412050 250.41871643]
[2.42278576 235.65850830]
[3.75939536 220.71817017]
[9.00833130 206.66653442]
[17.79069328 194.51237488]
[4.03512478 200.49438477]
[-9.72044373 206.47637939]
[-13.07960892 224.24690247]
[-26.28855705 236.36970520]
[-43.96995163 238.16381836]
[-59.07629395 229.10237122]
[-72.58151245 235.62992859]
[-86.08673096 242.15750122]
[-99.59194183 248.68505859]
[-113.03118134 255.34741211]
[-126.40308380 262.14389038]
[-139.77499390 268.94036865]
[-144.43490601 284.04205322]
[-158.44731140 291.35153198]
[-173.49887085 286.53219604]
[-180.65977478 272.44329834]
[-175.68159485 257.44351196]
[-161.51777649 250.43197632]
[-146.57147217 255.56848145]
[-133.19956970 248.77200317]
[-119.82765961 241.97550964]
[-115.26422882 236.10841370]
[-106.11951447 235.17984009]
[-92.61429596 228.65228271]
[-79.10907745 222.12471008]
[-65.60385895 215.59715271]
[-65.23832703 203.40003967]
[-59.66911697 192.46116638]
[-49.90663528 184.90130615]
[-37.78073502 182.21560669]
[-25.59788132 184.97819519]
[-15.70244408 192.72080994]
[-1.94687581 186.73881531]
[11.80869293 180.75680542]
[24.01412773 172.03744507]
[34.13260269 160.96421814]
[44.25107956 149.89097595]
[54.36955643 138.81774902]
[64.48802948 127.74452209]
[74.60650635 116.67128754]
[84.72498322 105.59806061]
[84.91114807 93.91798401]
[92.87699890 85.37374878]
[104.51541138 84.37068939]
[114.85342407 73.50212860]
[125.19143677 62.63357544]
[135.52944946 51.76501846]
[145.86746216 40.89646149]
[156.20547485 30.02790642]
[166.54348755 19.15935135]
[176.88150024 8.29079533]
[187.21951294 -2.57776070]
[182.99110413 -17.27700615]
[186.66372681 -32.02178955]
[197.15388489 -42.87642288]
[211.57229614 -46.99533081]
[226.01918030 -43.36861420]
[236.35719299 -54.23717117]
[246.69520569 -65.10572815]
[247.16223145 -78.03202057]
[256.04351807 -86.87525177]
[268.16897583 -87.26023865]
[278.72238159 -97.91976929]
[289.27581787 -108.57929993]
[299.82922363 -119.23882294]
[310.38262939 -129.89836121]
[314.59347534 -145.14889526]
[329.04629517 -148.74969482]
[339.59970093 -159.40922546]
[350.15310669 -170.06874084]
[360.70651245 -180.72827148]
[371.25991821 -191.38780212]
[381.81332397 -202.04733276]
[392.36672974 -212.70686340]
[384.61666870 -225.64468384]
[380.32839966 -240.10363770]
[379.77145386 -255.17483521]
[382.98086548 -269.91085815]
[389.75488281 -283.38540649]
[399.66769409 -294.75146484]
[412.09616089 -303.29452515]
[426.25903320 -308.47760010]
[441.26599121 -309.97485352]
[456.17370605 -307.69216919]
[470.04507446 -301.77304077]
[482.00811768 -292.58956909]
[491.31082153 -280.71899414]
[497.36843872 -266.90753174]
[499.80017090 -252.02340698]
[498.45312500 -237.00221252]
[493.41201782 -222.78820801]
[484.99371338 -210.27488708]
[473.72741699 -200.24885559]
[460.32131958 -193.34036255]
[445.61813354 -189.98368835]
[430.54211426 -190.38981628]
[416.04098511 -194.53321838]
[403.02627563 -202.15345764]
[392.47286987 -191.49392700]
[381.91946411 -180.83439636]
[371.36605835 -170.17486572]
[360.81262207 -159.51533508]
[350.25921631 -148.85580444]
[339.70581055 -138.19627380]
[336.24981689 -123.70817566]
[321.04214478 -119.34494781]
[310.48873901 -108.68541718]
[299.93533325 -98.02588654]
[289.38192749 -87.36635590]
[278.82852173 -76.70683289]
[275.32305908 -59.53586197]
[257.56375122 -54.76771545]
[247.22575378 -43.89915848]
[236.88774109 -33.03060150]
[241.23233032 -18.78314209]
[237.83955383 -4.17680645]
[227.52305603 6.84300613]
[212.98036194 11.24833965]
[198.08807373 7.76025152]
[187.75006104 18.62880707]
[177.41204834 29.49736214]
[167.07403564 40.36591721]
[156.73602295 51.23447418]
[146.39801025 62.10303116]
[136.05999756 72.97158813]
[125.72198486 83.84014130]
[115.38397217 94.70869446]
[111.89926910 111.09377289]
[95.79821014 115.71652985]
[85.67974091 126.78976440]
[75.56126404 137.86299133]
[65.44278717 148.93623352]
[55.32431030 160.00946045]
[45.20583344 171.08268738]
[35.08736038 182.15591431]
[49.43716812 177.78750610]
[64.43160248 177.37896729]
[78.99799347 180.95950317]
[92.09428406 188.27299500]
[102.78359985 198.79621887]
[110.30124664 211.77639771]
[114.10942078 226.28494263]
[113.93569183 241.28393555]
[109.79249573 255.70039368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 46]
[13 45]
[14 44]
[18 38]
[19 37]
[20 36]
[21 35]
[22 33]
[23 32]
[24 31]
[47 147]
[48 146]
[49 145]
[50 144]
[51 143]
[52 142]
[53 141]
[56 139]
[57 138]
[58 137]
[59 136]
[60 135]
[61 134]
[62 133]
[63 132]
[64 131]
[69 126]
[70 125]
[71 124]
[74 122]
[75 121]
[76 120]
[77 119]
[78 118]
[80 116]
[81 115]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
