%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUUCCAGGCGGGCGACGCAACCGGCCCUUAGCUUGGGCCCAGUUGACGAACCUUCCGUCGAUACGAGUGGUGAUAUGGUGGUUGCGGCGUGCCG\
) } def
/len { sequence length } bind def

/coor [
[63.75897217 341.46694946]
[54.90267181 353.94992065]
[41.25443268 360.87698364]
[25.95051384 360.65634155]
[12.50764847 353.33868408]
[4.01490688 340.60559082]
[2.42385983 325.38299561]
[8.10011768 311.16894531]
[19.73931885 301.22976685]
[34.66685867 297.84936523]
[38.47167587 283.33993530]
[42.27649689 268.83050537]
[46.08131409 254.32109070]
[41.82539368 240.04747009]
[52.81012344 228.66122437]
[56.61494064 214.15180969]
[54.91725540 209.50375366]
[56.25907898 203.73593140]
[61.15644073 198.84999084]
[65.88306427 184.61415100]
[70.60968781 170.37831116]
[75.33631134 156.14247131]
[80.06293488 141.90664673]
[84.78955841 127.67080688]
[89.51618195 113.43496704]
[84.78955841 99.19913483]
[72.48697662 90.61738586]
[60.18439102 82.03562927]
[47.88180542 73.45388031]
[35.57922363 64.87213135]
[20.52985954 69.12074280]
[6.29172325 62.65471649]
[-0.41237313 48.52711487]
[3.58303952 33.40855789]
[16.39144897 24.43757057]
[31.96511841 25.84997368]
[42.95063400 36.97887421]
[44.16097260 52.56954956]
[56.46355820 61.15129852]
[68.76614380 69.73304749]
[81.06872559 78.31479645]
[93.37130737 86.89654541]
[92.60459137 81.86670685]
[92.62133026 76.65634155]
[93.44328308 71.36020660]
[99.07228851 57.45645523]
[104.70129395 43.55270386]
[110.33029938 29.64895439]
[115.95930481 15.74520302]
[121.58831024 1.84145153]
[127.21730804 -12.06229973]
[119.72642517 -25.78894043]
[122.86205292 -41.10892105]
[135.14364624 -50.78862000]
[150.77220154 -50.25757599]
[162.36840820 -39.76653290]
[164.45689392 -24.26903915]
[156.05151367 -11.08253956]
[141.12106323 -6.43329477]
[135.49206543 7.47045660]
[129.86305237 21.37420845]
[124.23404694 35.27795792]
[118.60504150 49.18170929]
[112.97603607 63.08546066]
[107.34703064 76.98921204]
[117.07045746 88.41090393]
[131.69438171 85.07308960]
[141.41291809 72.30870819]
[157.45452881 72.09258270]
[167.51342773 84.59049988]
[163.87330627 100.21513367]
[149.32655334 106.98059845]
[135.03219604 99.69700623]
[120.40827179 103.03482056]
[135.40594482 103.29897308]
[147.66380310 111.94448090]
[152.94587708 125.98370361]
[149.42681885 140.56506348]
[138.32270813 150.64965820]
[123.47084808 152.75251770]
[110.00360870 146.14695740]
[102.57489777 133.11567688]
[103.75201416 118.16159058]
[99.02539062 132.39743042]
[94.29877472 146.63327026]
[89.57215118 160.86909485]
[84.84552765 175.10493469]
[80.11890411 189.34077454]
[75.39228058 203.57661438]
[71.12436676 217.95661926]
[67.31954193 232.46604919]
[71.30332184 247.77748108]
[60.59073639 258.12591553]
[56.78591919 272.63534546]
[52.98109818 287.14474487]
[49.17628098 301.65417480]
[60.52410126 311.92480469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 96]
[11 95]
[12 94]
[13 93]
[15 91]
[16 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
