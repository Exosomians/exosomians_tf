%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:28 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCGAUCAGUUCACUUCGACACCCUCACCUCUUCCUUGUUUCUUUAGACAUUGACCAACACUAGUUAAU\
) } def
/len { sequence length } bind def

/coor [
[65.64542389 183.33943176]
[53.25812531 177.07719421]
[41.97908401 168.98747253]
[32.07571793 159.26203918]
[23.78283882 148.13150024]
[10.47767735 155.05773926]
[-2.82748532 161.98396301]
[-3.41726041 177.33152771]
[-11.61537743 190.31945801]
[-25.21658516 197.45408630]
[-40.56222534 196.81620789]
[-53.52439880 188.57740784]
[-60.61634445 174.95390320]
[-59.93037033 159.61033630]
[-51.65098953 146.67405701]
[-38.00532532 139.62484741]
[-22.66398430 140.35891724]
[-9.75371456 148.67880249]
[3.55144811 141.75257874]
[16.85661125 134.82633972]
[11.94793892 119.30108643]
[9.91226673 103.14607239]
[10.81601429 86.88839722]
[14.62969303 71.05854034]
[21.22887039 56.17299271]
[30.39822578 42.71744919]
[41.83857346 31.13094902]
[55.17663956 21.79153633]
[69.97721863 15.00394058]
[85.75739288 10.98963165]
[102.00228882 9.87959003]
[118.18184662 11.71003437]
[133.76815796 16.42123985]
[148.25267029 23.85948944]
[161.16276550 33.78208160]
[172.22193909 23.64822769]
[173.06988525 8.09449100]
[184.42979431 -2.02513480]
[199.25268555 -1.12089431]
[210.31184387 -11.25474739]
[221.37100220 -21.38860130]
[232.43016052 -31.52245331]
[243.48933411 -41.65630722]
[247.90191650 -57.45064163]
[263.85159302 -61.26375198]
[274.93069458 -49.17303085]
[269.74200439 -33.61637878]
[253.62318420 -30.59714699]
[242.56402588 -20.46329308]
[231.50486755 -10.32944012]
[220.44569397 -0.19558732]
[209.38653564 9.93826580]
[208.99543762 24.78355598]
[197.92424011 35.21826553]
[182.35578918 34.70738983]
[171.29663086 44.84123993]
[178.91957092 56.44086456]
[184.67134094 69.07327271]
[188.41554260 82.43896484]
[190.06340027 96.22102356]
[189.57586670 110.09268188]
[186.96447754 123.72503662]
[182.29115295 136.79487610]
[175.66671753 148.99230957]
[167.24819946 160.02812195]
[157.23524475 169.64068604]
[145.86523438 177.60205078]
[133.40774536 183.72346497]
[120.15817261 187.85980225]
[106.43064117 189.91297913]
[92.55064392 189.83432007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[35 56]
[36 55]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
