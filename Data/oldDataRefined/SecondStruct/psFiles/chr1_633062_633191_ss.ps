%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUACCAUGACUUGGAUGCUUAUGUGGCUGAUGCCGCCUGAUUAGAAGUUGAGGAUGUAUGAAGGGGGUAAUAAGGAUCUUGGUCCGCUGGACGCUGAGGAACUGCAACUGUUAGCUCAUCAUGAGGGC\
) } def
/len { sequence length } bind def

/coor [
[-6.14340305 168.01351929]
[-14.63755035 166.59822083]
[-22.52867699 163.19081116]
[-29.35797119 157.99771118]
[-34.73036194 151.32893372]
[-38.33736801 143.57954407]
[-53.25010681 145.19515991]
[-66.13662720 154.37384033]
[-79.62322998 148.05238342]
[-94.53596497 149.66799927]
[-109.44870758 151.28361511]
[-124.36144257 152.89924622]
[-139.27418518 154.51486206]
[-154.18692017 156.13047791]
[-158.30145264 168.48718262]
[-166.77973938 178.31140137]
[-178.31782532 184.14685059]
[-191.16181946 185.14657593]
[-203.37451172 181.19564819]
[-213.12756348 172.92314148]
[-218.97518921 161.60226440]
[-233.94824219 162.50103760]
[-248.92129517 163.39981079]
[-262.23306274 171.95008850]
[-275.40106201 164.98928833]
[-290.37411499 165.88804626]
[-305.34716797 166.78681946]
[-320.32022095 167.68559265]
[-335.29327393 168.58436584]
[-348.67294312 178.06678772]
[-363.45980835 170.97592163]
[-364.44241333 154.60624695]
[-350.60995483 145.79747009]
[-336.19204712 153.61132812]
[-321.21899414 152.71255493]
[-306.24594116 151.81378174]
[-291.27288818 150.91500854]
[-276.29983521 150.01623535]
[-264.05905151 141.53024292]
[-249.82006836 148.42675781]
[-234.84701538 147.52798462]
[-219.87396240 146.62921143]
[-212.80624390 131.01962280]
[-198.76873779 121.03984833]
[-181.52764893 119.47655487]
[-165.76396179 126.84351349]
[-155.80253601 141.21774292]
[-140.88980103 139.60212708]
[-125.97706604 137.98649597]
[-111.06432343 136.37088013]
[-96.15158844 134.75526428]
[-81.23884583 133.13964844]
[-69.41898346 124.07652283]
[-54.86572647 130.28242493]
[-39.95298767 128.66680908]
[-31.11875534 108.53108215]
[-11.99383736 97.43495178]
[10.11474991 99.78491211]
[26.66095734 114.81788635]
[40.99202347 110.38837433]
[55.32308960 105.95886230]
[69.65415192 101.52935028]
[83.98522186 97.09984589]
[90.07629395 87.10022736]
[101.30348206 83.77702332]
[111.85604095 88.85018921]
[126.28920746 84.76559448]
[140.72236633 80.68100739]
[151.89413452 69.47822571]
[166.24736023 73.45742798]
[180.68052673 69.37284088]
[195.11367798 65.28825378]
[209.54684448 61.20366669]
[223.97999573 57.11907578]
[238.14248657 52.17702103]
[251.98341370 46.39525223]
[258.05694580 32.05126190]
[272.17596436 26.38489723]
[285.81335449 32.26347733]
[299.65426636 26.48170853]
[313.49517822 20.69993973]
[327.33612061 14.91817093]
[341.10671997 8.97085857]
[354.73074341 2.69504595]
[368.27853394 -3.74367452]
[381.82635498 -10.18239498]
[395.37414551 -16.62111473]
[407.08444214 -28.88100433]
[422.10696411 -21.02220917]
[418.71392822 -4.41125822]
[401.81286621 -3.07331538]
[388.26507568 3.36540508]
[374.71725464 9.80412579]
[361.16946411 16.24284554]
[356.43161011 22.01262474]
[347.21871948 22.66915894]
[342.34387207 28.32366943]
[333.11788940 28.75909424]
[319.27694702 34.54086304]
[305.43603516 40.32263184]
[291.59512329 46.10440063]
[286.19165039 59.93690491]
[272.23733521 65.99761200]
[257.76516724 60.23617554]
[243.92425537 66.01794434]
[256.28057861 74.52212524]
[257.58065796 89.46567535]
[246.87854004 99.97589874]
[231.96093750 98.40570068]
[223.68170166 85.89753723]
[228.06459045 71.55223846]
[213.63142395 75.63682556]
[199.19827271 79.72141266]
[184.76510620 83.80599976]
[170.33193970 87.89059448]
[160.19253540 98.80121613]
[144.80696106 95.11417389]
[130.37379456 99.19876099]
[115.94063568 103.28334808]
[104.61930847 115.60596466]
[88.41472626 111.43090820]
[74.08366394 115.86042023]
[59.75259781 120.28993225]
[45.42153549 124.71944427]
[31.09046936 129.14895630]
[30.75648880 137.86499023]
[28.34357834 146.23049927]
[24.00028610 153.75802612]
[17.98740959 160.01078796]
[10.66235542 164.62817383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[21 42]
[22 41]
[23 40]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[66 119]
[67 118]
[68 117]
[70 115]
[71 114]
[72 113]
[73 112]
[74 111]
[75 105]
[76 104]
[79 101]
[80 100]
[81 99]
[82 98]
[83 96]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
