%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGACGAGUCUCGUACACAAAUUAGUCCGACUAGUCGACUUUGUGCCUGAAUUGUACGUAAAGUAGUACCGUUUGACAU\
) } def
/len { sequence length } bind def

/coor [
[119.31227875 208.35987854]
[116.96576691 193.54454041]
[114.61924744 178.72921753]
[112.27272797 163.91389465]
[109.92621613 149.09857178]
[107.57969666 134.28324890]
[91.50225067 132.85272217]
[78.30681610 124.54404449]
[70.62974548 111.60411835]
[69.73311615 97.13333130]
[75.31890869 84.34904480]
[65.13690186 73.33420563]
[54.95488739 62.31937027]
[39.39759827 61.53929520]
[29.22850227 50.22364044]
[30.06805801 35.39694977]
[19.88604546 24.38211060]
[9.70403481 13.36727333]
[-0.47797605 2.35243559]
[-10.65998745 -8.66240215]
[-16.17947197 -10.34079456]
[-19.96080399 -13.75093174]
[-21.62379837 -17.85430145]
[-21.29630470 -21.62279129]
[-30.11308289 -33.75804520]
[-38.92986298 -45.89330292]
[-47.74663925 -58.02855682]
[-55.53354645 -63.30855560]
[-56.66024780 -70.81780243]
[-64.99380493 -83.28984833]
[-79.93305969 -90.05377197]
[-81.27546692 -106.39788055]
[-67.64007568 -115.50875854]
[-53.05380249 -108.01391602]
[-52.52175903 -91.62339783]
[-44.18820572 -79.15135956]
[-35.61138535 -66.84533691]
[-26.79460716 -54.71007919]
[-17.97782707 -42.57482529]
[-9.16104889 -30.43956947]
[0.35485041 -18.84441376]
[10.53686142 -7.82957554]
[20.71887207 3.18526196]
[30.90088463 14.20009995]
[41.08289337 25.21493721]
[55.92974854 25.54125977]
[66.41266632 36.56682587]
[65.96972656 52.13735962]
[76.15173340 63.15219498]
[86.33374786 74.16703796]
[102.21841431 69.38362885]
[118.98443604 74.03115845]
[131.23236084 87.50337982]
[134.55439758 106.22789764]
[149.45042419 107.99095917]
[164.34645081 109.75402069]
[179.24247742 111.51708221]
[189.67619324 100.03156281]
[204.87507629 96.90533447]
[218.99487305 103.34049988]
[226.60620117 116.86260223]
[224.78236389 132.27212524]
[214.22465515 143.64378357]
[198.99275208 146.60494995]
[184.94360352 140.01698303]
[177.47941589 126.41310883]
[162.58338928 124.65004730]
[147.68736267 122.88698578]
[132.79133606 121.12392426]
[122.39501953 131.93672180]
[124.74153900 146.75205994]
[127.08805847 161.56738281]
[129.43457031 176.38270569]
[131.78108215 191.19802856]
[134.12760925 206.01335144]
[146.20932007 216.56854248]
[145.34585571 232.58833313]
[132.19958496 241.78373718]
[116.85521698 237.10081482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[11 50]
[12 49]
[13 48]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[24 40]
[25 39]
[26 38]
[27 37]
[29 36]
[30 35]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
