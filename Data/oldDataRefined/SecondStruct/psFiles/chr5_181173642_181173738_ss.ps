%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUACGUCCAAAGGCAUCACAUCACCAAUAGUGCAAGCGGAGUGUGCGCUUUCCAGGGGCCAAGCUUUGGCCCGCCUUUGUGGAGGAAGACGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[107.18578339 309.08428955]
[106.44570160 293.94400024]
[110.93149567 279.46459961]
[120.10148621 267.39450073]
[132.84835815 259.19125366]
[122.47296143 248.50480652]
[126.94544983 233.32891846]
[123.60763550 218.70500183]
[120.26982117 204.08108521]
[116.93200684 189.45716858]
[113.12718201 174.94773865]
[108.85926819 160.56771851]
[104.59135437 146.18769836]
[100.32344055 131.80769348]
[96.05552673 117.42766571]
[96.90101624 132.40382385]
[92.41748810 146.71807861]
[83.17955780 158.53588867]
[70.37118530 166.34265137]
[55.63392258 169.13783264]
[40.85653305 166.56320190]
[27.93292236 158.94873047]
[18.51941490 147.27029419]
[13.82246876 133.02462769]
[14.44405460 118.03751373]
[20.30451012 104.22972870]
[30.65274429 93.37090302]
[44.16250229 86.85273743]
[59.10233688 85.51062012]
[73.55789185 89.51673126]
[65.37487030 76.94540405]
[57.19184875 64.37408447]
[49.00882339 51.80276489]
[40.82580185 39.23144150]
[32.64277649 26.66012192]
[18.62976265 19.31532860]
[18.17113113 4.42778587]
[9.98810673 -8.14353561]
[-3.72005773 -18.11963463]
[2.07137394 -34.05373764]
[18.98599434 -32.89963531]
[22.55942917 -16.32655907]
[30.74245262 -3.75523734]
[44.17016220 2.69037032]
[45.21409988 18.47709846]
[53.39712143 31.04841995]
[61.58014679 43.61973953]
[69.76316833 56.19106293]
[77.94618988 68.76238251]
[86.12921906 81.33370209]
[80.15321350 67.57553101]
[84.94569397 53.36173248]
[98.03230286 46.03092575]
[112.65638733 49.36801910]
[121.26750183 61.65007019]
[119.41970825 76.53582001]
[108.06509399 86.34042358]
[120.89223480 78.56453705]
[133.71937561 70.78865051]
[146.54652405 63.01276016]
[159.37365723 55.23687363]
[172.20080566 47.46098328]
[185.02793884 39.68509674]
[195.43827820 26.30372429]
[211.17857361 32.60289383]
[209.48292542 49.47183228]
[192.80383301 52.51223755]
[179.97668457 60.28812408]
[167.14955139 68.06401062]
[154.32240295 75.83990479]
[141.49526978 83.61579132]
[128.66812134 91.39167786]
[115.84098053 99.16757202]
[110.43554688 113.15975189]
[114.70346069 127.53977203]
[118.97137451 141.91978455]
[123.23928833 156.29980469]
[127.50720215 170.67982483]
[132.24545288 175.72023010]
[133.40171814 181.52809143]
[131.55592346 186.11935425]
[134.89373779 200.74327087]
[138.23155212 215.36718750]
[141.56936646 229.99110413]
[152.18350220 241.72357178]
[147.47227478 255.85345459]
[162.51606750 257.71365356]
[176.01495361 264.60971069]
[186.33889771 275.70889282]
[192.24122620 289.67092896]
[193.00921631 304.80981445]
[188.55010986 319.29748535]
[179.40237427 331.38446045]
[166.67063904 339.61117554]
[151.89233398 342.98422241]
[136.85200500 341.09628296]
[123.36584473 334.17535400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 86]
[7 84]
[8 83]
[9 82]
[10 81]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[37 43]
[38 42]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
