%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUGUGGGAUCGGUUCCUACCGAAGCUAGGUAACUGGAGACCCAAUGCCCGGGUCGUGCGAAGGCGACGUGGUGAGACGGGUGC\
) } def
/len { sequence length } bind def

/coor [
[81.10762024 125.57434082]
[69.83415222 113.38182831]
[56.66896820 120.57056427]
[43.50378036 127.75930023]
[30.33859825 134.94802856]
[21.93456841 148.35261536]
[7.05601692 147.66128540]
[-6.10916805 154.85002136]
[-19.27435303 162.03875732]
[-32.43953705 169.22749329]
[-45.60472107 176.41622925]
[-58.76990891 183.60496521]
[-64.65119171 198.53111267]
[-80.02951813 203.10130310]
[-93.10794830 193.80967712]
[-93.85382843 177.78398132]
[-81.69498444 167.31773376]
[-65.95864105 170.43977356]
[-52.79345703 163.25103760]
[-39.62827301 156.06230164]
[-26.46308708 148.87356567]
[-13.29790306 141.68482971]
[-0.13271797 134.49609375]
[7.32964802 121.60570526]
[23.14986229 121.78285217]
[36.31504822 114.59411621]
[49.48023224 107.40538025]
[62.64541626 100.21664429]
[65.57176971 85.50486755]
[56.15973663 73.82524109]
[46.74769974 62.14561844]
[37.33566666 50.46599579]
[21.85299301 45.06055069]
[19.05915260 28.90114212]
[31.82821083 18.61118507]
[47.02445221 24.77610588]
[49.01528931 41.05396271]
[58.42732620 52.73358536]
[67.83936310 64.41320801]
[77.25139618 76.09283447]
[96.13718414 69.24929047]
[114.16564941 74.71354675]
[124.58087158 88.88867950]
[139.42819214 86.75395966]
[154.27551270 84.61923218]
[169.12283325 82.48451233]
[174.90272522 68.32329559]
[186.91552734 59.01794052]
[201.87370300 56.98834610]
[215.74658203 62.68036270]
[224.84642029 74.47267151]
[239.65327454 72.07328033]
[254.41494751 69.40998077]
[269.17660522 66.74668121]
[281.38372803 56.68205261]
[295.28256226 62.03664780]
[310.04425049 59.37335205]
[324.80590820 56.71005249]
[339.56756592 54.04675674]
[354.32925415 51.38345718]
[363.13577271 38.26017761]
[378.65841675 35.28979492]
[391.68786621 44.23458481]
[394.49395752 59.78776169]
[385.41192627 72.72190094]
[369.82992554 75.36341095]
[356.99252319 66.14512634]
[342.23086548 68.80842590]
[327.46920776 71.47171783]
[312.70751953 74.13501740]
[297.94586182 76.79831696]
[286.79458618 86.67244720]
[271.83990479 81.50834656]
[257.07824707 84.17164612]
[242.31657410 86.83494568]
[236.15434265 91.22032928]
[226.98114014 89.31999207]
[221.57218933 103.19834900]
[209.86488342 112.56824493]
[194.94081116 114.83506775]
[180.79299927 109.29103851]
[171.25755310 97.33183289]
[156.41023254 99.46656036]
[141.56291199 101.60128021]
[126.71559143 103.73600006]
[122.33195496 117.18807983]
[111.38385010 127.09103394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[29 40]
[30 39]
[31 38]
[32 37]
[43 85]
[44 84]
[45 83]
[46 82]
[51 77]
[52 75]
[53 74]
[54 73]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
