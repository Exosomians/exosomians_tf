%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUGAAAGUAUGUACGUAAGGAACCUUUCGACUUGUUUUACUCACUUUUGAGAUAUGGCAGUAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[64.38643646 356.32916260]
[51.29224777 365.17889404]
[35.79163361 362.09564209]
[27.08083153 348.90859985]
[30.32780457 333.44146729]
[43.60618210 324.87057495]
[46.53253555 310.15878296]
[49.45889282 295.44702148]
[44.35322952 281.45480347]
[54.63414001 269.42929077]
[57.56049347 254.71749878]
[60.48684692 240.00572205]
[63.41320419 225.29394531]
[66.33956146 210.58216858]
[69.26591492 195.87039185]
[60.60394669 186.12414551]
[59.19918442 172.96356201]
[65.80159760 161.26675415]
[78.15039825 155.50273132]
[81.65207672 140.91719055]
[85.15376282 126.33164215]
[88.65544128 111.74609375]
[77.72360992 88.96031189]
[69.88613129 76.17070770]
[62.53749084 70.29602814]
[62.00342941 62.72153473]
[54.67411041 49.63409424]
[41.18029022 41.37410736]
[41.71223831 26.48900414]
[34.38291931 13.40156364]
[27.05360222 0.31412333]
[12.69108963 -7.60106993]
[12.63516235 -24.00012207]
[26.94335365 -32.01309586]
[40.89662170 -23.39692688]
[40.14104080 -7.01519537]
[47.47035980 6.07224464]
[54.79967880 19.15968513]
[67.76925659 26.48357010]
[67.76155090 42.30477524]
[75.09087372 55.39221573]
[82.67572784 68.33322906]
[90.51320648 81.12283325]
[84.62307739 67.32767487]
[87.50200653 52.60654068]
[98.15511322 42.04664993]
[112.90097809 39.29720688]
[126.64383698 45.30834198]
[134.63453674 58.00277710]
[134.11170959 72.99366760]
[125.25604248 85.10056305]
[111.12744141 90.13967896]
[125.83921814 87.21332550]
[140.55099487 84.28697205]
[155.26277161 81.36061859]
[167.22883606 70.14698792]
[182.84254456 75.16138458]
[186.04185486 91.24542236]
[173.53559875 101.85322571]
[158.18913269 96.07239532]
[143.47735596 98.99874878]
[128.76557922 101.92510223]
[114.05379486 104.85146332]
[103.24098969 115.24777222]
[99.73931122 129.83331299]
[96.23762512 144.41886902]
[92.73594666 159.00440979]
[102.14089203 173.60163879]
[98.28459930 190.18978882]
[83.97769165 198.79673767]
[81.05133820 213.50852966]
[78.12498474 228.22030640]
[75.19863129 242.93208313]
[72.27227020 257.64385986]
[69.34591675 272.35565186]
[74.24227142 287.40011597]
[64.17066956 298.37335205]
[61.24431610 313.08514404]
[58.31795883 327.79693604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[8 77]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[19 67]
[20 66]
[21 65]
[22 64]
[23 43]
[24 42]
[26 41]
[27 40]
[29 38]
[30 37]
[31 36]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
