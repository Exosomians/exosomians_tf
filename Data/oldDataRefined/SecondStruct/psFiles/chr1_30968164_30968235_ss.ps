%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:53 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCGAGUCUUGUUACGAGAGUAGUCACUUGAUAUCAGAUUCACUCCCGUUCACACAUAGUAGGAACGGUC\
) } def
/len { sequence length } bind def

/coor [
[89.55553436 134.89569092]
[79.04589081 129.79466248]
[70.69157410 121.62897491]
[65.35189056 111.23854828]
[63.57608414 99.69213867]
[65.54680634 88.17739105]
[52.66534805 80.49182129]
[39.78388977 72.80625153]
[26.90243149 65.12067413]
[14.02097130 57.43510818]
[1.13951218 49.74953461]
[-14.67595005 49.32323456]
[-21.64130020 36.15763092]
[-34.52275848 28.47206116]
[-49.66554260 32.12361526]
[-62.61968994 24.14585114]
[-66.00756836 9.68701839]
[-78.88903046 2.00144696]
[-91.77049255 -5.68412399]
[-104.65194702 -13.36969566]
[-118.86303711 -7.13875914]
[-134.01528931 -10.48377800]
[-144.28233337 -22.11852455]
[-145.71629333 -37.56919861]
[-137.76579285 -50.89470291]
[-123.48794556 -56.97111130]
[-108.37287903 -53.46191406]
[-98.23265076 -41.71647644]
[-96.96637726 -26.25115395]
[-84.08491516 -18.56558418]
[-71.20346069 -10.88001251]
[-58.32199860 -3.19444108]
[-43.98897171 -7.08030415]
[-30.81585693 0.53045648]
[-26.83718872 15.59060097]
[-13.95572948 23.27617264]
[0.93836421 23.15274811]
[8.82508373 36.86807632]
[21.70654297 44.55364609]
[34.58800125 52.23921967]
[47.46946335 59.92478943]
[60.35092163 67.61035919]
[73.23238373 75.29592896]
[88.73109436 65.36175537]
[107.10818481 64.27507782]
[123.66965485 72.31346893]
[134.18528748 87.42372131]
[135.96910095 105.74627686]
[149.97666931 111.11174774]
[163.98422241 116.47722626]
[177.99179077 121.84269714]
[191.99934387 127.20816803]
[206.00689697 132.57363892]
[220.30038452 126.38220215]
[234.42961121 132.02310181]
[240.24412537 145.68791199]
[254.25167847 151.05339050]
[271.20562744 151.07272339]
[275.88034058 167.36944580]
[261.51461792 176.37287903]
[248.88619995 165.06094360]
[234.87864685 159.69546509]
[221.42308044 165.97904968]
[207.14099121 160.73724365]
[200.64143372 146.58120728]
[186.63386536 141.21572876]
[172.62631226 135.85025024]
[158.61875916 130.48478699]
[144.61119080 125.11930847]
[130.60363770 119.75383759]
[122.77630615 128.42597961]
[112.60623169 134.17425537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[17 32]
[18 31]
[19 30]
[20 29]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
