%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGAGUGAACGGUUCUGAUGUUAUCGUGAGCGCAAAUAGUCAAUACGAACACACUUCGACCAAUAACGUUAAGUAACAAGAGUUUUAUGAAA\
) } def
/len { sequence length } bind def

/coor [
[93.35163116 152.37083435]
[85.35615540 165.06227112]
[77.36067963 177.75369263]
[69.36520386 190.44512939]
[61.36972809 203.13655090]
[65.11228943 218.49131775]
[56.82994843 231.95156860]
[41.43647385 235.53158569]
[28.06454086 227.10739136]
[24.64747810 211.67692566]
[33.21257019 198.39480591]
[48.67829895 195.14108276]
[56.67377472 182.44964600]
[64.66925049 169.75822449]
[72.66472626 157.06678772]
[80.66020203 144.37536621]
[86.22816467 130.44705200]
[89.18492126 115.74135590]
[81.24748993 103.61933136]
[84.10362244 89.41409302]
[96.10938263 81.30188751]
[99.06613922 66.59619141]
[102.02289581 51.89049149]
[104.97964478 37.18479156]
[107.93640137 22.47909164]
[110.89315796 7.77339172]
[102.35884857 -0.83875680]
[99.16601562 -12.40968323]
[102.01802063 -23.94454002]
[110.06935120 -32.51768112]
[121.17155457 -36.01464081]
[125.09375000 -50.49277496]
[129.01594543 -64.97090912]
[132.93815613 -79.44904327]
[120.96511078 -88.77223206]
[113.49383545 -101.93366241]
[111.63575745 -116.91235352]
[115.64311218 -131.42196655]
[124.87522125 -143.25973511]
[137.90069580 -150.64094543]
[152.71932983 -152.46789551]
[156.64152527 -166.94602966]
[160.56372070 -181.42416382]
[148.15644836 -190.13250732]
[139.47839355 -202.56098938]
[135.57749939 -217.20881653]
[136.92478943 -232.30718994]
[143.35757446 -246.03288269]
[154.09909058 -256.72848511]
[167.85221863 -263.10244751]
[182.95620728 -264.38504028]
[197.58718872 -260.42144775]
[209.97839355 -251.69024658]
[218.63352966 -239.24578857]
[222.50743103 -224.59078979]
[221.13232422 -209.49493408]
[214.67424011 -195.78111267]
[203.91304016 -185.10533142]
[190.14819336 -178.75672913]
[175.04185486 -177.50195312]
[171.11965942 -163.02381897]
[167.19746399 -148.54568481]
[179.06755066 -139.48863220]
[186.58610535 -126.54194641]
[188.58047485 -111.66285706]
[184.71589661 -97.11457062]
[175.55117798 -85.12201691]
[162.45811462 -77.53157043]
[147.41629028 -75.52684021]
[143.49407959 -61.04870605]
[139.57188416 -46.57057571]
[135.64968872 -32.09244156]
[145.72883606 -16.98733711]
[141.69360352 1.03956091]
[125.59886169 10.73014736]
[122.64210510 25.43584633]
[119.68534851 40.14154434]
[116.72859192 54.84724426]
[113.77183533 69.55294800]
[110.81507874 84.25864410]
[118.75251007 96.38066864]
[115.89637756 110.58590698]
[103.89061737 118.69811249]
[100.93386078 133.40380859]
[113.02729797 124.52975464]
[127.82796478 122.09249878]
[142.12831116 126.62022400]
[152.82917786 137.13169861]
[157.61154175 151.34890747]
[155.43894958 166.19073486]
[146.78225708 178.44070435]
[133.51751709 185.44403076]
[118.51941681 185.68296814]
[105.03831482 179.10574341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[17 84]
[18 83]
[21 80]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[31 72]
[32 71]
[33 70]
[34 69]
[41 62]
[42 61]
[43 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
