%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:34 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUUUUAAUAACACGGGGCACACUCCUAGCUUGAGUGCUGGAAGUCUAAUACUCUGACUGCGCGAUGGAUGACGCGAUUGCUCCGUGGAUCA\
) } def
/len { sequence length } bind def

/coor [
[77.61140442 341.41986084]
[63.64624405 347.23617554]
[48.56708527 348.45031738]
[33.85123062 344.94335938]
[20.94039154 337.05886841]
[11.09943771 325.56927490]
[5.29248619 311.60021973]
[4.08844328 296.52023315]
[7.60526943 281.80673218]
[15.49842072 268.90118408]
[26.99460793 259.06793213]
[40.96755219 253.27033997]
[56.04832458 252.07640076]
[59.52562714 237.48501587]
[63.00292969 222.89364624]
[66.48023224 208.30226135]
[69.95753479 193.71087646]
[73.43483734 179.11950684]
[76.91213989 164.52812195]
[80.38944244 149.93673706]
[83.86674500 135.34536743]
[74.70941162 129.49513245]
[67.53036499 121.33774567]
[62.89114380 111.51127625]
[61.15464783 100.78437805]
[62.45670700 89.99611664]
[66.69546509 79.99038696]
[55.57068634 69.92861176]
[44.44590378 59.86684418]
[33.32112122 49.80507278]
[22.19634056 39.74330139]
[6.42645121 40.78548813]
[-5.40626049 30.30872726]
[-6.28165770 14.52870178]
[4.31961823 2.80741715]
[20.10801697 2.09890509]
[31.71656418 12.82351303]
[32.25811005 28.61852074]
[43.38289261 38.68029022]
[54.50767517 48.74206161]
[65.63245392 58.80383301]
[76.75724030 68.86560822]
[90.36273956 62.36092758]
[105.42011261 61.52664566]
[110.34049225 47.35660934]
[115.26086426 33.18657303]
[120.18123627 19.01653671]
[110.57627869 6.94391060]
[109.04576111 -8.40734577]
[116.07807922 -22.13870239]
[129.42922974 -29.86853027]
[144.83891296 -29.13027382]
[157.38996887 -20.15950394]
[163.07737732 -5.81876373]
[160.08633423 9.31587124]
[149.37124634 20.41499138]
[134.35127258 23.93691063]
[129.43089294 38.10694504]
[124.51052856 52.27698135]
[119.59014893 66.44702148]
[130.89012146 76.43357086]
[137.53643799 89.97044373]
[152.50294495 88.96855164]
[167.46945190 87.96666718]
[182.43595886 86.96477509]
[190.58351135 73.75882721]
[204.95002747 67.89516449]
[220.01130676 71.62847137]
[229.97596741 83.52323151]
[231.01239014 99.00565338]
[222.72206116 112.12243652]
[208.29277039 117.82991028]
[193.27287292 113.93343353]
[183.43783569 101.93128204]
[168.47134399 102.93316650]
[153.50483704 103.93505859]
[138.53833008 104.93695068]
[131.58180237 122.63108826]
[117.06285858 134.90609741]
[98.45812225 138.82266235]
[94.98081970 153.41404724]
[91.50351715 168.00541687]
[88.02621460 182.59680176]
[84.54891205 197.18818665]
[81.07160950 211.77955627]
[77.59430695 226.37094116]
[74.11700439 240.96232605]
[70.63970184 255.55369568]
[83.56109619 263.42089844]
[93.41744232 274.89727783]
[99.24311066 288.85855103]
[100.46736145 303.93688965]
[96.97025299 318.65509033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 80]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[44 60]
[45 59]
[46 58]
[47 57]
[62 77]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
