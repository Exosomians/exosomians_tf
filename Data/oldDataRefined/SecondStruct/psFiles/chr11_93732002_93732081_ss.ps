%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUACAAUGUCCAGAGUAACAGUGGUGACGUUAUACGUAUGACACUACCUUCGUAUUGGACAGAGUUAAAUCGGUGUA\
) } def
/len { sequence length } bind def

/coor [
[120.68928528 202.29029846]
[116.66669464 187.83973694]
[112.64410400 173.38917542]
[108.62152100 158.93859863]
[97.75452423 148.75245667]
[101.50758362 133.38284302]
[97.48499298 118.93227386]
[84.91896820 111.71830750]
[81.03327942 97.75952911]
[88.06444550 85.09031677]
[84.04185486 70.63975525]
[80.01926422 56.18918991]
[75.99667358 41.73862457]
[71.97408295 27.28806305]
[67.95149231 12.83749866]
[63.92890549 -1.61306417]
[48.83855820 -2.84055281]
[35.10445786 -9.14503384]
[24.37617111 -19.74805641]
[17.93496513 -33.35617828]
[16.54080582 -48.31872177]
[20.34274292 -62.82802200]
[28.86323547 -75.13778687]
[41.05804443 -83.77329254]
[37.03545380 -98.22385406]
[33.01286697 -112.67441559]
[28.99027634 -127.12497711]
[24.96768761 -141.57554626]
[20.94509888 -156.02610779]
[9.79038048 -167.24586487]
[13.83116436 -181.58187866]
[9.80857468 -196.03244019]
[5.78598595 -210.48300171]
[-8.52380848 -216.78884888]
[-15.38600826 -230.84033203]
[-11.56049156 -246.00277710]
[1.14644861 -255.11692810]
[16.73498535 -253.87936401]
[27.84468651 -242.87442017]
[29.22989082 -227.29830933]
[20.23654938 -214.50558472]
[24.25913811 -200.05502319]
[28.28172684 -185.60446167]
[39.14872360 -175.41831970]
[35.39566040 -160.04869080]
[39.41825104 -145.59812927]
[43.44084167 -131.14756775]
[47.46342850 -116.69700623]
[51.48601913 -102.24644470]
[55.50860596 -87.79588318]
[70.41136169 -86.70349884]
[84.06677246 -80.56681824]
[94.81880951 -70.10889435]
[101.35631561 -56.57809830]
[102.87287140 -41.59910583]
[99.16624451 -26.97785187]
[90.66508484 -14.48376179]
[78.37947083 -5.63565350]
[82.40206146 8.81490993]
[86.42464447 23.26547241]
[90.44723511 37.71603775]
[94.46982574 52.16659927]
[98.49241638 66.61716461]
[102.51500702 81.06772614]
[115.08103180 88.28169250]
[118.96672058 102.24047089]
[111.93555450 114.90968323]
[115.95814514 129.36024475]
[127.11286926 140.58000183]
[123.07208252 154.91601562]
[127.09467316 169.36657715]
[131.11726379 183.81713867]
[135.13984680 198.26770020]
[149.72601318 203.56141663]
[158.38699341 216.43647766]
[157.79244995 231.94215393]
[148.17102051 244.11621094]
[133.22232056 248.27746582]
[118.69444275 242.82583618]
[110.17364502 229.85757446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[6 68]
[7 67]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
