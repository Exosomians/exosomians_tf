%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:30 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGGAAAACAUCAAGUACUCGCACUACUAACCCACAAGUAUGCGAACACACUCUACACGGUGGGAACUUGGAACAAUGCUGCACCCGUGUAAUGGGCAGACUGGACUUGAAGUUCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[77.73462677 369.06900024]
[83.78096771 353.22985840]
[83.78096771 338.22985840]
[83.78096771 323.22985840]
[83.78096771 308.22985840]
[83.78096771 293.22985840]
[83.78096771 278.22985840]
[81.01269531 274.20812988]
[80.82219696 268.38073730]
[84.18360901 262.46884155]
[84.94952393 247.48841858]
[77.87217712 234.38267517]
[86.30403137 220.99557495]
[87.06993866 206.01513672]
[87.83584595 191.03469849]
[88.60175323 176.05427551]
[89.36766052 161.07383728]
[90.13357544 146.09339905]
[70.86676788 137.05674744]
[57.53781128 120.46730804]
[52.86336899 99.70627594]
[38.06961060 97.22741699]
[23.27585602 94.74855042]
[8.48209858 92.26969147]
[-6.31165791 89.79082489]
[-15.41203499 91.46865845]
[-21.44955635 87.05511475]
[-36.17518234 84.19924927]
[-50.90080643 81.34337616]
[-65.62643433 78.48751068]
[-76.87808228 89.17301178]
[-92.26601410 91.17082214]
[-105.87324524 83.71275330]
[-112.46752167 69.66657257]
[-109.51320648 54.43333054]
[-98.14630127 43.87051773]
[-82.73760223 42.03975296]
[-69.21208191 49.64500046]
[-62.77056503 63.76188660]
[-48.04494095 66.61775208]
[-33.31931305 69.47361755]
[-18.59368896 72.32949066]
[-3.83279514 74.99707031]
[10.96096134 77.47592926]
[25.75471878 79.95479584]
[40.54847336 82.43366241]
[55.34223175 84.91252136]
[61.79711914 72.38681030]
[71.66591644 62.32868576]
[84.06671143 55.63696671]
[97.89134979 52.90964127]
[111.90442657 54.39043045]
[124.85369110 59.94700623]
[134.68975830 48.62217331]
[144.52581787 37.29734421]
[154.06945801 25.72500420]
[163.31443787 13.91271019]
[172.55941772 2.10041547]
[181.80439758 -9.71187878]
[191.04939270 -21.52417374]
[200.29437256 -33.33646774]
[209.53935242 -45.14876175]
[218.63273621 -57.07815552]
[227.57302856 -69.12270355]
[229.58538818 -84.81540680]
[243.38391113 -90.42343903]
[238.89910889 -105.16089630]
[243.89376831 -119.54515839]
[256.25445557 -128.12869263]
[271.12136841 -127.79187012]
[280.06164551 -139.83641052]
[289.00195312 -151.88096619]
[293.58737183 -168.20304871]
[310.54092407 -168.31523132]
[315.34194946 -152.05526733]
[301.04650879 -142.94067383]
[292.10620117 -130.89611816]
[283.16589355 -118.85157776]
[287.79257202 -104.71891785]
[283.15533447 -90.40249634]
[270.83319092 -81.45721436]
[255.42845154 -81.48313904]
[254.05557251 -66.65193939]
[239.61756897 -60.18240356]
[230.67727661 -48.13785934]
[229.19989014 -40.80653000]
[221.35163879 -35.90378189]
[212.10665894 -24.09148598]
[202.86167908 -12.27919102]
[193.61669922 -0.46689683]
[184.37171936 11.34539795]
[175.12673950 23.15769196]
[165.88175964 34.96998596]
[165.58300781 39.84322357]
[162.14140320 44.54962158]
[155.85064697 47.13340759]
[146.01458740 58.45824051]
[136.17852783 69.78307343]
[142.31947327 79.23919678]
[146.03909302 89.88315582]
[147.12457275 101.10594940]
[145.51380920 112.26547241]
[141.29895020 122.72321320]
[134.72117615 131.88084412]
[126.15680695 139.21440125]
[116.09587097 144.30430603]
[105.11400604 146.85931396]
[104.34809875 161.83975220]
[103.58219147 176.82017517]
[102.81627655 191.80061340]
[102.05036926 206.78105164]
[101.28446198 221.76147461]
[108.30702209 235.93872070]
[99.92995453 248.25431824]
[99.16404724 263.23474121]
[98.78096771 278.22985840]
[98.78096771 293.22985840]
[98.78096771 308.22985840]
[98.78096771 323.22985840]
[98.78096771 338.22985840]
[98.78096771 353.22985840]
[104.82730865 369.06900024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 121]
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[10 115]
[11 114]
[13 112]
[14 111]
[15 110]
[16 109]
[17 108]
[18 107]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[27 42]
[28 41]
[29 40]
[30 39]
[53 98]
[54 97]
[55 96]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[63 85]
[64 84]
[66 82]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
