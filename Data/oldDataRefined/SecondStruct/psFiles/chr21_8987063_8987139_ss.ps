%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:14 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACGGCGCGCCACGGCGGCCGCCGCCACUCCGGGGCGCGCACACAGGGCCGACGCCAGCCGGCGCGAGCUCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[80.26065826 140.31227112]
[70.76585388 134.06002808]
[63.14638138 125.62287140]
[57.89102554 115.54204559]
[55.33691025 104.46421051]
[55.64787674 93.10000610]
[41.41983032 88.34998322]
[27.19178391 83.59996796]
[12.96373844 78.84994507]
[-1.26430857 74.09992218]
[-15.49235535 69.34990692]
[-29.72040176 64.59988403]
[-45.26052475 67.56892395]
[-54.88264847 56.19949341]
[-69.11069489 51.44947052]
[-83.33874512 46.69945145]
[-102.63521576 51.83926773]
[-115.23168945 37.39189529]
[-129.79582214 33.80216217]
[-144.35993958 30.21242523]
[-159.95249939 35.29219437]
[-171.96543884 24.12879181]
[-168.04086304 8.20617485]
[-152.21604919 3.90416288]
[-140.77020264 15.64829826]
[-126.20608521 19.23803329]
[-111.64195251 22.82776833]
[-103.10706329 16.61552811]
[-92.33312225 16.27231026]
[-83.04327393 22.16751289]
[-78.58872223 32.47140503]
[-64.36067963 37.22142410]
[-50.13262939 41.97144699]
[-35.61019135 38.66265488]
[-24.97038269 50.37183762]
[-10.74233532 55.12185669]
[3.48571134 59.87187958]
[17.71375847 64.62189484]
[31.94180489 69.37191772]
[46.16984940 74.12194061]
[60.39789963 78.87195587]
[72.71660614 64.35821533]
[89.94293213 56.25555801]
[108.97827911 56.02146912]
[126.39865875 63.69804764]
[139.07055664 77.90446472]
[144.71459961 96.08533478]
[159.66596985 97.29233551]
[174.61732483 98.49933624]
[189.56867981 99.70632935]
[204.54132080 100.61200714]
[219.52915955 101.21599579]
[228.51049805 98.37635803]
[235.10479736 102.15814972]
[250.05615234 103.36515045]
[265.00750732 104.57215118]
[279.95886230 105.77914429]
[294.53466797 98.26393890]
[308.18276978 107.35576630]
[306.86318970 123.70173645]
[291.93338013 130.48651123]
[278.75189209 120.73050690]
[263.80050659 119.52350616]
[248.84915161 118.31651306]
[233.89779663 117.10951233]
[218.92517090 116.20383453]
[203.93733215 115.59984589]
[196.93527222 118.55921173]
[188.36169434 114.65769196]
[173.41032410 113.45069122]
[158.45896912 112.24369812]
[143.50761414 111.03669739]
[139.33930969 121.61341858]
[132.64743042 130.80366516]
[123.86125946 138.01789856]
[113.54441833 142.79333496]
[102.35872650 144.82362366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[14 33]
[15 32]
[16 31]
[18 27]
[19 26]
[20 25]
[47 72]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
