%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAGCCCUCCUAGGAUAACCACGCCCCCGAAACAUACUAAUACCCGCAACUAAUCAUCAUCAAUGACCAACUUGUAACAAACAACCAC\
) } def
/len { sequence length } bind def

/coor [
[105.81515503 230.26937866]
[89.42001343 229.96919250]
[73.19218445 227.61373901]
[57.38827133 223.24028015]
[42.25820160 216.91796875]
[28.04122925 208.74678040]
[14.96217155 198.85592651]
[4.54229546 209.64602661]
[-5.87758017 220.43611145]
[-12.53099346 236.02998352]
[-29.35728645 233.95338440]
[-32.01983643 217.20982361]
[-16.66767693 210.01623535]
[-6.24780130 199.22615051]
[4.17207432 188.43605042]
[-4.69163322 177.74050903]
[-12.36730480 166.16279602]
[-18.76783752 153.83424377]
[-23.82060051 140.89480591]
[-27.46825218 127.49128723]
[-29.66940117 113.77579498]
[-30.39906693 99.90397644]
[-29.64897156 86.03324890]
[-27.42762566 72.32102203]
[-23.76023865 58.92288589]
[-18.68842506 45.99089432]
[-12.26974297 33.67179489]
[-4.57702780 22.10538483]
[4.30242157 11.42291832]
[14.26784229 1.74562037]
[25.20614815 -6.81669140]
[36.99320984 -14.16685295]
[49.49526978 -20.22145462]
[62.57045364 -24.91178894]
[76.07038879 -28.18463135]
[89.84187317 -30.00284004]
[103.72863007 -30.34578323]
[117.57308197 -29.20956993]
[131.21810913 -26.60709190]
[144.50888062 -22.56788254]
[157.29455566 -17.13777924]
[169.43006897 -10.37840366]
[180.77767944 -2.36645794]
[191.20864868 6.80713654]
[200.60456848 17.03827858]
[208.85884094 28.21086693]
[215.87777710 40.19811630]
[229.58096313 34.09706497]
[243.28414917 27.99601555]
[256.98733521 21.89496613]
[258.50164795 5.53471804]
[267.95346069 -7.79053354]
[282.72409058 -14.55019379]
[298.80133057 -13.01070118]
[311.86920166 -3.67905760]
[325.35110474 -10.25462437]
[338.83300781 -16.83019257]
[352.31491089 -23.40575981]
[358.87655640 -38.04559326]
[374.44882202 -41.90359116]
[387.08599854 -32.02023315]
[387.09396362 -15.97718334]
[374.46658325 -6.08129501]
[358.89050293 -9.92384815]
[345.40856934 -3.34828115]
[331.92666626 3.22728610]
[318.44476318 9.80285358]
[318.37017822 23.57596588]
[312.29724121 36.01230621]
[301.37707520 44.62282181]
[287.73721313 47.65634918]
[274.06723022 44.45551682]
[263.08837891 35.59814835]
[249.38519287 41.69919586]
[235.68200684 47.80024719]
[221.97883606 53.90129852]
[226.79989624 69.57446289]
[229.61581421 85.72875977]
[230.38204956 102.10873413]
[229.08650208 118.45536041]
[225.74964905 134.51014709]
[220.42427063 150.01921082]
[213.19456482 164.73728943]
[204.17486572 178.43165588]
[193.50779724 190.88574219]
[181.36204529 201.90261841]
[167.92968750 211.30805969]
[153.42311096 218.95333862]
[138.07174683 224.71755981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[47 76]
[48 75]
[49 74]
[50 73]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
