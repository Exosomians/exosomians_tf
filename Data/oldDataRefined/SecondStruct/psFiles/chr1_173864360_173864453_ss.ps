%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUCUCAUUGGAGUCUUAGUUUUACCUUGCCAAAAUGUCACUAUAGUAAUAUAAAGUAAACCGUCUUAGUAAUGUAGUAACCAAUGUGACUU\
) } def
/len { sequence length } bind def

/coor [
[42.92514801 455.70535278]
[30.70070267 446.14801025]
[26.46095085 431.22137451]
[31.83616638 416.66506958]
[44.75946808 408.07623291]
[45.25541687 393.08444214]
[37.94315338 380.10830688]
[46.13250351 366.57150269]
[46.62845612 351.57968140]
[47.12440491 336.58789062]
[47.62035370 321.59609985]
[48.11630630 306.60430908]
[48.61225510 291.61248779]
[39.95970917 288.19464111]
[32.50362396 282.59860229]
[26.78108406 275.21463013]
[23.20767021 266.56228638]
[22.04730606 257.25372314]
[23.39277840 247.95056152]
[27.15842247 239.31669617]
[33.08547974 231.97102356]
[40.75987244 226.44303894]
[49.64111710 223.13468933]
[59.10037231 222.29115295]
[63.02257156 207.81301880]
[66.94477081 193.33488464]
[70.86697388 178.85675049]
[66.72678375 164.54913330]
[77.80336761 153.25222778]
[81.72556305 138.77409363]
[85.64776611 124.29595947]
[89.56996155 109.81782532]
[86.17440033 96.25457764]
[95.95190430 86.25997162]
[99.87409973 71.78183746]
[96.01445770 56.43864059]
[106.81049347 46.17731476]
[110.73269653 31.69918060]
[114.65489197 17.22104836]
[104.58235931 1.36254358]
[109.02288818 -16.56882095]
[124.78707123 -25.58236504]
[127.74382782 -40.28806686]
[130.70057678 -54.99376678]
[125.83533478 -70.04833221]
[135.92959595 -81.00074005]
[138.88635254 -95.70643616]
[129.92555237 -108.72487640]
[132.87686157 -124.25115204]
[145.98930359 -133.07380676]
[161.48352051 -129.95851135]
[170.16703796 -116.75352478]
[166.88810730 -101.29311371]
[153.59204102 -92.74968719]
[150.63528442 -78.04398346]
[155.71202087 -64.04126740]
[145.40628052 -52.03701019]
[142.44952393 -37.33131027]
[139.49276733 -22.62561035]
[147.86447144 -14.53843594]
[151.23937988 -3.27200246]
[148.63958740 8.32230473]
[140.61518860 17.24920273]
[129.13302612 21.14324760]
[125.21083069 35.62137985]
[121.28862762 50.09951401]
[125.42881775 64.40714264]
[114.35223389 75.70404053]
[110.43003845 90.18217468]
[113.82559967 103.74542236]
[104.04809570 113.74002838]
[100.12590027 128.21815491]
[96.20369720 142.69628906]
[92.28150177 157.17442322]
[96.14114380 172.51762390]
[85.34510803 182.77894592]
[81.42290497 197.25708008]
[77.50070953 211.73521423]
[73.57850647 226.21334839]
[88.75515747 241.70120239]
[92.08313751 263.00521851]
[82.46242523 282.16610718]
[63.60405350 292.10845947]
[63.10810471 307.10025024]
[62.61215591 322.09204102]
[62.11620331 337.08383179]
[61.62025452 352.07565308]
[61.12430191 367.06744385]
[68.40109253 381.11590576]
[60.24721527 393.58038330]
[59.75126648 408.57217407]
[72.07866669 417.99633789]
[76.48009491 432.87609863]
[71.26310730 447.48986816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 91]
[6 90]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[24 79]
[25 78]
[26 77]
[27 76]
[29 74]
[30 73]
[31 72]
[32 71]
[34 69]
[35 68]
[37 66]
[38 65]
[39 64]
[42 59]
[43 58]
[44 57]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
