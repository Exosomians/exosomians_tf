%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUUGUUCAUUAGUUCUUAUCCGGAGUGUCUACCUUUGUCGGAUAGGACCUAAUGAACUUAGGUCGGUGUCGGAGAUACC\
) } def
/len { sequence length } bind def

/coor [
[98.15695953 111.05754089]
[89.85292816 98.56581879]
[81.31399536 86.23347473]
[72.77506256 73.90113831]
[57.48037338 70.94982910]
[48.99636078 58.32144165]
[51.90423584 43.75848007]
[43.36530304 31.42613983]
[34.82637024 19.09379959]
[26.28743553 6.76145887]
[17.74850273 -5.57088137]
[9.20956898 -17.90322113]
[0.67063546 -30.23556137]
[-7.86829805 -42.56790161]
[-16.40723228 -54.90024185]
[-30.62441635 -61.84158325]
[-31.50830460 -76.70993805]
[-40.04723740 -89.04228210]
[-48.58617020 -101.37461853]
[-57.12510300 -113.70696259]
[-65.66403961 -126.03929901]
[-74.20297241 -138.37164307]
[-82.74190521 -150.70397949]
[-91.28083801 -163.03631592]
[-99.81977081 -175.36866760]
[-108.35870361 -187.70100403]
[-123.20897675 -184.45478821]
[-138.17022705 -187.14353943]
[-150.96096802 -195.35726929]
[-159.63072205 -207.84341431]
[-162.85740662 -222.69793701]
[-160.14897156 -237.65563965]
[-151.91842651 -250.43557739]
[-139.42088318 -259.08889771]
[-124.56212616 -262.29602051]
[-109.60800171 -259.56790161]
[-96.83891296 -251.32057190]
[-88.20204163 -238.81166077]
[-85.01445007 -223.94869995]
[-87.76222992 -208.99816895]
[-96.02636719 -196.23992920]
[-87.48743439 -183.90759277]
[-78.94850159 -171.57525635]
[-70.40956116 -159.24291992]
[-61.87063217 -146.91056824]
[-53.33169937 -134.57823181]
[-44.79276276 -122.24589539]
[-36.25382996 -109.91355133]
[-27.71489716 -97.58121490]
[-19.17596436 -85.24887085]
[-5.56954050 -79.18962097]
[-4.07489157 -63.43917465]
[4.46404219 -51.10683441]
[13.00297546 -38.77449417]
[21.54190826 -26.44215584]
[30.08084297 -14.10981464]
[38.61977768 -1.77747464]
[47.15871048 10.55486584]
[55.69764328 22.88720512]
[64.23657990 35.21954727]
[78.89138794 37.62207413]
[87.72676086 50.00717926]
[85.10740662 65.36220551]
[93.64633942 77.69454193]
[102.18527222 90.02688599]
[109.17227173 94.47085571]
[110.80358887 102.99139404]
[119.10761261 115.48311615]
[127.64654541 127.81546021]
[136.18548584 140.14779663]
[144.72441101 152.48013306]
[153.26335144 164.81248474]
[161.80227661 177.14482117]
[175.78993225 186.72511292]
[170.45622253 202.81820679]
[153.51553345 202.14794922]
[149.46994019 185.68374634]
[140.93101501 173.35140991]
[132.39207458 161.01907349]
[123.85314178 148.68673706]
[115.31420898 136.35440063]
[106.77527618 124.02205658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 65]
[3 64]
[4 63]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
