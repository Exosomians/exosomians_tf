%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCGGUUCCCUUGCCCGAACCACCUUAGUCGCCCCUUUCUUCUGGGACAACUCAAACUGAGAUCAGACCGUACCACUU\
) } def
/len { sequence length } bind def

/coor [
[107.59700775 176.63259888]
[102.21041870 171.28646851]
[102.55267334 161.88996887]
[97.97278595 147.60624695]
[93.39289093 133.32252502]
[79.61965179 127.38133240]
[66.08714294 133.85212708]
[52.55463028 140.32290649]
[39.02211761 146.79370117]
[25.48960686 153.26449585]
[22.80917931 168.54830933]
[11.63368511 179.31343079]
[-3.73967028 181.42047119]
[-17.39951706 174.05920410]
[-24.09336853 160.06019592]
[-21.24729919 144.80636597]
[-9.95568085 134.16310120]
[5.43962669 132.22297668]
[19.01881409 139.73197937]
[32.55132675 133.26118469]
[46.08383942 126.79039764]
[59.61634827 120.31961060]
[73.14885712 113.84881592]
[58.17070007 113.03964233]
[43.17837143 113.51921082]
[29.29440498 107.84157562]
[18.93397903 96.99438477]
[13.89932632 82.86455536]
[15.06624794 67.91001129]
[22.23175240 54.73216629]
[34.14937210 45.62335968]
[48.74598694 42.16810226]
[63.48246002 44.96744919]
[75.79341125 53.53240585]
[81.94308472 67.21383667]
[83.10546875 52.25894547]
[84.26785278 37.30405045]
[72.37189484 27.34082603]
[68.63677216 12.28000164]
[74.49871063 -2.08722973]
[87.70367432 -10.23637390]
[103.17408752 -9.03391743]
[114.96125793 1.05776870]
[118.53278351 16.15822601]
[112.51533508 30.46102142]
[99.22274780 38.46643829]
[98.06036377 53.42133331]
[96.89797974 68.37622833]
[102.54874420 73.30763245]
[112.41174316 62.00624847]
[123.71297455 71.86942291]
[113.85028076 83.17045593]
[119.50105286 88.10186768]
[134.16105652 84.92630768]
[148.82107544 81.75074768]
[163.48107910 78.57519531]
[177.68116760 69.31269073]
[190.51264954 80.39372253]
[183.41679382 95.79129028]
[166.65663147 93.23519897]
[151.99662781 96.41075897]
[137.33662415 99.58631897]
[122.67661285 102.76187134]
[118.92661285 109.25706482]
[131.91687012 116.75727844]
[124.41643524 129.74740601]
[111.42661285 122.24744415]
[107.67661285 128.74263000]
[112.25650024 143.02635193]
[116.83638763 157.31007385]
[121.69239807 171.50228882]
[136.83168030 174.09028625]
[148.63842773 183.91352844]
[153.93670654 198.32963562]
[151.30126953 213.46072388]
[141.44105530 225.23663330]
[127.00842285 230.48968506]
[111.88566589 227.80683899]
[100.14072418 217.90975952]
[94.93293762 203.46073914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[3 70]
[4 69]
[5 68]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[35 48]
[36 47]
[37 46]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
