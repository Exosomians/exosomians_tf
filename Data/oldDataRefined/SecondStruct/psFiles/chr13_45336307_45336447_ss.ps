%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAGGAGGACAUAAGGAGAUAAGUUAGAGUCGACGGUGUUAAUCUGUCUGCCUUUCGCGUUCCUGUACAAGAAGAACGUAGACACCACCUUUGGUAUCGUCGUCUAUCGUUGACGAGGUCCAGACAGUUUAUCUACGUA\
) } def
/len { sequence length } bind def

/coor [
[106.60359955 147.31588745]
[88.21337128 146.29769897]
[71.57500458 138.39819336]
[59.16149902 124.79149628]
[52.81789017 107.50000000]
[37.81789017 107.50000000]
[22.81789207 107.50000000]
[7.81789112 107.50000000]
[-7.18210888 107.50000000]
[-13.86083221 121.18049622]
[-25.76851082 130.56634521]
[-40.51016998 133.83798218]
[-55.15028763 130.39880371]
[-66.79731750 120.98306274]
[-73.17481995 107.50000000]
[-88.17481995 107.50000000]
[-103.17481995 107.50000000]
[-118.17481995 107.50000000]
[-133.17390442 107.66592407]
[-148.17022705 107.99775696]
[-163.16656494 108.32958984]
[-178.16288757 108.66142273]
[-193.15921021 108.99324799]
[-206.78485107 117.03394318]
[-219.68017578 109.58009338]
[-234.67649841 109.91192627]
[-249.67282104 110.24375916]
[-264.66915894 110.57558441]
[-279.66549683 110.90741730]
[-287.83010864 121.67910004]
[-300.53045654 125.69855499]
[-313.03411865 121.70427704]
[-320.81723022 111.37783813]
[-334.74102783 120.04154205]
[-349.07647705 112.07740784]
[-349.07647705 95.67826080]
[-334.74102783 87.71413422]
[-320.81723022 96.37783813]
[-309.48574829 83.99899292]
[-292.37158203 83.59958649]
[-279.99731445 95.91108704]
[-265.00097656 95.57926178]
[-250.00465393 95.24742889]
[-235.00833130 94.91559601]
[-220.01199341 94.58376312]
[-207.45901489 86.56680298]
[-193.49104309 93.99692535]
[-178.49472046 93.66509247]
[-163.49838257 93.33325958]
[-148.50205994 93.00142670]
[-133.50573730 92.66959381]
[-126.83541870 89.35070801]
[-118.17481995 92.50000000]
[-103.17481995 92.50000000]
[-88.17481995 92.50000000]
[-73.17481995 92.50000000]
[-66.79731750 79.01693726]
[-55.15028763 69.60120392]
[-40.51016998 66.16201019]
[-25.76851082 69.43365479]
[-13.86083221 78.81950378]
[-7.18210888 92.50000000]
[7.81789112 92.50000000]
[22.81789207 92.50000000]
[37.81789017 92.50000000]
[52.81789017 92.50000000]
[56.04126358 81.29088593]
[61.88463974 71.19686127]
[69.99974823 62.81954575]
[79.90290833 56.65823746]
[91.00389099 53.08016205]
[102.64104462 52.29857254]
[114.12079620 54.36005402]
[124.75892639 59.14174652]
[133.92138672 66.35864258]
[141.06208801 75.58061981]
[145.75543213 86.25801849]
[147.72167969 97.75446320]
[162.63000488 99.41036987]
[177.53831482 101.06628418]
[192.44664001 102.72219086]
[207.35494995 104.37810516]
[222.26327515 106.03401184]
[237.17160034 107.68991852]
[243.93750000 94.14562988]
[254.90850830 83.75289917]
[268.74722290 77.75205231]
[283.77572632 76.84964752]
[298.17901611 81.13533020]
[310.22418213 90.07334900]
[318.46899414 102.56944275]
[321.93444824 117.10477448]
[336.84274292 118.76068878]
[351.75106812 120.41659546]
[366.65939331 122.07250214]
[381.56771851 123.72841644]
[390.52304077 121.55445099]
[396.78619385 125.58941650]
[411.65423584 127.57472229]
[426.52227783 129.56002808]
[435.52349854 127.58470917]
[441.69586182 131.75724792]
[456.51635742 134.07096863]
[471.33682251 136.38470459]
[486.15731812 138.69844055]
[500.97778320 141.01217651]
[512.63708496 130.59130859]
[528.26861572 130.15460205]
[540.49151611 139.90826416]
[543.53460693 155.24688721]
[535.96105957 168.92807007]
[521.34674072 174.49195862]
[506.59222412 169.31146240]
[498.66406250 155.83265686]
[483.84356689 153.51892090]
[469.02310181 151.20518494]
[454.20260620 148.89144897]
[439.38214111 146.57772827]
[424.53695679 144.42807007]
[409.66891479 142.44276428]
[394.80090332 140.45745850]
[379.91180420 138.63673401]
[365.00347900 136.98081970]
[350.09515381 135.32492065]
[335.18685913 133.66900635]
[320.27853394 132.01309204]
[313.70794678 145.43370056]
[302.92196655 155.81597900]
[289.20901489 161.89297485]
[274.21636963 162.91355896]
[259.75219727 158.73532104]
[247.56758118 149.84399414]
[239.14454651 137.29710388]
[235.51568604 122.59824371]
[220.60736084 120.94232941]
[205.69905090 119.28642273]
[190.79072571 117.63050842]
[175.88241577 115.97460175]
[160.97409058 114.31868744]
[146.06576538 112.66278076]
[137.85205078 129.14830017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[15 56]
[16 55]
[17 54]
[18 53]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[33 38]
[78 140]
[79 139]
[80 138]
[81 137]
[82 136]
[83 135]
[84 134]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
[98 121]
[99 120]
[100 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
