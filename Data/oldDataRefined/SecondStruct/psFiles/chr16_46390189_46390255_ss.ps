%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUACCUUACCUGUGCUUACCUUUGGACACCUUGGUAUCUUACUUGUGCUUUACUUAGUAUUAGC\
) } def
/len { sequence length } bind def

/coor [
[91.46548462 134.65852356]
[78.78826141 128.70738220]
[69.37638855 118.33700562]
[64.67872620 105.14381409]
[65.41844177 91.15879059]
[51.99098969 84.47270966]
[38.56354141 77.78663635]
[25.13609123 71.10056305]
[13.72565842 79.50679779]
[-0.14153868 82.09007263]
[-13.68450832 78.39156342]
[-24.21303749 69.20632172]
[-29.66206169 56.41323853]
[-28.99657631 42.59088135]
[-42.10091019 35.29181671]
[-55.20524597 27.99274826]
[-71.02639008 28.03700256]
[-78.38021851 15.08437538]
[-92.39970398 21.73520279]
[-107.64472961 18.84230423]
[-118.25326538 7.51805449]
[-120.14611053 -7.88313866]
[-112.59543610 -21.43920326]
[-98.50462341 -27.93755531]
[-83.29187775 -24.87944603]
[-72.80680847 -13.44078064]
[-71.08114624 1.98003972]
[-56.19731522 1.41370845]
[-47.90618134 14.88841248]
[-34.80184555 22.18748093]
[-21.69750786 29.48654747]
[-8.20130444 20.89334297]
[7.87515259 20.17697144]
[22.24681664 27.62096977]
[31.03682137 41.32144547]
[31.82216644 57.67311096]
[45.24961472 64.35919189]
[58.67706299 71.04526520]
[72.10451508 77.73133850]
[84.41764832 67.88704681]
[99.77035522 64.30688477]
[115.16785431 67.68920135]
[127.60663605 77.37424469]
[134.66032410 91.47277832]
[134.95297241 107.23468018]
[148.67488098 113.29349518]
[164.42445374 111.78964233]
[172.94203186 124.00849152]
[186.66394043 130.06730652]
[200.38584900 136.12611389]
[214.10775757 142.18493652]
[227.82966614 148.24374390]
[242.47433472 142.30158997]
[256.99868774 148.53205872]
[262.78567505 163.23873901]
[256.40197754 177.69641113]
[241.63494873 183.32759094]
[227.24559021 176.79139709]
[221.77084351 161.96565247]
[208.04893494 155.90684509]
[194.32702637 149.84802246]
[180.60511780 143.78921509]
[166.88320923 137.73039246]
[152.11512756 139.66761780]
[142.61607361 127.01540375]
[128.89416504 120.95658875]
[118.60757446 130.45996094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 39]
[6 38]
[7 37]
[8 36]
[14 31]
[15 30]
[16 29]
[18 27]
[45 66]
[46 65]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
