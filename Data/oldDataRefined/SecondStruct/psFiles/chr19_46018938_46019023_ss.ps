%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGACUAAGGACCCGAGACUGGACUCUGGAGACCCAAGACUCGACACUACAACGAGAGCUCGACCCUAGAGGCCCCAGAACCAAG\
) } def
/len { sequence length } bind def

/coor [
[5.35844326 304.13583374]
[0.39419699 318.37686157]
[-7.95637560 330.93548584]
[-19.16835022 341.02221680]
[-32.53693390 348.00305176]
[-47.22176361 351.43911743]
[-62.29973984 351.11444092]
[-76.82305145 347.04943848]
[-89.87874603 339.49963379]
[-100.64613342 328.93960571]
[-108.44837189 316.03317261]
[-112.79499054 301.59164429]
[-113.41278076 286.52282715]
[-110.26288605 271.77395630]
[-103.54332733 258.27215576]
[-93.67649078 246.86619568]
[-81.28261566 238.27301025]
[-67.14079285 233.03280640]
[-52.13999557 231.47497559]
[-37.22317886 233.69744873]
[-23.32802773 239.56051636]
[-14.25041485 227.61912537]
[-5.17280197 215.67773438]
[-6.46939898 203.50523376]
[1.19583964 193.44801331]
[14.07365417 191.33966064]
[23.57646179 179.73377991]
[33.07927322 168.12788391]
[42.58208084 156.52200317]
[52.08488846 144.91610718]
[54.16132736 130.16696167]
[68.89057159 124.39114380]
[70.73384857 117.05227661]
[78.95200348 112.54590607]
[88.86762238 101.29065704]
[98.57841492 89.85823059]
[101.33455658 74.27893829]
[115.38409424 69.33325958]
[124.88690186 57.72737503]
[123.51057434 42.21146393]
[133.31309509 30.57681465]
[148.11363220 29.36030960]
[157.61643982 17.75442123]
[167.11924744 6.14853477]
[176.62205505 -5.45735312]
[185.91378784 -17.23291397]
[188.10568237 -32.90155029]
[201.96751404 -38.35122681]
[211.04512024 -50.29262543]
[208.66346741 -65.91642761]
[218.09426880 -78.59853363]
[233.74237061 -80.81486511]
[246.32406616 -71.25051880]
[248.37483215 -55.57984543]
[238.67799377 -43.09998322]
[222.98651123 -41.21501160]
[213.90890503 -29.27361488]
[212.36630249 -14.45910740]
[197.85517883 -8.15530109]
[196.27806091 -0.75466913]
[188.22795105 4.04545546]
[178.72514343 15.65134335]
[169.22232056 27.25723076]
[159.71951294 38.86311722]
[161.44712830 53.61272812]
[151.97525024 65.51811981]
[136.49279785 67.23017883]
[126.98998260 78.83606720]
[124.91354370 93.58522797]
[110.18430328 99.36103821]
[107.84349823 107.28630829]
[100.12286377 111.20627594]
[90.20725250 122.46152496]
[80.49645996 133.89395142]
[77.74031067 149.47323608]
[63.69077682 154.41891479]
[54.18796921 166.02481079]
[44.68515778 177.63069153]
[35.18235016 189.23658752]
[25.67954254 200.84246826]
[23.23568344 218.98437500]
[6.76859379 224.75534058]
[-2.30901933 236.69674683]
[-11.38663292 248.63813782]
[-2.01992321 260.45828247]
[4.11221361 274.23678589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 84]
[22 83]
[23 82]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[32 74]
[34 73]
[35 72]
[36 70]
[38 68]
[39 67]
[42 64]
[43 63]
[44 62]
[45 61]
[46 59]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
