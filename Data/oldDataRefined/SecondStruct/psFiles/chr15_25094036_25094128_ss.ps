%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUGAAAAUAUGUACGUAAGGAACCUUUCGACUUGUUUUACUCACUUUUGAGAUAUGGCAGUAGAAGCAACUUGACUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[135.26843262 283.88186646]
[128.42324829 276.69830322]
[124.75263214 267.41616821]
[124.83422089 257.37615967]
[128.70021057 248.04624939]
[135.82623291 240.80718994]
[131.38211060 226.48065186]
[126.93797302 212.15411377]
[115.77727509 202.29063416]
[119.07853699 186.81768799]
[114.63440704 172.49114990]
[110.19026947 158.16461182]
[105.74613953 143.83807373]
[101.30200195 129.51153564]
[96.85787201 115.18499756]
[88.16320038 102.96195221]
[76.08715057 94.06425476]
[64.01110077 85.16655731]
[51.93505096 76.26885986]
[39.85900116 67.37116241]
[27.78294945 58.47346878]
[12.08323479 56.51655579]
[6.42649889 42.73792648]
[-5.64955187 33.84023285]
[-14.60803032 31.18985367]
[-17.97378922 24.43792915]
[-29.74578094 15.14167976]
[-45.37133789 12.66125393]
[-50.56450272 -1.29870045]
[-62.33649445 -10.59494877]
[-74.10848236 -19.89119720]
[-90.40520477 -21.72120476]
[-96.71987915 -36.85583115]
[-86.55651093 -49.72587204]
[-70.37030029 -47.09173203]
[-64.81223297 -31.66318703]
[-53.04024506 -22.36693954]
[-41.26825333 -13.07069111]
[-26.48470879 -11.25519466]
[-20.44953156 3.36968946]
[-8.67754173 12.66593742]
[3.24814439 21.76418114]
[15.32419491 30.66187668]
[30.16015053 31.98236847]
[36.68064499 46.39741898]
[48.75669861 55.29511642]
[60.83274841 64.19281006]
[72.90879822 73.09050751]
[84.98484802 81.98820496]
[97.06089783 90.88590240]
[99.11758423 84.53153992]
[104.21131134 79.00730133]
[113.89572906 67.55252075]
[123.58014679 56.09774017]
[133.26455688 44.64295578]
[135.63810730 28.41648483]
[150.97528076 22.61106300]
[163.49851990 33.19881058]
[160.32499695 49.28796005]
[144.71934509 54.32737350]
[135.03492737 65.78215790]
[125.35050964 77.23693848]
[115.66609192 88.69171906]
[129.27769470 82.38901520]
[143.60183716 86.84085083]
[151.24293518 99.74874115]
[148.25587463 114.44831085]
[136.18287659 123.35014343]
[121.25724792 121.85820007]
[111.18441010 110.74085999]
[115.62854004 125.06739807]
[120.07267761 139.39393616]
[124.51680756 153.72047424]
[128.96093750 168.04701233]
[133.40507507 182.37355042]
[144.88365173 193.26174927]
[141.26451111 207.70997620]
[145.70864868 222.03651428]
[150.15277100 236.36305237]
[169.29232788 244.55729675]
[176.48384094 263.79455566]
[167.65916443 282.02633667]
[173.97319031 295.63269043]
[180.28720093 309.23904419]
[186.60122681 322.84542847]
[200.32101440 331.82873535]
[199.13110352 348.18463135]
[184.25558472 355.08761597]
[170.99711609 345.43646240]
[172.99485779 329.15945435]
[166.68084717 315.55307007]
[160.36682129 301.94671631]
[154.05279541 288.34036255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 79]
[7 78]
[8 77]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[23 43]
[24 42]
[26 41]
[27 40]
[29 38]
[30 37]
[31 36]
[52 63]
[53 62]
[54 61]
[55 60]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
