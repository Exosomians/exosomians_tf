%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCGAGACUUUUCUCGGAAACCCAAACCUUCACGAAUGUAUUCGUGAAUAAAUCUCGAUCACAUGAACCAUUG\
) } def
/len { sequence length } bind def

/coor [
[54.19170761 192.32641602]
[43.32648468 186.08531189]
[33.29891586 178.57182312]
[24.25720596 169.89703369]
[16.33499527 160.18914795]
[3.55339313 168.03967285]
[-9.22820854 175.89019775]
[-22.00980949 183.74070740]
[-34.79141235 191.59123230]
[-47.57301331 199.44175720]
[-54.90327454 214.11141968]
[-71.28676605 214.82785034]
[-79.86955261 200.85401917]
[-71.82240295 186.56501770]
[-55.42353439 186.66015625]
[-42.64192963 178.80963135]
[-29.86033058 170.95910645]
[-17.07872772 163.10859680]
[-4.29712677 155.25807190]
[8.48447514 147.40754700]
[1.32381344 129.75865173]
[-2.46707487 111.09350586]
[-2.75873208 92.04951477]
[0.45880219 73.27703094]
[7.07564974 55.41712952]
[16.86584663 39.07972717]
[29.49505806 24.82274055]
[44.53200150 13.13304234]
[61.46316528 4.40983534]
[79.71035767 -1.04898584]
[98.65042877 -3.05700326]
[117.63659668 -1.54564345]
[121.27202606 -16.09843254]
[124.90744781 -30.65122223]
[128.54287720 -45.20401001]
[132.17829895 -59.75680161]
[135.81372070 -74.30959320]
[139.44915771 -88.86238098]
[143.08457947 -103.41516876]
[138.05377197 -119.02359772]
[149.25482178 -131.00143433]
[165.16503906 -127.02690887]
[169.41737366 -111.18866730]
[157.63737488 -99.77973938]
[154.00193787 -85.22695160]
[150.36651611 -70.67416382]
[146.73109436 -56.12137604]
[143.09565735 -41.56858444]
[139.46023560 -27.01579666]
[135.82481384 -12.46300697]
[132.18939209 2.08978248]
[143.83283997 6.71951389]
[154.82844543 12.72795677]
[165.01365662 20.02630424]
[174.23794556 28.50668526]
[182.36499023 38.04375839]
[189.27464294 48.49655914]
[194.86480713 59.71059799]
[199.05284119 71.52012634]
[201.77684021 83.75059509]
[202.99655151 96.22122955]
[202.69393921 108.74771881]
[200.87348938 121.14491272]
[197.56208801 133.22958374]
[192.80871582 144.82310486]
[186.68357849 155.75413513]
[179.27725220 165.86109924]
[170.69918823 174.99461365]
[161.07615662 183.01969910]
[150.55041504 189.81771851]
[139.27751160 195.28822327]
[127.42407990 199.35032654]
[115.16532135 201.94400024]
[102.68240356 203.03092957]
[90.15985107 202.59501648]
[77.78273010 200.64273071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
