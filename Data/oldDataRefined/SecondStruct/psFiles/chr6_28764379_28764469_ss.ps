%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUCAUCGGUUUUAACGAGUCAACCCUCUCGCAAUCUGACUUCUAGAUUUCCAGGGACCAAGCUAGGGCCCAAAGUGGUCCAAACAAAC\
) } def
/len { sequence length } bind def

/coor [
[167.37355042 267.53033447]
[160.30850220 259.94976807]
[154.65719604 251.25885010]
[150.59091187 241.71821594]
[148.23332214 231.61428833]
[147.65681458 221.25068665]
[148.88018799 210.93907166]
[151.86813354 200.98982239]
[156.53218079 191.70266724]
[162.73335266 183.35763550]
[152.87530518 172.05194092]
[143.01724243 160.74624634]
[133.15919495 149.44055176]
[123.30113220 138.13485718]
[113.44307709 126.82916260]
[94.43148804 129.48748779]
[77.69862366 120.07907104]
[70.09183502 102.45397186]
[55.30994415 99.90531921]
[40.52804947 97.35665894]
[25.74615669 94.80800629]
[14.71941757 105.72545624]
[-0.62358135 108.04321289]
[-14.38314342 100.87006378]
[-21.26843452 86.96422577]
[-18.63192368 71.67277527]
[-7.48739910 60.87559128]
[7.87983990 58.72440720]
[21.56077766 66.04640198]
[28.29481316 80.02611542]
[43.07670593 82.57476807]
[57.85859680 85.12342834]
[72.64048767 87.67208099]
[78.42147827 79.14603424]
[86.74518585 73.07733154]
[83.69334412 58.39106750]
[80.64150238 43.70480728]
[77.58966064 29.01854515]
[74.53782654 14.33228493]
[71.48598480 -0.35397682]
[58.91366196 -10.31973076]
[59.01057434 -26.36249161]
[71.70237732 -36.17562485]
[87.25301361 -32.23133850]
[93.73335266 -17.55534554]
[86.17224121 -3.40581703]
[89.22408295 11.28044415]
[92.27592468 25.96670532]
[95.32776642 40.65296555]
[98.37960815 55.33922958]
[101.43144226 70.02548981]
[113.65875244 73.27999115]
[123.45774078 81.28491211]
[129.08630371 92.61708832]
[129.54374695 105.26183319]
[124.74877167 116.97110748]
[134.60682678 128.27680969]
[144.46488953 139.58250427]
[154.32293701 150.88819885]
[164.18099976 162.19389343]
[174.03904724 173.49958801]
[193.39582825 165.05415344]
[214.45666504 163.84985352]
[234.60461426 170.01988220]
[251.34190369 182.78208923]
[262.59951782 200.53819275]
[266.99304199 221.07385254]
[263.99279785 241.83488464]
[277.53894043 248.27713013]
[291.08505249 254.71939087]
[304.63116455 261.16162109]
[318.17730713 267.60388184]
[332.98324585 262.07586670]
[347.32666016 268.71224976]
[352.69784546 283.57583618]
[345.91018677 297.84829712]
[330.99063110 303.06204224]
[316.79074097 296.12384033]
[311.73504639 281.14999390]
[298.18893433 274.70776367]
[284.64279175 268.26550293]
[271.09667969 261.82324219]
[257.55056763 255.38099670]
[251.26622009 263.56622314]
[243.65890503 270.54537964]
[234.95648193 276.10742188]
[225.41992188 280.08377075]
[215.33554077 282.35345459]
[205.00637817 282.84674072]
[194.74307251 281.54730225]
[184.85455322 278.49273682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[18 33]
[19 32]
[20 31]
[21 30]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
