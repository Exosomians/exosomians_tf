%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUCACAACCCAUCAUGUCAGUCGGGACACUAUGAGAAGUCACUUCCGACGAGAGAGGUUGGGAAAAAAGAUCCUCCUUACAUAGUCGUUUCAGAAUGAAGUAGUCUGAGUCGGAAGAAUCAGGAGGUCA\
) } def
/len { sequence length } bind def

/coor [
[129.82913208 139.37220764]
[120.10766602 145.11795044]
[109.33530426 148.50567627]
[98.07504272 149.35830688]
[86.91539001 147.63130188]
[76.43958282 143.41491699]
[67.19512939 136.92950439]
[59.66517639 128.51402283]
[54.24326324 118.60830688]
[51.21276474 107.73004913]
[50.73205948 96.44779205]
[36.10814285 93.10997772]
[21.48422432 89.77216339]
[6.86030483 86.43434906]
[-4.82663918 96.47035980]
[-20.00475693 97.68614197]
[-32.83660889 89.82436371]
[-38.51068497 76.07872009]
[-53.68656921 80.55120087]
[-64.37303162 70.17580414]
[-78.99694824 66.83798981]
[-96.40738678 72.69717407]
[-108.84373474 60.37342072]
[-123.54240417 57.38193893]
[-138.24107361 54.39045715]
[-152.93975830 51.39897156]
[-167.63842773 48.40748978]
[-182.33709717 45.41600418]
[-197.03578186 42.42452240]
[-215.75131226 49.74226761]
[-229.78446960 36.52125931]
[-244.60800171 34.22724915]
[-259.43154907 31.93324089]
[-272.03485107 41.46908188]
[-287.67791748 39.21733093]
[-297.07998657 26.51391220]
[-294.66296387 10.89553833]
[-281.86083984 1.62831390]
[-266.26889038 4.21031809]
[-257.13754272 17.10969353]
[-242.31399536 19.40370369]
[-227.49044800 21.69771385]
[-219.72314453 14.88045216]
[-209.26017761 13.48591614]
[-199.58177185 18.22472000]
[-194.04429626 27.72584724]
[-179.34562683 30.71733093]
[-164.64694214 33.70881271]
[-149.94827271 36.70029831]
[-135.24960327 39.69178009]
[-120.55092621 42.68326569]
[-105.85224915 45.67474747]
[-95.53546143 39.24524307]
[-83.21637726 41.68498230]
[-75.65913391 52.21407318]
[-61.03521347 55.55188751]
[-46.90533066 50.84066010]
[-35.17287064 61.45479965]
[-24.09669113 51.53228378]
[-9.12449455 50.01659775]
[4.02300787 57.69752121]
[10.19811916 71.81043243]
[24.82203674 75.14824677]
[39.44595718 78.48606110]
[54.06987381 81.82387543]
[64.25833130 65.90482330]
[79.67955017 54.97747803]
[98.07579041 50.64166260]
[116.75373840 53.53215790]
[132.97885132 63.22578430]
[144.37570190 78.30333710]
[149.27572632 96.55739594]
[164.22448730 97.79608917]
[173.13221741 95.37000275]
[179.51031494 99.24466705]
[194.42564392 100.83608246]
[209.34098816 102.42749786]
[224.25633240 104.01891327]
[239.17167664 105.61033630]
[254.08700562 107.20175171]
[260.79428101 93.62832642]
[271.72024536 83.18824005]
[285.53286743 77.12760162]
[300.55734253 76.16020203]
[314.97900391 80.38355255]
[327.06274414 89.26939392]
[335.36151123 101.72970581]
[338.88977051 116.24992371]
[353.80511475 117.84133911]
[368.72045898 119.43275452]
[383.26364136 113.20323944]
[395.09817505 122.24716949]
[410.01351929 123.83858490]
[424.92886353 125.43000031]
[439.84420776 127.02141571]
[454.75955200 128.61283875]
[469.67489624 130.20425415]
[479.26507568 118.11988068]
[493.87350464 113.16034698]
[508.83871460 116.90820312]
[519.38531494 128.16752625]
[522.14794922 143.34552002]
[516.24511719 157.59892273]
[503.56030273 166.37954712]
[488.14123535 166.88549805]
[474.90808105 158.95535278]
[468.08346558 145.11959839]
[453.16815186 143.52816772]
[438.25280762 141.93675232]
[423.33746338 140.34533691]
[408.42211914 138.75392151]
[393.50677490 137.16250610]
[380.03045654 143.50584412]
[367.12905884 134.34809875]
[352.21371460 132.75668335]
[337.29837036 131.16526794]
[330.78588867 144.61415100]
[320.04492188 155.04299927]
[306.35836792 161.17922974]
[291.37026978 162.26466370]
[276.88815308 158.14901733]
[264.66522217 149.31047058]
[256.18798828 136.80012512]
[252.49559021 122.11708832]
[237.58026123 120.52567291]
[222.66491699 118.93425751]
[207.74957275 117.34284210]
[192.83422852 115.75142670]
[177.91889954 114.16001129]
[162.98579407 112.74485779]
[148.03703308 111.50616455]
[144.16851807 122.11536407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 65]
[12 64]
[13 63]
[14 62]
[18 58]
[20 56]
[21 55]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[31 42]
[32 41]
[33 40]
[72 131]
[73 130]
[75 129]
[76 128]
[77 127]
[78 126]
[79 125]
[80 124]
[88 116]
[89 115]
[90 114]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
