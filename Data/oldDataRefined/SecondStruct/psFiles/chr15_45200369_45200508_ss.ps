%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUUAUUUUGUUUGAGGGGAACGGCACGGUAACAGGAGUGUUACGGCACUGAGCCUAAGCUUGGCUCCAACGACGCCGGUGUUGCGUCUCAUGAUUGGUGAUAUGCUAGUGCCGCUCGAUGAUCCCUGUGUCCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[80.51775360 264.34170532]
[79.90190125 279.32904053]
[73.35214233 292.82351685]
[61.95835114 302.57962036]
[47.61645889 306.97393799]
[32.71295166 305.27529907]
[19.72777176 297.76629639]
[10.82164860 285.69644165]
[7.47656155 271.07418823]
[10.24939346 256.33203125]
[-0.53296143 266.75991821]
[-11.31531620 277.18780518]
[-22.09767151 287.61569214]
[-32.88002777 298.04357910]
[-43.66238403 308.47146606]
[-45.36705017 324.42367554]
[-58.97866058 332.91506958]
[-74.05555725 327.43173218]
[-79.03202820 312.18005371]
[-70.09055328 298.85977173]
[-54.09026718 297.68911743]
[-43.30791473 287.26123047]
[-32.52555847 276.83334351]
[-21.74320221 266.40545654]
[-10.96084785 255.97755432]
[-0.17849258 245.54966736]
[8.98603725 233.67485046]
[16.34085655 220.60173035]
[16.88347626 213.16983032]
[24.00795937 207.32191467]
[31.65220833 194.41589355]
[27.72043228 180.09538269]
[35.28893661 166.89794922]
[50.33625412 162.87103271]
[57.98050308 149.96501160]
[65.62475586 137.05899048]
[73.26900482 124.15296936]
[80.91325378 111.24694061]
[76.62899017 96.87178802]
[63.16667557 90.25619507]
[49.70436096 83.64060974]
[36.24204254 77.02501678]
[22.77972603 70.40943146]
[6.46224976 72.04405212]
[-2.89113355 58.57385254]
[4.34153557 43.85581589]
[20.71990776 43.03059769]
[29.39531708 56.94710922]
[42.85763168 63.56270218]
[56.31995010 70.17829132]
[69.78226471 76.79388428]
[83.24458313 83.40946960]
[94.02693939 72.98158264]
[87.86488342 59.30572510]
[81.70283508 45.62986755]
[75.54077911 31.95400810]
[69.37873077 18.27814865]
[54.27977371 14.20930099]
[45.37114334 1.35743892]
[46.85922623 -14.20917988]
[58.04138947 -25.14047432]
[73.63776398 -26.27502251]
[86.28421021 -17.07712364]
[90.00946808 -1.88974512]
[83.05458832 12.11609650]
[89.21663666 25.79195595]
[95.37869263 39.46781540]
[101.54074097 53.14367294]
[107.70279694 66.81953430]
[121.70050812 72.21064758]
[135.44416809 66.20133209]
[144.98875427 53.58343506]
[159.74977112 55.57387161]
[173.49342346 49.56455231]
[187.23707581 43.55523300]
[193.91203308 37.19901657]
[201.35450745 37.56892395]
[215.22863770 31.86729240]
[222.04353333 25.66136169]
[229.47593689 26.19699097]
[243.47364807 20.80587387]
[257.47134399 15.41475773]
[271.46905518 10.02364063]
[285.46676636 4.63252401]
[299.46447754 -0.75859237]
[313.40127563 -6.30531120]
[327.27539062 -12.00694370]
[341.14953613 -17.70857620]
[355.02365112 -23.41020966]
[364.84698486 -35.81232834]
[379.55999756 -33.49352646]
[393.43411255 -39.19515991]
[407.30822754 -44.89679337]
[421.18237305 -50.59842300]
[428.66503906 -64.78958893]
[444.45181274 -67.64577484]
[456.43240356 -56.97595978]
[455.41632080 -40.96511459]
[442.18304443 -31.89538765]
[426.88400269 -36.72429657]
[413.00988770 -31.02266502]
[399.13574219 -25.32103348]
[385.26162720 -19.61940002]
[376.43066406 -7.62509871]
[360.72528076 -9.53608322]
[346.85116577 -3.83445048]
[332.97702026 1.86718225]
[319.10290527 7.56881523]
[314.07113647 13.06507206]
[304.85559082 13.23911667]
[290.85787964 18.63023376]
[276.86019897 24.02135086]
[262.86248779 29.41246605]
[248.86476135 34.80358505]
[234.86705017 40.19469833]
[220.93026733 45.74141693]
[207.05615234 51.44305038]
[193.24639893 57.29888916]
[179.50274658 63.30820847]
[165.75907898 69.31752777]
[157.19752502 81.50559998]
[141.45347595 79.94498444]
[127.70982361 85.95430756]
[128.06594849 103.38113403]
[119.33438110 116.58241272]
[106.10981750 121.83531952]
[93.81927490 118.89119720]
[86.17502594 131.79721069]
[78.53077698 144.70324707]
[70.88652802 157.60926819]
[63.24227524 170.51528931]
[66.94234467 185.64628601]
[59.00613403 198.62594604]
[44.55823135 202.06013489]
[36.91398239 214.96615601]
[29.41398239 227.95654297]
[22.05916405 241.02966309]
[35.61663818 234.61134338]
[50.60926819 234.14115906]
[64.54228210 239.69734192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[27 137]
[28 136]
[30 135]
[31 134]
[34 131]
[35 130]
[36 129]
[37 128]
[38 127]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[70 123]
[71 122]
[73 120]
[74 119]
[75 118]
[77 117]
[78 116]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[86 108]
[87 107]
[88 106]
[89 105]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
