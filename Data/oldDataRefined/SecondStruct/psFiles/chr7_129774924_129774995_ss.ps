%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:23 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAAUACCGGGAAGCCAUUAAGUGACUGACUCUGACAAGUGUCACUUAAGAUGGUCACGGUAUGUGUCUU\
) } def
/len { sequence length } bind def

/coor [
[106.98798370 268.23300171]
[105.69851685 253.28854370]
[104.40904236 238.34407043]
[103.11956787 223.39959717]
[94.31681061 211.38456726]
[100.83914185 196.97035217]
[99.54966736 182.02587891]
[98.26020050 167.08140564]
[96.97072601 152.13693237]
[95.68125153 137.19245911]
[94.39178467 122.24798584]
[84.20565796 116.64223480]
[78.07539368 106.76288605]
[77.57518005 95.14688873]
[82.83348083 84.77713013]
[92.50000000 78.31648254]
[92.50000000 63.31647873]
[92.50000000 48.31647873]
[92.50000000 33.31647873]
[92.50000000 18.31647873]
[92.50000000 3.31647921]
[91.85466766 -11.66963291]
[90.56519318 -26.61410522]
[89.27572632 -41.55857849]
[87.98625183 -56.50305176]
[86.69677734 -71.44752502]
[85.40730286 -86.39199829]
[84.11783600 -101.33647156]
[80.38407898 -107.39611816]
[80.50466919 -113.47270203]
[83.41697693 -117.61205292]
[83.41697693 -132.61204529]
[83.41697693 -147.61204529]
[72.06583405 -158.60874939]
[71.89874268 -174.41215515]
[83.01483154 -185.64639282]
[98.81911469 -185.64639282]
[109.93520355 -174.41215515]
[109.76811218 -158.60874939]
[98.41697693 -147.61204529]
[98.41697693 -132.61204529]
[98.41697693 -117.61205292]
[99.06230927 -102.62593842]
[100.35177612 -87.68146515]
[101.64125061 -72.73699188]
[102.93072510 -57.79252243]
[104.22019196 -42.84804916]
[105.50966644 -27.90357780]
[106.79914093 -12.95910454]
[110.05649567 -9.08543110]
[110.69902039 -3.04171395]
[107.50000000 3.31647921]
[107.50000000 18.31647873]
[107.50000000 33.31647873]
[107.50000000 48.31647873]
[107.50000000 63.31647873]
[107.50000000 78.31648254]
[120.74597931 90.20053864]
[121.51158905 107.97975922]
[109.33625793 120.95851898]
[110.62572479 135.90298462]
[111.91519928 150.84745789]
[113.20467377 165.79193115]
[114.49414062 180.73640442]
[115.78361511 195.68087769]
[124.67860413 208.76483154]
[118.06404114 222.11012268]
[119.35351562 237.05459595]
[120.64298248 251.99906921]
[121.93245697 266.94354248]
[129.31802368 282.20425415]
[116.69821930 293.52578735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[31 42]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
