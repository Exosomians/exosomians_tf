%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCCGCGGCACCGAAUCAACCAAUUUCGCGGACAGAUCAUUUGUCCUCUAGGACCCAAGCUUAGGGUCGCCACGGAGGCACAAAGGGGGUGCGAAAA\
) } def
/len { sequence length } bind def

/coor [
[194.99351501 228.54872131]
[205.37074280 217.57191467]
[197.80349731 204.62059021]
[190.23625183 191.66926575]
[177.13500977 184.58360291]
[176.85360718 168.76489258]
[169.28636169 155.81356812]
[161.71913147 142.86224365]
[148.61787415 135.77658081]
[148.33648682 119.95787048]
[140.76924133 107.00654602]
[133.20199585 94.05522156]
[121.77494812 121.42649841]
[95.61166382 127.01394653]
[78.27635956 110.63478851]
[63.42306137 112.72752380]
[48.56976318 114.82025146]
[33.71646500 116.91297913]
[27.36160851 130.97068787]
[14.40297413 139.34191895]
[-1.02438366 139.35542297]
[-13.99765110 131.00689697]
[-20.37710762 116.96032715]
[-18.12708855 101.69792175]
[-7.96556997 90.08985901]
[6.86494589 85.84023285]
[21.63209534 90.30507660]
[31.62373352 102.05968475]
[46.47703171 99.96694946]
[61.33032990 97.87422180]
[76.18363190 95.78149414]
[79.79679871 79.25323486]
[95.00074768 66.64253235]
[86.64295959 54.18671417]
[78.28517914 41.73089600]
[69.92739105 29.27507591]
[61.56961060 16.81925583]
[53.21182632 4.36343575]
[44.85404205 -8.09238434]
[31.00789642 -17.87607574]
[36.57624435 -33.88950348]
[53.50533295 -32.97172546]
[57.30986023 -16.45016861]
[65.66764832 -3.99434853]
[74.02542877 8.46147156]
[82.38320923 20.91729164]
[90.74099731 33.37311172]
[99.09877777 45.82892990]
[107.45656586 58.28475189]
[114.92393494 58.98359299]
[111.63815308 44.34789658]
[124.54217529 36.70027542]
[135.80303955 46.60950470]
[129.85867310 60.38128281]
[137.32604980 61.08012772]
[147.84985352 50.39136887]
[158.37365723 39.70261002]
[168.89746094 29.01384926]
[179.42124939 18.32509041]
[177.75723267 2.77629423]
[186.51997375 -10.17548656]
[201.57194519 -14.41481686]
[215.80609131 -7.94001436]
[222.50148010 6.19171667]
[218.49674988 21.30780602]
[205.68281555 30.27089691]
[190.11001587 28.84889221]
[179.58621216 39.53765106]
[169.06240845 50.22641373]
[158.53860474 60.91517258]
[148.01480103 71.60392761]
[146.15332031 86.48797607]
[153.72056580 99.43930817]
[161.28781128 112.39063263]
[174.93031311 120.40266418]
[174.67045593 135.29499817]
[182.23768616 148.24632263]
[189.80493164 161.19764709]
[203.44743347 169.20968628]
[203.18757629 184.10202026]
[210.75482178 197.05334473]
[218.32206726 210.00466919]
[232.97979736 206.35397339]
[248.07225037 206.98208618]
[262.37594604 211.83810425]
[274.73135376 220.52835083]
[284.13687134 232.34837341]
[289.83004761 246.33996582]
[291.34933472 261.36889648]
[288.57159424 276.21679688]
[281.72201538 289.68008423]
[271.35583496 300.66729736]
[258.31338501 308.28778076]
[243.65200806 311.92373657]
[228.56018066 311.28048706]
[214.26136780 306.41009521]
[201.91470337 297.70742798]
[192.52105713 285.87796021]
[186.84194946 271.88067627]
[185.33775330 256.85021973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[6 78]
[7 77]
[8 76]
[10 74]
[11 73]
[12 72]
[15 31]
[16 30]
[17 29]
[18 28]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
