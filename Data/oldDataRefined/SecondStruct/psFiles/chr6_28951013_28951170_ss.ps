%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGAAAACGUCCCUCGGGCCUAUCGAGUCAGCCAUCUCGUAGUCUGAAAAUUAGACUCCCAGGUCCCAAGUUCAGGGACAAGCCCGCCCUCACCACCGAAAAUCAUGGACUAAGACCAUAGUACAAACUUUUUCGGUUUUUCCUAUGAUAGCAAAA\
) } def
/len { sequence length } bind def

/coor [
[220.68600464 269.28588867]
[213.20507812 265.07739258]
[206.15817261 260.17526245]
[199.60935974 254.62400818]
[193.61827087 248.47387695]
[188.23942566 241.78065491]
[183.52182007 234.60507202]
[179.50843811 227.01222229]
[176.23587036 219.07099915]
[173.73400879 210.85351562]
[172.02571106 202.43437195]
[171.12666321 193.89002991]
[171.04516602 185.29811096]
[171.78213501 176.73664856]
[173.33100891 168.28346252]
[175.67787170 160.01535034]
[178.80155945 152.00749207]
[165.66554260 144.76560974]
[152.52951050 137.52372742]
[139.39349365 130.28184509]
[126.25746918 123.03996277]
[115.47612000 131.31747437]
[102.35166168 134.85346985]
[88.87115479 133.11257935]
[77.07557678 126.35839844]
[68.75079346 115.61351013]
[54.20597076 119.28067017]
[39.66114426 122.94783020]
[25.11631966 126.61499023]
[19.46665382 141.06700134]
[6.38316154 149.40977478]
[-9.10328674 148.43533325]
[-21.03783607 138.51837158]
[-24.83140755 123.47216797]
[-19.02529716 109.08228302]
[-5.85207129 100.88193512]
[9.62289524 102.02431488]
[21.44916153 112.07015991]
[35.99398804 108.40299988]
[50.53881073 104.73584747]
[65.08364105 101.06868744]
[60.09065628 96.74987030]
[55.68906403 91.33493042]
[42.14709473 84.88394928]
[28.60512924 78.43297577]
[15.06316185 71.98199463]
[1.52119410 65.53101349]
[-12.02077293 59.08003616]
[-25.56274033 52.62905884]
[-42.46259689 51.27582169]
[-45.84058762 34.66180801]
[-30.81097603 26.81661034]
[-19.11176300 39.08709335]
[-5.56979513 45.53807068]
[7.97217226 51.98904800]
[21.51413918 58.44002533]
[35.05610657 64.89100647]
[48.59807587 71.34197998]
[62.14004135 77.79296112]
[67.91699982 73.00999451]
[55.24900818 64.97743988]
[58.97397614 50.44731522]
[73.94403839 49.50010300]
[79.47092438 63.44407272]
[85.24787903 58.66110611]
[81.43721008 44.15322113]
[77.62654114 29.64533234]
[73.81587219 15.13744545]
[70.00520325 0.62955773]
[55.78923035 -5.88504934]
[49.13341522 -20.03545952]
[53.18042755 -35.14028168]
[66.01939392 -44.06748199]
[81.58815002 -42.60190964]
[92.53559875 -31.43556023]
[93.69269562 -15.84084511]
[84.51309204 -3.18111134]
[88.32376099 11.32677650]
[92.13442993 25.83466339]
[95.94509888 40.34255219]
[99.75576782 54.85043716]
[124.11244202 65.92385101]
[136.22286987 87.44023895]
[133.49934387 109.90393829]
[146.63537598 117.14582062]
[159.77139282 124.38770294]
[172.90742493 131.62959290]
[186.04344177 138.87147522]
[202.04751587 120.73620605]
[222.28880310 107.51283264]
[245.30809021 100.14873505]
[269.44744873 99.16910553]
[292.96960449 104.63950348]
[314.18310547 116.16144562]
[331.56381226 132.90148926]
[343.86450195 153.65150452]
[350.20425415 176.91580200]
[365.18594360 176.17515564]
[380.16766357 175.43452454]
[395.14935303 174.69387817]
[410.13107300 173.95323181]
[425.11276245 173.21260071]
[440.09448242 172.47195435]
[455.07617188 171.73130798]
[464.11410522 157.46412659]
[479.71316528 151.43653870]
[495.67645264 155.83148193]
[505.78756714 168.73278809]
[520.75170898 167.69628906]
[533.98425293 159.02389526]
[547.21575928 165.86325073]
[562.17987061 164.82676697]
[577.14404297 163.79026794]
[592.10815430 162.75378418]
[602.29425049 150.66990662]
[618.04833984 149.41120911]
[630.02380371 159.72444153]
[631.11590576 175.49096680]
[620.67663574 187.35675049]
[604.89941406 188.28207397]
[593.14465332 177.71792603]
[578.18054199 178.75442505]
[563.21636963 179.79090881]
[548.25225830 180.82740784]
[536.09002686 189.42565918]
[521.78820801 182.66043091]
[506.82403564 183.69692993]
[500.80383301 195.64616394]
[489.56784058 203.10891724]
[476.00274658 204.03907776]
[463.65795898 198.08567810]
[455.81680298 186.71301270]
[440.83511353 187.45365906]
[425.85339355 188.19430542]
[410.87170410 188.93493652]
[395.88998413 189.67558289]
[380.90829468 190.41621399]
[365.92660522 191.15686035]
[350.94488525 191.89750671]
[350.25308228 200.43608093]
[348.75134277 208.87080383]
[346.45312500 217.12500000]
[343.37924194 225.12365723]
[339.55740356 232.79403687]
[335.02224731 240.06639099]
[329.81478882 246.87457275]
[323.98226929 253.15661621]
[317.57754517 258.85537720]
[310.65869141 263.91894531]
[303.28848267 268.30117798]
[295.53381348 271.96215820]
[287.46505737 274.86846924]
[279.15548706 276.99359131]
[270.68051147 278.31802368]
[262.11715698 278.82962036]
[253.54316711 278.52355957]
[245.03648376 277.40249634]
[236.67439270 275.47644043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[26 41]
[27 40]
[28 39]
[29 38]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[97 139]
[98 138]
[99 137]
[100 136]
[101 135]
[102 134]
[103 133]
[104 132]
[108 127]
[109 126]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
