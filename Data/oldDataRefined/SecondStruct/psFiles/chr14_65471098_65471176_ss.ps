%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUCCCAUCUCCCUACUCCCCCUUUCAAGAUAUCAGGACAUUAAUCUAGAGUCCUGAUAUCUUGAAAGGGGGAGUAG\
) } def
/len { sequence length } bind def

/coor [
[-90.28472900 473.47744751]
[-91.59388733 488.59863281]
[-98.28056335 502.22409058]
[-109.44042969 512.51104736]
[-123.56420898 518.06829834]
[-138.74177551 518.14428711]
[-152.92050171 512.72875977]
[-164.18281555 502.55401611]
[-171.00556946 488.99621582]
[-172.46607971 473.88888550]
[-168.36679077 459.27517700]
[-159.26211548 447.13150024]
[-146.38337708 439.10015869]
[-131.47232056 436.26730347]
[-116.54555511 439.01611328]
[-108.70807648 426.22650146]
[-100.87059784 413.43692017]
[-93.03311920 400.64730835]
[-85.19564056 387.85769653]
[-77.35816193 375.06811523]
[-69.52068329 362.27850342]
[-61.68320465 349.48889160]
[-53.84572601 336.69931030]
[-46.00824738 323.90969849]
[-38.17076874 311.12008667]
[-30.33329010 298.33050537]
[-22.49581146 285.54089355]
[-14.65833187 272.75128174]
[-6.82085371 259.96166992]
[1.01662469 247.17208862]
[8.85410309 234.38247681]
[16.69158173 221.59288025]
[24.52906036 208.80326843]
[32.36653900 196.01367188]
[40.20401764 183.22407532]
[48.04149628 170.43446350]
[55.87897491 157.64486694]
[63.71645355 144.85525513]
[71.55393219 132.06565857]
[79.39141083 119.27605438]
[87.22888947 106.48645782]
[87.78682709 92.51576233]
[99.98150635 85.67606354]
[107.81898499 72.88646698]
[115.65646362 60.09686279]
[118.77703857 43.43257904]
[135.65393066 41.81806183]
[141.87734985 57.58846283]
[128.44607544 67.93434143]
[120.60858917 80.72394562]
[112.77111053 93.51354218]
[112.21317291 107.48423767]
[100.01849365 114.32393646]
[92.18101501 127.11353302]
[84.34353638 139.90313721]
[76.50605774 152.69273376]
[68.66857910 165.48234558]
[60.83109665 178.27194214]
[52.99361801 191.06155396]
[45.15613937 203.85115051]
[37.31866074 216.64074707]
[29.48118401 229.43035889]
[21.64370537 242.21995544]
[13.80622673 255.00956726]
[5.96874857 267.79916382]
[-1.86872983 280.58877563]
[-9.70620823 293.37835693]
[-17.54368591 306.16796875]
[-25.38116455 318.95758057]
[-33.21864319 331.74716187]
[-41.05612183 344.53677368]
[-48.89360046 357.32638550]
[-56.73107910 370.11599731]
[-64.56855774 382.90557861]
[-72.40603638 395.69519043]
[-80.24351501 408.48480225]
[-88.08099365 421.27438354]
[-95.91847229 434.06399536]
[-103.75595093 446.85360718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
