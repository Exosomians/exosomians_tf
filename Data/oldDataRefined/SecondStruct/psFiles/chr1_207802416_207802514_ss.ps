%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGGAACCGACACGACGUUAAGAAUGAGGAUUUUGUGACUAAAGUUUACCACGAUCUAUGUUUCUACCUUUUUAGAUUCGGUGGUACACUUUGGUCG\
) } def
/len { sequence length } bind def

/coor [
[102.43429565 115.37949371]
[97.35322571 129.49270630]
[92.27215576 143.60591125]
[95.70715332 159.64128113]
[83.35790253 170.43145752]
[67.92825317 164.87644958]
[65.29091644 148.69076538]
[78.15895081 138.52484131]
[83.24001312 124.41163635]
[88.32108307 110.29842377]
[82.81771851 99.58073425]
[86.51963043 86.89031219]
[71.51963043 86.89031219]
[56.51962662 86.89031219]
[42.71945572 94.62760925]
[29.99218369 86.89031219]
[14.99218369 86.89031219]
[-0.00596551 87.12592316]
[-13.55629349 95.29287720]
[-26.52032089 87.95916748]
[-41.51291656 88.43032837]
[-56.50551605 88.90148926]
[-70.15031433 97.99827576]
[-84.72883606 90.48836517]
[-85.24394226 74.09731293]
[-71.16574097 65.68682098]
[-56.97667694 73.90889740]
[-41.98408127 73.43772888]
[-26.99148178 72.96656799]
[-14.51352406 64.83331299]
[-0.47712690 72.13332367]
[6.22983742 68.71555328]
[14.99218369 71.89031219]
[29.99218369 71.89031219]
[42.71945572 64.15301514]
[56.51962662 71.89031219]
[71.51963043 71.89031219]
[86.51963043 71.89031219]
[101.20796967 68.84850311]
[114.97428894 62.89128494]
[128.74061584 56.93406677]
[142.50692749 50.97684860]
[156.27325439 45.01963043]
[170.03956604 39.06241226]
[183.80589294 33.10519409]
[197.57220459 27.14797401]
[211.33853149 21.19075584]
[220.93084717 8.60910320]
[235.68420410 10.65543747]
[249.45053101 4.69821930]
[263.21685791 -1.25899923]
[276.98315430 -7.21621752]
[290.74948120 -13.17343616]
[304.51580811 -19.13065338]
[318.08822632 -25.51734352]
[331.45330811 -32.32720184]
[344.81842041 -39.13705826]
[358.18350220 -45.94691467]
[371.54861450 -52.75677490]
[384.91369629 -59.56663132]
[383.68615723 -74.71791840]
[388.35498047 -89.18411255]
[398.20819092 -100.75920868]
[411.74322510 -107.67810059]
[426.89611816 -108.88570404]
[441.35614014 -104.19786835]
[452.91827393 -94.32945251]
[459.81936646 -80.78531647]
[461.00701904 -65.63085175]
[456.30017090 -51.17699432]
[446.41656494 -39.62785721]
[432.86334229 -32.74459839]
[417.70733643 -31.57686806]
[403.25967407 -36.30273056]
[391.72357178 -46.20153427]
[378.35845947 -39.39167404]
[364.99337769 -32.58181763]
[351.62826538 -25.77196121]
[338.26315308 -18.96210289]
[324.89807129 -12.15224552]
[322.55798340 -7.79953861]
[317.36785889 -4.96689558]
[310.47302246 -5.36433506]
[296.70669556 0.59288347]
[282.94039917 6.55010176]
[269.17407227 12.50732040]
[255.40774536 18.46453857]
[241.64143372 24.42175674]
[233.03376770 36.57730865]
[217.29574585 34.95707703]
[203.52941895 40.91429520]
[189.76310730 46.87151337]
[175.99678040 52.82873154]
[162.23046875 58.78594971]
[148.46414185 64.74316406]
[134.69783020 70.70038605]
[120.93151093 76.65760040]
[107.16519165 82.61482239]
[116.85234070 94.50299072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[12 38]
[13 37]
[14 36]
[16 34]
[17 33]
[18 31]
[20 29]
[21 28]
[22 27]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[54 83]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
