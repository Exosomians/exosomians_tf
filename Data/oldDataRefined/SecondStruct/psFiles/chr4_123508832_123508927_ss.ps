%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGAGGUCUCGUGUCUCCCCCGUGGGCCUAAACUUGGCCCCUGGAGAACUAGACGUCAGUUUACGAGAUGGUGACUCGAUAUGGGGGUGGUGA\
) } def
/len { sequence length } bind def

/coor [
[49.65333176 118.51760864]
[59.17351151 106.92596436]
[72.87963867 100.83154297]
[87.86330414 101.52742767]
[75.20880127 93.47362518]
[62.55430984 85.41982269]
[49.89981461 77.36602020]
[34.10321808 76.48387146]
[27.52038383 63.12289810]
[14.86588860 55.06909561]
[2.21139288 47.01529312]
[-10.44310284 38.96149063]
[-26.23969650 38.07934189]
[-32.82253265 24.71837234]
[-45.47702789 16.66456985]
[-54.58424759 14.63474178]
[-58.40500259 8.13947392]
[-70.79206085 -0.31988147]
[-83.17912292 -8.77923679]
[-95.56618500 -17.23859215]
[-107.95324707 -25.69794846]
[-118.74611664 -23.03132248]
[-128.97885132 -26.77315331]
[-135.24468994 -35.41383362]
[-135.60585022 -45.85903931]
[-144.47320557 -48.76278305]
[-147.64582825 -55.59806442]
[-159.15382385 -65.21919250]
[-170.66181946 -74.84030914]
[-182.16981506 -84.46143341]
[-193.67782593 -94.08255768]
[-209.04014587 -91.16147614]
[-222.66069031 -98.84358215]
[-228.10824585 -113.50162506]
[-222.81063843 -128.21452332]
[-209.26924133 -136.03529358]
[-193.87788391 -133.27120972]
[-183.90390015 -121.22739410]
[-184.05670166 -105.59055328]
[-172.54870605 -95.96942902]
[-161.04069519 -86.34831238]
[-149.53269958 -76.72718811]
[-138.02470398 -67.10606384]
[-126.36242676 -57.67255020]
[-107.17135620 -56.58507919]
[-99.49389648 -38.08501053]
[-87.10683441 -29.62565422]
[-74.71977234 -21.16629982]
[-62.33270645 -12.70694351]
[-49.94564438 -4.24758816]
[-37.42322540 4.01007366]
[-24.76872826 12.06387615]
[-9.87726879 12.36996269]
[-2.38930035 26.30699539]
[10.26519585 34.36079788]
[22.91969109 42.41460037]
[35.57418823 50.46840286]
[50.46564865 50.77449036]
[57.95361710 64.71152496]
[70.60810852 72.76532745]
[83.26260376 80.81912994]
[95.91710663 88.87293243]
[102.61103058 78.56092834]
[117.54340363 74.02733612]
[132.38436890 71.84890747]
[147.22534180 69.67047882]
[162.06631470 67.49205017]
[171.29791260 54.66421890]
[186.90950012 52.20379257]
[199.63900757 61.57049561]
[201.93424988 77.20722961]
[192.43348694 89.83699799]
[176.77336121 91.96678162]
[164.24475098 82.33302307]
[149.40377808 84.51145172]
[134.56280518 86.68988037]
[119.72183228 88.86830902]
[115.64437866 103.30348206]
[127.15237427 112.92460632]
[138.66036987 122.54573059]
[154.37774658 120.89051056]
[166.60928345 130.89874268]
[168.09825134 146.63273621]
[157.96124268 158.75778198]
[142.21238708 160.08030701]
[130.19519043 149.81568909]
[129.03924561 134.05372620]
[117.53125000 124.43260193]
[106.02325439 114.81147766]
[111.22428894 128.88092041]
[109.56687927 143.78907776]
[101.40271759 156.37265015]
[88.46410370 163.96160889]
[73.49641418 164.94567871]
[59.67557526 159.11607361]
[49.93415833 147.70971680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[6 60]
[7 59]
[9 57]
[10 56]
[11 55]
[12 54]
[14 52]
[15 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[25 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[64 77]
[65 76]
[66 75]
[67 74]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
