%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:38 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCGGAGUCAUAGUGUGUCUUCAACGUAGUGACCCUACGAAGUCUGUCCAAGUCUGUAAAACUUAUUUUUGUAGUAACCGAG\
) } def
/len { sequence length } bind def

/coor [
[88.23613739 195.10426331]
[80.81359863 180.48106384]
[89.99186707 166.89094543]
[90.55273438 151.90142822]
[91.11360168 136.91191101]
[91.67447662 121.92240906]
[83.11112976 116.26875305]
[77.78162384 107.50000000]
[62.78162003 107.50000000]
[47.78162003 107.50000000]
[32.78162003 107.50000000]
[17.78162193 107.50000000]
[6.64849663 118.39455414]
[-8.56363678 118.18087006]
[-18.88131905 107.50000000]
[-33.88131714 107.50000000]
[-48.88131714 107.50000000]
[-58.79368973 119.59458160]
[-74.17073059 122.43720245]
[-87.75188446 114.68566132]
[-93.12453461 100.00000000]
[-87.75188446 85.31433868]
[-74.17073059 77.56279755]
[-58.79368973 80.40541840]
[-48.88131714 92.50000000]
[-33.88131714 92.50000000]
[-18.88131905 92.50000000]
[-8.56363678 81.81912994]
[6.64849663 81.60544586]
[17.78162193 92.50000000]
[32.78162003 92.50000000]
[47.78162003 92.50000000]
[62.78162003 92.50000000]
[77.78162384 92.50000000]
[93.50818634 77.46640778]
[114.82260132 81.82868195]
[127.52346039 73.84819794]
[140.22431946 65.86771393]
[152.92518616 57.88723373]
[165.62605286 49.90675354]
[178.32691956 41.92627335]
[191.02777100 33.94579315]
[203.72863770 25.96531105]
[198.98793030 11.65485382]
[197.81040955 -3.37434649]
[200.26451111 -18.24851227]
[206.20756531 -32.10287857]
[215.29406738 -44.13197327]
[226.99571228 -53.63643646]
[240.63220215 -60.06369400]
[255.41072083 -63.04007339]
[270.47207642 -62.39253235]
[284.94058228 -58.15871429]
[297.97509766 -50.58477402]
[308.81784058 -40.11104202]
[316.83834839 -27.34645653]
[321.57037354 -13.03312874]
[322.73880005 1.99678266]
[320.27566528 16.86945724]
[314.32421875 30.72021866]
[305.23043823 42.74380112]
[293.52301025 52.24116898]
[279.88262939 58.66016006]
[265.10232544 61.62757874]
[250.04136658 60.97090530]
[235.57540894 56.72831726]
[222.54548645 49.14647293]
[211.70912170 38.66617203]
[199.00825500 46.64665604]
[186.30738831 54.62713623]
[173.60653687 62.60761642]
[160.90567017 70.58809662]
[148.20480347 78.56858063]
[135.50393677 86.54905701]
[122.80307770 94.52954102]
[123.20712280 103.36687469]
[120.30836487 111.72504425]
[114.51936340 118.41452026]
[106.66398621 122.48327637]
[106.10311890 137.47279358]
[105.54224396 152.46229553]
[104.98137665 167.45181274]
[113.11839294 181.68981934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[5 80]
[6 79]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[15 27]
[16 26]
[17 25]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
