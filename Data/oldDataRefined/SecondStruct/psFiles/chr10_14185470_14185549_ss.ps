%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUGUUGUAAAACAUUAAAAAGAUUGAAGUUCAUAAAAAACCUCCAAACAACAUCUUGAUACCUUUGAACUUUGUAUU\
) } def
/len { sequence length } bind def

/coor [
[86.54199219 143.22763062]
[72.67060852 136.09501648]
[61.76000595 146.38864136]
[50.84940338 156.68226624]
[39.93879700 166.97589111]
[29.02819252 177.26951599]
[18.11758804 187.56314087]
[7.20698404 197.85676575]
[3.02457023 213.71360779]
[-12.86796379 217.75828552]
[-24.12174225 205.82997131]
[-19.15984154 190.19950867]
[-3.08664060 186.94616699]
[7.82396412 176.65254211]
[18.73456955 166.35891724]
[29.64517403 156.06529236]
[40.55577850 145.77166748]
[51.46638107 135.47804260]
[62.37698746 125.18441010]
[56.40856552 112.22834778]
[54.76753616 98.05835724]
[57.61680603 84.08112335]
[64.67353058 71.68417358]
[75.23716736 62.09818268]
[88.25904846 56.27476883]
[102.44647217 54.79203033]
[116.39103699 57.79716110]
[128.70843506 64.99183655]
[140.00996399 55.12901306]
[151.31150818 45.26619339]
[162.61305237 35.40337372]
[173.91458130 25.54055214]
[185.21612549 15.67773247]
[196.51766968 5.81491184]
[207.81919861 -4.04790878]
[200.17546082 -17.00506020]
[195.04295349 -31.14620781]
[192.59651184 -45.98971176]
[192.91943359 -61.03000259]
[196.00074768 -75.75481415]
[201.73550415 -89.66262817]
[209.92835999 -102.27975464]
[220.30027771 -113.17644501]
[232.49800110 -121.98157501]
[246.10606384 -128.39523315]
[260.66101074 -132.19898987]
[275.66705322 -133.26327515]
[290.61315918 -131.55183411]
[304.99020386 -127.12297821]
[318.30856323 -120.12754822]
[330.11459351 -110.80379486]
[340.00619507 -99.46928406]
[347.64645386 -86.51007080]
[352.77514648 -72.36754608]
[355.21759033 -57.52338409]
[354.89059448 -42.48317719]
[351.80529785 -27.75919533]
[346.06680298 -13.85292721]
[337.87054443 -1.23801470]
[327.49569702 9.65588188]
[315.29559326 18.45772171]
[301.68582153 24.86771584]
[287.12985229 28.66754150]
[272.12350464 29.72778130]
[257.17785645 28.01232147]
[242.80200195 23.57958984]
[229.48553467 16.58056450]
[217.68202209 7.25362968]
[206.38047791 17.11645126]
[195.07894897 26.97927094]
[183.77740479 36.84209061]
[172.47587585 46.70491028]
[161.17433167 56.56773376]
[149.87278748 66.43054962]
[138.57125854 76.29337311]
[144.32745361 90.79011536]
[144.82232666 106.38000488]
[139.99713135 121.21263123]
[130.42456055 133.52748108]
[117.24082947 141.86286926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
