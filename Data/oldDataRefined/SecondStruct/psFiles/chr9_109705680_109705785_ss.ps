%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:40 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGAAAAGGUUUCUAUCGUAUCACCAAUUCACGUGUCUAUAAACCUCAGUCUGAUGAACCCAAACUUAGGUCGGAGACGGUGAAUGAUUGACAUACGAAAAUCA\
) } def
/len { sequence length } bind def

/coor [
[39.58094788 439.27404785]
[30.99595833 451.94512939]
[17.50030518 459.16494751]
[2.19518805 459.27444458]
[-11.40238762 452.24847412]
[-20.16779900 439.70150757]
[-22.08681870 424.51678467]
[-16.71846962 410.18362427]
[-5.29636002 399.99569702]
[9.55479431 396.29409790]
[13.04576778 381.70599365]
[16.53674126 367.11785889]
[20.02771378 352.52975464]
[23.51868820 337.94165039]
[21.86598587 334.65722656]
[21.82066727 330.37527466]
[23.84865189 325.90832520]
[28.01219177 322.25161743]
[32.77292252 308.02713013]
[37.53365326 293.80267334]
[42.29438400 279.57821655]
[47.05511093 265.35372925]
[51.39620972 250.99565125]
[55.31393433 236.51629639]
[59.23165894 222.03695679]
[49.75825119 210.57429504]
[48.84020615 195.55360413]
[57.03877640 182.72251892]
[71.38647461 177.11450195]
[75.30419922 162.63516235]
[79.22192383 148.15582275]
[83.13964844 133.67646790]
[87.05737305 119.19712830]
[90.97509766 104.71778107]
[89.86794281 96.59409332]
[95.22620392 89.87413788]
[99.56729889 75.51604462]
[103.90840149 61.15794754]
[108.24949646 46.79985428]
[112.59059906 32.44175720]
[103.42015839 22.03212166]
[100.65335846 8.54893684]
[104.91525269 -4.42431688]
[114.97737885 -13.49427414]
[128.10931396 -16.34519196]
[132.87004089 -30.56965828]
[137.63076782 -44.79412460]
[142.39149475 -59.01859283]
[139.43415833 -74.56094360]
[150.81083679 -84.17450714]
[155.57156372 -98.39897156]
[160.33229065 -112.62344360]
[157.37495422 -128.16578674]
[168.75163269 -137.77935791]
[173.51235962 -152.00382996]
[165.18910217 -165.24230957]
[167.37384033 -180.72651672]
[179.03503418 -191.14529419]
[194.66659546 -191.57920837]
[206.88778687 -181.82336426]
[209.92814636 -166.48419189]
[202.35209656 -152.80436707]
[187.73681641 -147.24308777]
[182.97608948 -133.01863098]
[186.27395630 -118.49370575]
[174.55676270 -107.86270905]
[169.79603577 -93.63824463]
[165.03529358 -79.41378021]
[168.33316040 -64.88885498]
[156.61596680 -54.25786209]
[151.85523987 -40.03339386]
[147.09451294 -25.80892754]
[142.33377075 -11.58446121]
[152.27133179 1.39004326]
[152.57739258 17.89536285]
[142.93669128 31.49893951]
[126.94869232 36.78285599]
[122.60758972 51.14094925]
[118.26649475 65.49904633]
[113.92539215 79.85713959]
[109.58429718 94.21523285]
[105.45443726 108.63550568]
[101.53672028 123.11485291]
[97.61899567 137.59419250]
[93.70127106 152.07354736]
[89.78354645 166.55288696]
[85.86582184 181.03222656]
[95.42829895 193.10969543]
[96.03848267 208.32420349]
[87.67177582 220.83268738]
[73.71100616 225.95468140]
[69.79328156 240.43402100]
[65.87555695 254.91337585]
[67.25180817 261.64334106]
[65.21856689 267.16479492]
[61.27957916 270.11447144]
[56.51884842 284.33892822]
[51.75811768 298.56341553]
[46.99739075 312.78787231]
[42.23666000 327.01232910]
[38.10680389 341.43261719]
[34.61582947 356.02072144]
[31.12485504 370.60882568]
[27.63388252 385.19696045]
[24.14290810 399.78506470]
[35.70962143 409.80853271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 105]
[11 104]
[12 103]
[13 102]
[14 101]
[18 100]
[19 99]
[20 98]
[21 97]
[22 96]
[23 93]
[24 92]
[25 91]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[45 73]
[46 72]
[47 71]
[48 70]
[50 68]
[51 67]
[52 66]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
