%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGUUUAAAUGAAACCAAUGUUCGUUUUCAUUCGGUGGUGUAGCUGCUCCUACCCUAAGCUUGGGUGCGCACGUCUCGUGUUACCUAAUCGUCAGGUAGCGGAAUUGGUGAGCCGGUGGAGCAGGGCCA\
) } def
/len { sequence length } bind def

/coor [
[3.24540925 222.08094788]
[12.88228798 233.57575989]
[18.36186218 247.53907776]
[19.11482048 262.52017212]
[15.06293297 276.96252441]
[6.62717915 289.36569214]
[-5.31599569 298.44094849]
[-19.52573586 303.24545288]
[-34.52569580 303.28002930]
[-48.75743103 298.54107666]
[-60.74230957 289.52096558]
[-69.23514557 277.15682983]
[-73.35356140 262.73327637]
[-72.66966248 247.74887085]
[-67.25451660 233.76045227]
[-57.66939926 222.22018433]
[-72.06179047 226.44618225]
[-86.45418549 230.67216492]
[-100.79527283 235.06912231]
[-115.08302307 239.63641357]
[-129.37077332 244.20372009]
[-143.65852356 248.77101135]
[-148.39569092 263.54730225]
[-160.93330383 272.68994141]
[-176.45037842 272.68344116]
[-188.98028564 263.53024292]
[-193.70503235 248.74995422]
[-188.80783081 234.02592468]
[-176.17178345 225.01982117]
[-160.65570068 225.19468689]
[-148.22581482 234.48326111]
[-133.93806458 229.91596985]
[-119.65032196 225.34866333]
[-105.36257172 220.78137207]
[-99.89609528 215.69877625]
[-90.68017578 216.27976990]
[-76.28778076 212.05378723]
[-61.89538574 207.82778931]
[-48.64558792 200.79623413]
[-37.07879257 191.24588013]
[-25.51199722 181.69552612]
[-26.11910057 172.66775513]
[-22.39572334 164.26940918]
[-15.08086777 158.48550415]
[-5.77786589 156.74818420]
[3.39623904 159.58398438]
[15.61487865 150.88313293]
[27.83351707 142.18228149]
[40.05215836 133.48141479]
[52.27079773 124.78057098]
[64.48943329 116.07971191]
[76.70807648 107.37886047]
[76.59135437 85.43555450]
[95.38520050 69.64216614]
[91.84881592 55.06499481]
[88.31243134 40.48782349]
[84.77604675 25.91064835]
[70.68546295 19.12909889]
[64.29769897 4.85568094]
[68.62886047 -10.17013264]
[81.63390350 -18.85361290]
[97.17224884 -17.09468460]
[107.90716553 -5.72386074]
[108.76995087 9.88990307]
[99.35322571 22.37426567]
[102.88961029 36.95143890]
[106.42599487 51.52861023]
[109.96237946 66.10578918]
[123.12756348 73.29451752]
[137.30256653 68.38850403]
[147.81312561 56.56315231]
[162.37103271 59.71222305]
[176.54603577 54.80620575]
[190.72105408 49.90018463]
[191.68934631 34.75627136]
[198.36384583 21.17341805]
[209.69955444 11.20770550]
[223.94851685 6.35436058]
[238.92935181 7.32348061]
[252.36125183 13.93631172]
[262.21115112 25.15722275]
[276.38616943 20.25120354]
[290.56115723 15.34518433]
[304.73617554 10.43916512]
[318.91119385 5.53314590]
[333.08621216 0.62712640]
[347.26123047 -4.27889299]
[361.43621826 -9.18491268]
[366.84768677 -23.85632133]
[380.44927979 -31.57193947]
[395.81875610 -28.68868446]
[405.69912720 -16.56794548]
[405.42517090 -0.93276131]
[395.12625122 10.83441067]
[379.66519165 13.17747116]
[366.34225464 4.99009991]
[352.16723633 9.89611912]
[337.99221802 14.80213833]
[323.81719971 19.70815849]
[309.64221191 24.61417770]
[295.46719360 29.52019691]
[281.29217529 34.42621613]
[267.11715698 39.33223724]
[266.31094360 54.24126816]
[259.84051514 67.74235535]
[248.66386414 77.76467896]
[234.46328735 82.75780487]
[219.39242554 81.93149567]
[205.74954224 75.38056183]
[195.62707520 64.07519531]
[181.45205688 68.98121643]
[167.27705383 73.88723755]
[157.78039551 85.36167145]
[142.20858765 82.56351471]
[128.03358459 87.46953583]
[129.28688049 103.11271667]
[122.74885559 116.66025543]
[110.80013275 124.68289185]
[97.08383942 125.52148438]
[85.40892792 119.59749603]
[73.19029236 128.29835510]
[60.97164917 136.99920654]
[48.75300980 145.70005798]
[36.53437042 154.40090942]
[24.31573105 163.10176086]
[12.09709263 171.80262756]
[4.57168102 191.79803467]
[-15.96164513 193.26232910]
[-27.52844048 202.81266785]
[-39.09523773 212.36302185]
[-24.16740227 210.89341736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 38]
[17 37]
[18 36]
[19 34]
[20 33]
[21 32]
[22 31]
[39 130]
[40 129]
[41 128]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
[54 68]
[55 67]
[56 66]
[57 65]
[69 115]
[70 114]
[72 112]
[73 111]
[74 110]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
