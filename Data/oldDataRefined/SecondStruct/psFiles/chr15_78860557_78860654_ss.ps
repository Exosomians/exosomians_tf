%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGACGGGCCGAUCGAGUCAGCCAUCUCGUACCCUGAGAAUUAGGGUCCCAGCACCCAAGCUCGGGGUGCAACCCGCCCAAACAAAACGAAAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[88.72692108 246.14390564]
[85.64497375 231.39268494]
[86.04856873 216.32836914]
[89.91593170 201.76333618]
[97.03852081 188.48306274]
[107.03220367 177.20375061]
[119.35804749 168.53367615]
[113.78311157 154.60815430]
[108.20817566 140.68263245]
[102.63323975 126.75711060]
[94.20995331 127.09144592]
[85.84854889 124.76158905]
[78.39373016 119.84519958]
[72.64523315 112.68769073]
[69.27325439 103.88081360]
[68.74313354 94.21475983]
[53.89581299 96.34948730]
[39.04849243 98.48420715]
[31.92655373 112.27034760]
[18.04641342 119.20729828]
[2.74526620 116.62767029]
[-8.09328461 105.52336884]
[-10.30159473 90.16423798]
[-3.03052378 76.45616913]
[10.92405319 69.67019653]
[26.19631577 72.41566467]
[36.91376877 83.63688660]
[51.76108932 81.50216675]
[66.60841370 79.36743927]
[76.78605652 68.34856415]
[77.73741150 53.37876511]
[78.68877411 38.40896606]
[79.64012909 23.43916512]
[80.59149170 8.46936512]
[81.54284668 -6.50043535]
[82.49420929 -21.47023582]
[83.44556427 -36.44003677]
[84.39692688 -51.40983582]
[85.34828186 -66.37963867]
[77.37216949 -76.66821289]
[78.58420563 -89.22471619]
[87.77461243 -97.26579285]
[89.20045471 -112.19786835]
[86.87245178 -121.22586823]
[90.91578674 -127.57849121]
[92.81467438 -142.45780945]
[94.71356201 -157.33714294]
[96.61244202 -172.21646118]
[86.74472809 -184.56164551]
[88.57956696 -200.25906372]
[101.02839661 -209.99571228]
[116.70553589 -207.99501038]
[126.31002045 -195.44393921]
[124.14368439 -179.78881836]
[111.49176788 -170.31758118]
[109.59288025 -155.43824768]
[107.69399261 -140.55892944]
[105.79510498 -125.67960358]
[104.13253021 -110.77203369]
[102.70669556 -95.83995056]
[110.88605499 -80.40313721]
[100.31808472 -65.42827606]
[99.36672211 -50.45847702]
[98.41536713 -35.48867798]
[97.46400452 -20.51887703]
[96.51264954 -5.54907656]
[95.56128693 9.42072392]
[94.60993195 24.39052391]
[93.65856934 39.36032486]
[92.70721436 54.33012390]
[91.75585175 69.29992676]
[105.98261261 69.61247253]
[118.27590179 76.01558685]
[126.24933624 86.89902496]
[128.51962280 99.82360077]
[124.93863678 112.06380463]
[116.55875397 121.18217468]
[122.13369751 135.10769653]
[127.70863342 149.03321838]
[133.28356934 162.95872498]
[148.18724060 160.72776794]
[163.20362854 161.99455261]
[177.52291870 166.69078064]
[190.37289429 174.56320190]
[201.06056213 185.18725586]
[209.00955200 197.99000549]
[213.79118347 212.28100586]
[215.14761353 227.28956604]
[213.00564575 242.20628357]
[207.48083496 256.22674561]
[198.87110901 268.59481812]
[187.64077759 278.64352417]
[174.39547729 285.83093262]
[159.84953308 289.76947021]
[144.78735352 290.24667358]
[130.02125549 287.23687744]
[116.34754181 280.90234375]
[104.50360870 271.58474731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 80]
[8 79]
[9 78]
[10 77]
[16 29]
[17 28]
[18 27]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[42 60]
[43 59]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
