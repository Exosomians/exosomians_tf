%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:30 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUUCCGUCACCGGACAUGUCAAUAGAGGACAUGGCCCACCAUAGUAUCUGGGAGUUUGACAUGUUUGAUGAUGGAGUCGGACCUU\
) } def
/len { sequence length } bind def

/coor [
[142.73689270 460.71112061]
[153.31617737 449.19537354]
[151.20529175 434.34463501]
[149.09439087 419.49389648]
[146.72172546 404.68273926]
[144.08804321 389.91577148]
[141.45436096 375.14880371]
[138.82066345 360.38180542]
[136.18698120 345.61483765]
[133.55329895 330.84783936]
[130.91961670 316.08087158]
[128.28591919 301.31390381]
[118.43417358 290.14285278]
[123.62825775 275.19854736]
[120.99457550 260.43154907]
[118.36088562 245.66458130]
[115.72719574 230.89759827]
[113.09351349 216.13061523]
[110.45982361 201.36364746]
[107.82614136 186.59666443]
[105.19245148 171.82968140]
[102.55876923 157.06269836]
[99.92507935 142.29571533]
[97.29139709 127.52873993]
[94.65770721 112.76176453]
[90.73281860 98.28435516]
[85.54727173 84.20919800]
[80.36172485 70.13404083]
[75.17617798 56.05887985]
[63.70012283 49.85943222]
[59.74185944 37.85555267]
[64.93744659 26.77758026]
[60.25186920 12.52818394]
[55.31553268 -1.63630033]
[50.12998962 -15.71146011]
[44.94444275 -29.78661919]
[39.75889587 -43.86177826]
[26.81586266 -53.93202591]
[29.33315086 -70.13681793]
[44.72119141 -75.80605316]
[57.15008926 -65.10771179]
[53.83405685 -49.04732513]
[59.01960373 -34.97216415]
[64.20514679 -20.89700508]
[69.39069366 -6.82184601]
[74.77682495 -1.51679611]
[74.50126648 7.84260130]
[79.18684387 22.09199905]
[92.87101746 32.92472458]
[89.25134277 50.87333298]
[94.43688965 64.94849396]
[99.62242889 79.02365112]
[104.80797577 93.09881592]
[107.32991791 94.25201416]
[109.53563690 96.32618713]
[111.09525299 99.21681976]
[111.71884155 102.70442963]
[111.19532013 106.47082520]
[109.42469025 110.12807465]
[112.05837250 124.89505768]
[114.69206238 139.66203308]
[117.32574463 154.42901611]
[119.95943451 169.19599915]
[122.59311676 183.96298218]
[125.22680664 198.72994995]
[127.86049652 213.49693298]
[130.49418640 228.26391602]
[133.12786865 243.03089905]
[135.76155090 257.79788208]
[138.39523315 272.56484985]
[148.43536377 284.79214478]
[143.05290222 298.68020630]
[145.68658447 313.44717407]
[148.32028198 328.21417236]
[150.95396423 342.98114014]
[153.58764648 357.74813843]
[156.22132874 372.51510620]
[158.85502625 387.28207397]
[161.48870850 402.04907227]
[166.17057800 410.15795898]
[163.94511414 417.38302612]
[166.05601501 432.23373413]
[168.16691589 447.08447266]
[181.53607178 455.19616699]
[186.51435852 470.02017212]
[180.75119019 484.55700684]
[166.96774292 491.94284058]
[151.67214966 488.69033813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[26 53]
[27 52]
[28 51]
[29 50]
[32 48]
[33 47]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
