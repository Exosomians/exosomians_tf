%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGACGCAGAAACACGAAAGUCGAAGAAAUGUCACGACGGAACAUCGUAAGUCCAGUUCGUCGUAACAUGUCCCGAUACUUUCUUGGUUCUUACCCGACGGGAACCCUUUUCUCCUAGA\
) } def
/len { sequence length } bind def

/coor [
[220.86645508 339.13189697]
[224.48530579 332.89929199]
[217.04159546 319.87658691]
[209.59786987 306.85388184]
[194.70289612 306.92599487]
[181.68510437 299.48333740]
[174.09031677 286.43780518]
[174.04476929 271.24258423]
[181.66081238 257.97824097]
[174.21708679 244.95552063]
[166.77337646 231.93280029]
[152.38031006 228.27555847]
[144.64581299 215.17471313]
[148.57946777 200.10273743]
[141.13575745 187.08003235]
[128.10249329 179.87007141]
[127.97156525 164.04940796]
[120.52784729 151.02668762]
[113.08412933 138.00398254]
[105.64041138 124.98126221]
[98.19669342 111.95854950]
[90.41741180 99.13346863]
[82.30779266 86.51467133]
[74.19818115 73.89586639]
[61.71220779 70.35936737]
[55.23422623 59.58168411]
[57.80117798 47.68318558]
[50.02189255 34.85810471]
[36.24942398 27.07159424]
[36.26425171 12.17699623]
[28.48496628 -0.64808446]
[20.70567894 -13.47316551]
[12.92639256 -26.29824638]
[-0.84607351 -34.08475494]
[-0.83124644 -48.97935486]
[-8.61053276 -61.80443573]
[-16.38982010 -74.62951660]
[-24.16910553 -87.45459747]
[-31.94839287 -100.27967834]
[-39.72768021 -113.10475922]
[-47.50696564 -125.92984009]
[-55.28625107 -138.75491333]
[-71.75424957 -138.20936584]
[-86.18459320 -145.96734619]
[-94.71459198 -159.84561157]
[-95.11468506 -176.03727722]
[-87.37042236 -190.15597534]
[-102.18656921 -197.18547058]
[-103.23703766 -213.55094910]
[-89.44120026 -222.41699219]
[-74.99102783 -214.66299438]
[-74.75161743 -198.26559448]
[-61.11712646 -199.80876160]
[-48.09393311 -195.28062439]
[-38.26366043 -185.51799011]
[-33.60122681 -172.40122986]
[-35.07823944 -158.49226379]
[-42.46117020 -146.53421021]
[-34.68188477 -133.70912170]
[-26.90259933 -120.88404846]
[-19.12331200 -108.05896759]
[-11.34402561 -95.23388672]
[-3.56473875 -82.40880585]
[4.21454763 -69.58372498]
[11.99383450 -56.75864029]
[25.20987511 -49.88946533]
[25.75147438 -34.07753372]
[33.53076172 -21.25245285]
[41.31004715 -8.42737103]
[49.08933258 4.39770985]
[62.30537415 11.26688385]
[62.84697342 27.07881737]
[70.62625885 39.90390015]
[86.42089844 47.43257904]
[86.81698608 65.78625488]
[94.92659760 78.40505219]
[103.03620911 91.02385712]
[107.90007782 93.31580353]
[111.07808685 98.21429443]
[111.21940613 104.51483154]
[118.66312408 117.53755188]
[126.10684204 130.56025696]
[133.55056763 143.58297729]
[140.99427795 156.60569763]
[154.55996704 164.74711609]
[154.15846252 179.63630676]
[161.60218811 192.65902710]
[176.58541870 196.91819763]
[183.94888306 210.23110962]
[179.79608154 224.48908997]
[187.23980713 237.51181030]
[194.68351746 250.53451538]
[209.97792053 250.70338440]
[223.04800415 258.45385742]
[230.43470764 271.61831665]
[230.24157715 286.61227417]
[222.62059021 299.41015625]
[230.06430054 312.43286133]
[237.50802612 325.45559692]
[259.33679199 335.07748413]
[259.66632080 358.23284912]
[269.04040527 369.94296265]
[278.41445923 381.65304565]
[287.78854370 393.36315918]
[297.16262817 405.07327271]
[312.88558960 408.26196289]
[320.06713867 422.60787964]
[313.19815063 437.10604858]
[297.54800415 440.63473511]
[285.12207031 430.48699951]
[285.45251465 414.44735718]
[276.07843018 402.73724365]
[266.70437622 391.02713013]
[257.33029175 379.31701660]
[247.95620728 367.60693359]
[241.21635437 368.78598022]
[234.40060425 367.74813843]
[228.22448730 364.56875610]
[223.34706116 359.54974365]
[220.30056763 353.19122314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[9 92]
[10 91]
[11 90]
[14 87]
[15 86]
[17 84]
[18 83]
[19 82]
[20 81]
[21 80]
[22 77]
[23 76]
[24 75]
[27 73]
[28 72]
[30 70]
[31 69]
[32 68]
[33 67]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[47 52]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
