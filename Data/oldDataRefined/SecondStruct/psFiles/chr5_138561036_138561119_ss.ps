%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCAAACACGAGUCAGUAAUCAAAAGGUGUGCAAGAAAGUCUUACUACACAACUUAUUUUAUGUAGUAACGUGUUUAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[87.38616180 273.55209351]
[86.96918488 257.75332642]
[97.90622711 246.34469604]
[97.35195160 231.35493469]
[89.14964294 218.92225647]
[96.37172699 204.84561157]
[95.81745148 189.85585022]
[95.26317596 174.86608887]
[94.70890808 159.87634277]
[94.15463257 144.88658142]
[93.60036469 129.89683533]
[93.04608917 114.90707397]
[86.69881439 128.49795532]
[72.38360596 132.97843933]
[59.42044449 125.43149567]
[56.24905777 110.77058411]
[64.93418884 98.54076385]
[79.82092285 96.70419312]
[65.73609924 91.54496002]
[51.65127182 86.38571930]
[37.47351456 81.48764038]
[23.20766449 76.85238647]
[8.94181728 72.21713257]
[-6.97773743 76.15411377]
[-18.15049553 64.14987946]
[-13.08287907 48.55336380]
[3.01198030 45.40892029]
[13.57707214 57.95128250]
[27.84292030 62.58654022]
[42.10876846 67.22179413]
[49.62276459 66.27085876]
[56.81050491 72.30089569]
[70.89533234 77.46012878]
[84.98015594 82.61936188]
[76.15761566 70.48829651]
[74.79760742 55.55007935]
[81.28437805 42.02521896]
[93.78521729 33.73491287]
[108.76823425 33.02143097]
[122.00027466 40.08634949]
[129.74287415 52.93361282]
[129.80850220 67.93347168]
[122.17862701 80.84799194]
[109.00923920 88.02835083]
[122.43668365 81.34227753]
[135.86413574 74.65620422]
[149.29158020 67.97012329]
[162.71903992 61.28404999]
[176.14648438 54.59797668]
[189.57392883 47.91189957]
[203.00138855 41.22582626]
[211.90597534 28.14841270]
[226.74777222 29.40152550]
[240.17523193 22.71545029]
[244.95942688 7.65268135]
[259.03158569 0.45892245]
[274.04290771 5.40210342]
[281.08749390 19.54952240]
[275.98587036 34.50776672]
[261.76477051 41.40237808]
[246.86129761 36.14289856]
[233.43385315 42.82897568]
[225.48968506 55.42815781]
[209.68745422 54.65327454]
[196.26000977 61.33935165]
[182.83256531 68.02542877]
[169.40510559 74.71150208]
[155.97766113 81.39757538]
[142.55021667 88.08364868]
[129.12275696 94.76972961]
[115.69531250 101.45580292]
[108.03584290 114.35279846]
[108.59011841 129.34255981]
[109.14439392 144.33230591]
[109.69866180 159.32206726]
[110.25293732 174.31182861]
[110.80720520 189.30157471]
[111.36148071 204.29133606]
[119.60343170 217.79617310]
[112.34171295 230.80065918]
[112.89598083 245.79042053]
[124.64571381 256.36016846]
[125.39665222 272.14660645]
[114.70327759 283.78393555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
