%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGCCCCGGCCAAUCGAGUCAACCAAUCUCGCACCACGAUUAUUGCGAUUCCAGCGCCCAAGCUAGGGGCAUGACCGGUCUGCACUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[170.97689819 250.25775146]
[169.30950928 238.73101807]
[170.76737976 227.15997314]
[175.25404358 216.37785339]
[182.45454407 207.16336060]
[174.04382324 194.74322510]
[165.63308716 182.32310486]
[157.22236633 169.90296936]
[148.81164551 157.48283386]
[139.02285767 146.11711121]
[127.98699951 135.95788574]
[116.95114136 125.79866028]
[104.12453461 130.59248352]
[90.48635864 129.36669922]
[78.72016144 122.36248016]
[71.14115143 110.95804596]
[69.24063110 97.39743042]
[73.39257050 84.34890747]
[62.69864273 73.83035278]
[52.00471497 63.31180191]
[41.31078720 52.79325104]
[30.61686134 42.27470016]
[19.51300621 42.98840332]
[10.09881783 37.48521805]
[5.46574211 27.85960197]
[6.97345352 17.50831032]
[-3.00191498 6.30598736]
[-12.97728348 -4.89633512]
[-22.95265198 -16.09865761]
[-40.49938202 -21.37013435]
[-43.58729553 -38.55850601]
[-53.92759323 -49.42488480]
[-64.26789856 -60.29126358]
[-80.20581055 -62.12495041]
[-88.58677673 -75.80482483]
[-82.98163605 -90.83685303]
[-67.69017792 -95.68975830]
[-54.44268799 -86.64080048]
[-53.40151978 -70.63156128]
[-43.06121826 -59.76518631]
[-32.72091675 -48.89880753]
[-20.51780891 -48.24393082]
[-11.81227016 -39.10155487]
[-11.75032997 -26.07402611]
[-1.77496135 -14.87170315]
[8.20040703 -3.66938138]
[18.17577553 7.53294086]
[36.86248398 12.01726627]
[41.13541412 31.58077240]
[51.82934189 42.09932327]
[62.52326584 52.61787796]
[73.21719360 63.13642883]
[83.91111755 73.65498352]
[99.23725891 69.14015198]
[114.76773071 72.89231873]
[126.34209442 83.90633392]
[130.85971069 99.23165131]
[127.11035919 114.76280212]
[138.14622498 124.92202759]
[149.18208313 135.08125305]
[149.95686340 120.10127258]
[159.97520447 108.93737030]
[174.78425598 106.55154419]
[187.80183411 114.00422668]
[193.24205017 127.98292542]
[188.68687439 142.27455139]
[176.16094971 150.52690125]
[161.23178101 149.07211304]
[169.64250183 161.49223328]
[178.05322266 173.91236877]
[186.46395874 186.33250427]
[194.87467957 198.75263977]
[213.44270325 195.02883911]
[231.79147339 199.52128601]
[246.46571350 211.34295654]
[254.71954346 228.23049927]
[255.03024292 246.97756958]
[247.37902832 264.04351807]
[257.71932983 274.90991211]
[268.05963135 285.77627563]
[278.39993286 296.64266968]
[294.27456665 300.75704956]
[298.38732910 316.63211060]
[286.50738525 327.93692017]
[270.85577393 323.04205322]
[267.53356934 306.98297119]
[257.19326782 296.11657715]
[246.85295105 285.25021362]
[236.51264954 274.38381958]
[226.15449524 279.46173096]
[214.80377197 281.60717773]
[203.27526855 280.65762329]
[192.39881897 276.67297363]
[182.95957947 269.93188477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 60]
[11 59]
[12 58]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[26 47]
[27 46]
[28 45]
[29 44]
[31 41]
[32 40]
[33 39]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
