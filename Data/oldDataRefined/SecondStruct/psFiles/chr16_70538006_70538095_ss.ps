%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGACUUUACUACUGAGAAAUUUUUUAAAGUACAGAGAAGAGACUGUAAAAAGAGACCUGUGUCAAAAACGGAAUACUUAGACUAGUCC\
) } def
/len { sequence length } bind def

/coor [
[71.61742401 331.77227783]
[58.80670929 320.66723633]
[65.93140411 305.28298950]
[66.96627045 290.31872559]
[68.00113678 275.35446167]
[69.03600311 260.39019775]
[70.07086945 245.42594910]
[60.02217865 239.80435181]
[52.84608841 230.73329163]
[49.65939713 219.56044006]
[50.98241806 207.96519470]
[56.65446091 197.70622253]
[65.85220337 190.35479736]
[77.20896912 187.05410767]
[79.78535461 172.27702332]
[82.36174011 157.49993896]
[84.93812561 142.72285461]
[87.51451111 127.94577026]
[75.37155151 118.17396545]
[69.61510468 103.68939209]
[71.73789978 88.24810791]
[81.18946075 75.85425568]
[75.15155029 62.12313461]
[69.11363983 48.39201736]
[63.07573318 34.66089630]
[57.03782654 20.92977524]
[50.99991608 7.19865561]
[39.04722214 5.05559158]
[29.77268219 -2.59375644]
[25.48162079 -13.69401646]
[27.16481018 -25.35268974]
[34.27254105 -34.59369278]
[29.19634438 -48.70866013]
[24.12014771 -62.82362366]
[19.04395103 -76.93859100]
[13.96775532 -91.05355072]
[-0.96875304 -95.25835419]
[-10.55466938 -107.46039581]
[-11.10401535 -122.96774292]
[-2.40555382 -135.81750488]
[12.19597721 -141.06869507]
[27.08599281 -136.70210266]
[36.53897476 -124.39678955]
[36.92006302 -108.88439178]
[28.08271980 -96.12975311]
[33.15891647 -82.01478577]
[38.23511124 -67.89981842]
[43.31130981 -53.78485489]
[48.38750458 -39.66989136]
[65.29325104 -33.07369995]
[72.32952881 -16.00677109]
[64.73103333 1.16074717]
[70.76894379 14.89186764]
[76.80685425 28.62298775]
[82.84476471 42.35410690]
[88.88266754 56.08522797]
[94.92057800 69.81634521]
[114.68995667 73.14746857]
[128.15711975 87.99873352]
[142.97647095 85.67779541]
[157.79582214 83.35685730]
[172.61517334 81.03591919]
[180.53678894 67.55325317]
[195.28880310 62.36558914]
[209.90579224 67.92237854]
[217.48603821 81.59986877]
[214.45039368 96.93997955]
[202.23219299 106.69956970]
[186.60049438 106.27046204]
[174.93611145 95.85527039]
[160.11676025 98.17620850]
[145.29740906 100.49714661]
[130.47805786 102.81809235]
[128.50415039 111.15196991]
[124.29856110 118.61271667]
[118.19053650 124.61621094]
[110.65830994 128.69239807]
[102.29159546 130.52215576]
[99.71520996 145.29924011]
[97.13882446 160.07632446]
[94.56243896 174.85340881]
[91.98605347 189.63049316]
[105.82229614 202.51074219]
[109.32636261 220.93815613]
[101.30902100 237.73455811]
[85.03513336 246.46081543]
[84.00026703 261.42507935]
[82.96540070 276.38934326]
[81.93052673 291.35357666]
[80.89566040 306.31784058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
