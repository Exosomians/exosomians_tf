%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:53 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAUAUUCCACCGACGAGUCUUAAAUAAUUAAAAGUGCCAUUUAGGUUUCCACAGGAUUCUUUCAGUAGUGACGUCGAUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[64.81818390 280.11816406]
[52.46572113 289.36047363]
[37.07579041 290.43457031]
[23.55926704 282.99768066]
[16.22921944 269.42294312]
[17.42464256 254.04196167]
[26.76407814 241.76277161]
[41.26734924 236.50361633]
[44.49190521 221.85430908]
[47.71646118 207.20500183]
[50.94101715 192.55569458]
[54.16557312 177.90638733]
[49.34515381 163.81336975]
[59.86819077 151.99913025]
[63.09274673 137.34982300]
[66.31730652 122.70051575]
[69.54186249 108.05120850]
[69.27104950 93.05364990]
[65.51972198 78.53031158]
[61.76838684 64.00696564]
[58.01705933 49.48361969]
[54.26572800 34.96027756]
[50.51440048 20.43693161]
[46.76306915 5.91358805]
[30.88397789 1.71867871]
[19.30522919 -9.79767227]
[15.07310867 -25.47413063]
[19.23510361 -41.07302856]
[30.58252907 -52.42586136]
[26.30931854 -66.80430603]
[22.03610611 -81.18274689]
[17.76289368 -95.56119537]
[6.41479969 -106.58531952]
[10.20573330 -120.98941803]
[5.93252134 -135.36785889]
[1.65930927 -149.74630737]
[-12.35421753 -157.05360413]
[-17.01647377 -172.15455627]
[-9.56142426 -186.09004211]
[5.58798170 -190.59239197]
[19.44387054 -182.99041748]
[23.78578758 -167.79426575]
[16.03775406 -154.01951599]
[20.31096649 -139.64106750]
[24.58417702 -125.26262665]
[35.62662125 -115.26694489]
[32.14133835 -99.83440399]
[36.41455078 -85.45596313]
[40.68776321 -71.07751465]
[44.96097565 -56.69906998]
[58.54162979 -54.36209488]
[69.81562042 -46.32259369]
[76.51391602 -34.12756348]
[77.25768280 -20.16721344]
[71.84167480 -7.20655394]
[61.28641510 2.16225839]
[65.03774261 16.68560219]
[68.78907013 31.20894623]
[72.54040527 45.73229218]
[76.29173279 60.25563431]
[80.04306030 74.77897644]
[83.79439545 89.30232239]
[96.46059418 82.06388855]
[109.64840698 85.82640839]
[115.74941254 97.12412262]
[130.04835510 101.65623474]
[144.34732056 106.18833923]
[160.23802185 102.13648987]
[171.49717712 114.05971527]
[166.54234314 129.69242859]
[150.47061157 132.95301819]
[139.81520081 120.48728943]
[125.51625824 115.95518494]
[111.21730804 111.42307281]
[98.45272827 117.64624786]
[84.19116974 111.27576447]
[80.96661377 125.92507172]
[77.74205780 140.57438660]
[74.51750183 155.22369385]
[79.10727692 170.36451721]
[68.81488037 181.13093567]
[65.59032440 195.78024292]
[62.36576843 210.42955017]
[59.14121246 225.07885742]
[55.91665649 239.72816467]
[66.87120819 250.59101868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 85]
[9 84]
[10 83]
[11 82]
[12 81]
[14 79]
[15 78]
[16 77]
[17 76]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[29 50]
[30 49]
[31 48]
[32 47]
[34 45]
[35 44]
[36 43]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
