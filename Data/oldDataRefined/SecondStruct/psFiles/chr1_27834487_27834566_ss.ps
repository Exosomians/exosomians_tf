%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAUAAUUUUGUUUUCGGUACUCAGAAAAUUCGGGUCACACAUUUCUAUGUGAGACUCAAUAUUGAGUCUCCGUGUUGA\
) } def
/len { sequence length } bind def

/coor [
[58.71702576 346.36727905]
[45.42426682 353.49142456]
[30.77722931 357.08517456]
[15.69663334 356.92263794]
[1.13045740 353.01400757]
[-12.00565529 345.60501099]
[-22.88595772 335.16134644]
[-30.82650375 322.33956909]
[-35.32814789 307.94558716]
[-36.10790634 292.88430786]
[-33.11677170 278.10241699]
[-26.54276085 264.52917480]
[-16.79912567 253.01776123]
[-4.49836016 244.29182434]
[9.58630180 238.89987183]
[24.56948471 237.18086243]
[39.50933456 239.24282837]
[45.18233109 225.35696411]
[50.85533142 211.47109985]
[47.44831848 194.37095642]
[61.79883575 183.02830505]
[66.92913818 168.93290710]
[72.05944061 154.83752441]
[77.18974304 140.74212646]
[82.32004547 126.64674377]
[87.45034790 112.55135345]
[82.60051727 103.50545502]
[83.56924438 93.28729248]
[90.03256989 85.31393433]
[99.82910919 82.25173187]
[106.03626251 68.59629059]
[112.24342346 54.94084167]
[112.99435425 45.56813812]
[118.96517181 40.88350677]
[125.69715881 27.47901535]
[132.42915344 14.07452583]
[139.16113281 0.67003614]
[145.89312744 -12.73445320]
[145.17233276 -28.53923225]
[157.79861450 -36.44024277]
[164.53060913 -49.84473419]
[171.26258850 -63.24922180]
[177.99458313 -76.65370941]
[184.72656250 -90.05820465]
[183.23339844 -106.38922882]
[196.78413391 -115.62554932]
[211.43894958 -108.26562500]
[212.12222290 -91.88071442]
[198.13105774 -83.32621765]
[191.39907837 -69.92172241]
[184.66708374 -56.51723480]
[177.93508911 -43.11274719]
[171.20310974 -29.70825577]
[172.40542603 -14.86225605]
[159.29760742 -6.00246572]
[152.56562805 7.40202379]
[145.83363342 20.80651283]
[139.10165405 34.21100235]
[132.36965942 47.61549377]
[125.89887238 61.14800262]
[119.69171143 74.80345154]
[113.48455048 88.45889282]
[116.43075562 106.71270752]
[101.54573822 117.68165588]
[96.41543579 131.77703857]
[91.28513336 145.87243652]
[86.15483093 159.96781921]
[81.02452850 174.06321716]
[75.89422607 188.15859985]
[80.65699005 200.32801819]
[75.89860535 212.06393433]
[64.74118805 217.14410400]
[59.06819153 231.02996826]
[53.39519501 244.91581726]
[65.50502014 253.90486145]
[74.99827576 265.62359619]
[81.27819824 279.33541870]
[83.95002747 294.17831421]
[82.84581757 309.21932983]
[78.03496552 323.51290894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 74]
[18 73]
[19 72]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[30 62]
[31 61]
[32 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
