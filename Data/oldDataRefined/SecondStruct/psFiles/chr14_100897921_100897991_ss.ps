%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGUUACUACUCUGUCACAAAUACUUGUUUUCUAGUACUAAUUAGGUCAAGACGUGUUUUGUGACUCCA\
) } def
/len { sequence length } bind def

/coor [
[44.55737686 313.46734619]
[32.65008545 322.76214600]
[18.60597229 328.32446289]
[3.56352687 329.70343018]
[-11.25782490 326.78723145]
[-24.65658379 319.81228638]
[-35.54656982 309.34399414]
[-43.04498291 296.23101807]
[-46.54396057 281.53634644]
[-45.75985718 266.45117188]
[-40.75623322 252.19844055]
[-31.93871117 239.93353271]
[-20.02209091 230.65071106]
[-5.97239494 225.10249329]
[9.07142735 223.73864746]
[23.88984299 226.66973877]
[30.81607246 213.36456299]
[37.74230194 200.05940247]
[44.66852951 186.75424194]
[51.59476089 173.44908142]
[58.52098846 160.14392090]
[65.44721985 146.83876038]
[72.37344360 133.53359985]
[72.67638397 125.90961456]
[79.90306091 119.80892181]
[87.40306091 106.81854248]
[87.59510040 92.83802795]
[99.60655975 85.68145752]
[107.10655975 72.69107819]
[114.60655975 59.70069885]
[122.10655975 46.71031570]
[129.60655212 33.71993637]
[136.24089050 20.26684380]
[141.98114014 6.40865135]
[147.72138977 -7.44954157]
[153.46163940 -21.30773544]
[159.20188904 -35.16592789]
[164.94215393 -49.02412033]
[162.26634216 -65.20349121]
[175.11016846 -75.39997101]
[190.26100159 -69.12428284]
[192.13296509 -52.83232880]
[178.80033875 -43.28387070]
[173.06008911 -29.42567635]
[167.31983948 -15.56748295]
[161.57958984 -1.70929027]
[155.83934021 12.14890289]
[150.09907532 26.00709534]
[151.33494568 29.63232422]
[150.66220093 34.07440948]
[147.70176697 38.31955338]
[142.59693909 41.21993637]
[135.09693909 54.21031570]
[127.59693909 67.20069885]
[120.09693909 80.19107819]
[112.59693909 93.18145752]
[112.40489960 107.16197205]
[100.39344025 114.31854248]
[92.89344025 127.30892181]
[85.67861176 140.45982361]
[78.75238037 153.76498413]
[71.82614899 167.07014465]
[64.89992523 180.37530518]
[57.97369385 193.68046570]
[51.04746246 206.98564148]
[44.12123489 220.29080200]
[37.19500351 233.59596252]
[48.09550476 244.05329895]
[55.60708618 257.15875244]
[59.12082672 271.84991455]
[58.35187531 286.93585205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[25 59]
[26 58]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
