%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAUGACUUGCGUUUAGUCGGUGAAAUUAAUUCGAUUCGGGAACGAUCUAGUUACCCUGAAUUUGGGUGUUU\
) } def
/len { sequence length } bind def

/coor [
[162.00230408 155.18505859]
[149.94235229 146.26556396]
[137.88240051 137.34606934]
[125.82244110 128.42657471]
[113.76248169 119.50707245]
[99.73270416 123.87174225]
[85.80417633 119.19401550]
[77.25289917 107.24576569]
[77.31802368 92.55288696]
[65.25806427 83.63339233]
[49.56190872 81.64811707]
[43.93007660 67.85929108]
[31.87011719 58.93979263]
[26.05977631 58.31818008]
[21.66681671 55.62503433]
[19.27458572 51.84306335]
[18.94263840 48.04029083]
[8.11329746 37.66120529]
[-2.71604419 27.28212357]
[-13.54538536 16.90303993]
[-24.37472725 6.52395725]
[-35.20406723 -3.85512567]
[-49.92929459 0.51102954]
[-64.86103821 -3.08598495]
[-75.98274231 -13.67859077]
[-80.30271912 -28.41742897]
[-76.65892029 -43.33782578]
[-66.03150940 -54.42627335]
[-51.27919769 -58.70003128]
[-36.37029648 -55.00947952]
[-25.31521606 -44.34735870]
[-21.08772087 -29.58172989]
[-24.82498550 -14.68446732]
[-13.99564362 -4.30538416]
[-3.16630244 6.07369900]
[7.66303873 16.45278168]
[18.49238014 26.83186531]
[29.32172203 37.21094894]
[40.78961563 46.87983704]
[52.84957123 55.79933548]
[67.68312073 57.14662552]
[74.17755890 71.57343292]
[86.23751831 80.49292755]
[100.26729584 76.12825775]
[114.19582367 80.80598450]
[122.74710083 92.75423431]
[122.68197632 107.44711304]
[134.74194336 116.36660767]
[146.80189514 125.28610992]
[158.86184692 134.20561218]
[170.92181396 143.12510681]
[189.26188660 139.46220398]
[204.38078308 149.93382263]
[207.29960632 167.77677917]
[220.07255554 175.64138794]
[232.84548950 183.50599670]
[245.61842346 191.37062073]
[258.39135742 199.23522949]
[273.17330933 194.13346863]
[287.75772095 199.77519226]
[295.25827026 213.49653625]
[292.13345337 228.81872559]
[279.85867310 238.50708008]
[264.22973633 237.98704529]
[252.62614441 227.50418091]
[250.52674866 212.00816345]
[237.75381470 204.14355469]
[224.98088074 196.27894592]
[212.20794678 188.41433716]
[199.43499756 180.54972839]
[188.83569336 185.64035034]
[176.98289490 184.83374023]
[166.96766663 178.21984863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[9 43]
[10 42]
[12 40]
[13 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
