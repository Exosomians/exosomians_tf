%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:47 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUUUACUACUUAAGACCCCGCGACUAAGUACACUGAACUUUUUACGGUAGGUAAAGGACUAAGU\
) } def
/len { sequence length } bind def

/coor [
[93.81060791 187.21009827]
[98.77549744 172.73223877]
[109.90785217 162.22846985]
[105.80290985 147.80108643]
[101.69796753 133.37370300]
[97.59301758 118.94631195]
[84.98605347 111.80413818]
[81.02080536 97.86774445]
[87.97959900 85.15863037]
[83.87464905 70.73124695]
[79.76970673 56.30386353]
[75.66476440 41.87648010]
[71.55981445 27.44909477]
[67.12272644 13.12037563]
[62.35585403 -1.10203457]
[57.58898163 -15.32444382]
[52.82210922 -29.54685402]
[48.05524063 -43.76926422]
[33.03100204 -42.53000259]
[18.14688110 -44.92297745]
[4.26821661 -50.80907059]
[-7.79810429 -59.84606934]
[-17.35056114 -71.50857544]
[-23.83378410 -85.11854553]
[-26.87085152 -99.88471222]
[-26.28518867 -114.94858551]
[-22.11084557 -129.43438721]
[-14.59051609 -142.49990845]
[-4.16141844 -153.38555908]
[8.57011032 -161.45845032]
[22.86387825 -166.24925232]
[37.88886261 -167.47940063]
[52.77153015 -165.07739258]
[66.64662170 -159.18289185]
[78.70746613 -150.13858032]
[88.25284576 -138.47029114]
[94.72782135 -124.85639191]
[97.75593567 -110.08838654]
[97.16114044 -95.02486420]
[92.97801208 -80.54160309]
[85.44976807 -67.48062897]
[75.01406860 -56.60130692]
[62.27764893 -48.53613663]
[67.04451752 -34.31372452]
[71.81139374 -20.09131622]
[76.57826233 -5.86890602]
[81.34513092 8.35350418]
[86.63716125 13.87999630]
[85.98719788 23.34415054]
[90.09214783 37.77153397]
[94.19709015 52.19892120]
[98.30203247 66.62630463]
[102.40698242 81.05368805]
[115.01394653 88.19586182]
[118.97919464 102.13225555]
[112.02040100 114.84136963]
[116.12535095 129.26875305]
[120.23029327 143.69613647]
[124.33523560 158.12351990]
[139.32968140 161.19358826]
[151.17253113 170.88922119]
[157.14237976 184.98246765]
[155.86741638 200.23477173]
[147.64060974 213.14129639]
[134.35240173 220.73619080]
[119.05635834 221.27421570]
[105.26737976 214.63172913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 59]
[4 58]
[5 57]
[6 56]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
