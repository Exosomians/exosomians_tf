%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGACUCCGACCUCCUAGCGAACUCAGGUCCUCAAGACCCGACAUCACGCGAUACGGCUAGCCCACAGGCGUGAUUCA\
) } def
/len { sequence length } bind def

/coor [
[135.76866150 144.75946045]
[122.96887207 152.49035645]
[108.60459900 156.64598083]
[93.65425110 156.94328308]
[79.13612366 153.36201477]
[66.03909302 146.14610291]
[55.25524521 135.78704834]
[47.51908875 122.99044037]
[43.35755920 108.62788391]
[28.36052513 108.92611694]
[13.36349010 109.22434998]
[-1.63354492 109.52258301]
[-16.63057899 109.82081604]
[-23.94601059 118.32616425]
[-34.56212234 121.18984985]
[-44.74100113 117.66301727]
[-51.04291916 109.20256805]
[-66.01623535 108.30834198]
[-80.43176270 116.12656403]
[-94.26692200 107.32199097]
[-93.28928375 90.95201111]
[-78.50456238 83.85665131]
[-65.12200928 93.33501434]
[-50.14868927 94.22924805]
[-33.82602310 84.17416382]
[-16.92881203 94.82377625]
[-1.93177772 94.52554321]
[13.06525707 94.22731018]
[28.06229210 93.92907715]
[43.05932617 93.63084412]
[46.64656067 79.11419678]
[53.86785126 66.02013397]
[64.23133850 55.24053955]
[77.03112793 47.50964355]
[91.39540100 43.35401917]
[106.34574890 43.05671310]
[120.86387634 46.63798141]
[133.96090698 53.85388947]
[144.74475098 64.21294403]
[152.48091125 77.00955963]
[156.64244080 91.37211609]
[171.63948059 91.07388306]
[180.42825317 87.70088959]
[187.23594666 91.07388306]
[202.23297119 91.37211609]
[217.23001099 91.67034912]
[232.22705078 91.96858215]
[247.22407532 92.26681519]
[262.22113037 92.56504822]
[277.21813965 92.86328125]
[284.16754150 79.31827545]
[296.25949097 70.17103577]
[311.06329346 67.19313812]
[325.63211060 70.92272186]
[337.08966064 80.56816864]
[343.19781494 94.17536163]
[358.19485474 94.47359467]
[372.28814697 86.08843994]
[386.46240234 94.33601379]
[386.13635254 110.73191833]
[371.64541626 118.40945435]
[357.89660645 109.47062683]
[342.89959717 109.17239380]
[336.25527954 122.52599335]
[324.42333984 131.70829773]
[309.71774292 134.85572815]
[295.04403687 131.29164124]
[283.32531738 121.67089844]
[276.91992188 107.86032104]
[261.92288208 107.56208801]
[246.92584229 107.26385498]
[231.92881775 106.96562195]
[216.93177795 106.66738892]
[201.93473816 106.36915588]
[186.93771362 106.07092285]
[171.93771362 106.07092285]
[156.94067383 106.36915588]
[153.35343933 120.88580322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[17 24]
[18 23]
[41 77]
[42 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
