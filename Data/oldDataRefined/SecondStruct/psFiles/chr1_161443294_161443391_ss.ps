%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGUAGCCACGUACCCACCAAGUCACCAUCUUAAGAGCGGACGGUGCGCCCUCCGGGCCCAAGCUAAGGGCCGGGUACGUCGUGCGGGAGGGUAAAA\
) } def
/len { sequence length } bind def

/coor [
[101.68727875 145.57786560]
[94.55986023 132.37937927]
[97.00355530 117.57856750]
[88.49765778 129.93371582]
[79.99176025 142.28886414]
[71.48586273 154.64401245]
[74.59974670 170.13850403]
[65.77590179 183.25015259]
[50.24935532 186.20004272]
[37.23173141 177.23806763]
[34.44615936 161.68119812]
[43.54526520 148.75906372]
[59.13071442 146.13812256]
[67.63661194 133.78297424]
[76.14250946 121.42781830]
[84.64840698 109.07266998]
[80.88118744 94.55343628]
[67.44128418 87.89244080]
[54.00137329 81.23144531]
[40.56146622 74.57044220]
[33.64958572 74.61093140]
[28.61027527 71.50937653]
[26.50066566 67.03684998]
[13.51028538 59.53684998]
[0.51990443 52.03684998]
[-14.56894112 55.90524673]
[-27.63619423 48.11412811]
[-31.23113251 33.70537949]
[-40.41037750 32.07264328]
[-44.50926590 25.75572014]
[-57.25514603 17.84733772]
[-73.65428162 17.86812401]
[-81.63657379 3.54279423]
[-72.99052429 -10.39197826]
[-56.61045074 -9.60129547]
[-49.34676361 5.10145712]
[-36.60088348 13.00983906]
[-23.73113251 20.71500015]
[-9.45532227 16.62393379]
[3.82561207 24.04494667]
[8.01990414 39.04647064]
[21.01028633 46.54647064]
[34.00066757 54.04647064]
[47.22246552 61.13053513]
[60.66237259 67.79153442]
[74.10227966 74.45253754]
[87.54219055 81.11353302]
[103.63124847 80.88713837]
[113.32704163 90.64203644]
[128.09915161 88.03730774]
[142.87127686 85.43258667]
[157.64338684 82.82786560]
[172.41549683 80.22314453]
[187.18762207 77.61842346]
[201.95973206 75.01369476]
[210.67393494 54.41335297]
[238.57890320 49.58904266]
[251.06745911 41.28024292]
[263.55599976 32.97143936]
[276.04455566 24.66263962]
[288.53308105 16.35383797]
[290.08639526 0.79359269]
[301.31427002 -10.09074116]
[316.91528320 -11.15991306]
[329.52307129 -1.90909278]
[333.18463135 13.29376507]
[326.17111206 27.27033615]
[311.79406738 33.42131042]
[296.84188843 28.84238625]
[284.35336304 37.15118790]
[271.86480713 45.45998764]
[259.37625122 53.76878738]
[246.88771057 62.07759094]
[247.48208618 69.55400085]
[248.67082214 84.50682068]
[249.26519775 91.98323059]
[262.90969849 98.21446228]
[276.55416870 104.44568634]
[290.19863892 110.67691040]
[307.11816406 111.75677490]
[310.76428223 128.31401062]
[295.86346436 136.40115356]
[283.96740723 124.32138824]
[270.32293701 118.09016418]
[256.67846680 111.85894012]
[243.03398132 105.62771606]
[217.23686218 105.83923340]
[204.56445312 89.78581238]
[189.79234314 92.39053345]
[175.02023315 94.99526215]
[160.24810791 97.59998322]
[145.47599792 100.20470428]
[130.70387268 102.80942535]
[115.93176270 105.41414642]
[130.40916443 109.33905792]
[139.45472717 121.30474091]
[139.28305054 136.30375671]
[129.96595764 148.05926514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[17 47]
[18 46]
[19 45]
[20 44]
[23 43]
[24 42]
[25 41]
[28 38]
[30 37]
[31 36]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
