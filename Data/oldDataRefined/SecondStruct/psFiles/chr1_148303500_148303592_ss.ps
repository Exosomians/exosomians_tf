%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCUCUCAACUGACACACAGAGUCAGCCAACCAUACGAACGAAGGUUCGGACCUCCACCCACCAAGCUCGGACAAGAUAUCUCGAUAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[139.14854431 186.81391907]
[152.51812744 180.01287842]
[167.50544739 180.58848572]
[157.07756042 169.80613708]
[146.64967346 159.02378845]
[126.66693878 170.34822083]
[104.19866180 175.11570740]
[81.33903503 172.88186646]
[60.21874619 163.85491943]
[42.80635452 148.87622070]
[30.72482300 129.34191895]
[16.39828682 133.78605652]
[2.07174850 138.23019409]
[-12.25478840 142.67431641]
[-26.58132553 147.11845398]
[-32.46532822 161.60681152]
[-46.30978394 168.87765503]
[-61.57776642 165.49789429]
[-71.06019592 153.06336975]
[-70.27976990 137.44528198]
[-59.60497284 126.01799774]
[-44.07611847 124.17714691]
[-31.02545929 132.79191589]
[-16.69892311 128.34777832]
[-2.37238503 123.90364838]
[11.95415211 119.45951843]
[26.28068924 115.01538849]
[24.88983154 104.29661560]
[25.04929924 93.48916626]
[26.75580406 82.81610107]
[29.97412300 72.49772644]
[34.63782501 62.74702072]
[40.65065002 53.76523972]
[47.88848877 45.73777771]
[56.20194626 38.83032608]
[65.41942596 33.18546295]
[75.35066986 28.91969872]
[71.87337494 14.32831955]
[68.39607239 -0.26306078]
[64.91876984 -14.85444069]
[61.44146347 -29.44581985]
[49.78595352 -40.98189926]
[54.20988846 -56.77306366]
[70.16230011 -60.57471848]
[81.23271942 -48.47604370]
[76.03284454 -32.92312241]
[79.51014709 -18.33174324]
[82.98744965 -3.74036312]
[86.46475220 10.85101700]
[89.94205475 25.44239616]
[101.23031616 24.77709961]
[112.49078369 25.81119537]
[123.46906281 28.52132225]
[133.91714478 32.84625626]
[143.59899902 38.68828583]
[152.29588318 45.91543961]
[159.81132507 54.36443710]
[165.97554016 63.84440994]
[170.64927673 74.14118958]
[173.72694397 85.02215576]
[175.13902283 96.24149323]
[174.85359192 107.54574585]
[172.87712097 118.67951965]
[169.25424194 129.39129639]
[164.06681824 139.43908691]
[157.43202209 148.59590149]
[167.85990906 159.37825012]
[178.28779602 170.16061401]
[190.36384583 179.05830383]
[203.75163269 185.82345581]
[217.13941956 192.58860779]
[230.63836670 199.12910461]
[244.24473572 205.44313049]
[258.32717896 198.64469910]
[273.47210693 202.53892517]
[282.52856445 215.28704834]
[281.22033691 230.86981201]
[270.16516113 241.92950439]
[254.58293152 243.24407959]
[241.83110046 234.19284058]
[237.93070984 219.04948425]
[224.32435608 212.73547363]
[216.78013611 212.77665710]
[210.37426758 205.97639465]
[196.98648071 199.21124268]
[183.59869385 192.44609070]
[188.58897400 206.59165955]
[186.05352783 221.37580872]
[176.63516235 233.05032349]
[162.72171021 238.65533447]
[147.84069824 236.76980591]
[135.76489258 227.87176514]
[129.55590820 214.21714783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 68]
[4 67]
[5 66]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[69 86]
[70 85]
[71 84]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
