%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCGAGACUUUUCUCGGAAACCUCAGUUCGUCGGCCGCUGAGCUCGCUCGCUCGCGGUCCAGGGCCGUCCCUGAGUGAAC\
) } def
/len { sequence length } bind def

/coor [
[16.82653618 246.02441406]
[6.32273817 248.16261292]
[-4.35235977 247.40704346]
[-14.41746330 243.82237244]
[-23.13843346 237.67997742]
[-35.20740128 246.58728027]
[-47.27636719 255.49458313]
[-59.34533310 264.40188599]
[-71.41429901 273.30917358]
[-83.48326874 282.21649170]
[-89.54164886 297.45550537]
[-105.80516815 299.56027222]
[-115.54331207 286.36553955]
[-108.73831177 271.44494629]
[-92.39057159 270.14752197]
[-80.32160187 261.24020386]
[-68.25263977 252.33291626]
[-56.18367004 243.42561340]
[-44.11470413 234.51831055]
[-32.04573441 225.61100769]
[-35.92961502 206.18820190]
[-29.86289597 187.25817871]
[-15.30907440 173.61387634]
[4.11040974 168.74507141]
[23.51715469 173.94609070]
[33.30146790 162.57650757]
[43.08577728 151.20693970]
[52.87009048 139.83735657]
[62.65439987 128.46778870]
[60.97064590 118.08531952]
[65.49622345 108.34449768]
[74.89856720 102.70594025]
[86.06752014 103.32587433]
[89.87144470 89.87144470]
[103.32587433 86.06752014]
[113.93247986 75.46092224]
[124.53907776 64.85431671]
[135.14567566 54.24771500]
[145.75228882 43.64111328]
[149.73820496 35.14226151]
[156.95936584 32.84552383]
[167.95515442 22.64293098]
[178.95092773 12.44034100]
[183.80447388 -2.61800265]
[198.39692688 -5.60290337]
[209.39270020 -15.80549431]
[213.69361877 -24.14936829]
[220.99560547 -26.17449188]
[232.36518860 -35.95880127]
[243.73475647 -45.74311447]
[244.66574097 -61.51995850]
[256.53527832 -71.95497131]
[272.30139160 -70.85724640]
[282.61035156 -58.87804413]
[281.34597778 -43.12440872]
[269.25845337 -32.94269943]
[253.51907349 -34.37353897]
[242.14950562 -24.58922577]
[230.77992249 -14.80491543]
[219.59529114 -4.80971670]
[208.59951782 5.39287424]
[204.53245544 19.72146034]
[189.15351868 23.43611908]
[178.15774536 33.63871002]
[167.16195679 43.84130096]
[156.35888672 54.24771500]
[145.75228882 64.85431671]
[135.14567566 75.46092224]
[124.53907776 86.06752014]
[113.93247986 96.67412567]
[110.12855530 110.12855530]
[96.67412567 113.93247986]
[92.61578369 133.50778198]
[74.02397919 138.25209045]
[64.23966217 149.62167358]
[54.45535278 160.99124146]
[44.67104340 172.36082458]
[34.88673019 183.73039246]
[40.37091827 193.08206177]
[43.14206314 203.54501343]
[43.00620651 214.35044861]
[39.98264313 224.70698547]
[34.30180740 233.85861206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[33 72]
[35 70]
[36 69]
[37 68]
[38 67]
[39 66]
[41 65]
[42 64]
[43 63]
[45 61]
[46 60]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
