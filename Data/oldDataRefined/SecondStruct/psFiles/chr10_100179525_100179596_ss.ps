%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGAGUGACGUUGGAGACGGAGGACCCAAGUCCGCCAAGAACACGGGGUCGGAGGGUUCAUCGACCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[84.14959717 152.11732483]
[69.53503418 145.15901184]
[59.51407623 156.32057190]
[49.49311829 167.48213196]
[39.47216034 178.64369202]
[40.57209396 194.40965271]
[30.13874626 206.28065491]
[14.36203194 207.21383667]
[2.60199809 196.65556335]
[1.83566427 180.86987305]
[12.51768303 169.22212219]
[28.31060028 168.62272644]
[38.33155823 157.46116638]
[48.35251617 146.29960632]
[58.37347412 135.13804626]
[50.08482361 121.81571198]
[45.93724823 106.68349457]
[46.27484512 90.99679565]
[51.06959915 76.05702209]
[59.92373276 63.10361862]
[50.39225006 51.52127075]
[35.64876556 45.78190613]
[33.53585434 31.03792763]
[24.00436974 19.45557976]
[14.47288513 7.87323093]
[4.94140053 -3.70911765]
[-10.59596825 -8.95527744]
[-13.55561256 -25.08514214]
[-0.89290249 -35.50569153]
[14.36585045 -29.49715424]
[16.52375031 -13.24060249]
[26.05523491 -1.65825355]
[35.58671951 9.92409515]
[45.11820221 21.50644493]
[59.17993164 26.41736031]
[61.97459793 41.98978424]
[71.50608063 53.57213211]
[83.70394897 48.02030182]
[96.88816833 45.61464691]
[110.26073456 46.50077057]
[123.01225281 50.62504196]
[134.37091064 57.73783112]
[143.64920044 67.40862274]
[150.28552246 79.05207062]
[153.87823486 91.96343231]
[154.20983887 105.36122131]
[168.79162598 108.87859344]
[183.37339783 112.39596558]
[197.95516968 115.91333771]
[212.53694153 119.43070984]
[227.11871338 122.94807434]
[241.70048523 126.46544647]
[256.28225708 129.98281860]
[271.51199341 125.69727325]
[282.07006836 136.20327759]
[297.63720703 131.04614258]
[309.70544434 142.14974976]
[305.85998535 158.09165955]
[290.05670166 162.47219849]
[278.55270386 150.78504944]
[264.36596680 155.32218933]
[252.76489258 144.56459045]
[238.18310547 141.04722595]
[223.60133362 137.52984619]
[209.01956177 134.01248169]
[194.43778992 130.49510193]
[179.85601807 126.97773743]
[165.27424622 123.46036530]
[150.69247437 119.94299316]
[142.59448242 133.95820618]
[130.73571777 144.97515869]
[116.16322327 152.02114868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[20 37]
[21 36]
[23 34]
[24 33]
[25 32]
[26 31]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
