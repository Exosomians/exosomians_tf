%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:25 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAGCUACUACUGAAGGUAUAUAUGUAAGGAACCUUUCGACUUGUUUUACUCACUUUUGAGAUAUGGCAGUAAGAGCAGCUUGAC\
) } def
/len { sequence length } bind def

/coor [
[69.91387939 295.53540039]
[66.55499268 279.84790039]
[76.83676147 267.53265381]
[69.09946442 254.80538940]
[76.83676147 241.00521851]
[76.83676147 226.00521851]
[76.83676147 211.00521851]
[76.83676147 196.00521851]
[69.09946442 183.27795410]
[76.83676147 169.47778320]
[76.83676147 154.47778320]
[73.61518097 147.63481140]
[77.11405182 138.94477844]
[77.64943695 123.95433807]
[69.31588745 111.48229218]
[55.26164246 106.24033356]
[41.20739365 100.99836731]
[27.15314865 95.75640869]
[13.09890366 90.51444244]
[-0.95534223 85.27248383]
[-11.59064674 96.17249298]
[-25.74231339 101.79833984]
[-40.95848083 101.17533112]
[-54.60285568 94.41138458]
[-64.31147003 82.67840576]
[-68.40223694 68.00920868]
[-66.16641998 52.94530869]
[-57.99138641 40.09662628]
[-45.29350281 31.68927002]
[-30.27275658 29.17986488]
[-15.53158474 33.00318146]
[-3.62398481 42.49681091]
[3.38698125 56.01591492]
[4.28662062 71.21823883]
[18.34086609 76.46019745]
[32.39511108 81.70216370]
[46.44935989 86.94412231]
[60.50360489 92.18608856]
[74.55784607 97.42804718]
[83.24019623 83.35197449]
[97.67580414 78.45072174]
[110.70860291 83.43436432]
[123.02991486 74.87952423]
[135.35122681 66.32468414]
[140.77011108 58.68305588]
[148.26849365 57.69364166]
[160.88729858 49.58403015]
[173.50610352 41.47441483]
[180.93244934 27.50444794]
[195.82240295 27.13259697]
[208.44120789 19.02298546]
[220.91325378 10.68943119]
[233.23457336 2.13459182]
[245.55587769 -6.42024803]
[257.87719727 -14.97508717]
[264.37338257 -30.03269196]
[280.69091797 -31.66661453]
[290.04373169 -18.19601440]
[282.81042480 -3.47829056]
[266.43203735 -2.65377569]
[254.11071777 5.90106392]
[241.78939819 14.45590305]
[229.46809387 23.01074219]
[225.68449402 29.55971336]
[216.55082703 31.64178848]
[203.93202209 39.75139999]
[197.40826416 53.14131546]
[181.61570740 54.09321976]
[168.99690247 62.20283127]
[156.37811279 70.31244659]
[143.90606689 78.64599609]
[131.58474731 87.20083618]
[119.26344299 95.75567627]
[115.40261841 116.60483551]
[92.63988495 124.48972321]
[92.10449982 139.48016357]
[91.83676147 154.47778320]
[91.83676147 169.47778320]
[99.57406616 183.27795410]
[91.83676147 196.00521851]
[91.83676147 211.00521851]
[91.83676147 226.00521851]
[91.83676147 241.00521851]
[99.57406616 254.80538940]
[91.83676147 267.53265381]
[102.11853027 279.84790039]
[98.75965118 295.53540039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[5 83]
[6 82]
[7 81]
[8 80]
[10 78]
[11 77]
[13 76]
[14 75]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[42 73]
[43 72]
[44 71]
[46 70]
[47 69]
[48 68]
[50 66]
[51 65]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
