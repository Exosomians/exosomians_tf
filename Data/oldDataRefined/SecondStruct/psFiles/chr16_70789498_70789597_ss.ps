%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAGACCCCGUAACCACCAAGUCACCAUCUUAAGAGCGGACGGUGCGCCCUCCGGGCCCAAGCUAAGGGCCGGUUACGUCGUCGUCUGGAAAUCAAAUU\
) } def
/len { sequence length } bind def

/coor [
[168.40171814 328.60864258]
[157.44905090 318.51464844]
[161.07214355 303.11389160]
[156.92761230 288.69781494]
[152.78308105 274.28173828]
[148.63856506 259.86569214]
[144.49403381 245.44961548]
[126.86299896 237.53636169]
[120.37345123 219.01727295]
[129.48065186 201.29986572]
[124.01087952 187.33270264]
[118.54110718 173.36555481]
[113.07133484 159.39839172]
[107.60156250 145.43122864]
[102.13179016 131.46406555]
[96.66201782 117.49690247]
[98.63663483 132.36636353]
[96.79116058 147.25241089]
[91.24528503 161.18952942]
[82.35871124 173.27375793]
[70.70782471 182.72134399]
[57.04828644 188.91949463]
[42.26605988 191.46621704]
[27.31991196 190.19631958]
[13.17924213 185.19216919]
[0.76121134 176.77835083]
[-9.12875271 165.50054932]
[-15.84919071 152.09027100]
[-18.96421623 137.41728210]
[-18.27179146 122.43327332]
[-13.81682682 108.11009979]
[-5.88826799 95.37675476]
[4.99964046 85.05912781]
[18.14071274 77.82640839]
[32.68262482 74.14771271]
[47.68218994 74.26163483]
[62.16654968 78.16078949]
[75.19515228 85.59145355]
[71.50096893 71.05347443]
[67.80678558 56.51548767]
[64.11260223 41.97750092]
[53.21492386 30.50792122]
[57.57944870 16.26712799]
[53.88526535 1.72914338]
[42.05927658 -9.63210583]
[46.24758530 -25.48739052]
[62.14162445 -29.52615547]
[73.39096069 -17.59366417]
[68.42324829 -1.96504021]
[72.11743164 12.57294464]
[82.75087738 23.00267029]
[78.65058136 38.28331757]
[82.34476471 52.82130051]
[86.03895569 67.35928345]
[89.73313904 81.89727020]
[104.08300018 86.26549530]
[115.25096130 76.25167084]
[126.41892242 66.23784637]
[137.58688354 56.22402573]
[148.75485229 46.21020508]
[148.06071472 30.58803368]
[157.61169434 18.20608330]
[172.89811707 14.91073036]
[186.70219421 22.25793839]
[192.50605774 36.77858353]
[187.56932068 51.61645889]
[174.22293091 59.76557541]
[158.76867676 57.37816620]
[147.60070801 67.39199066]
[136.43273926 77.40580750]
[125.26478577 87.41963196]
[114.09682465 97.43345642]
[110.62918091 112.02713013]
[116.09895325 125.99429321]
[121.56872559 139.96145630]
[127.03849792 153.92861938]
[132.50827026 167.89578247]
[137.97804260 181.86293030]
[143.44781494 195.83009338]
[154.28233337 197.59527588]
[163.28392029 203.73419189]
[168.79946899 213.03573608]
[169.85171509 223.71617126]
[166.31169128 233.76103210]
[158.91009521 241.30509949]
[163.05462646 255.72116089]
[167.19915771 270.13723755]
[171.34367371 284.55328369]
[175.48820496 298.96936035]
[186.73730469 310.09448242]
[182.81777954 324.46411133]
[197.74217224 328.09155273]
[208.84226990 338.70678711]
[213.13220215 353.45440674]
[209.45800781 368.36734009]
[198.80801392 379.43411255]
[184.04702759 383.67779541]
[169.14567566 379.95687866]
[158.11235046 369.27224731]
[153.91494751 354.49804688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[38 55]
[39 54]
[40 53]
[41 52]
[43 50]
[44 49]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
