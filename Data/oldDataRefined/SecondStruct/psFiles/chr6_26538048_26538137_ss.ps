%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCCAAAGGCAUCACAUCACCAAUAGUGCAAGCGGAGUGUGCGCUUUCCAGGGGCCAAGCUUUGGCCCGCCUUUGUGCAAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[87.85250854 281.62084961]
[81.53681183 267.88754272]
[79.55130768 252.90257263]
[82.07254791 237.99839783]
[88.87635040 224.50025940]
[99.35772705 213.60841370]
[112.58467865 206.29136658]
[109.49977875 191.61201477]
[106.41487885 176.93266296]
[103.32997894 162.25331116]
[100.24507904 147.57395935]
[97.16017914 132.89460754]
[94.07528687 118.21524811]
[92.72543335 133.15438843]
[86.18714905 146.65441895]
[75.30288696 156.97589111]
[61.47504807 162.78889465]
[46.48534012 163.34443665]
[32.26515579 158.57093811]
[20.64673424 149.08346558]
[13.12709522 136.10443115]
[10.67512798 121.30619812]
[13.60676384 106.59546661]
[21.54426765 93.86770630]
[33.46490479 84.76284790]
[47.83272552 80.45404816]
[62.79645920 81.49648285]
[76.42885590 87.75640869]
[69.00372314 74.72308350]
[61.57859421 61.68976593]
[54.15346527 48.65644455]
[46.72833252 35.62312698]
[39.30319977 22.58980751]
[25.74914551 14.42903519]
[26.17188263 -0.45956981]
[18.74674988 -13.49288940]
[5.65264845 -24.26232910]
[12.37640667 -39.82598495]
[29.19315147 -37.67344284]
[31.78006935 -20.91802025]
[39.20520020 -7.88470173]
[52.22816086 -0.65615976]
[52.33652115 15.16467571]
[59.76165009 28.19799423]
[67.18678284 41.23131561]
[74.61191559 54.26463318]
[82.03704834 67.29795074]
[89.46218109 80.33127594]
[85.18811035 65.95308685]
[91.65893555 52.42058945]
[105.53376007 46.72064590]
[119.64897156 51.79615021]
[126.71686554 65.02660370]
[123.08826447 79.58110046]
[110.63462830 87.94556427]
[124.65986633 82.62649536]
[138.68511963 77.30741882]
[152.71035767 71.98834991]
[166.73559570 66.66927338]
[180.76084900 61.35020065]
[194.78608704 56.03112793]
[207.45187378 44.76106644]
[221.78773499 53.81200409]
[217.05906677 70.09316254]
[200.10516357 70.05637360]
[186.07991028 75.37544250]
[172.05467224 80.69451904]
[158.02943420 86.01358795]
[144.00418091 91.33266449]
[129.97894287 96.65174103]
[115.95369720 101.97080994]
[108.75463867 115.13034821]
[111.83953857 129.80970764]
[114.92443085 144.48905945]
[118.00933075 159.16841125]
[121.09423065 173.84776306]
[124.17913055 188.52711487]
[127.26403046 203.20646667]
[142.31739807 204.58035278]
[156.29638672 210.33178711]
[167.95802307 219.94937134]
[176.26531982 232.57791138]
[180.47962952 247.09449768]
[180.22621155 262.20831299]
[175.52758789 276.57543945]
[166.80157471 288.91836548]
[154.82408142 298.13958740]
[140.66011047 303.41912842]
[125.56915283 304.28756714]
[110.89305878 300.66766357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[35 41]
[36 40]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
