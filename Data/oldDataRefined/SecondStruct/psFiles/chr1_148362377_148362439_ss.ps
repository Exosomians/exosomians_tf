%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCGCUUGCGUCAGGGGGUGAUGGUGUUUAAUACGUCAGCUCAAAGGGUGUAAACCCCUUU\
) } def
/len { sequence length } bind def

/coor [
[83.36457062 129.52241516]
[79.82990265 144.94371033]
[65.54982758 149.17794800]
[55.47644424 160.29222107]
[45.40306091 171.40647888]
[42.47178650 187.54153442]
[26.94366646 192.81500244]
[14.79270077 181.80200195]
[18.51875877 165.83177185]
[34.28879547 161.33309937]
[44.36217880 150.21882629]
[54.43556213 139.10456848]
[57.24971390 124.47822571]
[72.25030518 119.44902802]
[66.11421204 100.25147247]
[71.96470642 80.96496582]
[87.73226929 68.41181946]
[85.53131866 53.57417297]
[83.33036041 38.73652649]
[73.65189362 26.22101784]
[79.43797302 12.49620247]
[77.23701477 -2.34144521]
[75.03605652 -17.17909241]
[72.83509827 -32.01673889]
[70.63414764 -46.85438919]
[56.32081604 -52.42432785]
[46.72260284 -64.41473389]
[44.42137527 -79.60025024]
[50.03615189 -93.89604950]
[62.05658722 -103.45663452]
[77.24924469 -105.71025085]
[91.52736664 -100.05068970]
[101.05022430 -88.00035095]
[103.25621033 -72.80070496]
[97.55192566 -58.54038239]
[85.47179413 -49.05534363]
[87.67275238 -34.21769714]
[89.87370300 -19.38005066]
[92.07466125 -4.54240227]
[94.27561951 10.29524517]
[103.79665375 21.74946594]
[98.16800690 36.53556824]
[100.36896515 51.37321854]
[102.56992340 66.21086884]
[117.09663391 70.74226379]
[128.17578125 81.17354584]
[133.57322693 95.40121460]
[132.20056152 110.55624390]
[145.06648254 118.26778412]
[157.93241882 125.97932434]
[170.79833984 133.69087219]
[187.19522095 133.41802979]
[195.39675903 147.61897278]
[186.96591187 161.68499756]
[170.57560730 161.14616394]
[163.08680725 146.55679321]
[150.22087097 138.84526062]
[137.35494995 131.13371277]
[124.48901367 123.42217255]
[118.78359985 128.20437622]
[112.17163086 131.62533569]
[104.97221375 133.51995850]
[97.53282928 133.79679871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[3 12]
[4 11]
[5 10]
[17 44]
[18 43]
[19 42]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
