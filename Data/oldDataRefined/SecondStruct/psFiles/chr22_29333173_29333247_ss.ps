%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAAGUCAGUUGAAGAAUCUCCGAGUCAAACGAGUAGUACUCGCACGAGUCCUUCUUCUUAGUAGUCCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 245.05924988]
[92.50000000 230.05924988]
[92.50000000 215.05924988]
[92.50000000 200.05924988]
[92.50000000 185.05924988]
[84.76270294 172.33198547]
[92.50000000 158.53179932]
[84.76270294 145.80453491]
[92.50000000 132.00436401]
[77.59604645 124.05393982]
[68.60833740 109.75154877]
[67.91027832 92.87405396]
[75.68621063 77.87831879]
[89.88271332 68.72429657]
[88.64402771 53.77552795]
[87.40533447 38.82675934]
[86.16664886 23.87799263]
[84.92795563 8.92922497]
[83.68926239 -6.01954222]
[71.35994720 -21.71760178]
[79.64838409 -38.99230194]
[77.17946625 -53.78772354]
[74.71054077 -68.58314514]
[71.32956696 -83.19714355]
[67.04952240 -97.57355499]
[62.76947784 -111.94996643]
[58.48943710 -126.32637787]
[54.20939255 -140.70278931]
[49.95880127 -144.67436218]
[48.06690216 -149.44422913]
[48.41208649 -153.88919067]
[50.40940475 -157.12791443]
[47.94048691 -171.92333984]
[35.77193069 -182.37826538]
[36.50292206 -198.40466309]
[49.57271576 -207.70843506]
[64.95527649 -203.15252686]
[70.85042572 -188.23184204]
[62.73590851 -174.39225769]
[65.20482635 -159.59683228]
[68.58580780 -144.98283386]
[72.86584473 -130.60641479]
[77.14588928 -116.23001099]
[81.42593384 -101.85359955]
[85.70597839 -87.47718811]
[88.92279053 -85.44475555]
[91.18511200 -81.60305023]
[91.58035278 -76.48693848]
[89.50596619 -71.05206299]
[91.97488403 -56.25664139]
[94.44380188 -41.46122360]
[103.53827667 -36.07380676]
[108.11672211 -26.29932976]
[106.36312103 -15.42293739]
[98.63803101 -7.25823259]
[99.87672424 7.69053507]
[101.11541748 22.63930130]
[102.35410309 37.58806992]
[103.59279633 52.53683853]
[104.83148193 67.48560333]
[116.96677399 71.84582520]
[126.49114227 80.53853607]
[131.93893433 92.22606659]
[132.47180176 105.10988617]
[128.00778198 117.20737457]
[119.23377991 126.65691376]
[107.50000000 132.00436401]
[115.23729706 145.80453491]
[107.50000000 158.53179932]
[115.23729706 172.33198547]
[107.50000000 185.05924988]
[107.50000000 200.05924988]
[107.50000000 215.05924988]
[107.50000000 230.05924988]
[107.50000000 245.05924988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[7 69]
[9 67]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[21 51]
[22 50]
[23 49]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
