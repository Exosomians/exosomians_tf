%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAGGAAACUUCAUAUGAACUCCUCCCACUGCCCGCCACACAUGCGCGAAGUCCCGGGACAAGUUGAUUCGUGAGAUGAGAAUCAAAUGACGAUUUAGGUGGAAGCUGGGAAUU\
) } def
/len { sequence length } bind def

/coor [
[37.80609512 304.57202148]
[25.25915337 312.79235840]
[10.26262188 313.11495972]
[-2.62620974 305.44177246]
[-9.49056339 292.10458374]
[-8.24431038 277.15609741]
[-19.33742142 287.25277710]
[-30.43053246 297.34945679]
[-30.32458305 308.39035034]
[-36.25463867 317.44082642]
[-46.01239014 321.57897949]
[-56.20612717 319.63339233]
[-67.82520294 329.12008667]
[-79.44427490 338.60678101]
[-84.75040436 354.12374878]
[-100.89157867 357.02108765]
[-111.26314545 344.31823730]
[-105.19572449 329.08279419]
[-88.93096161 326.98770142]
[-77.31188202 317.50100708]
[-65.69281006 308.01434326]
[-60.33208466 289.51654053]
[-40.52721024 286.25634766]
[-29.43409729 276.15966797]
[-18.34098816 266.06298828]
[-8.54577732 254.70280457]
[-0.19130509 242.24475098]
[8.16316700 229.78671265]
[16.51763916 217.32867432]
[24.87211227 204.87063599]
[33.05857849 192.30155945]
[41.07556534 179.62370300]
[38.73135757 167.67315674]
[45.41733170 157.01594543]
[57.97575760 153.72105408]
[66.33023071 141.26301575]
[74.68470764 128.80496216]
[83.03917694 116.34692383]
[91.39364624 103.88888550]
[86.58949280 100.30056763]
[83.85381317 93.55881500]
[84.84335327 84.95881653]
[81.25361633 70.39468384]
[70.43855286 58.84717941]
[74.90518188 44.63808060]
[71.31545258 30.07395363]
[67.53050995 15.55933189]
[56.40931702 4.30635023]
[60.49285507 -10.01754570]
[56.51339722 -24.48004532]
[42.65161514 -32.07126236]
[38.29790878 -47.26404953]
[46.03525925 -61.04479599]
[61.27322769 -65.23763275]
[74.97139740 -57.35501862]
[79.00289154 -42.07357407]
[70.97589874 -28.45950508]
[74.95535278 -13.99700451]
[85.79190826 -3.77847719]
[81.99301147 11.57987309]
[86.86495209 17.26828957]
[85.87957764 26.48421860]
[89.46931458 41.04834747]
[100.02761841 51.55413055]
[95.81774902 66.80495453]
[99.40747833 81.36907959]
[112.29600525 89.04280090]
[126.81062317 85.25786591]
[141.32524109 81.47292328]
[152.72651672 70.50380707]
[166.99429321 74.77927399]
[181.50892639 70.99433899]
[196.02354431 67.20940399]
[210.53816223 63.42446136]
[221.93943787 52.45534515]
[236.20721436 56.73081589]
[244.23107910 43.37958145]
[259.00488281 39.74788284]
[271.68380737 47.47968292]
[286.19842529 43.69474792]
[300.71304321 39.90980911]
[314.51397705 30.06244469]
[327.79696655 40.59801102]
[321.35025024 56.27844238]
[304.49798584 54.42443085]
[289.98336792 58.20936966]
[275.46875000 61.99430466]
[268.18002319 74.93301392]
[253.51403809 78.97824860]
[239.99215698 71.24543762]
[229.62907410 81.94383240]
[214.32310486 77.93908691]
[199.80848694 81.72402191]
[185.29385376 85.50895691]
[170.77923584 89.29389954]
[160.41615295 99.99229431]
[145.11018372 95.98754883]
[130.59556580 99.77248383]
[116.08094025 103.55741882]
[103.85169220 112.24335480]
[95.49721527 124.70140076]
[87.14274597 137.15943909]
[78.78826904 149.61747742]
[70.43379974 162.07551575]
[69.68371582 180.41358948]
[53.75341797 187.64068604]
[45.73643112 200.31854248]
[43.75270462 209.37222290]
[37.33015442 213.22511292]
[28.97568130 225.68315125]
[20.62120819 238.14118958]
[12.26673603 250.59922791]
[3.91226387 263.05728149]
[18.51429367 259.62496948]
[32.71642685 264.45190430]
[42.20278931 276.07125854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[12 21]
[13 20]
[14 19]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 107]
[32 106]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[42 66]
[43 65]
[45 63]
[46 62]
[47 60]
[49 58]
[50 57]
[67 99]
[68 98]
[69 97]
[71 95]
[72 94]
[73 93]
[74 92]
[76 90]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
