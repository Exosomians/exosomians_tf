%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGACUGUGCGACAGGAGACCGCUGGACAGCGACCUCUCCAACCCGGAGGCCUACGCGCGCCCCGAGACCGGAUGGCCACUGGGCCGAUCGGCCGGCGCGAGGACGAACUCGGCGGACGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.15440369 129.65364075]
[87.78176117 127.73809814]
[79.34513092 122.88790131]
[72.75346375 115.50608826]
[68.75375366 106.27363586]
[67.84738159 96.08718109]
[70.22962952 85.97212982]
[55.28762054 84.65435791]
[40.34561920 83.33659363]
[25.40361404 82.01882172]
[10.46160984 80.70105743]
[0.02438012 88.40281677]
[-12.45774460 86.92848206]
[-20.29428101 77.62180328]
[-35.19844818 75.92895508]
[-50.10261917 74.23610687]
[-60.60252380 85.50811768]
[-75.55168152 88.40225220]
[-89.17736816 82.01438904]
[-96.34309387 68.98402405]
[-111.24726105 67.29117584]
[-126.15142822 65.59833527]
[-144.13694763 74.53669739]
[-159.29136658 62.63349152]
[-174.26176453 61.69163132]
[-189.23216248 60.74977493]
[-204.20256042 59.80791855]
[-218.46133423 66.66342926]
[-230.67765808 58.14224625]
[-245.64807129 57.20038605]
[-260.08837891 64.97270966]
[-273.89547729 56.12416840]
[-272.86575317 39.75738144]
[-258.05853271 32.70909882]
[-244.70620728 42.22998810]
[-229.73580933 43.17184448]
[-216.54782104 36.24896240]
[-203.26071167 44.83751678]
[-188.29031372 45.77937317]
[-173.31990051 46.72123337]
[-158.34950256 47.66308975]
[-151.21569824 40.15764236]
[-140.89956665 37.82833481]
[-130.82020569 41.69849777]
[-124.45858765 50.69416428]
[-109.55441284 52.38700867]
[-94.65024567 54.07985306]
[-84.74472046 42.98847961]
[-70.03352356 39.81917572]
[-56.11423111 45.99224472]
[-48.40977478 59.33193970]
[-33.50560379 61.02478790]
[-18.60143471 62.71763229]
[-2.97759295 54.83193588]
[11.77937794 65.75905609]
[26.72138214 67.07682037]
[41.66338730 68.39458466]
[56.60538864 69.71235657]
[71.54739380 71.03012085]
[84.00633240 62.67699051]
[88.46195984 48.35402298]
[92.91757965 34.03105545]
[97.01185608 19.60063934]
[100.74221039 5.07189131]
[104.47255707 -9.45685673]
[99.54374695 -25.09779358]
[110.82274628 -37.00225449]
[126.70668793 -32.92395401]
[130.85552979 -17.05829430]
[119.00130463 -5.72650814]
[115.27095795 8.80223942]
[111.54060364 23.33098602]
[113.21923828 27.91134453]
[111.95748901 33.59785080]
[107.24054718 38.48667908]
[102.78492737 52.80964661]
[98.32929993 67.13261414]
[109.68421936 69.52801514]
[119.18180084 75.59904480]
[125.72400665 84.36679077]
[128.65425110 94.56102753]
[127.81855011 104.80153656]
[141.39096069 111.18823242]
[154.96336365 117.57492065]
[168.53576660 123.96160889]
[182.10816956 130.34829712]
[195.68057251 136.73498535]
[204.89111328 137.57946777]
[209.51071167 143.45651245]
[222.91833496 150.18225098]
[238.72277832 149.45410156]
[246.62966919 162.07672119]
[260.03729248 168.80245972]
[273.44491577 175.52821350]
[286.85253906 182.25396729]
[300.34359741 188.81069946]
[315.05584717 183.69326782]
[328.72921753 190.36361694]
[333.51724243 204.42102051]
[347.08963013 210.80770874]
[363.37710571 208.89701843]
[372.95721436 222.20690918]
[365.97479248 237.04530334]
[349.61276245 238.14773560]
[340.70294189 224.38011169]
[327.13055420 217.99342346]
[313.24713135 223.26470947]
[299.39178467 216.98104858]
[293.95690918 202.38310242]
[286.48159790 202.38194275]
[280.12677002 195.66157532]
[266.71917725 188.93583679]
[253.31153870 182.21008301]
[239.90391541 175.48434448]
[225.05848694 176.69355774]
[216.19259644 163.58987427]
[202.78497314 156.86413574]
[189.29388428 150.30738831]
[175.72148132 143.92070007]
[162.14907837 137.53401184]
[148.57667542 131.14732361]
[135.00427246 124.76063538]
[121.43186188 118.37394714]
[114.85089874 124.61719513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[14 53]
[15 52]
[16 51]
[20 47]
[21 46]
[22 45]
[24 41]
[25 40]
[26 39]
[27 38]
[29 36]
[30 35]
[60 77]
[61 76]
[62 75]
[63 72]
[64 71]
[65 70]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[89 117]
[90 116]
[92 114]
[93 113]
[94 112]
[95 111]
[96 109]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
