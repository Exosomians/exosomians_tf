%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:22 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGACUUUGGGUCGUCUGUUACAUCGACAACGGAUUGCUUGUGUCUUUAGAUGUAACAUACGGUCCAAGUACGGGGUCUGGACCUACAAGUC\
) } def
/len { sequence length } bind def

/coor [
[206.22415161 294.82934570]
[200.30880737 281.04498291]
[194.39347839 267.26062012]
[188.47813416 253.47624207]
[182.56280518 239.69187927]
[176.64746094 225.90751648]
[169.36793518 212.79231262]
[160.79890442 200.48086548]
[152.22988892 188.16940308]
[143.66085815 175.85795593]
[135.09184265 163.54650879]
[126.52281189 151.23504639]
[117.95378876 138.92359924]
[109.38476562 126.61215210]
[100.81574249 114.30069733]
[88.24343109 108.18281555]
[86.87280273 94.26832581]
[78.30377960 81.95687103]
[69.73475647 69.64542389]
[61.16573334 57.33396912]
[52.59671021 45.02251816]
[44.02768707 32.71106720]
[35.45866394 20.39961624]
[26.88964081 8.08816433]
[18.32061768 -4.22328758]
[8.94000053 -15.92815971]
[-1.20940900 -26.97304535]
[-11.35881805 -38.01792908]
[-21.50822639 -49.06281662]
[-29.79705238 -53.38135910]
[-31.80613327 -60.65636444]
[-41.57672119 -72.03773499]
[-51.34730530 -83.41911316]
[-67.17047882 -86.06612396]
[-74.84030151 -100.15702057]
[-68.47314453 -114.88246918]
[-52.95333862 -118.94636536]
[-40.18635941 -109.23123932]
[-39.96593475 -93.18969727]
[-30.19534874 -81.80832672]
[-20.42476082 -70.42695618]
[-10.46334171 -59.21222305]
[-0.31393263 -48.16733932]
[9.83547688 -37.12245560]
[19.98488617 -26.07756805]
[22.98432159 -25.93696213]
[26.09757233 -24.47319794]
[28.76893234 -21.64100838]
[30.43957710 -17.61696815]
[30.63206863 -12.79231071]
[39.20109177 -0.48085907]
[47.77011490 11.83059216]
[56.33913803 24.14204407]
[64.90816498 36.45349503]
[73.47718811 48.76494598]
[82.04621124 61.07640076]
[90.61523438 73.38784790]
[99.18425751 85.69930267]
[111.75656891 91.81718445]
[113.12719727 105.73167419]
[121.69622040 118.04312897]
[130.26524353 130.35458374]
[138.83427429 142.66603088]
[147.40328979 154.97747803]
[155.97232056 167.28892517]
[164.54133606 179.60038757]
[173.11036682 191.91183472]
[181.67938232 204.22328186]
[186.69328308 190.08607483]
[200.09864807 183.35585022]
[214.43136597 187.78004456]
[221.71090698 200.89523315]
[217.88400269 215.39884949]
[205.08149719 223.21524048]
[190.43182373 219.99217224]
[196.34716797 233.77653503]
[202.26249695 247.56091309]
[208.17784119 261.34527588]
[214.09318542 275.12963867]
[220.00851440 288.91400146]
[226.15582275 302.59649658]
[232.53334045 316.17321777]
[238.91085815 329.74993896]
[253.86038208 334.87707520]
[260.73071289 349.10992432]
[255.44581604 364.00439453]
[241.14112854 370.72387695]
[226.30335999 365.28179932]
[219.73550415 350.90686035]
[225.33413696 336.12744141]
[218.95661926 322.55075073]
[212.57910156 308.97402954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 45]
[27 44]
[28 43]
[29 42]
[31 41]
[32 40]
[33 39]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
