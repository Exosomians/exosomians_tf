%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGCCGAAGCCGCCGAUUACGAUGGCGAAUUUGCUGAGUCGUAGAGCUGAAGGGUUUAGUUUCCGGGAAAAGUCCCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[90.28819275 216.25787354]
[87.48435974 231.26124573]
[78.44155121 243.55718994]
[64.95522308 250.70434570]
[49.70310593 251.28363037]
[35.71350861 245.18003845]
[25.76407814 233.60542297]
[21.83028412 218.85795593]
[24.69318008 203.86573792]
[33.78433990 191.60549927]
[47.29870605 184.51150513]
[62.55298996 183.99227905]
[68.55136871 170.24385071]
[74.54975128 156.49542236]
[80.54812622 142.74697876]
[86.54650879 128.99855042]
[73.48631287 117.30430603]
[68.65180206 100.62913513]
[73.33961487 84.08750153]
[85.95388794 72.65486145]
[76.16957855 61.28528595]
[66.38526917 49.91571045]
[56.60095978 38.54613495]
[46.81664658 27.17655945]
[37.03233719 15.80698395]
[26.82974434 4.81120634]
[16.22314262 -5.79539537]
[5.61654091 -16.40199661]
[-4.99006081 -27.00859833]
[-20.96183968 -30.72805214]
[-25.46703339 -46.49622345]
[-13.87108421 -58.09217072]
[1.89708841 -53.58697891]
[5.61654091 -37.61520004]
[16.22314262 -27.00859833]
[26.82974434 -16.40199661]
[37.43634796 -5.79539537]
[42.36243057 -4.92131805]
[46.70363998 -0.78334123]
[48.40191269 6.02267313]
[58.18622208 17.39224815]
[67.97053528 28.76182556]
[77.75484467 40.13140106]
[87.53915405 51.50097656]
[97.32347107 62.87055206]
[112.19513702 64.82844543]
[124.58872223 56.37864304]
[136.98229980 47.92884445]
[149.37588501 39.47904205]
[161.76947021 31.02924156]
[174.16305542 22.57944107]
[186.55662537 14.12963963]
[198.95021057 5.67983913]
[208.63108826 -8.23838234]
[224.68531799 -2.78878069]
[223.89294434 14.14663982]
[207.40000916 18.07342148]
[195.00642395 26.52322197]
[182.61285400 34.97302246]
[170.21926880 43.42282486]
[157.82568359 51.87262344]
[145.43209839 60.32242584]
[133.03852844 68.77222443]
[120.64494324 77.22203064]
[129.49842834 89.99102020]
[131.04751587 105.65769196]
[124.70317078 120.28953552]
[136.07275391 130.07385254]
[147.44232178 139.85815430]
[158.81190491 149.64247131]
[175.01696777 152.15794373]
[180.68792725 167.54536438]
[169.99096680 179.97544861]
[153.93022156 176.66120911]
[149.02758789 161.01205444]
[137.65802002 151.22773743]
[126.28843689 141.44342041]
[114.91886139 131.65911865]
[100.29494476 134.99693298]
[94.29656219 148.74536133]
[88.29817963 162.49378967]
[82.29980469 176.24223328]
[76.30142212 189.99066162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 37]
[27 36]
[28 35]
[29 34]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
