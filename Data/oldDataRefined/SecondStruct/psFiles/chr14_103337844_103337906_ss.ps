%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACGUUCGUUGUGAGACACCGUCUACUAGUUUUGACAGACUGUGUUAAACUCGAACGAUAUC\
) } def
/len { sequence length } bind def

/coor [
[90.09265137 277.67218018]
[86.46643066 262.67703247]
[91.54441833 248.10934448]
[103.70626068 238.61759949]
[102.23600006 223.68983459]
[100.76574707 208.76205444]
[99.29548645 193.83428955]
[97.82523346 178.90652466]
[96.35497284 163.97874451]
[87.07418060 155.86206055]
[85.92762756 143.17852783]
[94.10688782 132.89312744]
[93.37087250 117.91119385]
[82.70561218 108.10311890]
[81.99464417 93.63105011]
[91.64719391 82.82482147]
[90.91117859 67.84288788]
[90.17516327 52.86095428]
[89.43914795 37.87902451]
[88.70313263 22.89709091]
[80.29801178 9.49319267]
[87.40148926 -3.59839988]
[86.66547394 -18.58033180]
[85.92945862 -33.56226349]
[85.19344330 -48.54419708]
[71.11350250 -54.43638611]
[60.99085999 -65.85982513]
[56.83538055 -80.54637146]
[59.47213745 -95.58000946]
[68.37759399 -107.97579956]
[81.78357697 -115.27253723]
[97.02830505 -116.02146912]
[111.08493805 -110.07387543]
[121.16252136 -98.61066437]
[125.26013184 -83.90786743]
[122.56419373 -68.88472748]
[113.60998535 -56.52410507]
[100.17537689 -49.28021240]
[100.91139221 -34.29827881]
[101.64740753 -19.31634712]
[102.38342285 -4.33441496]
[110.73590088 7.99787521]
[103.68506622 22.16107559]
[104.42108154 37.14300919]
[105.15709686 52.12493896]
[105.89311218 67.10687256]
[106.62912750 82.08880615]
[117.29438782 91.89688110]
[118.00535583 106.36894989]
[108.35280609 117.17517853]
[109.08882141 132.15711975]
[119.45536804 147.16252136]
[111.28274536 162.50849915]
[112.75299835 177.43626404]
[114.22325897 192.36402893]
[115.69351959 207.29180908]
[117.16377258 222.21957397]
[118.63403320 237.14733887]
[132.41392517 244.08406067]
[140.23635864 257.38116455]
[139.60522461 272.79562378]
[130.72190857 285.40869141]
[116.42103577 291.19564819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[12 51]
[13 50]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[22 41]
[23 40]
[24 39]
[25 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
