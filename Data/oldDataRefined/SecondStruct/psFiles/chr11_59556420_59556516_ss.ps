%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGUCCCCGGGCCUAUCGAGUCAGCCAUCUCGUAGUCUGAAAAUUAGACUCCCAGGCCCCAAGUUCAGGGACAAGCCCGCCUACGACAAAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[206.90478516 306.87521362]
[208.77061462 291.93490601]
[213.70230103 277.70916748]
[221.48426819 264.81982422]
[231.77630615 253.83038330]
[223.19454956 241.52780151]
[214.61280823 229.22521973]
[206.03105164 216.92263794]
[197.44931030 204.62005615]
[174.53277588 198.12281799]
[170.33416748 174.00695801]
[159.22999573 163.92243958]
[148.12582397 153.83792114]
[137.02165222 143.75341797]
[125.91748047 133.66889954]
[114.81330872 123.58438873]
[97.17601013 127.70708466]
[80.73313904 120.11083221]
[72.43935394 104.00852966]
[57.56250381 102.09037781]
[42.68565369 100.17221832]
[27.80880356 98.25405884]
[17.25599098 109.63025665]
[2.02535367 112.59796143]
[-12.02661896 106.01604462]
[-19.49665642 92.41537476]
[-17.51237679 77.02569580]
[-6.83677673 65.76464844]
[8.42515945 62.96233749]
[22.40490341 69.69630432]
[29.72696114 83.37721252]
[44.60380936 85.29536438]
[59.48065948 87.21352386]
[74.35751343 89.13168335]
[78.50661469 82.28865051]
[84.43032074 76.90795135]
[79.70369720 62.67211533]
[74.97707367 48.43627930]
[70.25045013 34.20044327]
[65.52382660 19.96460915]
[60.79720306 5.72877216]
[56.07057953 -8.50706387]
[45.34122849 -21.63403320]
[54.98500824 -35.57798386]
[71.05368805 -30.17115784]
[70.30641937 -13.23368740]
[75.03304291 1.00214887]
[79.75966644 15.23798466]
[84.48628998 29.47382164]
[89.21291351 43.70965576]
[93.93953705 57.94549179]
[98.66616058 72.18132782]
[112.68584442 75.20631409]
[123.34127808 84.80651093]
[127.80667877 98.43597412]
[124.89782715 112.48021698]
[136.00199890 122.56472778]
[147.10617065 132.64924622]
[158.21034241 142.73376465]
[169.31449890 152.81826782]
[180.41867065 162.90278625]
[186.95846558 160.61283875]
[193.84170532 160.35395813]
[200.45578003 162.12498474]
[206.21917725 165.74516296]
[210.63256836 170.87232971]
[213.32206726 177.03506470]
[214.07080078 183.67599487]
[212.83624268 190.20223999]
[209.75189209 196.03829956]
[218.33363342 208.34088135]
[226.91539001 220.64347839]
[235.49713135 232.94606018]
[244.07888794 245.24864197]
[257.94662476 239.38525391]
[272.73046875 236.53366089]
[287.78414917 236.81849670]
[302.44952393 240.22732544]
[316.08554077 246.61112976]
[328.09603882 255.69084167]
[337.95605469 267.06951904]
[345.23446655 280.24972534]
[349.61312866 294.65533447]
[350.90063477 309.65652466]
[349.04067993 324.59756470]
[344.11459351 338.82525635]
[336.33770752 351.71762085]
[326.04998779 362.71112061]
[313.70117188 371.32510376]
[299.83111572 377.18304443]
[285.04617310 380.02880859]
[269.99261475 379.73806763]
[255.32858276 376.32345581]
[241.69508362 369.93429565]
[229.68812561 360.84985352]
[219.83261108 349.46731567]
[212.55938721 336.28421021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[19 34]
[20 33]
[21 32]
[22 31]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
