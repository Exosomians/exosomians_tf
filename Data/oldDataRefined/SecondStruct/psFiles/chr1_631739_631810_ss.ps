%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCCUCCUCCUCUGGGGUAAGAUAUGGUUGUGGAUAAGACUAAAAAGCCAGUGGGACUUCAAAUAUAAGA\
) } def
/len { sequence length } bind def

/coor [
[87.76862335 263.24291992]
[76.75521851 252.94882202]
[68.52597809 240.31777954]
[63.55933380 226.08416748]
[62.14403534 211.07548523]
[64.36236572 196.16433716]
[70.08536530 182.21762085]
[78.98029327 170.04620361]
[90.53002167 160.35768127]
[104.06305695 153.71536255]
[100.86023712 139.06129456]
[97.65742493 124.40721130]
[94.45461273 109.75313568]
[90.93724060 95.17135620]
[87.10694122 80.66864014]
[83.27664185 66.16592407]
[79.44634247 51.66320801]
[67.06983185 50.75222778]
[55.51285934 46.28523254]
[45.77215576 38.65981674]
[38.68421936 28.54543686]
[34.85347366 16.82464218]
[34.60073471 4.51608372]
[37.93638229 -7.31403065]
[44.56046677 -17.64428329]
[53.88962555 -25.58624268]
[65.10844421 -30.46085930]
[63.81897354 -45.40533066]
[62.52949905 -60.34980392]
[61.24002838 -75.29427338]
[59.95055771 -90.23874664]
[46.59039688 -98.13088226]
[40.45158005 -112.38200378]
[43.89461136 -127.51227570]
[55.59557343 -137.70379639]
[71.05520630 -139.03771973]
[84.32897186 -131.00112915]
[90.31282806 -116.68424225]
[86.70586395 -101.59220886]
[74.89502716 -91.52822113]
[76.18450165 -76.58374786]
[77.47397614 -61.63927460]
[78.76344299 -46.69480515]
[80.05291748 -31.75033188]
[97.15838623 -26.33033943]
[110.42377472 -14.17557335]
[117.35207367 2.48120332]
[116.61590576 20.55474091]
[108.31164551 36.67875290]
[93.94905853 47.83290863]
[97.77935791 62.33562469]
[101.60965729 76.83834076]
[105.43995667 91.34105682]
[110.52317047 97.94115448]
[109.10868835 106.55031586]
[112.31150055 121.20439911]
[115.51432037 135.85847473]
[118.71713257 150.51255798]
[133.78732300 150.90332031]
[148.32589722 154.88993835]
[161.48760986 162.24063110]
[172.50724792 172.52806091]
[180.74415588 185.15409851]
[185.71942139 199.38470459]
[187.14382935 214.39251709]
[184.93452454 229.30500793]
[179.21998596 243.25518799]
[170.33244324 255.43200684]
[158.78858948 265.12753296]
[145.25958252 271.77804565]
[130.53198242 274.99691772]
[115.46203613 274.59701538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 58]
[11 57]
[12 56]
[13 55]
[14 53]
[15 52]
[16 51]
[17 50]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
