%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUUUCAAUCGUCAACCAUCUCGGUCCUAAACUUGGGUCCCCAAGAUGAAGAUCUCAGACACAAGAAUUGGUGAUACGAUACGAUAACAGAAGCUAUA\
) } def
/len { sequence length } bind def

/coor [
[124.91464996 413.84313965]
[116.48858643 401.36535645]
[110.84129333 387.40820312]
[108.21964264 372.58184814]
[108.73825836 357.53442383]
[112.37445068 342.92376709]
[118.96926880 329.38854980]
[128.23442078 317.52047729]
[139.76486206 307.83840942]
[153.05653381 300.76559448]
[148.91200256 286.34951782]
[144.76748657 271.93344116]
[140.62295532 257.51739502]
[136.47843933 243.10131836]
[121.47770691 235.67720032]
[116.30446625 219.40708923]
[124.58156586 204.09263611]
[119.99070740 189.81243896]
[115.39984894 175.53224182]
[110.80899048 161.25204468]
[97.48285675 154.69844055]
[92.62364960 140.28169250]
[99.58802795 126.34844971]
[94.99716949 112.06825256]
[85.51512146 100.44539642]
[72.44767761 93.08048248]
[56.62651443 93.04512787]
[49.33795547 80.05566406]
[36.27051163 72.69075775]
[23.20306778 65.32584381]
[10.13562489 57.96093369]
[-6.24810266 58.67192459]
[-14.82626152 44.69525528]
[-6.77437735 30.40892792]
[9.62446213 30.50948715]
[17.50053596 44.89348984]
[30.56797981 52.25839996]
[43.63542175 59.62331009]
[56.70286560 66.98822021]
[71.58936310 66.49678802]
[79.81259155 80.01303864]
[92.88003540 87.37795258]
[99.47023773 83.79755402]
[99.85897064 68.80258942]
[112.65063477 76.63675690]
[119.24083710 73.05635834]
[120.17338562 58.08537292]
[121.10592651 43.11438751]
[122.03847504 28.14340401]
[114.25716400 13.70791531]
[123.09711456 -0.10466146]
[139.46453857 0.91486758]
[146.52203369 15.71769905]
[137.00946045 29.07594872]
[136.07690430 44.04693222]
[135.14436340 59.01791763]
[134.21182251 73.98889923]
[149.20069885 74.56653595]
[162.20863342 82.03603363]
[170.26280212 94.69029999]
[171.52246094 109.63731384]
[165.69975281 123.46106720]
[154.12539673 133.00224304]
[139.44461060 136.08030701]
[125.01255798 131.99179077]
[114.12757874 121.67107391]
[109.27736664 107.47739410]
[113.86822510 121.75759125]
[127.64735413 129.02210999]
[132.09971619 143.56965637]
[125.08918762 156.66119385]
[129.68003845 170.94139099]
[134.27090454 185.22158813]
[138.86175537 199.50178528]
[151.56394958 204.29025269]
[159.03230286 215.39089966]
[158.69160461 228.56993103]
[150.89450073 238.95680237]
[155.03901672 253.37286377]
[159.18354797 267.78894043]
[163.32807922 282.20498657]
[167.47259521 296.62106323]
[182.49114990 295.55487061]
[197.40313721 297.63491821]
[211.55664062 302.77026367]
[224.33296204 310.73641968]
[235.17356873 321.18508911]
[243.60453796 333.65957642]
[249.25732422 347.61447144]
[251.88479614 362.43978882]
[251.37211609 377.48742676]
[247.74166870 392.09951782]
[241.15217590 405.63732910]
[231.89169312 417.50903320]
[220.36506653 427.19564819]
[207.07617188 434.27371216]
[192.60594177 438.43380737]
[177.58697510 439.49404907]
[162.67581177 437.40814209]
[148.52432251 432.26724243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[17 74]
[18 73]
[19 72]
[20 71]
[23 68]
[24 67]
[25 42]
[26 41]
[28 39]
[29 38]
[30 37]
[31 36]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
