%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:42 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCACCGAGAACGUUACUACACUUAGAGAGUGACUUAAGUUGGAACUUCACGCUUAGGUACUCGAAAAAUUGGGACUCGUUAA\
) } def
/len { sequence length } bind def

/coor [
[76.83149719 320.33453369]
[64.56103516 329.41189575]
[49.56560516 332.25793457]
[34.82256699 328.30752563]
[23.25915909 318.34509277]
[17.17130280 304.34863281]
[17.76774979 289.09716797]
[24.93007469 275.61889648]
[37.23619080 266.58993530]
[52.24271011 263.80297852]
[56.12499619 249.31408691]
[60.00728226 234.82521057]
[63.88956833 220.33631897]
[53.19013214 208.03671265]
[51.82822800 191.62640381]
[60.52589035 177.45063782]
[76.07756042 171.10635376]
[79.41537476 156.48243713]
[82.75318909 141.85852051]
[70.59075165 134.41923523]
[61.34497070 123.56642914]
[55.93280411 110.37641907]
[54.89099884 96.15733337]
[58.32287979 82.31934357]
[65.88809204 70.23482513]
[76.83634949 61.10227203]
[90.08185577 55.82740402]
[104.31100464 54.93334579]
[108.19329071 40.44445801]
[112.07557678 25.95557213]
[115.95785522 11.46668530]
[119.84014130 -3.02220225]
[119.04262543 -12.37538719]
[124.14797211 -17.97500420]
[128.56930542 -32.30859756]
[132.99063110 -46.64218903]
[137.41195679 -60.97578049]
[141.83328247 -75.30937195]
[146.25460815 -89.64296722]
[150.67593384 -103.97655487]
[154.82847595 -118.39031982]
[158.71075439 -132.87921143]
[162.59304810 -147.36808777]
[157.82829285 -163.05978394]
[169.23133850 -174.84547424]
[185.07170105 -170.60107422]
[189.05416870 -154.69284058]
[177.08192444 -143.48580933]
[173.19964600 -128.99691772]
[169.31735229 -114.50803375]
[170.66099548 -107.05049133]
[165.00953674 -99.55522919]
[160.58819580 -85.22163391]
[156.16687012 -70.88804626]
[151.74554443 -56.55445099]
[147.32421875 -42.22085953]
[142.90289307 -27.88726807]
[138.48156738 -13.55367661]
[134.32902527 0.86008334]
[130.44674683 15.34897041]
[126.56446075 29.83785820]
[122.68217468 44.32674408]
[118.79988861 58.81563187]
[131.66638184 67.64527893]
[140.77062988 80.31895447]
[145.03096008 95.33091736]
[143.94120789 110.89760590]
[137.63084412 125.16956329]
[126.84960938 136.45115662]
[112.87839508 143.40200806]
[97.37710571 145.19633484]
[94.03929138 159.82025146]
[90.70147705 174.44416809]
[100.59857178 184.23576355]
[104.27361298 197.55107117]
[100.85443878 210.82176208]
[91.35511780 220.54739380]
[78.37845612 224.21859741]
[74.49617004 238.70748901]
[70.61388397 253.19638062]
[66.73159790 267.68527222]
[78.33415222 277.60211182]
[84.47707367 291.57446289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 81]
[11 80]
[12 79]
[13 78]
[17 73]
[18 72]
[19 71]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
