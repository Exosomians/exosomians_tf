%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUGUGUGACACGUUGGGGGAAGUCACGAGUGUCGGGUGUCCAUUCCCCUGACCCGUUACCAAGCUCCGACGGUAAACGAUACCGUACCCAUGU\
) } def
/len { sequence length } bind def

/coor [
[108.72612762 155.22119141]
[107.44673920 142.84693909]
[109.05524445 130.50167847]
[113.46931458 118.85080719]
[101.27661133 110.11364746]
[93.24835205 108.29752350]
[88.83424377 100.88575745]
[76.93394470 91.75433350]
[65.03363800 82.62290955]
[53.13334274 73.49149323]
[41.23303986 64.36006927]
[25.76835632 66.22588348]
[13.82983971 56.79579926]
[12.14637566 42.04108810]
[0.24607584 32.90966415]
[-11.65422440 23.77824402]
[-23.55452347 14.64682198]
[-35.45482635 5.51540041]
[-47.35512543 -3.61602092]
[-59.25542450 -12.74744225]
[-71.15572357 -21.87886429]
[-83.05602264 -31.01028442]
[-94.95632172 -40.14170837]
[-113.45671844 -36.85555649]
[-128.35266113 -47.78591156]
[-130.68748474 -65.79717255]
[-143.15953064 -74.13072968]
[-155.63157654 -82.46428680]
[-169.73559570 -76.21287537]
[-184.97689819 -78.60165405]
[-196.49205017 -88.86835480]
[-200.60658264 -103.73691559]
[-196.00756836 -118.46283722]
[-184.16256714 -128.34712219]
[-168.85124207 -130.23574829]
[-154.95939636 -123.52603912]
[-146.91986084 -110.35905457]
[-147.29801941 -94.93632507]
[-134.82598877 -86.60277557]
[-122.35393524 -78.26921844]
[-111.69250488 -82.92970276]
[-99.99383545 -81.76322937]
[-90.26409149 -74.95043182]
[-85.06165314 -64.13800049]
[-85.82490540 -52.04200745]
[-73.92460632 -42.91058350]
[-62.02430344 -33.77916336]
[-50.12400436 -24.64774323]
[-38.22370148 -15.51632118]
[-26.32340240 -6.38489962]
[-14.42310333 2.74652195]
[-2.52280283 11.87794304]
[9.37749767 21.00936508]
[21.27779770 30.14078712]
[35.96546936 27.94808769]
[48.16414642 37.03912354]
[50.36446381 52.45977020]
[62.26476288 61.59119034]
[74.16506195 70.72261047]
[86.06536102 79.85403442]
[97.96566010 88.98545837]
[110.01377869 97.92094421]
[122.20647430 106.65811157]
[136.68310547 95.95153046]
[153.86483765 90.64138031]
[171.81385803 91.31127167]
[188.51089478 97.87123871]
[202.08232117 109.56948853]
[211.01046753 125.07854462]
[214.30326843 142.64587402]
[211.60453796 160.29188538]
[225.05763245 166.92622375]
[238.51072693 173.56054688]
[251.96380615 180.19488525]
[265.41690063 186.82920837]
[278.86999512 193.46353149]
[294.46270752 189.68898010]
[307.04678345 199.63987732]
[306.96884155 215.68273926]
[294.28863525 225.51086426]
[278.73333740 221.58494568]
[272.23565674 206.91662598]
[258.78256226 200.28230286]
[245.32948303 193.64796448]
[231.87638855 187.01364136]
[218.42329407 180.37930298]
[204.97021484 173.74497986]
[196.89739990 183.08630371]
[186.88121033 190.32083130]
[175.45851135 195.05545044]
[163.24279785 197.03118896]
[150.89125061 196.13734436]
[139.06935120 192.41777039]
[128.41506958 186.06861877]
[119.50438690 177.42811584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[26 40]
[27 39]
[28 38]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
