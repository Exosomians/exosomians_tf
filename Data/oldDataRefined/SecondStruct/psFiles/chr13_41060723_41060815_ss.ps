%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUAUUCCUUCGCAAGGGUAUGGCCCUCAGCUUGGGCCCGGUGGACCCACUUUUGGUCCUUAGGAUUGGCGAUCUGGUAUACCCUUCACGA\
) } def
/len { sequence length } bind def

/coor [
[38.29509735 306.99987793]
[36.15037155 322.11154175]
[27.65419197 334.79138184]
[14.49348354 342.52172852]
[-0.71868700 343.76776123]
[-14.96193218 338.28210449]
[-25.40824509 327.15386963]
[-29.98350334 312.59262085]
[-27.77928543 297.48950195]
[-19.23324013 284.84326172]
[-6.04219198 277.16476440]
[9.17476749 275.97863770]
[14.56588364 261.98092651]
[19.95700073 247.98323059]
[16.22625160 230.92456055]
[30.41250229 219.33317566]
[35.33287430 205.16314697]
[40.25325012 190.99310303]
[45.17362213 176.82307434]
[50.09399414 162.65303040]
[55.01436615 148.48300171]
[59.93474197 134.31295776]
[64.85511017 120.14292145]
[59.93474197 105.97288513]
[47.29135513 97.90164948]
[34.64797211 89.83041382]
[22.00458717 81.75917816]
[9.36120415 73.68794250]
[-5.50173807 78.54870605]
[-19.99249458 72.67060852]
[-27.26897240 58.82911682]
[-23.89544296 43.55976105]
[-11.46478271 34.07225800]
[4.15363073 34.84632111]
[15.58526039 45.51646042]
[17.43243980 61.04455948]
[30.07582283 69.11579895]
[42.71920776 77.18703461]
[55.36259079 85.25827026]
[68.00597382 93.32950592]
[72.20536804 84.64765167]
[78.60799408 77.80837250]
[86.51583862 73.31964874]
[95.13225555 71.44701385]
[103.64105225 72.20176697]
[109.49688721 58.39201736]
[115.35272980 44.58226776]
[121.20856476 30.77251816]
[127.06440735 16.96277046]
[119.79921722 3.11535263]
[123.18518829 -12.15125084]
[135.62358093 -21.62861633]
[151.24136353 -20.84182167]
[162.66429138 -10.16236687]
[164.49880981 5.36723518]
[155.87870789 18.41438293]
[140.87416077 22.81860924]
[135.01831055 36.62835693]
[129.16247559 50.43810654]
[123.30664062 64.24785614]
[117.45079803 78.05760193]
[120.82508087 81.22993469]
[123.63105774 84.91449738]
[125.79215240 89.01073456]
[127.24939728 93.40685272]
[142.24102783 93.90808105]
[157.23265076 94.40930176]
[172.22427368 94.91053009]
[187.21589661 95.41175842]
[203.24821472 89.89805603]
[212.98463440 103.77748871]
[202.34291077 116.97560883]
[186.71466064 110.40338135]
[171.72303772 109.90215302]
[156.73141479 109.40093231]
[141.73979187 108.89970398]
[126.74816895 108.39848328]
[120.44468689 120.84453583]
[108.53176117 129.13534546]
[93.55328369 130.85412598]
[79.02514648 125.06329346]
[74.10477448 139.23333740]
[69.18440247 153.40336609]
[64.26403046 167.57341003]
[59.34365845 181.74343872]
[54.42328644 195.91348267]
[49.50291061 210.08351135]
[44.58253860 224.25355530]
[49.51861572 236.31259155]
[44.97877121 248.09483337]
[33.95470810 253.37434387]
[28.56359291 267.37203979]
[23.17247581 281.36975098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 93]
[13 92]
[14 91]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[22 82]
[23 81]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
