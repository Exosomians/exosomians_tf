%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUCAACGUAAAAAUCGCGGACCUGUCCCUGAACUUGGGACCUGGGAGUCUAAUUUUCAGACUACGAGAUGGCUGACUCGAUGGGUCCGAGGAAUCCCUUGACAAA\
) } def
/len { sequence length } bind def

/coor [
[5.27085447 305.63708496]
[-9.10521698 301.35589600]
[-22.26518250 294.15762329]
[-33.62483597 284.36178589]
[-42.67988586 272.40325928]
[-49.02835846 258.81295776]
[-52.38842392 244.19412231]
[-52.61091995 229.19577026]
[-49.68597412 214.48371887]
[-43.74342346 200.71105957]
[-35.04708481 188.48921204]
[-23.98300362 178.36073303]
[-11.04235268 170.77523804]
[3.20040083 166.06950378]
[18.11297989 164.45240784]
[33.03337097 165.99574280]
[47.29922104 170.63099670]
[60.27722549 178.15238953]
[71.39125824 188.22602844]
[80.14882660 200.40629578]
[81.01300812 185.43121338]
[81.87718964 170.45613098]
[82.74137115 155.48104858]
[83.60554504 140.50596619]
[84.46972656 125.53087616]
[85.33390808 110.55578613]
[77.70944977 97.63806152]
[64.18154907 91.15763855]
[50.65364838 84.67722321]
[37.12574387 78.19680023]
[23.59784126 71.71637726]
[9.43307018 78.34158325]
[-5.66296625 74.26190948]
[-14.56238174 61.40367126]
[-13.06314468 45.83811951]
[-1.87314844 34.91484451]
[13.72403240 33.79147339]
[26.36388588 42.99843216]
[30.07826042 58.18847656]
[43.60616302 64.66889954]
[57.13406754 71.14931488]
[70.66197205 77.62973785]
[84.18987274 84.11015320]
[96.52517700 75.57550812]
[95.22980499 60.63154221]
[93.93443298 45.68758011]
[92.63906097 30.74361801]
[91.34368896 15.79965687]
[90.04831696 0.85569423]
[88.75294495 -14.08826828]
[87.45757294 -29.03223038]
[80.06597900 -44.29003906]
[92.68131256 -55.61654663]
[107.05744934 -46.62971497]
[102.40153503 -30.32760239]
[103.69690704 -15.38364029]
[104.99227905 -0.43967804]
[106.28765106 14.50428391]
[107.58302307 29.44824600]
[108.87839508 44.39220810]
[110.17376709 59.33617020]
[111.46913910 74.28013611]
[117.92800140 78.09236145]
[125.55267334 65.17475891]
[138.47015381 72.79964447]
[130.84573364 85.71681213]
[137.30459595 89.52904510]
[151.01362610 83.44116211]
[164.72267151 77.35327911]
[178.43170166 71.26539612]
[181.54064941 56.06296158]
[193.01429749 45.61619186]
[208.44079590 43.94208527]
[221.88835144 51.68437195]
[228.18609619 65.86598206]
[224.91241455 81.03379822]
[213.32611084 91.35548401]
[197.88235474 92.86214447]
[184.51959229 84.97443390]
[170.81054688 91.06231689]
[157.10151672 97.15019989]
[143.39247131 103.23808289]
[127.73006439 117.54952240]
[110.92981720 119.23159790]
[100.30899048 111.41996765]
[99.44481659 126.39505005]
[98.58063507 141.37013245]
[97.71645355 156.34523010]
[96.85227203 171.32031250]
[95.98809814 186.29539490]
[95.12391663 201.27047729]
[100.00516510 215.45404053]
[109.90212250 226.72569275]
[119.79907990 237.99736023]
[135.49624634 242.74401855]
[138.97013855 258.77099609]
[126.64709473 269.59112549]
[111.20402527 264.07354736]
[108.52742767 247.89431763]
[98.63047028 236.62265015]
[88.73351288 225.35099792]
[89.32669067 240.33926392]
[86.76631165 255.11912537]
[81.16603851 269.03448486]
[72.77447510 281.46755981]
[61.96414948 291.86645508]
[49.21496201 299.76950073]
[35.09288788 304.82589722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[67 82]
[68 81]
[69 80]
[70 79]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
