%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:56 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACAAAACCACAACAUCGACUCAUGGAAACCCGUCACAAAACGUGGAGACUCUCACCUUACUGAGGACACCUCAACUAGGAUCAGACCCACGUUUGUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[-7.41362286 246.91477966]
[-11.86276722 253.16793823]
[-17.00769806 258.86029053]
[-22.77836800 263.91485596]
[-29.09627342 268.26336670]
[-35.87552261 271.84713745]
[-43.02400208 274.61785889]
[-50.44462967 276.53833008]
[-58.03667068 277.58282471]
[-65.69710541 277.73754883]
[-73.32202911 277.00079346]
[-80.80807495 275.38284302]
[-88.05377960 272.90603638]
[-94.96098328 269.60430908]
[-101.43617249 265.52276611]
[-107.39171600 260.71704102]
[-112.74707031 255.25265503]
[-117.42985535 249.20391846]
[-121.37684631 242.65310669]
[-124.53482819 235.68925476]
[-126.86129761 228.40695190]
[-128.32504272 220.90507507]
[-128.90657043 213.28546143]
[-128.59834290 205.65145874]
[-143.26425171 202.50323486]
[-157.93014526 199.35502625]
[-172.59605408 196.20680237]
[-188.02807617 201.75520325]
[-200.37269592 190.95971680]
[-196.93083191 174.92582703]
[-181.24316406 170.14782715]
[-169.44784546 181.54090881]
[-154.78193665 184.68911743]
[-140.11602783 187.83734131]
[-125.45012665 190.98554993]
[-111.56652069 167.43792725]
[-89.26641846 151.56663513]
[-62.40048218 146.14784241]
[-35.62229156 152.14973450]
[-13.58228397 168.55970764]
[-1.23752594 160.03874207]
[11.10723209 151.51777649]
[23.45199013 142.99679565]
[35.79674911 134.47583008]
[48.14150620 125.95485687]
[60.48626328 117.43388367]
[72.83102417 108.91291809]
[76.61067963 102.41467285]
[85.67980194 100.32763672]
[92.22283173 87.97124481]
[106.17596436 87.07588196]
[118.77244568 78.93164825]
[118.51042938 65.05601501]
[125.12499237 52.97953033]
[136.77285767 45.84253693]
[150.31857300 45.43945312]
[162.17823792 51.76878357]
[175.01495361 44.00871658]
[187.85166931 36.24864960]
[189.28402710 20.91063690]
[199.35549927 9.49053669]
[214.04658508 6.22925425]
[227.67784119 12.17289066]
[240.51455688 4.41282320]
[253.35128784 -3.34724402]
[266.18798828 -11.10731125]
[279.02471924 -18.86737823]
[289.45153809 -32.23590469]
[305.18405151 -25.91733360]
[303.46762085 -9.05049706]
[286.78479004 -6.03065920]
[273.94805908 1.72940779]
[261.11135864 9.48947525]
[248.27462769 17.24954224]
[235.43791199 25.00960922]
[234.36598206 39.84163284]
[224.65097046 51.33435059]
[209.85852051 54.94501877]
[195.61174011 49.08536530]
[182.77502441 56.84543228]
[169.93830872 64.60549927]
[169.11596680 80.92347717]
[158.67156982 93.70198822]
[142.52374268 97.83728027]
[126.91667938 91.52812958]
[114.32019806 99.67236328]
[107.77716827 112.02875519]
[93.82403564 112.92411804]
[81.35198975 121.25767517]
[69.00723267 129.77864075]
[56.66247559 138.29962158]
[44.31771851 146.82058716]
[31.97296143 155.34155273]
[19.62820244 163.86253357]
[7.28344536 172.38349915]
[-5.06131268 180.90446472]
[-1.85400677 187.89198303]
[0.51869392 195.20350647]
[2.02495337 202.73977661]
[2.64469743 210.39851379]
[2.36988091 218.07582092]
[1.20459270 225.66757202]
[-0.83500540 233.07086182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 35]
[25 34]
[26 33]
[27 32]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[49 88]
[51 86]
[52 85]
[57 81]
[58 80]
[59 79]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
