%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUACAUAAGGAAGUAGCCCUUAACUUGGGCCCGGCGUGCCCACUUUCGUGGCUUAGGAUCGGUGAUCUGGUGGUUCCUUCGACUGGG\
) } def
/len { sequence length } bind def

/coor [
[120.15145111 154.09661865]
[118.01295471 168.94338989]
[111.68908691 182.54518127]
[101.71576691 193.74932861]
[88.93815613 201.60635376]
[74.43907928 205.45040894]
[59.44723892 204.95574951]
[45.23309326 200.16429138]
[33.00119781 191.48207092]
[23.78812981 179.64488220]
[18.37463379 165.65580750]
[17.21946716 150.70034790]
[20.42052460 136.04589844]
[27.70653725 122.93429565]
[38.46006393 112.47667694]
[51.76980972 105.55926514]
[66.50786591 102.76825714]
[81.42906189 104.34114075]
[66.65694427 101.73641968]
[51.88483047 99.13169861]
[37.11271286 96.52697754]
[25.25073051 106.71654510]
[9.61368179 106.84578705]
[-2.41509914 96.85366821]
[-5.15598822 81.45816040]
[2.68517756 67.92855835]
[17.40604019 62.65312576]
[32.05585861 68.12275696]
[39.71743393 81.75485992]
[54.48955154 84.35958099]
[69.26166534 86.96430206]
[84.03378296 89.56902313]
[96.61384583 81.39943695]
[100.24266815 66.84500122]
[103.87149811 52.29056931]
[107.50032806 37.73613358]
[110.87459564 23.12058067]
[106.17559052 8.01330090]
[116.38996124 -2.82717443]
[119.50863647 -17.49938774]
[113.35956573 -34.74809265]
[125.35810852 -47.42503357]
[127.96282959 -62.19715118]
[130.56755066 -76.96926880]
[133.17227173 -91.74138641]
[127.05803680 -106.95809174]
[137.39048767 -119.69277954]
[153.54049683 -116.84510040]
[158.89431763 -101.34449005]
[147.94438171 -89.13665771]
[145.33966064 -74.36454773]
[142.73493958 -59.59242630]
[140.13021851 -44.82031250]
[146.85231018 -34.59955215]
[144.65011597 -22.15597916]
[134.18084717 -14.38071346]
[131.06217957 0.29150096]
[135.98425293 14.34932709]
[125.54680634 26.23925781]
[127.27355957 33.59606552]
[122.05476379 41.36495972]
[118.42593384 55.91939545]
[114.79710388 70.47383118]
[111.16828156 85.02826691]
[113.53112030 88.99967957]
[114.68776703 93.16934204]
[114.69479370 97.20414734]
[113.69429779 100.81270599]
[111.89658356 103.76583099]
[122.68668365 114.18570709]
[133.47677612 124.60558319]
[144.26687622 135.02545166]
[155.05697632 145.44532776]
[170.35876465 149.46598816]
[174.13922119 163.87284851]
[189.93473816 163.34646606]
[201.41882324 174.20423889]
[201.77818298 190.00444031]
[190.79960632 201.37309265]
[174.99647522 201.56536865]
[163.74453735 190.46720886]
[163.71934509 174.66294861]
[149.18933105 171.38758850]
[144.63710022 156.23542786]
[133.84700012 145.81555176]
[123.05690002 135.39567566]
[112.26680756 124.97580719]
[101.47670746 114.55593109]
[111.51749420 125.69965363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 32]
[19 31]
[20 30]
[21 29]
[33 64]
[34 63]
[35 62]
[36 61]
[37 59]
[39 57]
[40 56]
[42 53]
[43 52]
[44 51]
[45 50]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
