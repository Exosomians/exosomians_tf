%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAUCAGCACCGGCUCACCAAUUCCGCUACCUGAUCUUUAGGUAACCCCAGAGGGGCGCGUCCAAGCUUAGGACGGCUGAUGCUCAAGCUCCAAAAUCUAUUAAUUGUUGUCUUUUAAAUCUUCUU\
) } def
/len { sequence length } bind def

/coor [
[196.16246033 175.44294739]
[199.07856750 160.70866394]
[203.81843567 146.45605469]
[210.30731201 132.90991211]
[197.69747925 124.78633118]
[185.08766174 116.66275787]
[172.47784424 108.53917694]
[159.86802673 100.41560364]
[147.25820923 92.29203033]
[134.64839172 84.16844940]
[130.15158081 115.32781219]
[105.91716766 128.95552063]
[83.76338196 119.38167572]
[71.15356445 127.50524902]
[58.54374313 135.62882996]
[59.37166595 150.96539307]
[52.40607834 164.65393066]
[39.52069092 173.01229858]
[24.18161011 173.79214478]
[10.51496887 166.78369141]
[2.19702673 153.87216187]
[1.46526814 138.53071594]
[8.51653194 124.88610840]
[21.45406342 116.60868073]
[36.79773331 115.92501068]
[50.42016983 123.01901245]
[63.02998734 114.89543152]
[75.63980103 106.77185822]
[74.98551178 103.68137360]
[74.72169495 100.53341675]
[60.30613327 96.38715363]
[45.89056778 92.24089050]
[31.47500229 88.09461975]
[17.05943871 83.94835663]
[2.64387441 79.80209351]
[-11.77168941 75.65583038]
[-28.66500664 77.08837891]
[-34.71810150 61.25182343]
[-21.17611313 51.05129242]
[-7.62542582 61.24026871]
[6.79013824 65.38652802]
[21.20570374 69.53279114]
[35.62126541 73.67906189]
[50.03683090 77.82532501]
[64.45239258 81.97158813]
[78.86795807 86.11785126]
[77.97001648 77.22130585]
[80.15985870 67.48049927]
[72.19042969 54.77269745]
[64.22100067 42.06489563]
[56.25156784 29.35709763]
[42.71393204 19.15078926]
[48.77378464 3.31682134]
[65.66648865 4.75657272]
[68.95936584 21.38766670]
[76.92880249 34.09546661]
[84.89823151 46.80326462]
[92.86766052 59.51106262]
[100.25894165 58.23869324]
[115.04151154 55.69395065]
[122.43279266 54.42157745]
[125.69424438 39.78044128]
[128.95570374 25.13930321]
[132.21714783 10.49816418]
[135.47860718 -4.14297390]
[125.82862091 -16.44792747]
[126.39744568 -32.07516098]
[136.91648865 -43.64597321]
[152.41899109 -45.69698334]
[165.58512878 -37.25976181]
[170.19827271 -22.31811142]
[164.08021545 -7.92702007]
[150.11975098 -0.88152122]
[146.85829163 13.75961685]
[143.59683228 28.40075493]
[140.33538818 43.04189301]
[137.07392883 57.68303299]
[142.77197266 71.55863190]
[155.38179016 79.68221283]
[167.99160767 87.80578613]
[180.60142517 95.92935944]
[193.21124268 104.05294037]
[205.82106018 112.17651367]
[218.43087769 120.30008698]
[228.08280945 108.79168701]
[239.10105896 98.58377075]
[251.31184387 89.83734131]
[264.52258301 82.69033813]
[278.52493286 77.25548553]
[293.09802246 73.61849976]
[308.01208496 71.83673859]
[323.03182983 71.93829346]
[337.92041016 73.92157745]
[352.44299316 77.75531006]
[366.37057495 83.37902069]
[379.48345947 90.70401001]
[391.57482910 99.61476898]
[402.45404053 109.97074890]
[411.94946289 121.60862732]
[419.91134644 134.34486389]
[426.21414185 147.97856140]
[430.75842285 162.29473877]
[433.47253418 177.06758118]
[434.31365967 192.06410217]
[433.26855469 207.04779053]
[430.35366821 221.78233337]
[425.61499023 236.03533936]
[419.12728882 249.58203125]
[410.99282837 262.20874023]
[401.33990479 273.71633911]
[390.32083130 283.92330933]
[378.10928345 292.66873169]
[364.89794922 299.81460571]
[350.89514160 305.24829102]
[336.32174683 308.88403320]
[321.40756226 310.66455078]
[306.38781738 310.56173706]
[291.49938965 308.57717896]
[276.97711182 304.74224854]
[263.05001831 299.11737061]
[249.93775940 291.79125977]
[237.84712219 282.87948608]
[226.96879578 272.52258301]
[217.47436523 260.88391113]
[209.51353455 248.14701843]
[203.21189880 234.51277161]
[198.66882324 220.19621277]
[195.95594788 205.42315674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[13 28]
[14 27]
[15 26]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[48 58]
[49 57]
[50 56]
[51 55]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
