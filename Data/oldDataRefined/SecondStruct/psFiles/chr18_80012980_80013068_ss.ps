%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGAAGACCCAGCCCCAAAGCAUGUAUCGUCUCGUCGAGGGAGCGACGCUAGACAACUUUCAGUCGGGAGCUGUGUUCCCAAACUUC\
) } def
/len { sequence length } bind def

/coor [
[78.37403870 119.10128021]
[73.86364746 112.22424316]
[59.09152985 114.82896423]
[44.31941605 117.43369293]
[29.54729843 120.03841400]
[14.77518177 122.64313507]
[6.66116714 127.30728912]
[-0.55726945 125.07155609]
[-15.41129017 127.15914917]
[-30.26531219 129.24674988]
[-45.96274948 143.61090088]
[-64.97478485 135.91069031]
[-79.52922058 139.53952026]
[-94.01810455 143.42179871]
[-108.43702698 147.55636597]
[-115.87892914 161.49888611]
[-131.02407837 166.01550293]
[-144.88713074 158.42662048]
[-149.24339294 143.23455811]
[-141.50834656 129.45251465]
[-126.27108765 125.25712585]
[-112.57159424 133.13743591]
[-98.15266418 129.00288391]
[-92.46765137 124.02443695]
[-83.15804291 124.98508453]
[-68.60360718 121.35625458]
[-65.16638184 112.75807953]
[-57.96647644 106.71549988]
[-48.62878418 104.76455688]
[-39.34359741 107.49774170]
[-32.35290909 114.39273071]
[-17.49888611 112.30513000]
[-2.64486599 110.21753693]
[12.17045879 107.87101746]
[26.94257545 105.26629639]
[41.71469116 102.66157532]
[56.48680878 100.05684662]
[71.25892639 97.45212555]
[81.59057617 77.78211975]
[102.83802795 71.28612518]
[122.40267944 81.81591034]
[136.10586548 75.71485901]
[149.80903625 69.61381531]
[163.51222229 63.51276398]
[177.21540833 57.41171265]
[190.91859436 51.31066513]
[197.66322327 44.82209778]
[205.20811462 45.24512100]
[219.11587524 39.62602234]
[232.92344666 33.76505661]
[246.62661743 27.66400528]
[260.32980347 21.56295586]
[271.16680908 4.74072838]
[290.23306274 7.04280663]
[303.47729492 0.00073314]
[316.72149658 -7.04134035]
[318.74761963 -22.42556763]
[329.45379639 -33.65753937]
[344.72329712 -36.41833878]
[358.68469238 -29.64637566]
[365.96951294 -15.94561100]
[363.77661133 -0.58426869]
[352.94921875 10.53090191]
[337.65066528 13.12589169]
[323.76358032 6.20287371]
[310.51934814 13.24494743]
[297.27514648 20.28701973]
[295.08660889 30.54102707]
[287.37176514 37.96577835]
[276.60339355 39.83626175]
[266.43084717 35.26613617]
[252.72767639 41.36718750]
[239.02449036 47.46823883]
[234.08766174 53.18943405]
[224.73497009 53.53377914]
[210.82720947 59.15287781]
[197.01963806 65.01384735]
[183.31645203 71.11489868]
[169.61328125 77.21594238]
[155.91009521 83.31699371]
[142.20690918 89.41804504]
[128.50372314 95.51909637]
[128.61003113 103.74259949]
[126.39199829 111.66204834]
[122.02983093 118.63404846]
[115.87790680 124.09217834]
[108.43602753 127.59301758]
[100.30879211 128.85214233]
[92.15647125 127.76725006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[8 33]
[9 32]
[10 31]
[12 26]
[13 25]
[14 23]
[15 22]
[41 82]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[48 76]
[49 75]
[50 73]
[51 72]
[52 71]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
