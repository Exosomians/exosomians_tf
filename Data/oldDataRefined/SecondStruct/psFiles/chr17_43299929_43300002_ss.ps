%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:46 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCGUCAAUUCAGUUCGGCCGCGCAGUGUCCGUGAGCCGCACGUUCGGCGGGGCGUCCACGAUGGCAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[83.75173187 301.74389648]
[91.82476807 287.46951294]
[91.19663239 272.48266602]
[90.56849670 257.49581909]
[82.30502319 245.10371399]
[89.45764160 230.99163818]
[88.82950592 216.00479126]
[88.20137024 201.01795959]
[87.57323456 186.03111267]
[84.50011444 182.02468872]
[84.12110901 175.97518921]
[87.57323456 169.77484131]
[88.20137024 154.78799438]
[85.24768829 147.76884460]
[89.18267822 139.19056702]
[90.43785095 124.24317169]
[78.00519562 113.97837067]
[73.99060822 98.36362457]
[79.93058777 83.37517548]
[93.55172729 74.74953461]
[94.17985535 59.76269150]
[94.80799103 44.77585220]
[87.65537262 30.66377831]
[95.91884613 18.27167511]
[96.54698181 3.28483272]
[97.17511749 -11.70200920]
[94.25392151 -18.16948318]
[95.13780975 -24.16604614]
[98.53540802 -27.90126610]
[100.41540527 -42.78298569]
[91.00210571 -55.19377136]
[93.12068939 -70.25917053]
[105.01049042 -79.15682983]
[106.89048767 -94.03855133]
[108.77048492 -108.92027283]
[110.65048218 -123.80198669]
[101.99330139 -137.30874634]
[107.29186249 -152.45156860]
[122.48156738 -157.61416626]
[135.91017151 -148.83622742]
[137.27641296 -132.85145569]
[125.53220367 -121.92198944]
[123.65220642 -107.04026794]
[121.77220917 -92.15854645]
[119.89221191 -77.27683258]
[129.19570923 -65.70183563]
[127.50112152 -50.58287430]
[115.29712677 -40.90298843]
[113.41712952 -26.02126694]
[112.16195679 -11.07387447]
[111.53382111 3.91296768]
[110.90569305 18.89981079]
[118.10324097 31.93992233]
[109.79483795 45.40398407]
[109.16670227 60.39082718]
[108.53856659 75.37767029]
[119.64306641 82.87352753]
[125.55607605 94.89576721]
[124.71482849 108.26701355]
[117.34165955 119.45335388]
[105.38523865 125.49834442]
[104.13007355 140.44573975]
[103.18821716 155.41613770]
[102.56008148 170.40298462]
[102.56008148 185.40298462]
[103.18821716 200.38981628]
[103.81635284 215.37666321]
[104.44448853 230.36351013]
[112.75289154 243.82756042]
[105.55533600 256.86767578]
[106.18347168 271.85452271]
[106.81160736 286.84136963]
[116.05078125 300.39016724]
[108.69393921 315.04650879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[6 68]
[7 67]
[8 66]
[9 65]
[12 64]
[13 63]
[15 62]
[16 61]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[26 50]
[29 49]
[30 48]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
