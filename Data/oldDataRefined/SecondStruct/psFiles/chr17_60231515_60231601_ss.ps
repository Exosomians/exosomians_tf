%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUACAGACUCCGUCCUUUUGUUCCGACGGGGUGAGCACCGUCAGGACUGCUGCUAGGAGCUCCCGACGAGAACCGGAGGUCGGAA\
) } def
/len { sequence length } bind def

/coor [
[45.61624146 375.80093384]
[37.71647644 388.86065674]
[24.92794418 397.19229126]
[9.78981304 399.14160156]
[-4.69222879 394.32150269]
[-15.64276028 383.68908691]
[-20.88754654 369.35537720]
[-19.38523102 354.16638184]
[-11.43409920 341.13784790]
[1.38714588 332.85665894]
[16.53283691 330.96697998]
[21.26983070 316.73458862]
[26.00682449 302.50219727]
[30.74381828 288.26980591]
[27.42173386 273.75042725]
[39.12117386 263.09988403]
[43.85816574 248.86750793]
[48.59516144 234.63511658]
[53.33215332 220.40272522]
[58.06914902 206.17033386]
[54.74706650 191.65093994]
[66.44650269 181.00041199]
[71.18350220 166.76802063]
[75.92049408 152.53562927]
[80.65748596 138.30323792]
[85.13969421 123.98857117]
[89.36567688 109.59617615]
[86.25627899 95.96447754]
[96.24192810 86.17783356]
[100.46791077 71.78543854]
[104.69390106 57.39304352]
[108.91989136 43.00064850]
[107.55155182 37.48144913]
[108.50186157 32.54787064]
[111.10296631 29.03037453]
[114.44436646 27.34081650]
[120.18461609 13.48262310]
[125.92486572 -0.37556979]
[124.05763245 -16.08620262]
[136.07647705 -24.88373184]
[141.81672668 -38.74192429]
[134.81330872 -54.65247345]
[141.25170898 -70.43904114]
[156.76356506 -76.66403198]
[162.00552368 -90.71827698]
[167.24749756 -104.77252197]
[161.91772461 -119.90438080]
[170.54704285 -133.42895508]
[186.51577759 -134.97137451]
[197.57408142 -123.34839630]
[195.23896790 -107.47619629]
[181.30174255 -99.53055573]
[176.05976868 -85.47631073]
[170.81781006 -71.42206573]
[177.80181885 -60.43762970]
[177.10246277 -47.24348068]
[168.75241089 -36.75212097]
[155.67492676 -33.00167465]
[149.93467712 -19.14348030]
[152.21249390 -4.42407846]
[139.78306580 5.36468172]
[134.04281616 19.22287560]
[128.30255127 33.08106613]
[123.31228638 47.22663879]
[119.08629608 61.61903381]
[114.86030579 76.01142883]
[110.63432312 90.40382385]
[113.74372101 104.03552246]
[103.75807190 113.82216644]
[99.53208923 128.21455383]
[100.10759735 137.56483459]
[94.88987732 143.04023743]
[90.15287781 157.27262878]
[85.41588593 171.50502014]
[80.67889404 185.73741150]
[83.66215515 201.27479553]
[72.30153656 210.90733337]
[67.56454468 225.13972473]
[62.82754898 239.37211609]
[58.09055710 253.60449219]
[53.35356140 267.83688354]
[56.33682632 283.37429810]
[44.97620773 293.00680542]
[40.23921204 307.23919678]
[35.50222015 321.47158813]
[30.76522446 335.70397949]
[41.75754166 346.29321289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 86]
[12 85]
[13 84]
[14 83]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[22 75]
[23 74]
[24 73]
[25 72]
[26 70]
[27 69]
[29 67]
[30 66]
[31 65]
[32 64]
[36 63]
[37 62]
[38 61]
[40 59]
[41 58]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
