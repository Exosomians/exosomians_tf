%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGUAGCCACGUACCCACCAAGUCACCAUCUUAAGAGCGGACGGUGCGCCCUCCGGGCCCAAGCUAAGGGCCGGGUACGUCGUGCGGGAGGGUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[99.41003418 146.14158630]
[93.87815094 132.19891357]
[97.13649750 117.55673218]
[88.70524597 129.96293640]
[80.27399445 142.36915588]
[71.84274292 154.77536011]
[75.04999542 170.25079346]
[66.30535889 183.41540527]
[50.79688263 186.45886230]
[37.72546005 177.57553101]
[34.84614182 162.03573608]
[43.86717224 149.05897522]
[59.43653488 146.34411621]
[67.86778259 133.93789673]
[76.29903412 121.53169250]
[84.73028564 109.12548065]
[80.77219391 94.65711975]
[67.19978333 88.27043152]
[53.62738037 81.88374329]
[40.05497360 75.49705505]
[33.15106201 75.67772675]
[28.05245590 72.68345642]
[25.85025978 68.25939178]
[12.70566082 61.03308487]
[-0.43893981 53.80678177]
[-15.44346237 57.99032593]
[-28.67101479 50.47457504]
[-32.56691742 36.14427567]
[-41.77487564 34.70504761]
[-46.00570679 28.47892570]
[-58.91683960 20.84330368]
[-75.31182098 21.21272469]
[-83.59686279 7.06033421]
[-75.24901581 -7.05510092]
[-58.85583496 -6.61283159]
[-51.28121567 7.93217373]
[-38.37008667 15.56779480]
[-25.34061432 22.99967575]
[-11.15361023 18.61053658]
[2.27982473 25.75178719]
[6.78736544 40.66218185]
[19.93196487 47.88848495]
[33.07656479 55.11479187]
[46.44166183 61.92464828]
[60.01406860 68.31134033]
[73.58647156 74.69802856]
[87.15888214 81.08471680]
[103.00483704 80.89418030]
[112.47366333 90.27111053]
[127.11241150 86.99895477]
[141.75115967 83.72680664]
[156.38990784 80.45465851]
[171.02867126 77.18251038]
[185.66741943 73.91036224]
[200.30616760 70.63821411]
[208.02157593 49.69785690]
[235.61946106 43.54166412]
[247.75471497 34.72488785]
[259.88995361 25.90810776]
[272.02520752 17.09132957]
[284.16046143 8.27455044]
[285.07073975 -7.33651686]
[295.84017944 -18.67464447]
[311.38378906 -20.38631630]
[324.36236572 -11.66333199]
[328.64782715 3.37558246]
[322.21667480 17.62951088]
[308.10556030 24.36818314]
[292.97726440 20.40980530]
[280.84201050 29.22658539]
[268.70675659 38.04336166]
[256.57147217 46.86014175]
[244.43623352 55.67692184]
[245.37623596 63.11778259]
[247.25622559 77.99950409]
[248.19622803 85.44036102]
[262.14288330 90.96222687]
[276.08953857 96.48410034]
[290.03616333 102.00596619]
[306.98883057 102.21499634]
[311.48092651 118.56300354]
[297.01535034 127.40512848]
[284.51431274 115.95261383]
[270.56765747 110.43074799]
[256.62100220 104.90887451]
[242.67436218 99.38700867]
[216.92860413 100.73280334]
[203.57832336 85.27696991]
[188.93955994 88.54911804]
[174.30081177 91.82126617]
[159.66206360 95.09341431]
[145.02331543 98.36556244]
[130.38456726 101.63771057]
[115.74581146 104.90985870]
[130.55891418 107.27031708]
[141.48622131 117.54621887]
[144.75152588 132.18650818]
[139.22644043 146.13188171]
[126.82029724 154.56321716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[17 47]
[18 46]
[19 45]
[20 44]
[23 43]
[24 42]
[25 41]
[28 38]
[30 37]
[31 36]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
