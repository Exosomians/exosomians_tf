%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGGCGCGUAACCACCAAGUCACCAUCUUAAGAGCGGACGGUGCGCCCUCCGGGCCCAAGCUAAGGGCCGGUUACGUGCUCAUGUCAAAAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[120.20809937 308.82614136]
[121.36119843 293.76467896]
[126.71217346 279.63870239]
[135.82725525 267.59329224]
[147.96751404 258.60491943]
[142.78703308 244.52789307]
[137.60656738 230.45086670]
[132.42608643 216.37384033]
[127.24561310 202.29681396]
[122.06513977 188.21978760]
[116.88465881 174.14276123]
[111.70418549 160.06573486]
[106.52371216 145.98870850]
[101.34323120 131.91168213]
[96.16275787 117.83464813]
[97.42984009 132.78103638]
[94.88159180 147.56300354]
[88.68317413 161.22241211]
[79.23635101 172.87391663]
[67.15344238 181.76229858]
[53.21762466 187.31143188]
[38.33217239 189.16165161]
[23.46191597 187.19302368]
[9.57070351 181.53314209]
[-2.44107795 172.54887390]
[-11.79486275 160.82254028]
[-17.88436508 147.11422729]
[-20.31488228 132.31245422]
[-18.92887497 117.37661743]
[-13.81618118 103.27483368]
[-5.30818939 90.92112732]
[6.04363775 81.11623383]
[19.50350761 74.49566650]
[34.19899368 71.48855591]
[49.17757797 72.28982544]
[63.46839523 76.84751892]
[76.14215088 84.86375427]
[72.80433655 70.23983765]
[69.46652222 55.61591721]
[66.12870789 40.99199677]
[55.51457214 29.25953484]
[60.22579956 15.12965107]
[56.88798523 0.50573242]
[45.34316254 -11.14111710]
[49.91767883 -26.88931656]
[65.90566254 -30.53847122]
[76.86005402 -18.33464050]
[71.51190186 -2.83208156]
[74.84971619 11.79183674]
[85.22511292 22.47829819]
[80.75263214 37.65418243]
[84.09044647 52.27810287]
[87.42826080 66.90202332]
[90.76606750 81.52593994]
[104.92432404 86.48012543]
[116.65179443 77.12777710]
[128.37927246 67.77542877]
[140.10673523 58.42308426]
[151.83421326 49.07073593]
[152.04316711 33.43455124]
[162.29307556 21.62466812]
[177.74426270 19.21735954]
[191.10112000 27.34927940]
[196.05697632 42.18078232]
[190.27180481 56.70888901]
[176.47720337 64.07387543]
[161.18655396 60.79821014]
[149.45909119 70.15055847]
[137.73161316 79.50290680]
[126.00414276 88.85524750]
[114.27666473 98.20759583]
[110.23978424 112.65417480]
[115.42025757 126.73120117]
[120.60073853 140.80822754]
[125.78121185 154.88525391]
[130.96168518 168.96228027]
[136.14216614 183.03930664]
[141.32263184 197.11633301]
[146.50311279 211.19335938]
[151.68359375 225.27038574]
[156.86405945 239.34741211]
[162.04454041 253.42443848]
[177.11520386 252.39892578]
[191.86402893 255.66221619]
[205.09538269 262.94973755]
[215.73666382 273.67074585]
[222.92521667 286.95611572]
[226.07832336 301.72888184]
[224.94035339 316.79147339]
[219.60356140 330.92285156]
[210.50059509 342.97741699]
[198.36936951 351.97796631]
[184.19331360 357.19488525]
[169.12162781 358.20526123]
[154.37609863 354.92715454]
[141.15206909 347.62634277]
[130.52157593 336.89465332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[37 54]
[38 53]
[39 52]
[40 51]
[42 49]
[43 48]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
