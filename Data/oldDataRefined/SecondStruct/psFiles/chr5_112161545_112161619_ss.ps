%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:52 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUUGCGAAACGUCGGAAAAGGACGGGAAUUUAAACUAUGGAAACCACAUCCUCGACGUAUUCAUUGUCAACG\
) } def
/len { sequence length } bind def

/coor [
[90.77169800 386.98492432]
[78.88231659 377.65036011]
[70.27392578 365.22509766]
[65.71197510 350.81399536]
[65.60211945 335.69845581]
[69.95410919 321.22256470]
[78.38098907 308.67349243]
[90.13343048 299.16711426]
[104.16642761 293.54870605]
[102.92773438 278.59994507]
[101.68904114 263.65115356]
[100.14167023 248.73118591]
[98.28628540 233.84637451]
[96.43089294 218.96157837]
[94.57550812 204.07676697]
[92.72011566 189.19195557]
[90.86472321 174.30714417]
[88.40385437 172.44636536]
[86.65021515 169.35746765]
[86.13520813 165.35472107]
[87.24468994 160.96159363]
[90.14247131 156.84469604]
[90.76235199 141.85751343]
[91.38222504 126.87032318]
[92.00209808 111.88314056]
[85.68829346 99.40806580]
[93.01071930 87.49698639]
[93.32071686 72.50019073]
[93.32071686 57.50019073]
[82.42616272 46.36706543]
[82.63984680 31.15493393]
[93.32071686 20.83725166]
[93.32071686 5.83725214]
[93.32071686 -9.16274738]
[93.32071686 -24.16274834]
[83.03894806 -36.47797394]
[86.39783478 -52.16546631]
[100.82071686 -59.19112778]
[115.24360657 -52.16546631]
[118.60248566 -36.47797394]
[108.32071686 -24.16274834]
[108.32071686 -9.16274738]
[108.32071686 5.83725214]
[108.32071686 20.83725166]
[119.00159454 31.15493393]
[119.21527100 46.36706543]
[108.32071686 57.50019073]
[108.32071686 72.50019073]
[111.56365204 79.38536835]
[107.99790192 88.11685944]
[114.31170654 100.59193420]
[106.98928070 112.50301361]
[106.36940765 127.49019623]
[105.74953461 142.47738647]
[105.12966156 157.46456909]
[105.74953461 172.45175171]
[107.60492706 187.33656311]
[109.46031189 202.22137451]
[111.31570435 217.10618591]
[113.17108917 231.99099731]
[115.02648163 246.87579346]
[119.30109406 255.28302002]
[116.63780975 262.41247559]
[117.87650299 277.36123657]
[119.11518860 292.30999756]
[133.88154602 295.54202271]
[147.03840637 302.98437500]
[157.41586304 313.97528076]
[164.09115601 327.53744507]
[166.47073364 342.46490479]
[164.34298706 357.43032837]
[157.89714050 371.10299683]
[147.70632935 382.26718140]
[134.67672729 389.93014526]
[119.96691132 393.41049194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[22 55]
[23 54]
[24 53]
[25 52]
[27 50]
[28 48]
[29 47]
[32 44]
[33 43]
[34 42]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
