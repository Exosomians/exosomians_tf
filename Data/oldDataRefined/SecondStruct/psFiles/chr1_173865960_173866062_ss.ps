%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGGAAAUCAGUCAAUCUCGAUUAAUUCUGGAAGUACAAGUCAGUCGUAAACGAAUAGUAGUAGGUCCGACGUAAAUGUUUGAAAGAAUAAUUAGUAUUGUU\
) } def
/len { sequence length } bind def

/coor [
[-28.70068550 227.36265564]
[-38.34484482 225.70523071]
[-46.62276840 220.59754944]
[-59.45948792 228.35762024]
[-72.29620361 236.11769104]
[-85.13292694 243.87776184]
[-97.96964264 251.63781738]
[-99.69812775 265.09625244]
[-108.77038574 274.92172241]
[-121.66570282 277.63522339]
[-133.56953430 272.45507812]
[-146.63478088 279.82391357]
[-159.70001221 287.19271851]
[-172.76525879 294.56155396]
[-176.76725769 309.85073853]
[-190.45019531 317.75979614]
[-205.69622803 313.59637451]
[-213.46014404 299.83056641]
[-209.13577271 284.62942505]
[-195.28866577 277.01147461]
[-180.13407898 281.49630737]
[-167.06883240 274.12750244]
[-154.00360107 266.75866699]
[-140.93835449 259.38986206]
[-137.18418884 243.07434082]
[-122.54539490 234.27989197]
[-105.72971344 238.80110168]
[-92.89299011 231.04103088]
[-80.05627441 223.28097534]
[-67.21955109 215.52090454]
[-54.38283539 207.76083374]
[-51.46096802 187.68261719]
[-34.64464188 175.82923889]
[-14.19502735 179.93844604]
[-2.38727498 170.68766785]
[9.42047691 161.43688965]
[21.22822952 152.18609619]
[33.03598022 142.93531799]
[38.28293991 128.99549866]
[53.91794586 126.57534027]
[65.72570038 117.32456207]
[77.53345490 108.07377625]
[77.06056213 93.38836670]
[85.27692413 81.20738220]
[99.07025146 76.14486694]
[113.21576691 80.11846924]
[125.02351379 70.86769104]
[122.91601562 58.35277939]
[126.37538147 46.21793747]
[134.66894531 36.80486298]
[146.13754272 31.90194321]
[158.52719116 32.40467453]
[169.43200684 38.15275574]
[181.77676392 29.63178635]
[194.12152100 21.11081505]
[206.46627808 12.58984375]
[218.81105042 4.06887245]
[231.15580750 -4.45209885]
[230.99922180 -16.53855324]
[236.70924377 -27.05488586]
[246.72666931 -33.37699509]
[258.43508911 -33.99333572]
[268.84390259 -28.86476135]
[281.68060303 -36.62482834]
[289.48773193 -50.38561630]
[304.38229370 -50.34847641]
[317.21902466 -58.10854340]
[327.64584351 -71.47707367]
[343.37835693 -65.15850067]
[341.66192627 -48.29166412]
[324.97909546 -45.27182770]
[312.14236450 -37.51175690]
[305.25341797 -24.30602264]
[289.44067383 -23.78810883]
[276.60397339 -16.02804184]
[273.43392944 1.87626851]
[258.01409912 12.09333038]
[239.67677307 7.89265919]
[227.33201599 16.41363144]
[214.98725891 24.93460083]
[202.64250183 33.45557404]
[190.29774475 41.97654343]
[177.95298767 50.49751663]
[178.42532349 68.01705170]
[168.30136108 82.51263428]
[151.39628601 88.19967651]
[134.27430725 82.67543793]
[122.46654510 91.92622375]
[122.93943787 106.61163330]
[114.72307587 118.79261780]
[100.92974854 123.85513306]
[86.78423309 119.88153076]
[74.97648621 129.13230896]
[63.16873169 138.38310242]
[57.07720184 152.98460388]
[42.28676605 154.74307251]
[30.47901344 163.99385071]
[18.67126083 173.24464417]
[6.86350822 182.49542236]
[-4.94424391 191.74620056]
[-3.21696067 201.67591858]
[-5.30982399 211.47509766]
[-10.87730217 219.73553467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[11 24]
[12 23]
[13 22]
[14 21]
[34 100]
[35 99]
[36 98]
[37 97]
[38 96]
[40 94]
[41 93]
[42 92]
[46 88]
[47 87]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[63 75]
[64 74]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
