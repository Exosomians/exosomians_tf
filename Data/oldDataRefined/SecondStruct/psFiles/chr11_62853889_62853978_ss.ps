%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:55 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACGCAAGAGGUCAAAGAGUCCACAAGUACAUAAAAGUGACAGCCAGUAUCACUCGAUCAAACUAAGUAGUAUCUUUGACGGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[75.51219940 356.56936646]
[60.72498322 359.60922241]
[45.66605377 358.54568481]
[31.45287704 353.45764160]
[19.14017105 344.72265625]
[9.64161873 332.98895264]
[3.66207528 319.12719727]
[1.64526320 304.16607666]
[3.74084282 289.21578979]
[9.79330826 275.38574219]
[19.35352707 263.70220947]
[31.71206665 255.03221130]
[45.95184326 250.01908875]
[61.01616669 249.03486633]
[64.10106659 234.35551453]
[67.18596649 219.67616272]
[70.27085876 204.99681091]
[73.35575867 190.31745911]
[76.44065857 175.63810730]
[79.52555847 160.95875549]
[82.61045837 146.27940369]
[74.27983856 133.98564148]
[77.19924927 119.05474854]
[90.15055084 110.40018463]
[85.98225403 97.05413818]
[95.17009735 86.51491547]
[98.25498962 71.83556366]
[92.06724548 54.59859467]
[104.04127502 41.89598846]
[106.61766052 27.11890221]
[109.19404602 12.34181690]
[96.09496307 4.74976015]
[86.40191650 -6.84406757]
[81.26998901 -21.02798653]
[81.30042267 -36.08352280]
[86.47023773 -50.19360352]
[96.13735199 -61.66188049]
[109.12025452 -69.11664581]
[123.84236908 -71.67488098]
[126.41875458 -86.45196533]
[128.99513245 -101.22904968]
[131.57151794 -116.00614166]
[134.14790344 -130.78321838]
[122.72566986 -141.15318298]
[118.74516296 -156.05818176]
[123.47655487 -170.74209595]
[135.41007996 -180.51934814]
[150.73777771 -182.27005005]
[164.56866455 -175.43554688]
[172.48931885 -162.19671631]
[171.97232056 -146.77801514]
[163.18263245 -134.09950256]
[148.92498779 -128.20683289]
[146.34860229 -113.42975616]
[143.77221680 -98.65266418]
[141.19583130 -83.87557983]
[138.61944580 -69.09849548]
[151.60719299 -61.70904160]
[161.30126953 -50.30054855]
[166.51699829 -36.23744965]
[166.60673523 -21.21035767]
[161.54039001 -7.03283644]
[151.91122437 4.57748556]
[138.86659241 12.20699692]
[123.97113037 14.91820335]
[121.39474487 29.69528770]
[118.81835938 44.47237396]
[125.55921936 54.67763519]
[123.38385773 67.12321472]
[112.93434906 74.92046356]
[109.84944916 89.59981537]
[114.01774597 102.94586182]
[104.82990265 113.48508453]
[113.20193481 126.62078857]
[109.86429596 141.46379089]
[97.28981018 149.36428833]
[94.20491028 164.04365540]
[91.12001038 178.72300720]
[88.03511047 193.40235901]
[84.95021820 208.08171082]
[81.86531830 222.76106262]
[78.78041840 237.44041443]
[75.69551849 252.11976624]
[89.08934784 259.08453369]
[100.10662842 269.40548706]
[107.92982483 282.31674194]
[111.97838593 296.86016846]
[111.95188904 311.95660400]
[107.85230255 326.48571777]
[99.98384094 339.36944580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[24 73]
[26 71]
[27 70]
[29 67]
[30 66]
[31 65]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
