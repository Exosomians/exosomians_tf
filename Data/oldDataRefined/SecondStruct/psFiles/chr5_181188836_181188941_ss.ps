%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUUUACUUUUUCACCCGAGCAGGCCCUAAACUUGGGCCCUGGAGAGCGUGGGUUUCGCUCUUAGUAUGGGGAUCUGGUUGCUCGGCCGACAGAUCAACGAG\
) } def
/len { sequence length } bind def

/coor [
[113.58134460 317.18298340]
[98.87361908 320.12963867]
[83.87988281 319.69628906]
[69.36689758 315.90505981]
[56.07685089 308.94989014]
[44.68938446 299.18640137]
[35.78684616 287.11392212]
[29.82449913 273.34982300]
[27.10725594 258.59799194]
[27.77407455 243.61280823]
[31.79085541 229.16062927]
[38.95217896 215.98051453]
[48.89182663 204.74649048]
[61.10149002 196.03305054]
[74.95677948 190.28578186]
[89.74913788 187.79861450]
[104.72210693 188.69873047]
[119.10997772 192.94009399]
[132.17898560 200.30728149]
[126.59166718 186.38673401]
[121.00434113 172.46617126]
[115.41701508 158.54562378]
[103.49575806 149.61630249]
[105.53585052 133.92718506]
[99.94853210 120.00662231]
[79.25257874 116.95919037]
[67.06720734 93.40344238]
[53.79324722 86.41760254]
[40.51928711 79.43175507]
[27.24532700 72.44591522]
[13.97136784 65.46007538]
[-0.43311593 71.54652405]
[-15.36460781 66.90060425]
[-23.77291489 53.71597672]
[-21.68789101 38.21802139]
[-10.09402084 27.72439384]
[5.53442478 27.18986893]
[17.81817055 36.86683273]
[20.95720863 52.18611526]
[34.23117065 59.17195511]
[47.50513077 66.15779877]
[60.77909088 73.14363861]
[74.05304718 80.12947845]
[80.83737946 76.93215179]
[82.08373260 61.98402405]
[94.40602875 70.53749084]
[101.19035339 67.34016418]
[104.25157166 52.65585327]
[107.31278229 37.97154617]
[110.37399292 23.28723335]
[113.43521118 8.60292339]
[116.49642181 -6.08138704]
[119.55763245 -20.76569748]
[109.74052429 -32.93772507]
[110.09588623 -48.57126999]
[120.45594788 -60.28464890]
[135.92898560 -62.54716492]
[149.20912170 -54.29052353]
[154.02586365 -39.41326141]
[148.10491943 -24.93996620]
[134.24194336 -17.70448303]
[131.18074036 -3.02017331]
[128.11952209 11.66413689]
[125.05830383 26.34844780]
[121.99709320 41.03275681]
[118.93588257 55.71706772]
[115.87466431 70.40138245]
[126.54635620 96.34479523]
[113.86907959 114.41930389]
[119.45640564 128.33985901]
[131.77731323 138.26486206]
[129.33757019 152.95829773]
[134.92489624 166.87886047]
[140.51222229 180.79940796]
[146.09954834 194.71995544]
[156.30981445 205.70860291]
[169.78314209 212.30175781]
[183.25645447 218.89491272]
[196.72976685 225.48806763]
[210.20309448 232.08122253]
[223.67640686 238.67437744]
[237.34849548 231.57646179]
[252.40251160 233.86335754]
[263.09683228 244.45088196]
[265.47763062 259.12976074]
[278.95095825 265.72293091]
[295.83563232 267.25396729]
[299.03857422 283.90261841]
[283.92721558 291.58917236]
[272.35781860 279.19622803]
[258.88449097 272.60308838]
[245.83294678 279.73016357]
[230.91082764 277.78228760]
[219.86785889 267.29867554]
[217.08325195 252.14768982]
[203.60993958 245.55453491]
[190.13662720 238.96138000]
[176.66329956 232.36822510]
[163.18998718 225.77507019]
[149.71665955 219.18191528]
[156.10478210 232.75364685]
[159.28013611 247.41371155]
[159.08033752 262.41238403]
[155.51560974 276.98263550]
[148.76823425 290.37939453]
[139.18328857 301.91754150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 75]
[20 74]
[21 73]
[22 72]
[24 70]
[25 69]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[76 100]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
