%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCUUCCCCUCUAUGGUACUAGUGCUUCCACCAAAAAGAGUCCCGCUUCGAAUAGGUAACGCAAGGCCUACACGACUGGGGACGCUAAAGGGGUUCACACCCUUUGAGCUCACGUAUUAAA\
) } def
/len { sequence length } bind def

/coor [
[52.88814545 224.44436646]
[43.14009857 228.45834351]
[32.68913651 228.00625610]
[24.75467682 240.73591614]
[16.82021713 253.46557617]
[24.61387825 266.63818359]
[25.38162613 281.92443848]
[18.94704056 295.81164551]
[6.78873968 305.10864258]
[-8.29938698 307.67904663]
[-22.85019684 302.93222046]
[-33.52002335 291.95892334]
[-37.85701752 277.28073120]
[-34.86456680 262.27059937]
[-25.23031807 250.37776184]
[-11.16815090 244.33506775]
[4.09055376 245.53112793]
[12.02501392 232.80145264]
[19.95947456 220.07179260]
[14.08351421 201.60140991]
[23.67531204 184.41371155]
[43.06306076 179.57093811]
[50.00801086 166.27554321]
[56.95296097 152.98013306]
[63.89791107 139.68473816]
[70.84285736 126.38933563]
[77.78781128 113.09394073]
[64.78700256 120.57584381]
[49.97439575 122.93946838]
[35.29073715 119.87512970]
[22.65987778 111.78430176]
[13.73670769 99.72706604]
[9.69034100 85.28314209]
[11.05093098 70.34497833]
[17.64021301 56.86976242]
[28.59486008 46.62302017]
[42.47959900 40.94728088]
[57.47525024 40.58617020]
[71.61708832 45.58700562]
[83.05226135 55.29457855]
[90.28251648 68.43700409]
[92.36048126 83.29418182]
[93.49948120 68.33748627]
[94.63848114 53.38079453]
[95.77747345 38.42409897]
[96.91647339 23.46740723]
[85.26285553 13.39271832]
[81.81636047 -1.43883777]
[87.69455719 -15.29202461]
[100.45023346 -22.93602371]
[101.58922577 -37.89271545]
[102.72822571 -52.84941101]
[92.71049500 -64.77764893]
[94.07866669 -79.92964172]
[105.51215363 -89.40650177]
[106.65115356 -104.36319733]
[107.79014587 -119.31988525]
[108.92914581 -134.27658081]
[110.06814575 -149.23327637]
[98.15661621 -159.17788696]
[94.39794159 -174.23284912]
[100.23740387 -188.60922241]
[113.42960358 -196.77902222]
[128.90188599 -195.60075378]
[140.70481873 -185.52751160]
[144.29995728 -170.43266296]
[138.30488586 -156.12046814]
[125.02483368 -148.09428406]
[123.88584137 -133.13758850]
[122.74684143 -118.18089294]
[121.60784912 -103.22419739]
[120.46884918 -88.26750183]
[130.33543396 -77.16857910]
[129.39338684 -61.98413849]
[117.68492126 -51.71041489]
[116.54592133 -36.75371933]
[115.40692139 -21.79702568]
[126.85799408 -12.30961227]
[130.57064819 2.27394652]
[124.91798401 16.41257477]
[111.87316895 24.60640335]
[110.73416901 39.56309509]
[109.59516907 54.51979065]
[108.45617676 69.47648621]
[107.31717682 84.43317413]
[115.88619995 96.74462891]
[130.30744934 100.87107086]
[144.72869873 104.99751282]
[160.12492371 101.35511780]
[170.23263550 112.29511261]
[184.65388489 116.42155457]
[199.07513428 120.54799652]
[213.49638367 124.67443848]
[227.91763306 128.80087280]
[242.33888245 132.92732239]
[256.76013184 137.05375671]
[272.53005981 132.55471802]
[284.12149048 144.15518188]
[279.61013794 159.92160034]
[263.63693237 163.63482666]
[252.63369751 151.47500610]
[238.21244812 147.34857178]
[223.79119873 143.22212219]
[209.36994934 139.09568787]
[194.94869995 134.96923828]
[180.52743530 130.84280396]
[166.10618591 126.71636200]
[151.74147034 130.65390015]
[140.60226440 119.41876221]
[126.18100739 115.29232025]
[111.75975800 111.16587830]
[121.88269043 122.23503876]
[118.72169495 136.89819336]
[104.93733978 142.81356812]
[92.13173676 135.00227356]
[91.08320618 120.03888702]
[84.13825989 133.33428955]
[77.19331360 146.62968445]
[70.24835968 159.92509460]
[63.30340958 173.22048950]
[56.35845947 186.51588440]
[62.08667755 195.75138855]
[63.39220810 206.45838928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[5 17]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[50 77]
[51 76]
[52 75]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[86 111]
[87 110]
[88 109]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
