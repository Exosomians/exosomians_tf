%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGUAUGGUGGGACUUGCGCGGGCUAGAGCAGACUAGAGCCUUCGAUUCGUCCCAGCCCGGACCAAUCAUGAAC\
) } def
/len { sequence length } bind def

/coor [
[149.66009521 314.70782471]
[155.65621948 300.70901489]
[166.83218384 290.36410522]
[161.96170044 276.17684937]
[157.09120178 261.98959351]
[145.64059448 252.46420288]
[148.47775269 236.89945984]
[143.60726929 222.71220398]
[138.73677063 208.52494812]
[133.28414917 194.55108643]
[127.25872040 180.81448364]
[121.23328400 167.07788086]
[115.20785522 153.34127808]
[109.18242645 139.60469055]
[103.15699005 125.86808014]
[87.33135986 122.77344513]
[76.35637665 110.95916748]
[74.43421173 94.94877625]
[82.30084229 80.87242889]
[75.71289062 67.39656067]
[62.70078278 58.39680862]
[64.06212616 43.56454468]
[57.47417831 30.08868027]
[50.88623047 16.61281586]
[44.29828262 3.13695049]
[37.71033478 -10.33891392]
[23.03313446 -15.55596256]
[16.54398727 -29.31625366]
[21.60809517 -43.27656937]
[15.02014637 -56.75243378]
[1.12146747 -65.45638275]
[1.98029506 -81.83303070]
[16.71314049 -89.03547668]
[30.16411591 -79.65447235]
[28.49601173 -63.34038162]
[35.08396149 -49.86451721]
[49.21105194 -45.28620911]
[56.08413696 -31.71361351]
[51.18619919 -16.92686272]
[57.77414703 -3.45099831]
[64.36209869 10.02486610]
[70.95004272 23.50073051]
[77.53799438 36.97659683]
[90.07888794 45.01246643]
[89.18875885 60.80861282]
[95.77670288 74.28447723]
[109.10797119 75.58342743]
[120.03311157 83.33270264]
[125.66593170 95.48511505]
[124.51837158 108.83026886]
[116.89359283 119.84265137]
[122.91902161 133.57925415]
[128.94445801 147.31585693]
[134.96989441 161.05244446]
[140.99531555 174.78904724]
[147.02075195 188.52565002]
[152.48030090 193.04359436]
[154.32472229 198.80924988]
[152.92402649 203.65444946]
[157.79452515 217.84172058]
[162.66500854 232.02897644]
[174.46398926 242.56912231]
[171.27845764 257.11907959]
[176.14895630 271.30633545]
[181.01943970 285.49359131]
[196.19284058 286.79278564]
[209.52287292 294.15692139]
[218.70001221 306.31008911]
[222.13427734 321.14672852]
[219.23066711 336.09628296]
[210.49224854 348.56863403]
[197.43298340 356.40289307]
[182.31549072 358.24172974]
[167.75895691 353.76654053]
[156.28540039 343.75268555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[7 61]
[8 60]
[9 59]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[19 46]
[20 45]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
