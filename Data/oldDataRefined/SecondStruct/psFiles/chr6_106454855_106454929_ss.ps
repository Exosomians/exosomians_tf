%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAUUAACUAGUGUUGGUCAAUGUCUAAAGAAACAAGGAAGAGGUGAGGGUGACGAAGUGAACUGAUCGGAAUU\
) } def
/len { sequence length } bind def

/coor [
[47.67246628 146.57661438]
[35.46473694 155.29277039]
[23.25700569 164.00891113]
[11.04927540 172.72506714]
[-1.15845537 181.44122314]
[-13.36618614 190.15737915]
[-25.57391739 198.87351990]
[-37.78164673 207.58967590]
[-49.98937988 216.30583191]
[-56.28697205 231.44757080]
[-72.58161926 233.29595947]
[-82.11077881 219.94953918]
[-75.07167816 205.13795471]
[-58.70553207 204.09809875]
[-46.49779892 195.38194275]
[-34.29006958 186.66580200]
[-22.08233833 177.94964600]
[-9.87460804 169.23348999]
[2.33312321 160.51733398]
[14.54085350 151.80119324]
[26.74858475 143.08503723]
[38.95631409 134.36888123]
[34.27608490 124.24702454]
[31.26128578 113.51075745]
[29.98831367 102.43212891]
[30.48942566 91.29187012]
[32.75192261 80.37227631]
[36.71847534 69.95004272]
[42.28856659 60.28926849]
[49.32106018 51.63476181]
[57.63774490 44.20581818]
[67.02788544 38.19068909]
[77.25353241 33.74179840]
[88.05556488 30.97187614]
[99.16027069 29.95111465]
[110.28626251 30.70538139]
[121.15159607 33.21556091]
[131.48095703 37.41804504]
[141.01258850 43.20634460]
[149.50497437 50.43378448]
[156.74290466 58.91722488]
[162.54298401 68.44169617]
[166.75823975 78.76584625]
[169.28184509 89.62806702]
[184.26902771 89.00819397]
[199.25622559 88.38832092]
[212.72485352 80.08734131]
[225.76100159 87.29207611]
[240.74818420 86.67220306]
[245.94714355 72.38796234]
[256.22036743 61.18397903]
[270.00128174 54.76877213]
[285.18838501 54.12061691]
[299.46575928 59.33834839]
[310.65621948 69.62630463]
[317.05331421 83.41564178]
[317.68148804 98.60359192]
[312.44497681 112.87409973]
[302.14230347 124.05101776]
[288.34457397 130.42994690]
[273.15579224 131.03814697]
[258.89218140 125.78286743]
[247.72883606 115.46550751]
[241.36807251 101.65938568]
[226.38087463 102.27925873]
[213.98422241 110.53590393]
[199.87609863 103.37550354]
[184.88891602 103.99538422]
[169.90171814 104.61525726]
[165.57624817 124.64360046]
[155.64068604 142.56367493]
[140.94500732 156.84239197]
[122.74646759 166.25820923]
[102.60195160 170.00558472]
[82.23483276 167.76393127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[44 69]
[45 68]
[46 67]
[48 65]
[49 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
