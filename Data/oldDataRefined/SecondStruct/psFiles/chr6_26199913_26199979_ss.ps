%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGGUUCAUGUGGUCGAGAUUCAUUAAGAUUGCAGAAGUAUGGGUUAGGGUUUCCGAGAAAAUUC\
) } def
/len { sequence length } bind def

/coor [
[105.75672913 141.96542358]
[117.48110962 132.60919189]
[131.93389893 128.59390259]
[119.18064117 120.69742584]
[106.42738342 112.80094147]
[92.45941162 112.17846680]
[85.67613220 99.95231628]
[72.92287445 92.05583191]
[60.16962051 84.15934753]
[50.88888550 82.19451141]
[47.02159500 75.59210205]
[34.64663315 67.11505890]
[22.27166939 58.63801193]
[9.89670753 50.16096497]
[-2.47825432 41.68392181]
[-14.85321617 33.20687485]
[-27.22817802 24.72982788]
[-40.43744659 32.37691879]
[-55.65718460 33.52685928]
[-69.86550140 27.95133209]
[-80.24132538 16.75735855]
[-84.72452545 2.16751027]
[-82.42496490 -12.92138577]
[-73.79922485 -25.51341820]
[-60.55994415 -33.10843277]
[-45.33579636 -34.19842911]
[-31.14954567 -28.56699371]
[-20.81788445 -17.33224678]
[-16.39216995 -2.72485781]
[-18.75113297 12.35486603]
[-6.37617016 20.83191109]
[5.99879169 29.30895805]
[18.37375450 37.78600311]
[30.74871635 46.26305008]
[43.12368011 54.74009705]
[55.49864197 63.21714401]
[68.06610107 71.40608978]
[80.81935883 79.30257416]
[93.57261658 87.19905853]
[107.54058838 87.82153320]
[114.32386780 100.04768372]
[127.07712555 107.94416809]
[139.83038330 115.84065247]
[154.34872437 119.61125946]
[169.33271790 118.91850281]
[184.31672668 118.22575378]
[192.73512268 105.19079590]
[207.21961975 99.62491608]
[222.20062256 103.66831207]
[231.91763306 115.76622009]
[232.63427734 131.26673889]
[224.07496643 144.20960999]
[209.53094482 149.61802673]
[194.59468079 145.41235352]
[185.00947571 133.20974731]
[170.02548218 133.90249634]
[155.04148865 134.59526062]
[165.71379089 145.13572693]
[171.40376282 159.01464844]
[171.20178223 174.01329041]
[165.14013672 187.73394775]
[154.18786621 197.98321533]
[140.09579468 203.12261963]
[125.11671448 202.33058167]
[111.64521790 195.73371887]
[101.83486938 184.38659668]
[97.25397491 170.10319519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[7 39]
[8 38]
[9 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[44 57]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
