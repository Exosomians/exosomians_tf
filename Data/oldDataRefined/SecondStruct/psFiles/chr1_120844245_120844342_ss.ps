%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUUCGAGCUUGUUGGCAAGGACCCACCCGAGCUUGGUGGUUGGAAAGCCAAUUGUCGGCUUGCGCGAUUGGCUGAUGCGGUGUCUCUGUCCAUGA\
) } def
/len { sequence length } bind def

/coor [
[10.68881130 204.63667297]
[-1.99025464 212.65174866]
[-16.98983383 212.76417542]
[-29.78762627 204.94007874]
[-36.52516174 191.53837585]
[-35.17110825 176.59962463]
[-26.13324165 164.62741089]
[-40.98056412 166.76214600]
[-55.82788467 168.89686584]
[-70.67520905 171.03158569]
[-85.52252960 173.16630554]
[-100.36985016 175.30102539]
[-115.21717072 177.43576050]
[-130.06449890 179.57048035]
[-144.15473938 191.29196167]
[-160.19122314 184.36169434]
[-174.96333313 186.96641541]
[-189.73545837 189.57113647]
[-197.39703369 203.20324707]
[-212.04684448 208.67288208]
[-226.76771545 203.39744568]
[-234.60887146 189.86784363]
[-231.86798096 174.47233582]
[-219.83920288 164.48020935]
[-204.20214844 164.60945129]
[-192.34017944 174.79902649]
[-177.56805420 172.19430542]
[-162.79594421 169.58958435]
[-155.50849915 159.79083252]
[-143.08753967 157.58749390]
[-132.19921875 164.72315979]
[-117.35189819 162.58842468]
[-102.50457001 160.45370483]
[-87.65724945 158.31898499]
[-72.80992889 156.18426514]
[-57.96260834 154.04954529]
[-43.11528778 151.91482544]
[-28.26796532 149.78009033]
[-13.87557030 145.55410767]
[-0.23109044 139.32287598]
[13.41338921 133.09165955]
[27.05786896 126.86043549]
[32.00616837 112.85865021]
[45.75484467 106.34493256]
[60.40765381 111.63009644]
[74.05213165 105.39887238]
[87.69660950 99.16764832]
[87.96547699 85.00098419]
[103.92782593 74.16804504]
[114.94670105 63.99040604]
[125.96557617 53.81276703]
[136.98445129 43.63512421]
[148.00332642 33.45748138]
[159.02220154 23.27984238]
[170.04107666 13.10220051]
[181.05995178 2.92455935]
[192.07882690 -7.25308180]
[196.36343384 -15.53356934]
[203.61251831 -17.57198524]
[214.94877625 -27.39489555]
[217.52287292 -43.23009491]
[231.57829285 -50.96474457]
[246.33290100 -44.66548538]
[250.46824646 -29.16456413]
[240.81202698 -16.35296631]
[224.77168274 -16.05865288]
[213.43544006 -6.23574114]
[202.25646973 3.76579380]
[191.23759460 13.94343472]
[180.21871948 24.12107658]
[169.19984436 34.29871750]
[158.18096924 44.47636032]
[147.16209412 54.65399933]
[136.14321899 64.83164215]
[125.12434387 75.00928497]
[114.10546112 85.18692017]
[116.00434875 100.06624603]
[129.22615051 107.15031433]
[142.44795227 114.23437500]
[158.15902710 110.98760223]
[170.40052795 121.35704803]
[169.78179932 137.38816833]
[156.77749634 146.78324890]
[141.36340332 142.33520508]
[135.36389160 127.45617676]
[122.14208221 120.37210846]
[108.92028809 113.28804779]
[93.92783356 112.81212616]
[80.28335571 119.04335022]
[66.63887787 125.27457428]
[61.03759003 139.80947876]
[47.11138153 145.93446350]
[33.28909302 140.50491333]
[19.64461517 146.73614502]
[6.00013494 152.96736145]
[-7.64434528 159.19859314]
[6.43098640 164.38366699]
[15.64684296 176.21870422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[16 28]
[17 27]
[18 26]
[39 96]
[40 95]
[41 94]
[42 93]
[45 90]
[46 89]
[47 88]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[59 67]
[60 66]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
