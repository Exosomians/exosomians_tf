%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUUCUUUAAGUACACACAUUCAUCUAACAUAAUAGAUACUCAGUAAAGUCCAGUCGUUUCUCUUACAAUGUUUUAUAGA\
) } def
/len { sequence length } bind def

/coor [
[75.52266693 313.18011475]
[62.49161530 322.12255859]
[46.96951294 319.14938354]
[38.16534042 306.02450562]
[41.30246353 290.53469849]
[54.51968002 281.86978149]
[57.34155273 267.13760376]
[60.16342545 252.40544128]
[54.95859146 238.44982910]
[65.15390015 226.35163879]
[67.97576904 211.61946106]
[70.79764557 196.88728333]
[73.61951447 182.15510559]
[71.73781586 174.81094360]
[76.83701324 166.92350769]
[80.21435547 152.30867004]
[83.59169006 137.69381714]
[75.32240295 132.87968445]
[68.38999939 126.28430939]
[63.17003632 118.26501465]
[59.94529724 109.25622559]
[58.89048004 99.74599457]
[60.06273270 90.24952698]
[63.39854431 81.28128052]
[68.71720123 73.32709503]
[59.27004623 61.67586517]
[49.82288742 50.02463531]
[40.37573242 38.37340164]
[30.92857361 26.72216988]
[15.18575859 25.32957077]
[5.10281849 13.15953064]
[6.66178226 -2.56768060]
[18.93774414 -12.52138805]
[34.64759445 -10.79623318]
[44.47095871 1.58427954]
[42.57980347 17.27501297]
[52.02696228 28.92624474]
[61.47412109 40.57747650]
[70.92127991 52.22871017]
[80.36843872 63.87994003]
[90.08510590 60.10323334]
[100.43934631 58.89204407]
[110.76532745 60.32425690]
[120.39906311 64.30776978]
[128.72105408 70.58643341]
[135.19618225 78.75650024]
[149.23684692 73.47828674]
[163.27751160 68.20007324]
[177.31819153 62.92185593]
[191.25645447 57.37887573]
[205.08734131 51.57312393]
[206.33677673 36.31869888]
[214.54197693 23.39843178]
[227.81744385 15.78130913]
[243.11257935 15.21768665]
[256.91265869 21.83708191]
[266.04653931 34.11840439]
[268.41531372 49.23950195]
[263.47463989 63.72564697]
[252.35987854 74.24803925]
[237.62510681 78.38870239]
[222.65626526 75.19615173]
[210.89309692 65.40399933]
[197.06221008 71.20975494]
[191.98783875 76.84254456]
[182.59640503 76.96252441]
[168.55572510 82.24073792]
[154.51506042 87.51895905]
[140.47439575 92.79717255]
[137.52503967 116.79071808]
[121.60026550 134.97836304]
[98.20653534 141.07116699]
[94.82919312 155.68600464]
[91.45185089 170.30084229]
[88.35169220 184.97698975]
[85.52982330 199.70915222]
[82.70794678 214.44132996]
[79.88607025 229.17350769]
[84.88906860 244.18286133]
[74.89559937 255.22731018]
[72.07373047 269.95950317]
[69.25185394 284.69168091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 82]
[7 81]
[8 80]
[10 78]
[11 77]
[12 76]
[13 75]
[15 74]
[16 73]
[17 72]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[46 69]
[47 68]
[48 67]
[49 66]
[50 64]
[51 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
