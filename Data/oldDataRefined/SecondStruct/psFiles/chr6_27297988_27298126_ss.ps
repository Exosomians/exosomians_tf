%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCUUCCUGCUCCACCGGCUCACCAAUUCCGCUACCUGACGAUUAGGUAACACGAGACGUGCGCACCCAAGCUUAGGGUGGAAGCAGCUGGCAAAAGAAAUUCUCCCAUUGGUCCAAAAACAGCGUCCAGACUCAAC\
) } def
/len { sequence length } bind def

/coor [
[171.92321777 322.90570068]
[170.91418457 307.93966675]
[169.90515137 292.97363281]
[168.89611816 278.00762939]
[167.88706970 263.04159546]
[166.87803650 248.07557678]
[167.46176147 237.62448120]
[170.72409058 228.78485107]
[175.97613525 222.16191101]
[182.40708923 218.13636780]
[170.27183533 209.31959534]
[158.13658142 200.50282288]
[146.00132751 191.68603516]
[133.76791382 183.00596619]
[121.43788910 174.46369934]
[109.10785675 165.92143250]
[96.77782440 157.37916565]
[84.44779205 148.83689880]
[69.45156860 148.50032043]
[56.75070572 156.48080444]
[49.57045364 171.22448730]
[33.19512177 172.10797119]
[24.47024918 158.22242737]
[32.37123489 143.85208130]
[48.77022552 143.77993774]
[61.47108841 135.79946899]
[60.71502686 128.33767700]
[45.79143906 129.84979248]
[30.86784935 131.36192322]
[15.94423580 132.87379456]
[14.43260765 117.95015717]
[29.35572624 116.43833160]
[44.27931213 114.92620850]
[59.20290375 113.41408539]
[58.44684219 105.95228577]
[44.40331650 100.68166351]
[30.35979462 95.41104126]
[16.31627083 90.14041901]
[2.27274799 84.86979675]
[-11.77077484 79.59917450]
[-25.81429863 74.32855225]
[-42.76797867 74.42387390]
[-47.55281830 58.15914154]
[-33.24829102 49.05876541]
[-20.54367638 60.28503036]
[-6.50015259 65.55565643]
[7.54337025 70.82627869]
[21.58689308 76.09690094]
[35.63041687 81.36752319]
[49.67393875 86.63814545]
[63.71746445 91.90876770]
[63.84329987 87.63108063]
[64.48179626 83.28701019]
[56.78830719 70.41027832]
[49.09481812 57.53354645]
[41.40132904 44.65681458]
[28.08697891 34.16089249]
[34.48693466 18.46130943]
[51.34465790 20.26507568]
[54.27806091 36.96332550]
[61.97154999 49.84005737]
[69.66503906 62.71678925]
[77.35852814 75.59352112]
[84.56540680 73.51725006]
[106.18605042 67.28845215]
[105.84947968 52.29222870]
[94.25445557 41.55300522]
[93.73280334 25.75732803]
[104.59401703 14.27649307]
[120.39432526 13.92187500]
[131.75968933 24.90386391]
[131.94723511 40.70703888]
[120.84570312 51.95565796]
[121.18227386 66.95188141]
[134.99597168 83.15776062]
[138.21536255 103.97785950]
[130.11775208 123.18111420]
[113.33174133 135.14624023]
[92.99005890 136.50686646]
[105.32009125 145.04913330]
[117.65012360 153.59140015]
[129.98014832 162.13366699]
[142.31018066 170.67593384]
[151.22601318 173.02053833]
[154.81811523 179.55078125]
[166.95336914 188.36755371]
[179.08862305 197.18434143]
[191.22387695 206.00111389]
[205.20738220 211.42897034]
[220.11306763 213.10844421]
[235.01873779 214.78790283]
[249.92442322 216.46737671]
[254.49024963 202.12724304]
[261.76623535 188.95353699]
[271.47268677 177.45263672]
[283.23654175 168.06658936]
[296.60565186 161.15618896]
[311.06607056 156.98704529]
[326.06207275 155.71939087]
[341.01715088 157.40197754]
[355.35656738 161.97012329]
[368.52908325 169.24822998]
[380.02841187 178.95655823]
[389.41256714 190.72193909]
[396.32080078 204.09214783]
[400.48760986 218.55325317]
[401.75280762 233.54943848]
[400.06781006 248.50427246]
[395.49734497 262.84292603]
[388.21710205 276.01428223]
[378.50692749 287.51202393]
[366.74002075 296.89425659]
[353.36871338 303.80035400]
[338.90692139 307.96481323]
[323.91052246 309.22760010]
[308.95596313 307.54019165]
[294.61804199 302.96740723]
[281.44787598 295.68502808]
[269.95169067 285.97296143]
[260.57135010 274.20455933]
[253.66744995 260.83212280]
[249.50532532 246.36964417]
[248.24496460 231.37306213]
[233.33927917 229.69358826]
[218.43359375 228.01412964]
[203.52790833 226.33465576]
[198.10694885 231.51762390]
[208.47270203 242.35972595]
[197.63044739 252.72529602]
[187.26502991 241.88356018]
[181.84407043 247.06654358]
[182.85310364 262.03256226]
[183.86213684 276.99859619]
[184.87117004 291.96459961]
[185.88020325 306.93063354]
[186.88923645 321.89663696]
[196.46995544 335.20611572]
[189.48820496 350.04483032]
[173.12620544 351.14797974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[10 88]
[11 87]
[12 86]
[13 85]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 26]
[20 25]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[53 63]
[54 62]
[55 61]
[56 60]
[65 74]
[66 73]
[89 126]
[90 125]
[91 124]
[92 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
