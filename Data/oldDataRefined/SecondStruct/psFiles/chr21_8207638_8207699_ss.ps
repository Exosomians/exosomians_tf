%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCCUCCUAGGGCGGCCCGGCCCGGGCCGCAGGGUCGCCCAACCCUGCGCCGCCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[28.84764099 164.58430481]
[16.83867645 161.76850891]
[3.84829521 169.26850891]
[-9.14208603 176.76850891]
[-21.94144821 184.59004211]
[-34.54183960 192.72824097]
[-47.14222717 200.86642456]
[-59.74261475 209.00462341]
[-69.76747894 222.67716980]
[-85.68085480 216.82901001]
[-84.46650696 199.91860962]
[-67.88080597 196.40423584]
[-55.28042221 188.26603699]
[-42.68003082 180.12785339]
[-30.07964325 171.98965454]
[-26.01897621 165.46783447]
[-16.64208603 163.77813721]
[-3.65170479 156.27813721]
[9.33867645 148.77813721]
[17.04700279 133.19799805]
[35.27809143 132.87355042]
[47.87847900 124.73535156]
[60.47887039 116.59715271]
[73.07926178 108.45896149]
[85.67964935 100.32077026]
[92.22859955 87.96751404]
[106.18215942 87.07884216]
[118.57573700 78.62904358]
[130.75480652 69.87288666]
[142.93388367 61.11672974]
[148.33064270 53.26459503]
[155.94541931 52.24561310]
[168.54580688 44.10741806]
[181.14619446 35.96922302]
[193.74659729 27.83102989]
[206.34698486 19.69283676]
[218.94737244 11.55464172]
[231.54776001 3.41644812]
[234.62673950 -12.08501625]
[247.81135559 -20.79945564]
[263.27938843 -17.55675125]
[271.85397339 -4.28073835]
[268.44790649 11.15215778]
[255.08197021 19.58587456]
[239.68594360 16.01683617]
[227.08555603 24.15503120]
[214.48516846 32.29322433]
[201.88478088 40.43141937]
[189.28439331 48.56961441]
[176.68400574 56.70780563]
[164.08361816 64.84600067]
[151.69003296 73.29579926]
[139.51097107 82.05195618]
[127.33189392 90.80811310]
[123.60136414 97.52423096]
[114.32035065 99.67922974]
[107.77140045 112.03248596]
[93.81784058 112.92115784]
[81.21745300 121.05934906]
[68.61706543 129.19754028]
[56.01667404 137.33573914]
[43.41628647 145.47393799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 15]
[6 14]
[7 13]
[8 12]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[27 56]
[28 54]
[29 53]
[30 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
