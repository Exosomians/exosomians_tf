%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:09 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGGAGCGGCAGGGCGGGCGGCGGAAGACGCAGCGCCCACGCCCGGCCGCCCCAGGAGACUGCGCCGUCUGUCGGGAGCGACAGC\
) } def
/len { sequence length } bind def

/coor [
[75.22906494 115.35997009]
[72.71552277 107.26148987]
[72.69477081 99.04850006]
[75.01369476 91.44782257]
[62.78575516 82.76004028]
[50.55781555 74.07226562]
[38.32987595 65.38448334]
[22.59869957 63.69904327]
[16.70481110 50.02017975]
[4.47687101 41.33240128]
[-7.75106812 32.64462280]
[-19.97900772 23.95684433]
[-32.20694733 15.26906586]
[-47.93812180 13.58362484]
[-53.83201218 -0.09523917]
[-66.05995178 -8.78301811]
[-78.28788757 -17.47079659]
[-90.51583099 -26.15857506]
[-103.04275513 -34.40940094]
[-115.85306549 -42.21299362]
[-128.66337585 -50.01658249]
[-141.47367859 -57.82017517]
[-154.28398132 -65.62376404]
[-167.36170959 -72.97040558]
[-180.69056702 -79.85092926]
[-194.01942444 -86.73146057]
[-209.67887878 -83.24419403]
[-222.07789612 -93.42475128]
[-221.70503235 -109.46347046]
[-208.84629822 -119.05682373]
[-193.36581421 -114.84561157]
[-187.13888550 -100.06031036]
[-173.81004333 -93.17978668]
[-160.48118591 -86.29925537]
[-155.54304504 -86.95499420]
[-150.17219543 -84.35374451]
[-146.48039246 -78.43407440]
[-133.67008972 -70.63048553]
[-120.85977936 -62.82688904]
[-108.04946899 -55.02330017]
[-95.23916626 -47.21970749]
[-90.26707458 -47.52547836]
[-85.09308624 -44.55185699]
[-81.82804871 -38.38651657]
[-69.60011292 -29.69873619]
[-57.37217331 -21.01095772]
[-45.14423370 -12.32317829]
[-30.28768158 -11.25914574]
[-23.51916885 3.04112625]
[-11.29122829 11.72890472]
[0.93671054 20.41668320]
[13.16464996 29.10446358]
[25.39258957 37.79224014]
[40.24914169 38.85627365]
[47.01765442 53.15654755]
[59.24559402 61.84432602]
[71.47353363 70.53210449]
[83.70146942 79.21988678]
[109.97229004 71.64330292]
[132.82608032 92.33640289]
[147.82374573 92.07167816]
[162.82141113 91.80694580]
[177.81907654 91.54222107]
[188.61372375 79.99877167]
[204.41172791 79.55280304]
[215.84039307 90.46888733]
[216.11930847 106.27071381]
[205.08300781 117.58334351]
[189.27911377 117.69518280]
[178.08380127 106.53988647]
[163.08613586 106.80461121]
[148.08847046 107.06933594]
[133.09082031 107.33406830]
[126.68496704 120.89743805]
[136.00772095 132.64845276]
[145.33045959 144.39947510]
[154.65321350 156.15048218]
[170.09423828 161.67376709]
[172.76484680 177.85400391]
[159.91773987 188.04634094]
[144.76892090 181.76579285]
[142.90219116 165.47323608]
[133.57945251 153.72221375]
[124.25669861 141.97120667]
[114.93395233 130.22018433]
[105.35551453 132.35614014]
[95.83789825 131.61111450]
[87.20565796 128.20530701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 55]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[15 47]
[16 46]
[17 45]
[18 44]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 34]
[25 33]
[26 32]
[60 73]
[61 72]
[62 71]
[63 70]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
