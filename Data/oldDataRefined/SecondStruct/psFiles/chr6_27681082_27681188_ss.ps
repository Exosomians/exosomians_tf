%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:06 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUUCUUAUAGUAUUCGGAUGGACAAAGGCGGGCCAAAGCUUGGCGCCUGGAAAGCGCACAAUCCGCUUGCACUAUUGGUGAUGUGAUGCCUUUGUGGGAGAAAG\
) } def
/len { sequence length } bind def

/coor [
[36.07875824 327.78271484]
[21.73033333 321.56524658]
[14.78157997 307.55636597]
[18.51348686 292.37063599]
[31.16395950 283.17825317]
[32.03613281 268.20364380]
[32.90830612 253.22901917]
[33.78047562 238.25439453]
[34.65264893 223.27976990]
[25.01631737 234.77503967]
[11.95684719 242.15408325]
[-2.86220598 244.47692871]
[-17.55314827 241.44770813]
[-30.24460411 233.45227051]
[-39.31990051 221.50912476]
[-43.62299347 207.13958740]
[-42.60574722 192.17411804]
[-36.39774323 178.51905823]
[-25.78976822 167.91383362]
[-12.13310432 161.70935059]
[2.83262539 160.69598389]
[17.20104218 165.00279236]
[29.14185333 174.08117676]
[37.13400269 186.77468872]
[40.15937424 201.46405029]
[46.49864960 187.86943054]
[52.83792114 174.27481079]
[59.17719650 160.68019104]
[65.51647186 147.08558655]
[71.85574341 133.49096680]
[78.19501495 119.89634705]
[84.53429413 106.30172729]
[82.36031342 91.46010590]
[72.38837433 80.25473022]
[62.25452423 69.19556427]
[51.96089935 58.28496170]
[41.66727448 47.37435913]
[31.37364960 36.46375275]
[21.08002472 25.55315018]
[5.81260490 18.18143272]
[8.66979027 1.46997404]
[25.51910591 -0.41069248]
[31.99062920 15.25952530]
[42.28425598 26.17012978]
[52.57787704 37.08073425]
[62.87150192 47.99134064]
[73.16513062 58.90194321]
[80.15241241 61.64982986]
[83.59375000 70.28279114]
[93.56568909 81.48816681]
[101.02685547 80.72590637]
[99.50257111 65.80355072]
[114.42494965 64.27951813]
[115.94918060 79.20137787]
[123.41033936 78.43911743]
[130.91033936 65.44873047]
[138.41033936 52.45835114]
[145.91033936 39.46797180]
[153.41033936 26.47758865]
[147.89231873 11.84593391]
[153.11904907 -2.89228821]
[166.62266541 -10.77813816]
[182.02714539 -8.08815956]
[192.05897522 3.90752268]
[191.98143005 19.54491425]
[181.83113098 31.44051552]
[166.40072632 33.97758865]
[158.90072632 46.96797180]
[151.40072632 59.95835114]
[143.90072632 72.94873047]
[136.40072632 85.93911743]
[145.00476074 98.22693634]
[153.60801697 110.51367188]
[168.38012695 107.90895081]
[183.15225220 105.30422974]
[197.92436218 102.69950867]
[212.47293091 93.99459076]
[224.86509705 105.56482697]
[217.17752075 120.67566681]
[200.52908325 117.47162628]
[185.75697327 120.07634735]
[170.98486328 122.68106842]
[156.21273804 125.28578949]
[154.60102844 140.19895935]
[146.29383850 152.68856812]
[133.16316223 159.94013977]
[118.16796112 160.31954956]
[104.68736267 153.74130249]
[95.75917816 141.68777466]
[93.39535522 126.87519836]
[98.12890625 112.64099884]
[91.78963470 126.23561859]
[85.45036316 139.83023071]
[79.11108398 153.42485046]
[72.77181244 167.01947021]
[66.43254089 180.61408997]
[60.09326553 194.20870972]
[53.75399017 207.80331421]
[55.03691101 214.33489990]
[53.37338257 220.16447449]
[49.62727356 224.15194702]
[48.75510025 239.12657166]
[47.88292694 254.10119629]
[47.01075363 269.07580566]
[46.13858032 284.05044556]
[57.63634872 294.64926147]
[59.58006287 310.16558838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 105]
[6 104]
[7 103]
[8 102]
[9 101]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[33 50]
[34 49]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
