%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:24 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAGUUACUACUAAAGAUAAACAAACGGACUAAAGGAAAACCUAUUACUUCCGUAGAAAUCAGUGAUGGAGAAGACUCUGUGA\
) } def
/len { sequence length } bind def

/coor [
[103.53382874 257.81680298]
[102.98600006 242.82681274]
[102.43817139 227.83682251]
[101.89034271 212.84683228]
[101.06882477 197.86933899]
[99.97389221 182.90934753]
[98.87896729 167.94937134]
[97.78403473 152.98937988]
[87.12953186 139.17341614]
[94.97058868 122.63439941]
[93.33001709 107.72438812]
[89.30513000 100.50244141]
[91.91207123 92.24125671]
[90.81713867 77.28127289]
[89.72221375 62.32128906]
[74.45115662 59.78052139]
[60.22588348 53.69495773]
[47.85597610 44.41540909]
[38.04437256 32.47433472]
[31.34741402 18.55528069]
[28.14329910 3.45377564]
[28.61072540 -11.96815777]
[32.71893311 -26.83119774]
[40.22969437 -40.28886795]
[50.71111298 -51.57573318]
[63.56247711 -60.05094910]
[78.04866028 -65.23464203]
[76.40809631 -80.14465332]
[74.76752472 -95.05467224]
[73.12696075 -109.96468353]
[71.48638916 -124.87470245]
[60.23684692 -139.31315613]
[67.63243866 -155.11518860]
[65.44841766 -169.95535278]
[63.26440430 -184.79550171]
[60.80970764 -199.59327698]
[58.08515549 -214.34376526]
[55.36060333 -229.09425354]
[44.31193924 -241.21279907]
[49.53974533 -256.75634766]
[65.66610718 -259.73504639]
[76.10160065 -247.08464050]
[70.11108398 -231.81880188]
[72.83563995 -217.06831360]
[75.56019592 -202.31784058]
[79.97533417 -196.16833496]
[78.10455322 -186.97950745]
[80.28857422 -172.13935852]
[82.47258759 -157.29920959]
[92.08020020 -149.70880127]
[93.90334320 -137.19267273]
[86.39640045 -126.51526642]
[88.03697205 -111.60525513]
[89.67754364 -96.69523621]
[91.31810760 -81.78522491]
[92.95867920 -66.87520599]
[107.42391205 -65.15859985]
[121.14092255 -60.23377609]
[133.40736389 -52.34928513]
[143.59437561 -41.90530396]
[151.17875671 -29.43334198]
[155.76989746 -15.56917953]
[157.12989807 -1.02046239]
[155.18585205 13.46941948]
[150.03373718 27.15931320]
[141.93377686 39.34821320]
[131.29716492 49.41116714]
[118.66530609 56.83129120]
[104.68219757 61.22636032]
[105.77713013 76.18634033]
[106.87205505 91.14632416]
[108.24003601 106.08381653]
[109.88059998 120.99383545]
[119.52953339 129.78355408]
[120.47138977 142.39665222]
[112.74401855 151.89445496]
[113.83895111 166.85444641]
[114.93387604 181.81442261]
[116.02880859 196.77441406]
[119.85276031 205.33662415]
[116.88033295 212.29899597]
[117.42816162 227.28898621]
[117.97599030 242.27897644]
[118.52382660 257.26898193]
[121.41652679 276.43359375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 79]
[6 78]
[7 77]
[8 76]
[10 73]
[11 72]
[13 71]
[14 70]
[15 69]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[33 49]
[34 48]
[35 47]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
