%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUUUCUUGGACCCAUCGAGUCAUCCAUCUUGUAGUCUGAAAAUUAGACUCCCAGAUCCCAAGUUCAGGGACAGGUCCGCAACUCACAUCAAAACUG\
) } def
/len { sequence length } bind def

/coor [
[95.12927246 319.04833984]
[86.66830444 306.59417725]
[80.98196411 292.65289307]
[78.31881714 277.83395386]
[78.79530334 262.78515625]
[82.39057922 248.16435242]
[88.94748688 234.61073303]
[98.17937469 222.71678162]
[109.68266296 213.00247192]
[122.95449066 205.89244080]
[118.76962280 191.48803711]
[114.58475494 177.08363342]
[110.39988708 162.67922974]
[106.21502686 148.27482605]
[102.03015900 133.87042236]
[89.46685791 132.25491333]
[78.37142944 126.14444733]
[70.29011536 116.39054108]
[66.34910583 104.35248566]
[51.41567230 102.94086456]
[36.48224258 101.52923584]
[21.54881477 100.11761475]
[11.38858891 111.84576416]
[-3.73243165 115.32920074]
[-17.99990654 109.22847748]
[-25.92770004 95.88945007]
[-24.46741486 80.44123840]
[-14.18055916 68.82400513]
[0.97736073 65.50479889]
[15.17781448 71.75994110]
[22.96043968 85.18418121]
[37.89386749 86.59580994]
[52.82729721 88.00743103]
[67.76072693 89.41905975]
[73.91516113 74.22872925]
[87.26002502 62.71051407]
[81.73815155 48.76386642]
[76.21628571 34.81721878]
[70.69441986 20.87057114]
[65.17254639 6.92392445]
[59.65068054 -7.02272272]
[54.12881470 -20.96936989]
[42.67629623 -33.47041702]
[51.51842499 -47.93600082]
[67.86643219 -43.44389725]
[68.07546234 -26.49123764]
[73.59732819 -12.54459095]
[79.11919403 1.40205622]
[84.64106750 15.34870338]
[90.16293335 29.29535103]
[95.68479919 43.24199677]
[101.20667267 57.18864441]
[115.89501190 60.23045349]
[126.50161743 49.62385178]
[137.10821533 39.01725006]
[141.39530945 23.78795815]
[155.86595154 20.25951576]
[166.47254944 9.65291405]
[163.91223145 -5.65147686]
[170.86669922 -19.52285194]
[184.66181946 -26.62738419]
[199.99307251 -24.23323822]
[210.96530151 -13.26100826]
[213.35945129 2.07025623]
[206.25491333 15.86537266]
[192.38354492 22.81983757]
[177.07914734 20.25951576]
[166.47254944 30.86611748]
[162.94410706 45.33675385]
[147.71481323 49.62385178]
[137.10821533 60.23045349]
[126.50161743 70.83705902]
[135.61773682 86.65090179]
[136.42204285 104.24410248]
[129.32049561 119.65675354]
[116.43456268 129.68556213]
[120.61943054 144.08996582]
[124.80429840 158.49436951]
[128.98916626 172.89877319]
[133.17402649 187.30317688]
[137.35890198 201.70758057]
[152.37440491 200.59936523]
[167.29214478 202.63766479]
[181.45997620 207.73336792]
[194.25856018 215.66369629]
[205.12835693 226.08200073]
[213.59422302 238.53282166]
[219.28605652 252.47184753]
[221.95501709 267.28976440]
[221.48446655 282.33874512]
[217.89492798 296.96096802]
[211.34336853 310.51715088]
[202.11614990 322.41473389]
[190.61668396 332.13357544]
[177.34765625 339.24880981]
[162.88914490 343.44940186]
[147.87319946 344.55172729]
[132.95625305 342.50753784]
[118.79042816 337.40628052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[19 34]
[20 33]
[21 32]
[22 31]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[53 72]
[54 71]
[55 70]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
