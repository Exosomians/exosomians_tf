%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:33 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUAGGAUAGAACAAAGUAGACAAGUUUAAACGCGAAUUCAAGGCAGACGGCAAGGUGGAAAAAGACUCGAGCUGGUUGUAUUUAA\
) } def
/len { sequence length } bind def

/coor [
[69.53440094 161.94143677]
[54.41904449 151.83889771]
[42.46558762 138.14035034]
[29.13673401 145.02087402]
[15.80787945 151.90139771]
[7.09429455 165.10685730]
[-7.76414871 164.06959534]
[-12.65958309 178.85716248]
[-26.27495193 185.64512634]
[-40.34247971 180.88694763]
[-53.67133331 187.76747131]
[-55.88434982 203.12593079]
[-66.72630310 214.22691345]
[-82.02824402 216.80184937]
[-95.90625763 209.86064148]
[-103.02396393 196.07232666]
[-100.64447021 180.73876953]
[-89.68273163 169.75607300]
[-74.35375977 167.34727478]
[-60.55186081 174.43861389]
[-47.22300720 167.55809021]
[-42.95415115 153.33444214]
[-29.53481483 146.16673279]
[-14.64467621 150.74073792]
[-6.88446045 138.02742004]
[8.92735195 138.57255554]
[22.25620651 131.69201660]
[35.58506012 124.81149292]
[32.20804214 113.00558472]
[30.97628212 100.78810883]
[31.92875862 88.54570007]
[35.03533173 76.66576385]
[40.19769287 65.52422333]
[47.25248337 55.47366714]
[55.97645569 46.83213043]
[66.09353638 39.87308121]
[77.28358459 34.81672668]
[89.19248199 31.82308006]
[101.44338226 30.98687553]
[113.64860535 32.33457184]
[125.42192078 35.82352066]
[136.39077759 41.34331894]
[146.20803833 48.71928787]
[154.56307983 57.71802521]
[161.19146729 68.05476379]
[165.88348389 79.40239716]
[180.60168457 76.50850677]
[195.31988525 73.61461639]
[204.14201355 60.77686691]
[219.10958862 58.05171585]
[231.29405212 66.54138184]
[246.01225281 63.64748764]
[260.73043823 60.75359726]
[275.44863892 57.85970688]
[284.27078247 45.02195740]
[299.23834229 42.29680634]
[311.42282104 50.78646851]
[326.08764648 47.63327408]
[340.69454956 44.22175980]
[346.59680176 29.87104416]
[359.82458496 21.75900650]
[375.29156494 23.00489235]
[387.05035400 33.12963104]
[390.57946777 48.24005890]
[384.52188110 62.52590179]
[371.20687866 70.49396515]
[355.75433350 69.08036804]
[344.10604858 58.82866287]
[329.49914551 62.24017715]
[323.57080078 66.93150330]
[314.31671143 65.50466919]
[306.25347900 77.97543335]
[291.36834717 81.11991882]
[278.34252930 72.57790375]
[263.62432861 75.47179413]
[248.90614319 78.36568451]
[234.18794250 81.25957489]
[226.12471008 93.73033905]
[211.23959351 96.87482452]
[198.21377563 88.33281708]
[183.49557495 91.22670746]
[168.77737427 94.12059784]
[167.92689514 112.28132629]
[162.36441040 129.59011841]
[152.47576904 144.84626770]
[138.94694519 156.99148560]
[122.71641541 165.18327332]
[104.91007233 168.85336304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[7 24]
[10 21]
[11 20]
[46 82]
[47 81]
[48 80]
[51 77]
[52 76]
[53 75]
[54 74]
[57 71]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
