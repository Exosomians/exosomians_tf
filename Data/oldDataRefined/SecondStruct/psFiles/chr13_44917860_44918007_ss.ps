%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUGUACGGAAAAGGCUCAAUCCUUCUUAGAUUUAGCUGACUUGCGGUCAGAUUUUAAAGCCGCAAGGGUGUGGCCCUCAGCUUGGGCCCGGCGGACCCACUUUUGGUCCUUAGGAUUGGCGAUCUGGUACACCCUCUGCCGUUA\
) } def
/len { sequence length } bind def

/coor [
[104.70120239 459.47967529]
[103.29337311 444.42944336]
[106.38585663 429.63323975]
[113.70366669 416.40670776]
[124.59610748 405.92596436]
[138.09463501 399.12292480]
[135.57646179 384.33581543]
[133.05830383 369.54867554]
[130.54014587 354.76156616]
[128.02198792 339.97445679]
[125.34807587 325.21469116]
[122.51872253 310.48394775]
[119.68936157 295.75320435]
[109.01287842 291.51239014]
[101.65735626 282.53201294]
[99.55959320 270.99261475]
[103.36098480 259.77017212]
[112.21775055 251.71922302]
[110.01190186 236.88230896]
[105.88936615 230.68676758]
[107.91938782 221.70965576]
[106.02683258 206.82952881]
[104.13428497 191.94940186]
[102.24173737 177.06925964]
[100.34918976 162.18913269]
[98.45664215 147.30900574]
[96.56409454 132.42887878]
[73.51828003 125.19871521]
[59.56398773 102.26342010]
[64.58526611 73.14771271]
[49.59276581 73.62203979]
[34.60026932 74.09635925]
[19.60776901 74.57068634]
[8.97551918 86.26387787]
[-6.81469965 86.93061066]
[-18.39482880 76.17533112]
[-18.89458466 60.37894440]
[-8.01746941 48.91317368]
[7.78331661 48.58045578]
[19.13344765 59.57818604]
[34.12594604 59.10386276]
[49.11844635 58.62953949]
[64.11094666 58.15521622]
[69.96058655 44.34284210]
[59.86890793 33.24518585]
[49.77722931 22.14752579]
[39.68555069 11.04986763]
[29.59387398 -0.04779099]
[19.50219536 -11.14544964]
[9.41051674 -22.24310875]
[-0.68116164 -33.34076691]
[-15.47694969 -29.42372131]
[-30.39572525 -32.84260178]
[-42.00926208 -42.81177139]
[-47.64885330 -57.04039001]
[-46.01856613 -72.25881958]
[-37.49302673 -84.96998596]
[-24.03133965 -92.25295258]
[-8.72690296 -92.43414307]
[4.90343428 -85.47192383]
[13.72752190 -72.96616364]
[15.71764755 -57.79059219]
[10.41649723 -43.43244553]
[20.50817490 -32.33478546]
[30.59985352 -21.23712730]
[40.69153214 -10.13946915]
[50.78321075 0.95818931]
[60.87488937 12.05584812]
[70.96656799 23.15350723]
[81.05824280 34.25116348]
[95.81799316 31.57725716]
[93.74389648 15.89259338]
[105.64577484 6.93745041]
[111.20291138 -6.99518108]
[111.48470306 -16.19463921]
[117.02687836 -21.16096115]
[122.87651825 -34.97333527]
[128.72616577 -48.78570938]
[134.57580566 -62.59808350]
[140.42544556 -76.41045380]
[133.15403748 -90.25461578]
[136.53317261 -105.52273560]
[148.96731567 -115.00567627]
[164.58543396 -114.22589111]
[176.01315308 -103.55155945]
[177.85464478 -88.02278137]
[169.24040222 -74.97177124]
[154.23782349 -70.56081390]
[148.38818359 -56.74843979]
[142.53852844 -42.93606567]
[136.68888855 -29.12369156]
[130.83924866 -15.31131744]
[125.13554382 -1.43804371]
[119.57840729 12.49458790]
[122.04998779 27.18269730]
[109.75062561 37.13439560]
[119.84230804 48.23205185]
[134.23873901 44.01985931]
[148.63517761 39.80766678]
[163.03161621 35.59547424]
[177.42805481 31.38328171]
[183.54527283 16.99183273]
[197.50534058 9.94552135]
[212.71675110 13.57139874]
[221.99713135 26.15743637]
[220.96458435 41.76089478]
[210.10664368 53.01429367]
[194.55009460 54.60412598]
[181.64024353 45.77972031]
[167.24382019 49.99191284]
[152.84738159 54.20410538]
[138.45094299 58.41629791]
[124.05449677 62.62849045]
[139.11875916 89.51589966]
[132.50486755 116.72396088]
[111.44422150 130.53633118]
[113.33676910 145.41645813]
[115.22931671 160.29658508]
[117.12186432 175.17671204]
[119.01441956 190.05685425]
[120.90696716 204.93698120]
[122.79951477 219.81710815]
[124.84882355 234.67645264]
[127.05467224 249.51338196]
[142.67567444 260.13848877]
[145.59028625 278.48284912]
[134.42010498 292.92385864]
[137.24946594 307.65460205]
[140.07881165 322.38534546]
[144.80023193 330.28582764]
[142.80909729 337.45629883]
[145.32727051 352.24340820]
[147.84542847 367.03051758]
[150.36358643 381.81762695]
[152.88174438 396.60476685]
[167.87115479 398.55645752]
[181.61865234 404.84115601]
[192.90184021 414.90005493]
[200.71739197 427.83868408]
[204.37039185 442.50659180]
[203.53599548 457.59948730]
[198.28840637 471.77529907]
[189.09422302 483.77359009]
[176.77101135 492.52740479]
[162.41450500 497.25842285]
[147.30131531 497.54592896]
[132.77526855 493.36437988]
[120.12802124 485.08557129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 135]
[7 134]
[8 133]
[9 132]
[10 131]
[11 129]
[12 128]
[13 127]
[18 124]
[19 123]
[21 122]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[30 43]
[31 42]
[32 41]
[33 40]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[71 96]
[73 94]
[74 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
