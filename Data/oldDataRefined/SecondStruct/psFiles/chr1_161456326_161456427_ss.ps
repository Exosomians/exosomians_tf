%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:04 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCAGUCCUACCGGCUCGCCAGAUUCCGCGACGCAAGUCCAGCGUCAGAGGGGACCUCCGCACCCAAGCUUAGGGUGAGGACUGUUCGGCUGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[158.43986511 297.54327393]
[154.81596375 282.98760986]
[141.95880127 275.55596924]
[138.07630920 260.84609985]
[145.95845032 247.41070557]
[142.33454895 232.85504150]
[138.71066284 218.29937744]
[135.08676147 203.74371338]
[131.46287537 189.18804932]
[127.83897400 174.63237000]
[124.21508026 160.07670593]
[120.59117889 145.52104187]
[116.96728516 130.96537781]
[97.62433624 133.57611084]
[80.81819916 125.62717438]
[71.54590607 110.59209442]
[56.63129425 112.19035339]
[41.71668625 113.78861237]
[27.20464516 124.99403381]
[11.42960835 117.47407532]
[-3.42932296 119.52642822]
[-16.03678131 130.01374817]
[-31.32707596 124.08595276]
[-33.57086563 107.84102631]
[-20.45993042 97.99037170]
[-5.48167562 104.66749573]
[9.37725639 102.61514282]
[17.01771927 93.09984589]
[29.50255203 91.35413361]
[40.11842728 98.87400055]
[55.03303528 97.27574158]
[69.94764709 95.67749023]
[72.55960846 87.00565338]
[77.61318207 79.49004364]
[69.39888000 66.93913269]
[61.18458176 54.38822556]
[52.97028351 41.83731842]
[44.75598145 29.28641129]
[29.20790482 27.61569405]
[18.40863037 16.30597878]
[17.45724869 0.69736224]
[26.80296898 -11.84024143]
[42.03303146 -15.38695908]
[55.95626450 -8.26814079]
[61.99854660 6.15492678]
[57.30689240 21.07211113]
[65.52118683 33.62302017]
[73.73548889 46.17392731]
[81.94979095 58.72483444]
[90.16408539 71.27574158]
[96.30495453 69.86405945]
[102.60497284 69.75033569]
[107.54373169 55.58669662]
[112.48249054 41.42305756]
[117.42124939 27.25942039]
[116.92708588 10.31267643]
[133.07473755 5.14649630]
[142.50914001 19.23295975]
[131.58488464 32.19818115]
[126.64612579 46.36182022]
[121.70736694 60.52545547]
[116.76860809 74.68909454]
[125.33167267 80.42961884]
[131.84498596 89.09605408]
[135.30918884 99.92932129]
[149.80789185 96.08387756]
[164.30661011 92.23842621]
[178.80531311 88.39298248]
[193.30401611 84.54753876]
[199.78451538 70.31597900]
[213.91893005 63.62625504]
[229.03341675 67.63703918]
[237.99137878 80.45455933]
[236.56314087 96.02678680]
[225.42306519 107.00098419]
[209.83117676 108.19546509]
[197.14945984 99.04624176]
[182.65075684 102.89169312]
[168.15205383 106.73713684]
[153.65333557 110.58258057]
[139.15463257 114.42803192]
[131.52294922 127.34148407]
[135.14685059 141.89715576]
[138.77073669 156.45281982]
[142.39463806 171.00848389]
[146.01853943 185.56414795]
[149.64242554 200.11981201]
[153.26632690 214.67547607]
[156.89022827 229.23114014]
[160.51411438 243.78680420]
[173.77563477 251.95809937]
[177.24342346 266.77124023]
[169.37162781 279.36370850]
[172.99552917 293.91937256]
[187.63716125 298.77999878]
[197.30885315 310.79925537]
[198.92437744 326.14178467]
[191.96823120 339.91189575]
[178.66011047 347.71554565]
[163.24656677 347.06265259]
[150.64601135 338.16156006]
[144.87924194 323.85253906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[16 32]
[17 31]
[18 30]
[20 27]
[21 26]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[52 62]
[53 61]
[54 60]
[55 59]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
