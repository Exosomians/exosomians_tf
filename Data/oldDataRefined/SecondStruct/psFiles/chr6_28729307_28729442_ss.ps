%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCAGUCCCCCACAUCGAGUCACCAUCUCGCGCACGAAGCGUACAUGCUCCGGGGCCCAAGCUGGGGGCCGAGGAGGUCAACAGGUAAAAGAAGUAAGAGGAAAGACCAAGAAACGUACGCAAACAGUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[78.33988190 294.10089111]
[81.36071777 308.79354858]
[80.70722961 323.77932739]
[76.41887665 338.15325928]
[68.75460052 351.04739380]
[58.17721176 361.68313599]
[45.32543182 369.41821289]
[30.97530556 373.78558350]
[15.99337006 374.52151489]
[1.28430438 371.58154297]
[-12.26368523 365.14321899]
[-23.83250427 355.59533691]
[-32.72357178 343.51440430]
[-38.40000153 329.62994385]
[-40.51902390 314.78036499]
[-38.95267868 299.86236572]
[-33.79555130 285.77679443]
[-25.36209297 273.37759399]
[-39.03243256 279.55187988]
[-52.70277405 285.72616577]
[-66.37311554 291.90045166]
[-70.42845917 307.00302124]
[-83.27234650 315.92315674]
[-98.84028625 314.44900513]
[-109.78158569 303.27661133]
[-110.93007660 287.68127441]
[-101.74349976 275.02658081]
[-86.55945587 271.28775024]
[-72.54740143 278.23010254]
[-58.87705994 272.05581665]
[-45.20671844 265.88153076]
[-31.53637505 259.70724487]
[-29.36342812 255.24626160]
[-25.16839409 251.78703308]
[-19.46025658 250.23762512]
[-10.20426750 238.43394470]
[-0.94827837 226.63027954]
[-6.58837461 209.96884155]
[-1.11312592 193.08831787]
[13.48733234 182.72866821]
[31.54107094 183.14299011]
[40.24617004 170.92738342]
[48.95126724 158.71176147]
[57.65636444 146.49615479]
[66.36146545 134.28053284]
[75.06655884 122.06491852]
[66.96103668 109.25750732]
[65.23033905 93.74295044]
[70.61725616 78.60823822]
[82.40826416 67.03904724]
[98.50328827 61.65079880]
[95.42948914 46.96911621]
[92.35569000 32.28743744]
[79.41093445 23.62308311]
[76.50280762 8.68998241]
[84.84272003 -3.59746909]
[81.76891327 -18.27915001]
[78.69511414 -32.96083069]
[75.62131500 -47.64251328]
[72.54751587 -62.32419205]
[58.67835236 -69.54779053]
[52.74499130 -84.01599884]
[57.54898453 -98.89739227]
[70.82203674 -107.16541290]
[86.29701233 -104.91616058]
[96.66710663 -93.21166992]
[97.03587341 -77.57843018]
[87.22919464 -65.39799500]
[90.30299377 -50.71631241]
[93.37680054 -36.03462982]
[96.45059967 -21.35295105]
[99.52439880 -6.67126942]
[112.09291077 1.23873317]
[115.41932678 16.08425713]
[107.03736877 29.21363640]
[110.11116791 43.89531708]
[113.18496704 58.57699585]
[126.47908783 65.52440643]
[140.28739929 59.66519928]
[154.09571838 53.80598831]
[167.90403748 47.94678116]
[165.36804199 33.09196854]
[166.32676697 18.05276871]
[170.72850037 3.64022350]
[178.33587646 -9.36841488]
[188.73861694 -20.27160645]
[201.37573242 -28.48135567]
[215.56571960 -33.55492401]
[230.54331970 -35.21869659]
[245.50082397 -33.38294983]
[259.63159180 -28.14668274]
[272.17352295 -19.79228210]
[282.45031738 -8.77028847]
[289.90771484 4.32489491]
[294.14358521 18.78706169]
[294.92944336 33.83628464]
[292.22296143 48.66098022]
[286.17004395 62.46166992]
[277.09713745 74.49409485]
[265.49356079 84.10937500]
[251.98504639 90.78895569]
[237.30010986 94.17262268]
[222.23068237 94.07790375]
[207.58943176 90.50989532]
[194.16595459 83.66102600]
[182.68415833 73.90063477]
[173.76324463 61.75510025]
[159.95492554 67.61431122]
[146.14660645 73.47351837]
[132.33828735 79.33272552]
[136.54853821 90.58012390]
[137.03108215 102.37989044]
[133.86207581 113.54868317]
[127.47775269 123.00502777]
[118.61896515 129.87391663]
[108.24708557 133.56736755]
[97.44038391 133.83348083]
[87.28218079 130.77001953]
[78.57707977 142.98562622]
[69.87197876 155.20124817]
[61.16688156 167.41687012]
[52.46178436 179.63247681]
[43.75668716 191.84809875]
[49.29085159 203.16865540]
[49.45011139 215.69599915]
[44.26587296 227.02171326]
[34.79090118 234.99491882]
[22.88613892 238.13066101]
[10.85539341 235.88627625]
[1.59940398 247.68994141]
[-7.65658522 259.49362183]
[6.40042686 254.25907898]
[21.30957794 252.61068726]
[36.17058182 254.64797974]
[50.08605957 260.24792480]
[62.21572113 269.07241821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 32]
[19 31]
[20 30]
[21 29]
[35 131]
[36 130]
[37 129]
[41 123]
[42 122]
[43 121]
[44 120]
[45 119]
[46 118]
[51 77]
[52 76]
[53 75]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[78 110]
[79 109]
[80 108]
[81 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
