%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:19 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUUCAAUGUUGGGCGCGGGUUGCACCCCGAGCUUGGGUGCUGGGACCCUAAUUCUCAGGGUACGAGAUGGCUGACUCGAUCGGCCCGCGGACAAUGCAAUCG\
) } def
/len { sequence length } bind def

/coor [
[40.80861282 389.21115112]
[25.70052338 389.69799805]
[11.12058544 385.70840454]
[-1.63475966 377.59713745]
[-11.43131638 366.08544922]
[-17.39798164 352.19696045]
[-19.00420380 337.16659546]
[-16.10715866 322.33090210]
[-8.96444893 309.00900269]
[1.78880072 298.38546753]
[15.19641781 291.40499878]
[30.06620598 288.68823242]
[31.82379913 273.79156494]
[33.58139420 258.89486694]
[35.33898926 243.99819946]
[25.94064331 232.50009155]
[27.51088524 217.36770630]
[39.63489151 207.58781433]
[41.39248657 192.69114685]
[43.15007782 177.79447937]
[44.90767288 162.89779663]
[46.66526794 148.00112915]
[48.42285919 133.10444641]
[50.18045425 118.20777893]
[51.93804932 103.31110382]
[44.95220566 90.03714752]
[31.67824745 83.05130768]
[18.40428734 76.06546021]
[5.13032675 69.07962036]
[-8.14363289 62.09378052]
[-21.41759300 55.10794067]
[-35.82207489 61.19438934]
[-50.75356674 56.54846954]
[-59.16187668 43.36384201]
[-57.07685089 27.86588478]
[-45.48298264 17.37225914]
[-29.85453606 16.83773232]
[-17.57078934 26.51469421]
[-14.43175125 41.83398056]
[-1.15779150 48.81982040]
[12.11616898 55.80566406]
[25.39012909 62.79150391]
[38.66408920 69.77734375]
[51.93804932 76.76319122]
[58.72237396 73.56585693]
[52.32794189 59.99710083]
[65.89680481 53.60289001]
[72.29103088 67.17120361]
[79.07535553 63.97386932]
[82.13656616 49.28956223]
[85.19778442 34.60525131]
[88.25899506 19.92094040]
[91.32020569 5.23662949]
[81.50309753 -6.93539906]
[81.85845947 -22.56894302]
[92.21851349 -34.28232193]
[107.69155884 -36.54483795]
[120.97168732 -28.28819847]
[125.78843689 -13.41093540]
[119.86748505 1.06236100]
[106.00451660 8.29784298]
[102.94330597 22.98215294]
[99.88209534 37.66646194]
[96.82087708 52.35077286]
[93.75966644 67.03508759]
[110.29828644 73.05567932]
[119.16548920 85.32231903]
[133.31854248 80.35329437]
[147.47158813 75.38426208]
[161.62463379 70.41522980]
[165.94256592 55.51103592]
[178.21693420 46.01791000]
[193.72799683 45.58615875]
[206.51144409 54.38179779]
[211.65176392 69.02272797]
[207.17240906 83.87920380]
[194.79577637 93.23861694]
[179.28092957 93.50207520]
[166.59365845 84.56828308]
[152.44061279 89.53730774]
[138.28756714 94.50634003]
[124.13452148 99.47536469]
[119.72081757 117.69055176]
[102.49765015 128.73695374]
[80.71913147 124.52657318]
[66.83472443 105.06870270]
[65.07712555 119.96537781]
[63.31953430 134.86204529]
[61.56193924 149.75871277]
[59.80434418 164.65539551]
[58.04675293 179.55206299]
[56.28915787 194.44874573]
[54.53156281 209.34541321]
[64.04656982 221.67839050]
[62.05191040 236.76069641]
[50.23566055 245.75579834]
[48.47806549 260.65246582]
[46.72047424 275.54913330]
[44.96287918 290.44583130]
[58.79207993 296.54864502]
[70.20696259 306.45782471]
[78.19250488 319.29226685]
[82.03865814 333.91070557]
[81.40341187 349.01327515]
[76.34326172 363.25708008]
[67.30814362 375.37557983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 99]
[13 98]
[14 97]
[15 96]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[67 82]
[68 81]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
