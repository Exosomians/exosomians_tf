%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:51 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUUUCAUACCAACUCUUUAACACCGUCUUUCUUAAAAUUUACAAUCAGCUUCAACAGACAUCAAA\
) } def
/len { sequence length } bind def

/coor [
[155.48896790 165.62994385]
[143.24990845 174.26815796]
[129.69683838 180.64993286]
[115.24149323 184.58139038]
[100.32308197 185.94306946]
[85.39485931 184.69358826]
[70.91036987 180.87092590]
[57.30968857 174.59123230]
[45.00603867 166.04527283]
[34.37322998 155.49272156]
[25.73431587 143.25416565]
[19.35176086 129.70144653]
[15.41948414 115.24633026]
[14.05695629 100.32799530]
[15.30557537 85.39969635]
[19.12740517 70.91499329]
[25.40633011 57.31395340]
[33.95158005 45.00981522]
[44.50353241 34.37640381]
[56.74159622 25.73678780]
[70.29394531 19.35345840]
[84.74883270 15.42035580]
[99.66709137 14.05697536]
[114.59545898 15.30474186]
[129.08038330 19.12574387]
[142.68177795 25.40389061]
[154.98640442 33.94843674]
[165.62042236 44.49978256]
[177.87496948 35.84957886]
[190.12951660 27.19937134]
[202.38406372 18.54916763]
[196.54144287 4.66832399]
[193.81983948 -10.14406586]
[194.34652710 -25.19520187]
[198.09690857 -39.78111267]
[204.89553833 -53.21958923]
[214.42443848 -64.88208771]
[226.23794556 -74.22313690]
[239.78350830 -80.80583954]
[254.42756653 -84.32230377]
[269.48519897 -84.60806274]
[284.25213623 -81.64974976]
[298.03771973 -75.58573151]
[310.19711304 -66.69963074]
[320.16165161 -55.40707016]
[327.46527100 -42.23622131]
[331.76635742 -27.80311012]
[332.86373901 -12.78279686]
[330.70611572 2.12219071]
[325.39434814 16.21471786]
[317.17691040 28.83565331]
[306.43817139 39.39469147]
[293.68035889 47.39796829]
[279.50021362 52.47115326]
[264.56094360 54.37696838]
[249.56127930 53.02627182]
[235.20280457 48.48223877]
[222.15707397 40.95740509]
[211.03427124 30.80371475]
[198.77972412 39.45392227]
[186.52517700 48.10412598]
[174.27062988 56.75432968]
[180.65164185 70.30777740]
[184.58226013 84.76333618]
[185.94308472 99.68183136]
[184.69274902 114.60998535]
[180.86926270 129.09425354]
[174.58879089 142.69458008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 62]
[29 61]
[30 60]
[31 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
