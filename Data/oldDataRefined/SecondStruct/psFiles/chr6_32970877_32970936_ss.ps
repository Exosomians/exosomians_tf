%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:10 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCCCCUCCUCCCCCUCCCGAUCAGACUCGGCGUCGGCGGCGGAGGAGGCGAGCGG\
) } def
/len { sequence length } bind def

/coor [
[89.48724365 187.94213867]
[89.48724365 172.94213867]
[81.03899384 163.93969727]
[81.15734863 151.18829346]
[90.33736420 141.76144409]
[91.10954285 126.78134155]
[91.88172150 111.80123138]
[85.69504547 99.26261902]
[93.13816833 87.42658997]
[93.91034698 72.44647980]
[94.68252563 57.46636963]
[95.45471191 42.48625565]
[96.22689056 27.50614548]
[96.99906921 12.52603436]
[97.77125549 -2.45407748]
[98.54343414 -17.43418884]
[91.52680969 -31.61437035]
[99.90903473 -43.92646027]
[100.68121338 -58.90657043]
[92.51913452 -69.22734833]
[93.71251678 -81.92333221]
[103.04163361 -90.00940704]
[104.58394623 -104.92990112]
[106.12625885 -119.85040283]
[107.66857910 -134.77090454]
[109.21089172 -149.69139099]
[96.72292328 -158.63265991]
[90.39328003 -172.62663269]
[91.92460632 -187.90899658]
[100.90497589 -200.36888123]
[114.91871643 -206.65461731]
[130.19619751 -205.07540894]
[142.62786865 -196.05603027]
[148.86965942 -182.02265930]
[147.24256897 -166.75018311]
[138.18426514 -154.34684753]
[124.13139343 -148.14907837]
[122.58907318 -133.22857666]
[121.04676056 -118.30808258]
[119.50444794 -103.38758850]
[117.96212769 -88.46708679]
[126.06594086 -73.09794617]
[115.66132355 -58.13439178]
[114.88914490 -43.15427780]
[121.96100616 -30.04557610]
[113.52354431 -16.66200829]
[112.75136566 -1.68189609]
[111.97918701 13.29821491]
[111.20700073 28.27832603]
[110.43482208 43.25843811]
[109.66263580 58.23854828]
[108.89045715 73.21865845]
[108.11827850 88.19876862]
[114.30495453 100.73738098]
[106.86183167 112.57341003]
[106.08965302 127.55352020]
[105.31747437 142.53363037]
[114.12837219 158.48768616]
[104.48724365 172.94213867]
[104.48724365 187.94213867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[5 57]
[6 56]
[7 55]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[18 44]
[19 43]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
