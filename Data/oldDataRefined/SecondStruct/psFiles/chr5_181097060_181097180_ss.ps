%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUUCGGCCAAAGGCAUCACAUCACCAAUAGUGCAAGCGGAGUGUGCGCUUUCCAGGGGCCAAGCUUUGGCCCGCCUUUGUCAAGGAAGAUGAAAAGUGAAUUGACGAAGUUUAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[87.33473969 173.54016113]
[77.71129608 171.21641541]
[68.48014832 167.63920593]
[59.80377197 162.87152100]
[50.49463272 174.63331604]
[54.52071762 189.50263977]
[49.08284378 203.72525024]
[36.46216202 211.92173767]
[21.61283875 211.12451172]
[12.30369663 222.88630676]
[2.99455404 234.64810181]
[-2.09430695 250.82029724]
[-19.04322243 250.40722656]
[-23.33821297 234.00633240]
[-8.76724339 225.33895874]
[0.54189926 213.57716370]
[9.85104179 201.81536865]
[5.66441774 187.54617310]
[10.74294949 173.38027954]
[23.33630753 164.82102966]
[38.73283386 165.32417297]
[48.04197693 153.56237793]
[41.57311249 146.42050171]
[36.07848358 138.50459290]
[31.64970970 129.94664001]
[28.36063385 120.88935852]
[26.26610374 111.48374939]
[25.40104294 101.88665771]
[25.77987480 92.25810242]
[27.39628410 82.75864410]
[30.22331810 73.54666901]
[34.21383667 64.77579498]
[21.76868057 56.40213776]
[9.32352638 48.02848434]
[-3.12162924 39.65482712]
[-15.56678486 31.28117180]
[-28.01194000 22.90751648]
[-43.78092575 21.62311745]
[-50.02114868 8.09873676]
[-62.46630478 -0.27491874]
[-78.98300171 -4.10050583]
[-79.87919617 -21.03075027]
[-63.85868073 -26.57868004]
[-54.09265137 -12.72007370]
[-41.64749527 -4.34641790]
[-26.76867104 -3.66095877]
[-19.63828468 10.46236134]
[-7.19312859 18.83601761]
[5.25202656 27.20967293]
[17.69718170 35.58332825]
[30.14233780 43.95698547]
[42.58749390 52.33063889]
[50.64447021 44.03040314]
[59.88743210 37.07507706]
[70.09426880 31.63179779]
[81.01972198 27.83135796]
[92.40126038 25.76508141]
[103.96538544 25.48262215]
[115.43422699 26.99076462]
[119.99594879 12.70123386]
[124.55767059 -1.58829725]
[129.11940002 -15.87782764]
[133.68112183 -30.16735840]
[138.24284363 -44.45689011]
[142.80456543 -58.74642181]
[141.86152649 -75.67411804]
[157.86662292 -81.26635742]
[167.67095947 -67.43483734]
[157.09410095 -54.18469620]
[152.53236389 -39.89516830]
[147.97064209 -25.60563660]
[143.40892029 -11.31610584]
[138.84719849 2.97342515]
[134.28547668 17.26295662]
[129.72375488 31.55248642]
[154.72525024 49.26823807]
[170.49943542 75.53793335]
[174.38664246 105.93220520]
[189.14361572 108.62142181]
[203.90058899 111.31063080]
[218.65754700 113.99983978]
[233.41452026 116.68905640]
[248.17149353 119.37826538]
[262.92846680 122.06747437]
[277.68542480 124.75669098]
[292.44241333 127.44589996]
[299.82839966 114.22750854]
[311.10787964 104.12541962]
[325.05731201 98.23542023]
[340.16357422 97.19642639]
[354.78805542 101.12112427]
[367.34439087 109.58380890]
[376.47058105 121.66649628]
[381.17666626 136.05856323]
[380.95217896 151.19885254]
[375.82147217 165.44505310]
[366.34106445 177.25186157]
[353.53933716 185.33856201]
[338.80493164 188.82795715]
[323.73611450 187.34155273]
[309.96743774 181.04057312]
[298.99243164 170.60852051]
[292.00158691 157.17695618]
[289.75317383 142.20286560]
[274.99621582 139.51365662]
[260.23925781 136.82444763]
[245.48228455 134.13523865]
[230.72531128 131.44602966]
[215.96833801 128.75680542]
[201.21136475 126.06759644]
[186.45440674 123.37838745]
[171.69743347 120.68917847]
[168.32772827 129.99807739]
[163.75541687 138.77899170]
[158.06097412 146.87736511]
[151.34461975 154.15066528]
[143.72454834 160.47088623]
[135.33491516 165.72676086]
[126.32334900 169.82582092]
[116.84848022 172.69589233]
[107.07707214 174.28646851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[9 17]
[10 16]
[11 15]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[39 45]
[40 44]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
