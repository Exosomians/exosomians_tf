%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:26 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUAAAGAUAUGUGUCGUGUAGUCGUGUGAUGUUACAUUGUAGUCCAAAGUCAUAAUUCAGGGAAACAAUAAGUAGUAAACACGACAAAU\
) } def
/len { sequence length } bind def

/coor [
[34.63765717 314.39721680]
[27.69958305 327.69622803]
[16.31842995 337.46704102]
[2.12240005 342.31192017]
[-12.85760593 341.53768921]
[-26.47853088 335.25515747]
[-36.79174805 324.36306763]
[-42.32183456 310.41967773]
[-42.27765274 295.41973877]
[-36.66455841 281.50769043]
[-49.90083313 288.56466675]
[-63.13710785 295.62164307]
[-76.37338257 302.67861938]
[-89.60965729 309.73559570]
[-100.74180603 322.52276611]
[-116.11093140 315.36550903]
[-113.48797607 298.61569214]
[-96.66664124 296.49932861]
[-83.43036652 289.44235229]
[-70.19409180 282.38537598]
[-56.95781708 275.32836914]
[-43.72153854 268.27139282]
[-39.86360931 261.27874756]
[-31.60751534 257.87185669]
[-22.62757301 245.85684204]
[-13.64762878 233.84181213]
[-4.66768599 221.82679749]
[4.31225729 209.81178284]
[13.29220009 197.79676819]
[22.27214432 185.78175354]
[20.87364388 173.63650513]
[28.43462181 163.52087402]
[41.27393723 161.28392029]
[50.65455627 149.57905579]
[60.03517151 137.87417603]
[69.41578674 126.16931152]
[78.79640961 114.46443939]
[88.17702484 102.75956726]
[97.15696716 90.74455261]
[105.72599030 78.43309784]
[114.29501343 66.12164307]
[122.86403656 53.81019592]
[131.43305969 41.49874115]
[128.85121155 26.13736916]
[137.71679688 13.77387524]
[152.37742615 11.40714264]
[160.94645691 -0.90430921]
[169.51547241 -13.21576118]
[166.93362427 -28.57713509]
[175.79920959 -40.94062805]
[190.45985413 -43.30736160]
[199.02886963 -55.61881256]
[207.59790039 -67.93026733]
[208.44126892 -84.30770874]
[223.16731262 -91.52405548]
[236.62713623 -82.15574646]
[234.97442627 -65.84009552]
[219.90934753 -59.36124039]
[211.34033203 -47.04978943]
[202.77130127 -34.73833847]
[205.64360046 -20.16831970]
[197.12878418 -7.56068754]
[181.82693481 -4.64673758]
[173.25790405 7.66471386]
[164.68888855 19.97616577]
[167.56118774 34.54618454]
[159.04635620 47.15381622]
[143.74450684 50.06776428]
[135.17549133 62.37921906]
[126.60646820 74.69066620]
[118.03744507 87.00212097]
[109.46841431 99.31357574]
[109.20997620 104.77837372]
[105.80021667 109.64913940]
[99.88189697 112.14018250]
[90.50128174 123.84505463]
[81.12065887 135.54992676]
[71.74004364 147.25479126]
[62.35942841 158.95967102]
[52.97880936 170.66453552]
[50.71306992 188.84167480]
[34.28715897 194.76170349]
[25.30721664 206.77671814]
[16.32727432 218.79173279]
[7.34733057 230.80674744]
[-1.63261282 242.82176208]
[-10.61255646 254.83677673]
[-19.59249878 266.85180664]
[-4.99266195 263.41018677]
[9.84108829 265.63723755]
[22.78661919 273.21438599]
[31.99192429 285.05764771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[33 80]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[46 65]
[47 64]
[48 63]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
