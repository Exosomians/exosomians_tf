%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:27 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGUAGACAAAAUUACACACACUGACAGAUACCAACGUGACAUGUUGAUUGUUUACGUUAGUUAUGGUCCUUGUCAGUGUUU\
) } def
/len { sequence length } bind def

/coor [
[-4.15164375 282.87792969]
[-21.01603508 287.41888428]
[-38.15011215 284.31140137]
[-46.42662811 296.82135010]
[-54.70314407 309.33132935]
[-52.92331696 325.27532959]
[-64.38047028 336.50537109]
[-80.28565979 334.40664673]
[-88.43778229 320.58920288]
[-82.58322906 305.65252686]
[-67.21311188 301.05480957]
[-58.93659592 288.54483032]
[-50.66007996 276.03488159]
[-58.21492386 265.93765259]
[-62.22613525 253.95570374]
[-62.27341080 241.29537964]
[-58.33636093 229.23655701]
[-50.79817581 219.00315857]
[-40.40836334 211.63897705]
[-28.20827103 207.90124512]
[-15.42669868 208.18273926]
[-3.35614991 212.47059631]
[6.23894548 200.94088745]
[15.83404064 189.41119385]
[25.42913628 177.88148499]
[35.02423096 166.35177612]
[44.61932755 154.82206726]
[54.21442032 143.29235840]
[63.80951691 131.76264954]
[73.40460968 120.23294067]
[82.99971008 108.70323944]
[81.78283691 94.26490021]
[91.05139923 83.12757111]
[105.47058868 81.70166779]
[115.06568146 70.17195892]
[124.66077423 58.64225388]
[134.25587463 47.11254501]
[142.53239441 34.60258102]
[149.39102173 21.26244736]
[156.24966431 7.92231464]
[163.10829163 -5.41781759]
[169.96691895 -18.75794983]
[176.82556152 -32.09808350]
[183.43940735 -45.56125641]
[189.80625916 -59.14297867]
[183.06260681 -73.25174713]
[187.01565552 -88.38143158]
[199.79888916 -97.38826752]
[215.37644958 -96.01949310]
[226.39309692 -84.92140961]
[227.64710999 -69.33419037]
[218.54637146 -56.61764145]
[203.38798523 -52.77612686]
[197.02113342 -39.19440460]
[197.03378296 -31.62408638]
[190.16569519 -25.23944664]
[183.30705261 -11.89931488]
[176.44842529 1.44081736]
[169.58978271 14.78094959]
[162.73115540 28.12108231]
[155.87251282 41.46121597]
[170.73843384 39.46007156]
[182.86573792 48.28778839]
[185.52973938 63.04932785]
[177.25325012 75.55931091]
[162.62562561 78.88085175]
[149.75799561 71.17213440]
[145.78558350 56.70764160]
[136.19047546 68.23735046]
[126.59539032 79.76705933]
[117.00028992 91.29676056]
[118.21716309 105.73509979]
[108.94860077 116.87242889]
[94.52941132 118.29833221]
[84.93431854 129.82803345]
[75.33922577 141.35774231]
[65.74412537 152.88745117]
[56.14903259 164.41716003]
[46.55393982 175.94686890]
[36.95884323 187.47657776]
[27.36374855 199.00628662]
[17.76865196 210.53599548]
[8.17355728 222.06568909]
[16.04971695 237.88421631]
[16.39390945 255.50025940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[34 71]
[35 70]
[36 69]
[37 68]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
