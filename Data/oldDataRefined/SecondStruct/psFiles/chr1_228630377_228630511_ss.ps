%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:11 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGGUUUCUUUUUCGGAUGUCGUGGGCCAUAAGGGUCCGCCAGAGGGUAGGUUCAUGAUUGGUCCGGGCUGGGACGAAUCGAAGGCUCUAGUCUGCUCUAGCCCGCGCAAGUCCCACCAUACCGGCAUCUGCGA\
) } def
/len { sequence length } bind def

/coor [
[111.39096069 289.04473877]
[103.25645447 301.79953003]
[91.57733917 311.41479492]
[77.49781799 316.94854736]
[62.39725876 317.85861206]
[47.75505447 314.05581665]
[35.00570679 305.91278076]
[25.39826012 294.22723389]
[19.87396049 280.14398193]
[18.97401810 265.04281616]
[22.78660202 250.40318298]
[30.93819237 237.65928650]
[42.63018417 228.05967712]
[56.71710968 222.54481506]
[71.81887817 221.65498352]
[75.58948517 207.13664246]
[79.36009216 192.61828613]
[83.13069916 178.09992981]
[86.90130615 163.58158875]
[90.67191315 149.06323242]
[94.44252014 134.54487610]
[98.21312714 120.02652740]
[88.49777985 108.59796906]
[73.56176758 109.98199463]
[58.62575531 111.36602020]
[43.68974304 112.75004578]
[28.75373268 114.13407135]
[13.81771946 115.51809692]
[-1.11829352 116.90212250]
[-12.43230247 128.27633667]
[-28.36279488 126.37924194]
[-36.68925858 112.66612244]
[-31.02434731 97.65651703]
[-15.71369171 92.86450195]
[-2.50231886 101.96611023]
[12.43369389 100.58208466]
[27.36970711 99.19805908]
[42.30571747 97.81403351]
[57.24173355 96.43000793]
[72.17774200 95.04598236]
[87.11375427 93.66195679]
[75.06345367 84.72942352]
[73.53073120 69.80793762]
[83.51348877 58.61219788]
[98.51239777 58.43124008]
[108.76235199 69.38288116]
[107.59027863 84.33661652]
[118.43904114 73.97782898]
[129.28781128 63.61904907]
[140.13656616 53.26026917]
[150.86495972 42.77687454]
[161.47157288 32.17027283]
[172.07817078 21.56367302]
[169.75395203 9.79569626]
[173.40254211 -1.50474775]
[181.99357605 -9.52722836]
[193.28326416 -12.33650017]
[204.39961243 -9.33845997]
[215.48474121 -19.44389534]
[226.56988525 -29.54932976]
[237.65501404 -39.65476608]
[242.64086914 -54.66981506]
[257.25903320 -57.52618790]
[268.34417725 -67.63162231]
[273.33001709 -82.64667511]
[287.94818115 -85.50304413]
[299.03332520 -95.60848236]
[310.11843872 -105.71391296]
[321.20358276 -115.81935120]
[332.28872681 -125.92478180]
[343.37384033 -136.03021240]
[354.45898438 -146.13565063]
[365.54412842 -156.24108887]
[376.62924194 -166.34652710]
[374.03598022 -173.96228027]
[373.62881470 -181.96997070]
[375.42398071 -189.75660706]
[379.26983643 -196.73022461]
[384.85925293 -202.36482239]
[391.75439453 -206.24005127]
[399.42077637 -208.07260132]
[407.26885986 -207.73681641]
[414.69918823 -205.27319336]
[421.14840698 -200.88421631]
[433.71585083 -209.07316589]
[446.28332520 -217.26211548]
[458.85076904 -225.45106506]
[465.78680420 -240.31120300]
[482.14532471 -241.46475220]
[491.09811401 -227.72503662]
[483.43530273 -213.22630310]
[467.03973389 -212.88359070]
[454.47225952 -204.69465637]
[441.90481567 -196.50570679]
[429.33734131 -188.31675720]
[427.38125610 -165.90086365]
[409.49700928 -151.82214355]
[386.73468018 -155.26138306]
[375.64956665 -145.15596008]
[364.56442261 -135.05052185]
[353.47927856 -124.94508362]
[342.39416504 -114.83965302]
[331.30902100 -104.73421478]
[320.22387695 -94.62878418]
[309.13876343 -84.52334595]
[298.05361938 -74.41791534]
[293.86062622 -60.12567139]
[278.44958496 -56.54648972]
[267.36447144 -46.44105530]
[263.17147827 -32.14881134]
[247.76045227 -28.56962967]
[236.67530823 -18.46419525]
[225.59017944 -8.35876083]
[214.50505066 1.74667346]
[214.82154846 19.98465157]
[201.54327393 32.94896698]
[182.68476868 32.17027283]
[172.07817078 42.77687454]
[161.47157288 53.38347626]
[158.94355774 60.40044022]
[150.49534607 64.10903168]
[139.64659119 74.46781158]
[128.79782104 84.82659149]
[117.94905853 95.18537140]
[112.73148346 123.79713440]
[108.96087646 138.31549072]
[105.19026184 152.83384705]
[101.41965485 167.35218811]
[97.64904785 181.87054443]
[93.87844086 196.38890076]
[90.10783386 210.90724182]
[86.33722687 225.42559814]
[99.09748077 233.55155945]
[108.72057343 245.22422791]
[114.26374817 259.30001831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[22 125]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[47 124]
[48 123]
[49 122]
[50 121]
[51 119]
[52 118]
[53 117]
[58 114]
[59 113]
[60 112]
[61 111]
[63 109]
[64 108]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
