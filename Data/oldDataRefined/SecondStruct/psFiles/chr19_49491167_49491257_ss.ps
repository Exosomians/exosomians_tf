%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:00 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGGACCGUCUACUACAGGAAUAGAGUGCUACCAGACGCCUACAGGGACACCCUUACCGCUGUUACGGUUACCGAAUCGACUACGGUC\
) } def
/len { sequence length } bind def

/coor [
[179.99450684 378.74813843]
[175.07615662 365.97814941]
[177.18037415 352.34625244]
[185.85635376 341.48342896]
[180.83316040 327.34951782]
[175.80996704 313.21560669]
[170.78677368 299.08169556]
[165.28396606 285.12750244]
[159.30795288 271.36935425]
[153.33193970 257.61117554]
[147.35591125 243.85301208]
[141.37989807 230.09483337]
[130.13922119 225.28117371]
[125.10943604 213.69412231]
[129.54273987 201.43582153]
[124.03993225 187.48164368]
[110.74880981 185.31529236]
[100.21312714 176.75418091]
[95.29477692 163.98417664]
[97.39899445 150.35229492]
[106.07498169 139.48947144]
[101.05178833 125.35555267]
[84.25820923 119.90493774]
[75.08444977 104.81933594]
[77.97106934 87.40092468]
[67.73277283 76.43838501]
[57.49447250 65.47584534]
[49.16754913 61.22214127]
[47.10167694 53.95986557]
[37.24362183 42.65417099]
[27.38556480 31.34847641]
[17.33592415 20.21273422]
[7.09762764 9.25019550]
[-8.13230419 1.80133617]
[-5.19061422 -14.89545345]
[11.66800022 -16.69085693]
[18.06016731 -0.98810148]
[28.29846382 9.97443771]
[35.31140137 12.77214909]
[38.69126129 21.49042130]
[48.54931641 32.79611588]
[58.40737152 44.10181046]
[68.45701599 55.23755264]
[78.69531250 66.20008850]
[88.93360901 77.16262817]
[95.68812561 74.99163818]
[102.77966309 74.77532959]
[108.75567627 61.01715851]
[114.73168945 47.25899124]
[120.70771027 33.50082016]
[121.47226715 16.56412125]
[137.95872498 12.61025429]
[146.32197571 27.35787392]
[134.46588135 39.47683716]
[128.48986816 53.23500824]
[122.51384735 66.99317932]
[116.53782654 80.75134277]
[124.49657440 93.37214661]
[123.98716736 108.28411102]
[115.18569946 120.33235931]
[120.20889282 134.46627808]
[136.40989685 138.96206665]
[146.69853210 152.05068970]
[147.23045349 168.52561951]
[137.99411011 181.97883606]
[143.49691772 195.93301392]
[158.14993286 206.92218018]
[155.13807678 224.11882019]
[161.11408997 237.87699890]
[167.09010315 251.63516235]
[173.06611633 265.39334106]
[179.04212952 279.15148926]
[184.38444519 283.60580444]
[186.22900391 289.26409912]
[184.92068481 294.05850220]
[189.94389343 308.19241333]
[194.96708679 322.32632446]
[199.99028015 336.46023560]
[216.19126892 340.95602417]
[226.47991943 354.04464722]
[227.01184082 370.51959229]
[217.77548218 383.97280884]
[223.27830505 397.92697144]
[228.78111267 411.88116455]
[241.94877625 421.65585327]
[239.79893494 437.91348267]
[224.54316711 443.92956543]
[211.87528992 433.51528931]
[214.82693481 417.38397217]
[209.32412720 403.42977905]
[203.82130432 389.47561646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[15 66]
[16 65]
[21 61]
[22 60]
[25 45]
[26 44]
[27 43]
[29 42]
[30 41]
[31 40]
[32 38]
[33 37]
[47 57]
[48 56]
[49 55]
[50 54]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
