%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCACGAUAGACACUAACUCCCUGUACCAAUUACCUUAACAGAGUGUGUCUUUAGCGUGGGCAGUGG\
) } def
/len { sequence length } bind def

/coor [
[110.85971832 237.99510193]
[108.87441254 223.12705994]
[99.52067566 211.53581238]
[105.36340332 196.83299255]
[103.37809753 181.96495056]
[101.39279175 167.09690857]
[99.40747833 152.22888184]
[97.42217255 137.36083984]
[95.43686676 122.49279785]
[80.73813629 112.47913361]
[77.60665894 94.97142792]
[87.92296600 80.48350525]
[84.63139343 65.84911346]
[81.33981323 51.21471405]
[78.04823303 36.58032227]
[74.75666046 21.94592476]
[71.46508026 7.31153059]
[66.93458557 1.79319715]
[66.24254608 -4.26253891]
[68.59040833 -8.76040840]
[66.60510254 -23.62844658]
[64.61979675 -38.49648285]
[62.63448334 -53.36452103]
[58.60942841 -59.26166534]
[58.45530319 -65.35486603]
[61.19150162 -69.62763214]
[60.52800369 -84.61295319]
[59.86450195 -99.59826660]
[45.67643738 -105.13168335]
[34.97024918 -115.96208191]
[29.60085869 -130.21302795]
[30.49853706 -145.41546631]
[37.50775909 -158.93547058]
[49.41413498 -168.43063354]
[64.15481567 -172.25585938]
[79.17588043 -169.74838257]
[91.87484741 -161.34266663]
[100.05154419 -148.49504089]
[102.28930664 -133.43142700]
[98.20042419 -118.76170349]
[88.49332428 -107.02747345]
[74.84982300 -100.26177216]
[75.51332092 -85.27645111]
[76.17681885 -70.29113007]
[77.50252533 -55.34983063]
[79.48783112 -40.48179245]
[81.47313690 -25.61375427]
[83.45845032 -10.74571609]
[86.09947205 4.01995277]
[89.39105225 18.65434837]
[92.68263245 33.28874207]
[95.97420502 47.92313766]
[99.26578522 62.55753326]
[102.55736542 77.19192505]
[113.41958618 81.38111115]
[120.82882690 90.36109924]
[122.87861633 101.82126617]
[119.04154205 112.81280518]
[110.30490112 120.50749207]
[112.29020691 135.37553406]
[114.27552032 150.24357605]
[116.26082611 165.11160278]
[118.24613190 179.97964478]
[120.23144531 194.84768677]
[129.72717285 207.50238037]
[123.74245453 221.14175415]
[125.72776031 236.00979614]
[136.15811157 248.66442871]
[130.16139221 263.92782593]
[113.90652466 266.09832764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[20 48]
[21 47]
[22 46]
[23 45]
[26 44]
[27 43]
[28 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
