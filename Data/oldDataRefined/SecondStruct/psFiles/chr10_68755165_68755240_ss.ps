%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:47 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUACUCAAUACUACACACAUUUAGGAUAAGGUAACGACUUUACGUCACACCUUGUGUUACUUGACUUGAGAA\
) } def
/len { sequence length } bind def

/coor [
[63.58373642 293.66546631]
[49.00764847 298.50625610]
[33.96723557 295.39474487]
[22.50829506 285.16790771]
[17.71322441 270.57672119]
[20.87187386 255.54612732]
[31.13458061 244.11929321]
[45.74073029 239.36997986]
[48.77954483 224.68103027]
[51.81835556 209.99206543]
[54.85717010 195.30310059]
[57.89598465 180.61413574]
[50.87613678 175.82635498]
[45.51190186 169.20104980]
[42.26856995 161.28770447]
[41.43468475 152.74856567]
[43.09642029 144.30320740]
[47.12899017 136.66786194]
[53.20586395 130.49465942]
[60.82516861 126.31604004]
[69.35109711 124.49873352]
[78.06699371 125.21170044]
[85.12107086 111.97387695]
[80.99781799 98.08341217]
[87.81182861 85.29609680]
[101.64110565 80.97204590]
[108.69518280 67.73422241]
[115.74926758 54.49639893]
[115.41076660 38.67881393]
[128.22438049 31.08535767]
[135.27845764 17.84753227]
[142.33253479 4.60970974]
[149.38661194 -8.62811375]
[156.44068909 -21.86593819]
[163.49476624 -35.10375977]
[170.54884338 -48.34158325]
[165.12870789 -60.85594940]
[167.95549011 -73.99672699]
[177.75178528 -82.91098785]
[190.71029663 -84.44281006]
[198.29846191 -97.38188934]
[205.88662720 -110.32096863]
[203.24749756 -126.14546204]
[214.08084106 -137.97839355]
[230.07621765 -136.74255371]
[238.96336365 -123.38597870]
[233.92480469 -108.15467834]
[218.82569885 -102.73281097]
[211.23753357 -89.79373169]
[203.64938354 -76.85464478]
[208.62504578 -60.92505646]
[200.50059509 -45.96645355]
[183.78666687 -41.28750610]
[176.73258972 -28.04968262]
[169.67851257 -14.81185913]
[162.62443542 -1.57403553]
[155.57035828 11.66378784]
[148.51628113 24.90161133]
[141.46220398 38.13943481]
[142.30525208 53.01016235]
[128.98709106 61.55047607]
[121.93300629 74.78829956]
[114.87892914 88.02612305]
[119.00218201 101.91658783]
[112.18817139 114.70390320]
[98.35889435 119.02795410]
[91.30481720 132.26577759]
[100.74855042 153.06768799]
[92.87979889 174.25839233]
[72.58494568 183.65295410]
[69.54613495 198.34191895]
[66.50731659 213.03086853]
[63.46850586 227.71983337]
[60.42969513 242.40879822]
[71.95252228 252.56359863]
[76.83896637 267.12445068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[22 67]
[23 66]
[26 63]
[27 62]
[28 61]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
