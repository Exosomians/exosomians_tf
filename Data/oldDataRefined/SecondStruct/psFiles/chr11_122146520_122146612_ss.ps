%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUUUCGAUCCUCCGACAUGUCAAUAGAGGGAACUACAUUAAGAUUUGAUAUGUUGGAUGAUGGAGUUGGACCCUCGUACGUCAGUGUUA\
) } def
/len { sequence length } bind def

/coor [
[133.55296326 214.25001526]
[140.51623535 200.86437988]
[150.70741272 189.73773193]
[142.63618469 177.09434509]
[134.56494141 164.45095825]
[118.61850739 157.33561707]
[117.70163727 139.03892517]
[109.21243286 126.67230225]
[100.72322083 114.30567169]
[88.19074249 108.10659790]
[86.91015625 94.18353271]
[78.42094421 81.81690979]
[69.93173981 69.45028687]
[55.74262238 62.45175171]
[54.91860962 47.57995605]
[46.42940521 35.21333313]
[37.94019699 22.84671021]
[29.45099068 10.48008633]
[20.96178436 -1.88653684]
[12.47257805 -14.25316048]
[3.98337197 -26.61978340]
[-4.50583458 -38.98640823]
[-12.99504089 -51.35303116]
[-21.48424721 -63.71965408]
[-29.97345352 -76.08628082]
[-38.46266174 -88.45290375]
[-46.95186615 -100.81952667]
[-61.23764038 -95.93903351]
[-76.31047058 -95.09493256]
[-91.05184174 -98.34985352]
[-104.36785126 -105.46227264]
[-115.27036285 -115.90438843]
[-122.95034027 -128.90133667]
[-126.83787537 -143.48864746]
[-126.64448547 -158.58384705]
[-122.38452148 -173.06677246]
[-114.37410736 -185.86270142]
[-103.20766449 -196.02209473]
[-89.71381378 -202.79104614]
[-74.89389801 -205.66725159]
[-59.84764099 -204.43728638]
[-45.69158554 -199.19241333]
[-33.47620010 -190.32185364]
[-24.10794640 -178.48384094]
[-18.28201294 -164.55685425]
[-16.43072319 -149.57435608]
[-18.69145393 -134.64814758]
[-24.89644432 -120.88584900]
[-34.58524323 -109.30873108]
[-26.09603691 -96.94210815]
[-17.60683060 -84.57548523]
[-9.11762428 -72.20886230]
[-0.62841743 -59.84223557]
[7.86078882 -47.47561264]
[16.34999466 -35.10898972]
[24.83920097 -22.74236679]
[33.32840729 -10.37574291]
[41.81761551 1.99088013]
[50.30681992 14.35750389]
[58.79602814 26.72412682]
[67.28523254 39.09075165]
[80.86714935 45.20473862]
[82.29836273 60.96107864]
[90.78756714 73.32769775]
[99.27677917 85.69432831]
[111.80925751 91.89340210]
[113.08984375 105.81646729]
[121.57905579 118.18309021]
[130.06825256 130.54971313]
[142.70462036 133.72901917]
[149.49719238 144.37287903]
[147.20832825 156.37973022]
[155.27955627 169.02311707]
[163.35079956 181.66650391]
[177.73350525 177.10575867]
[192.80656433 176.42391968]
[207.54231262 179.66744995]
[220.93600464 186.61521912]
[232.07444763 196.79350281]
[240.19819641 209.50833130]
[244.75338745 223.89279175]
[245.42941284 238.96612549]
[242.18017578 253.70060730]
[235.22724915 267.09161377]
[225.04466248 278.22613525]
[212.32669067 286.34497070]
[197.94047546 290.89462280]
[182.86688232 291.56481934]
[168.13365173 288.30990601]
[154.74533081 281.35180664]
[143.61474609 271.16491699]
[135.50080872 258.44381714]
[130.95674133 244.05583191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[5 72]
[7 69]
[8 68]
[9 67]
[11 65]
[12 64]
[13 63]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
