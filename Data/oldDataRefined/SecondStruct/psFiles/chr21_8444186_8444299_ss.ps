%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:13 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCGCGGGAGAGAGAGAGAGAGAGGGGGCGAGGGGCAGGAGGGGGGAGGGGCCCCCUCGCGGCGCACCCCCGCCGCCGCCCCCCUCUUCCCAGCCCCGCCGUCCCCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[151.95617676 411.66094971]
[152.92652893 407.10556030]
[147.71075439 393.04156494]
[142.49497986 378.97760010]
[137.27920532 364.91360474]
[132.06343079 350.84960938]
[121.13823700 345.46179199]
[116.72320557 333.67755127]
[121.72801208 321.69387817]
[116.89833069 307.49267578]
[112.06865692 293.29147339]
[107.23898315 279.09027100]
[101.06152344 292.75915527]
[88.58125305 301.08041382]
[73.58790588 301.52716064]
[60.63433075 293.96377563]
[53.65397644 280.68692017]
[54.76648331 265.72824097]
[63.63402939 253.63002014]
[77.56391907 248.06600952]
[92.32622528 250.72575378]
[103.43869781 260.80227661]
[102.21075439 245.85261536]
[100.98281097 230.90296936]
[99.75486755 215.95330811]
[96.02050018 209.45664978]
[98.70326233 200.57946777]
[97.88412476 185.60185242]
[97.06498718 170.62423706]
[96.24584961 155.64662170]
[95.42671204 140.66900635]
[94.60757446 125.69139099]
[93.78843689 110.71376801]
[91.47070312 125.53363037]
[81.59311676 136.82226562]
[67.21205139 141.08666992]
[52.77740860 137.00732422]
[42.75564194 125.84648895]
[40.24774933 111.05762482]
[46.02974701 97.21679688]
[58.31252289 88.60672760]
[73.29518890 87.89152527]
[68.46551514 73.69032288]
[63.63584137 59.48911667]
[58.80616379 45.28791046]
[53.97649002 31.08670616]
[49.14681625 16.88550186]
[44.31713867 2.68429565]
[30.02978706 -4.07196760]
[24.78323746 -18.97999573]
[31.69017792 -33.19511795]
[46.65284348 -38.28375626]
[60.79414749 -31.22691154]
[65.72430420 -16.21128464]
[58.51834488 -2.14537954]
[63.34801865 12.05582619]
[68.17769623 26.25703239]
[73.00737000 40.45823669]
[77.83704376 54.65944290]
[82.66671753 68.86064911]
[87.49639893 83.06185150]
[102.22296906 85.91281128]
[112.00358582 74.54005432]
[121.78419495 63.16730118]
[131.56480408 51.79454422]
[141.34542847 40.42178345]
[151.12603760 29.04902840]
[149.69007874 13.31010914]
[159.86785889 1.21927154]
[175.62107849 -0.05020504]
[187.60363770 10.25483704]
[188.70648193 26.02059937]
[178.27532959 37.89353561]
[162.49879456 38.82963943]
[152.71818542 50.20240021]
[142.93756104 61.57515717]
[133.15695190 72.94791412]
[123.37634277 84.32067108]
[113.59572601 95.69342804]
[108.76605225 109.89463043]
[109.58518982 124.87225342]
[110.40432739 139.84986877]
[111.22346497 154.82748413]
[112.04260254 169.80509949]
[112.86174774 184.78271484]
[113.68088531 199.76033020]
[114.70452118 214.72537231]
[115.93246460 229.67501831]
[117.16040802 244.62467957]
[118.38835144 259.57434082]
[121.44018555 274.26058960]
[126.26986694 288.46179199]
[131.09953308 302.66299438]
[135.92921448 316.86419678]
[150.04710388 328.58789062]
[146.12741089 345.63385010]
[151.34318542 359.69784546]
[156.55895996 373.76181030]
[161.77474976 387.82580566]
[166.99052429 401.88980103]
[172.96653748 415.64794922]
[179.68495178 429.05926514]
[186.40338135 442.47055054]
[193.12179565 455.88183594]
[207.10429382 464.45050049]
[206.40444946 480.83468628]
[191.74218750 488.17977905]
[178.20080566 478.92977905]
[179.71051025 462.60025024]
[172.99208069 449.18896484]
[166.27366638 435.77767944]
[159.55523682 422.36636353]
[156.79060364 421.38537598]
[154.27767944 419.17471313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[9 94]
[10 93]
[11 92]
[12 91]
[22 90]
[23 89]
[24 88]
[25 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[32 81]
[33 80]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
