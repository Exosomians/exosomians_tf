%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGACGGGGUCACCGGACUACCUAUUCCAUGACCGGAGGAUUCGGUCCCUAACACCCAAGCUCAAGGUGGACCCCAUUCUGUUGUGGCUGGCAUCCACUGAACCCCAUUCCAUAGUGCGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[194.89149475 184.02745056]
[180.01113892 182.13673401]
[168.26843262 172.80351257]
[163.06803894 158.73384094]
[165.91772461 144.00701904]
[175.99128723 132.89289856]
[190.36555481 128.61392212]
[177.19223022 121.44010925]
[164.01890564 114.26629639]
[150.84558105 107.09249115]
[137.67225647 99.91867828]
[124.49893188 92.74487305]
[129.21679688 107.92917633]
[123.92842102 125.53813934]
[107.88905334 138.92832947]
[84.63668060 141.70275879]
[71.12214661 148.21101379]
[57.60761642 154.71926880]
[54.96954346 170.01045227]
[43.82391357 180.80650330]
[28.45645523 182.95611572]
[14.77626610 175.63272095]
[8.04366016 161.65232849]
[10.84745979 146.39065552]
[22.10954857 135.71615601]
[37.49942017 133.73338318]
[51.09936142 141.20474243]
[64.61389160 134.69648743]
[78.12842560 128.18823242]
[78.03492737 120.68881226]
[77.84793854 105.68997955]
[77.75444031 98.19055939]
[64.08184814 92.02125549]
[50.40926361 85.85195160]
[36.73667526 79.68264008]
[23.06408691 73.51333618]
[9.39149857 67.34403229]
[-4.28108931 61.17472458]
[-21.20533180 60.17156601]
[-24.92647552 43.63102722]
[-10.06246281 35.47642899]
[1.88821721 47.50213623]
[15.56080532 53.67144012]
[29.23339272 59.84074783]
[42.90597916 66.01005554]
[56.57856750 72.17935944]
[70.25115967 78.34867096]
[83.92374420 84.51797485]
[90.12053680 80.29307556]
[78.25458527 71.11706543]
[83.31488800 56.99639130]
[98.30815887 57.44568253]
[102.51411438 71.84327698]
[108.71090698 67.61837006]
[107.96321869 52.63702011]
[107.21553040 37.65566635]
[106.46784210 22.67431068]
[93.03898621 15.08027172]
[85.86779022 1.42093599]
[87.24254608 -13.94505215]
[96.72458649 -26.11445999]
[111.28821564 -31.20407677]
[126.28623962 -27.58982086]
[136.93284607 -16.42499161]
[139.83073425 -1.27224231]
[134.05519104 13.03323841]
[121.44919586 21.92662239]
[122.19688416 36.90797806]
[122.94457245 51.88933182]
[123.69226074 66.87068176]
[131.67274475 79.57154846]
[144.84606934 86.74535370]
[158.01939392 93.91916656]
[171.19271851 101.09297943]
[184.36604309 108.26678467]
[197.53936768 115.44059753]
[208.86543274 115.48222351]
[215.52009583 123.02011108]
[229.85368347 127.44143677]
[244.18727112 131.86276245]
[258.52087402 136.28408813]
[272.85446167 140.70541382]
[287.18804932 145.12675476]
[301.62741089 149.18936157]
[316.16357422 152.89071655]
[330.69973755 156.59207153]
[345.23590088 160.29344177]
[359.77206421 163.99479675]
[377.31494141 158.56762695]
[389.44763184 171.18190002]
[404.07153320 174.51971436]
[418.69546509 177.85752869]
[433.27374268 168.28393555]
[449.94998169 172.08721924]
[458.58898926 186.45866394]
[473.29159546 189.43086243]
[488.65597534 183.69787598]
[501.12911987 194.34461975]
[497.87969971 210.41860962]
[482.25042725 215.38430786]
[470.31939697 204.13343811]
[455.61679077 201.16125488]
[445.92575073 209.74934387]
[432.85919189 211.17489624]
[421.20294189 204.68875122]
[415.35763550 192.48144531]
[400.73373413 189.14363098]
[386.10980225 185.80581665]
[375.63504028 191.99223328]
[363.36996460 189.25181580]
[356.07067871 178.53096008]
[341.53454590 174.82960510]
[326.99838257 171.12823486]
[312.46221924 167.42687988]
[297.92605591 163.72550964]
[293.35073853 165.41204834]
[287.66427612 164.16308594]
[282.76672363 159.46034241]
[268.43313599 155.03901672]
[254.09954834 150.61769104]
[239.76594543 146.19635010]
[225.43235779 141.77502441]
[211.09877014 137.35369873]
[218.07273865 150.63389587]
[217.14892578 165.60542297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[16 29]
[17 28]
[18 27]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[54 70]
[55 69]
[56 68]
[57 67]
[78 123]
[79 122]
[80 121]
[81 120]
[82 119]
[83 118]
[84 115]
[85 114]
[86 113]
[87 112]
[88 111]
[90 108]
[91 107]
[92 106]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
