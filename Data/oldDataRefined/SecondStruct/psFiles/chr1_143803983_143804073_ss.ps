%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:58 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUGGAGACAAAGGCGGGUCAAAGCUUGGCCCCUGGAAAGCGCACACUCCGCUUGCACUAUUGGUGAUGUGAUGCCUUUGGUGUGCG\
) } def
/len { sequence length } bind def

/coor [
[87.36566162 146.69042969]
[84.88508606 148.73110962]
[82.19766235 149.73394775]
[79.65966797 149.75875854]
[69.80161285 161.06446838]
[59.94355392 172.37016296]
[50.08549881 183.67585754]
[40.22744370 194.98155212]
[37.60661697 211.16992188]
[22.18264771 216.74066162]
[9.82239628 205.96308899]
[13.24102879 189.92422485]
[28.92174911 185.12348938]
[38.77980423 173.81779480]
[48.63785934 162.51210022]
[58.49591446 151.20640564]
[68.35396576 139.90071106]
[77.21213531 127.79563141]
[85.00589752 114.97933960]
[79.98270416 100.84542847]
[65.84878540 95.82223511]
[51.71487427 90.79904175]
[37.58095932 85.77584839]
[23.44704628 80.75265503]
[9.31313229 75.72946167]
[-4.82078171 70.70626068]
[-21.77017403 71.09928894]
[-26.83989906 54.92108917]
[-12.69738770 45.57091904]
[0.20241228 56.57234955]
[14.33632565 61.59554291]
[28.47023964 66.61873627]
[42.60415268 71.64192963]
[56.73806763 76.66512299]
[70.87197876 81.68832397]
[85.00589752 86.71151733]
[91.66503143 83.26102448]
[80.98625946 72.72709656]
[87.70472717 59.31582260]
[102.53572083 61.56117630]
[104.98331451 76.36005402]
[111.64244843 72.90956116]
[115.68939972 58.46580505]
[119.73635864 44.02204514]
[123.78330994 29.57828522]
[127.83026123 15.13452721]
[118.85849762 2.32665443]
[120.26997375 -13.24709797]
[131.39820862 -24.23328018]
[146.98881531 -25.44455528]
[159.68037415 -16.30899239]
[163.48031616 -1.14012861]
[156.59442139 12.89976501]
[142.27401733 19.18147850]
[138.22706604 33.62523651]
[134.18011475 48.06899643]
[130.13316345 62.51275635]
[126.08621216 76.95651245]
[133.21356201 90.15502930]
[147.51074219 94.69274902]
[161.80790710 99.23046875]
[176.10507202 103.76818848]
[190.40225220 108.30590820]
[204.69941711 112.84362030]
[218.60665894 105.82746887]
[233.04138184 110.63302612]
[239.64451599 123.93469238]
[253.94168091 128.47241211]
[268.23886108 133.01013184]
[280.64947510 123.69584656]
[296.16519165 123.48887634]
[308.81982422 132.46881104]
[313.74749756 147.18267822]
[309.05334473 161.97270203]
[296.54241943 171.15180969]
[281.02539062 171.19044495]
[268.46887207 162.07376099]
[263.70114136 147.30729675]
[249.40396118 142.76959229]
[235.10679626 138.23187256]
[222.04142761 145.29103088]
[207.47741699 140.89280701]
[200.16169739 127.14079285]
[185.86453247 122.60307312]
[171.56736755 118.06536102]
[157.27018738 113.52764130]
[142.97302246 108.98992157]
[128.67584229 104.45220184]
[97.82218933 122.77310181]
[90.02842712 135.58938599]
[90.24881744 139.87438965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[18 90]
[19 89]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
