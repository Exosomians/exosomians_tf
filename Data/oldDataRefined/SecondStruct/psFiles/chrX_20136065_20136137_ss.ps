%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCGAGUCCAGUUCACAUCUUUUGAAGUAUCAAUGUUUCCAGUCAGCAUUUUGGAAAUGUAGUAACGGGUC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 220.65830994]
[92.50000000 205.65830994]
[92.50000000 190.65830994]
[92.50000000 175.65830994]
[92.50000000 160.65830994]
[92.50000000 145.65830994]
[81.73816681 142.51396179]
[72.04856873 136.87341309]
[64.00013733 129.06785583]
[58.06541443 119.55560303]
[54.59287262 108.89514160]
[53.78638840 97.71240234]
[38.66587067 102.36863708]
[27.85434723 92.12362671]
[13.19101906 88.96343231]
[-1.47230935 85.80324554]
[-16.13563728 82.64305878]
[-28.37360573 92.37784576]
[-44.00439835 91.91703796]
[-55.64763260 81.47821808]
[-57.80573273 65.99026489]
[-49.45970535 52.76612473]
[-34.55029297 48.04983139]
[-20.11725998 54.06827545]
[-12.97544861 67.97972870]
[1.68787968 71.13991547]
[16.35120773 74.30010223]
[31.01453590 77.46029663]
[45.08623886 72.57802582]
[56.94657898 83.04907990]
[67.00676727 67.55963135]
[82.32401276 57.23915100]
[100.45769501 53.73207092]
[118.51845551 57.59719849]
[133.62854004 68.21868134]
[146.05618286 59.81905746]
[158.48382568 51.41943359]
[170.91146851 43.01981354]
[183.33911133 34.62018967]
[195.76675415 26.22056961]
[208.19439697 17.82094765]
[220.62205505 9.42132568]
[233.04969788 1.02170348]
[245.47734070 -7.37791824]
[245.86964417 -22.89003372]
[255.33151245 -35.18851089]
[270.22467041 -39.54433441]
[284.82241821 -34.28260040]
[293.51159668 -21.42655182]
[292.95101929 -5.91960573]
[283.35629272 6.27550411]
[268.41674805 10.46950817]
[253.87695312 5.04972649]
[241.44931030 13.44934845]
[229.02166748 21.84897041]
[216.59402466 30.24859238]
[204.16638184 38.64821243]
[191.73873901 47.04783630]
[179.31109619 55.44745636]
[166.88345337 63.84708023]
[154.45579529 72.24670410]
[142.02815247 80.64632416]
[145.90942383 94.23325348]
[145.50906372 108.35800171]
[140.86439514 121.70326996]
[132.40861511 133.02442932]
[120.93031311 141.26564026]
[107.50000000 145.65830994]
[107.50000000 160.65830994]
[107.50000000 175.65830994]
[107.50000000 190.65830994]
[107.50000000 205.65830994]
[107.50000000 220.65830994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[12 30]
[14 28]
[15 27]
[16 26]
[17 25]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
