%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCGGUUCCUACUCUUGAGAUUAGACUAAAAUACACGAAGACGACACUACCUAAUUUCCUAAAUGGACUCCGGUUUAACCA\
) } def
/len { sequence length } bind def

/coor [
[89.64844513 198.99868774]
[94.78170776 184.52302551]
[106.47549438 174.56556702]
[103.68682098 159.82705688]
[100.89814758 145.08856201]
[98.10947418 130.35006714]
[95.32080078 115.61157227]
[84.04584503 103.32884216]
[89.46827698 87.56219482]
[86.13046265 72.93827820]
[82.79264832 58.31436157]
[68.56505585 56.30516434]
[55.92358780 49.53825378]
[46.40167618 38.85794830]
[41.14624405 25.58179855]
[40.77959442 11.33809948]
[45.32579041 -2.13383627]
[54.21025085 -13.19605541]
[66.33227539 -20.51111031]
[63.54359818 -35.24960709]
[60.75492477 -49.98810577]
[57.96625137 -64.72660065]
[55.17757416 -79.46510315]
[52.38890076 -94.20359802]
[49.60022736 -108.94209290]
[46.81155396 -123.68058777]
[31.75705147 -124.23710632]
[17.20396805 -128.13011169]
[3.88228130 -135.16435242]
[-7.53980017 -144.98695374]
[-16.48934937 -157.10527039]
[-22.51745987 -170.91140747]
[-25.32176399 -185.71289062]
[-24.76160049 -200.76725769]
[-20.86506653 -215.31939697]
[-13.82760906 -228.63937378]
[-4.00222540 -240.05906677]
[8.11824799 -249.00569153]
[21.92585182 -255.03045654]
[36.72800446 -257.83117676]
[51.78223419 -257.26736450]
[66.33342743 -253.36729431]
[79.65171051 -246.32661438]
[91.06902313 -236.49845886]
[100.01270294 -224.37582397]
[106.03411865 -210.56675720]
[108.83125305 -195.76393127]
[108.26379395 -180.70983887]
[104.36020660 -166.15959167]
[97.31629944 -152.84301758]
[87.48538208 -141.42807007]
[75.36057281 -132.48733521]
[61.55005264 -126.46926117]
[64.33872223 -111.73076630]
[67.12739563 -96.99227142]
[69.91607666 -82.25377655]
[72.70475006 -67.51527405]
[75.49342346 -52.77677917]
[78.28209686 -38.03828049]
[81.07077026 -23.29978561]
[96.52503204 -20.35087967]
[109.72382355 -11.71803951]
[118.66217804 1.32213593]
[121.96911621 16.82097435]
[119.11783600 32.44890976]
[110.50938416 45.84562683]
[97.41656494 54.97654724]
[100.75437927 69.60046387]
[104.09219360 84.22438049]
[113.66690826 91.12127686]
[116.07710266 102.67261505]
[110.05929565 112.82289886]
[112.84796906 127.56139374]
[115.63664246 142.29989624]
[118.42531586 157.03839111]
[121.21398926 171.77688599]
[135.73728943 176.77380371]
[145.80427551 188.37344360]
[148.70695496 203.45555115]
[143.66455078 217.96311951]
[132.03341675 227.99368286]
[116.94228363 230.84909058]
[102.45058441 225.76121521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[9 69]
[10 68]
[11 67]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
