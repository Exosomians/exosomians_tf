%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:16 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGUCAUCCAUCGCACCGGCUCGCCAGAUUCCGCGACCUAAUUCCGAGGUCAGAGAAGCCCCCGCACCCAAGCUUAGGGUGGCGACGGUCCACGAAGGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[88.40440369 416.21447754]
[73.82829285 420.74215698]
[58.73246002 418.48858643]
[46.11418533 409.90127563]
[38.47884369 396.68521118]
[37.34243774 381.46447754]
[42.93059921 367.26110840]
[54.13379288 356.89526367]
[68.72762299 352.42501831]
[70.94232178 337.58941650]
[73.15702057 322.75381470]
[65.81228638 306.89193726]
[77.18773651 292.50714111]
[78.96183777 277.61242676]
[80.73593140 262.71768188]
[71.72953796 245.71543884]
[83.63995361 229.58567810]
[84.52856445 214.61203003]
[85.41717529 199.63836670]
[86.30578613 184.66471863]
[83.74916077 180.45669556]
[83.92350006 174.57144165]
[87.71665955 168.83847046]
[89.49076080 153.94375610]
[91.26485443 139.04904175]
[93.03895569 124.15432739]
[94.81304932 109.25961304]
[89.45650482 107.84444427]
[84.70503235 103.40630341]
[82.16998291 96.35981750]
[83.15471649 87.92518616]
[76.30527496 74.58032990]
[69.45584106 61.23547363]
[62.40940475 47.99357986]
[50.16701126 43.61073685]
[44.43715668 32.38862228]
[47.84227371 20.67626953]
[40.99283600 7.33141375]
[34.14339828 -6.01344252]
[27.29396057 -19.35829926]
[20.44452095 -32.70315552]
[5.15821218 -35.99902725]
[-4.39235353 -48.38130188]
[-3.69769001 -64.00344849]
[6.91420364 -75.48916626]
[22.43271446 -77.41525269]
[35.53047943 -68.87226868]
[40.02312851 -53.89394379]
[33.78937912 -39.55259323]
[40.63881683 -26.20773697]
[47.48825455 -12.86288166]
[54.33769226 0.48197508]
[61.18712997 13.82683182]
[76.40178680 22.43257523]
[75.54542542 40.75169754]
[81.62857056 45.16043472]
[82.80069733 54.38603592]
[89.65013123 67.73088837]
[96.49957275 81.07574463]
[110.84558868 85.45659637]
[123.98161316 78.21471405]
[137.11763000 70.97283173]
[150.25366211 63.73094940]
[154.74208069 46.90336227]
[169.67942810 38.62009430]
[185.68849182 43.52875900]
[198.60414124 35.90079117]
[202.30036926 20.53480721]
[215.82281494 12.35441017]
[231.14886475 16.21288490]
[239.18583679 29.82106590]
[235.16554260 45.10546112]
[221.47314453 52.99811172]
[206.23210144 48.81644440]
[193.31645203 56.44441223]
[191.84948730 69.33975220]
[183.05455017 79.14821625]
[170.01339722 82.09375763]
[157.49554443 76.86697388]
[144.35951233 84.10885620]
[131.22349548 91.35073853]
[118.08747101 98.59262085]
[109.70777130 111.03370667]
[107.93367004 125.92842865]
[106.15956879 140.82313538]
[104.38547516 155.71786499]
[102.61137390 170.61257935]
[101.27944183 185.55332947]
[100.39083099 200.52697754]
[99.50222015 215.50064087]
[98.61360931 230.47428894]
[106.42469025 238.33216858]
[108.48801422 248.99238586]
[104.34539032 258.78894043]
[95.63064575 264.49179077]
[93.85655212 279.38650513]
[92.08245087 294.28121948]
[99.47412872 304.97927856]
[97.58729553 317.43750000]
[87.99262238 324.96850586]
[85.77792358 339.80410767]
[83.56322479 354.63970947]
[96.21521759 363.17727661]
[103.90254211 376.36315918]
[105.09887695 391.57934570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 102]
[10 101]
[11 100]
[13 97]
[14 96]
[15 95]
[17 91]
[18 90]
[19 89]
[20 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[31 59]
[32 58]
[33 57]
[34 55]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[60 82]
[61 81]
[62 80]
[63 79]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
