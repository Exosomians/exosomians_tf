%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:39 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUACAUGGUCGCUGGCCCGAUACCGUCGACGACUCCUCUUCGUCGGAGGUACGUAUUUAGUGUCCUAACGAUACCGGGU\
) } def
/len { sequence length } bind def

/coor [
[50.95399475 179.52027893]
[41.86061478 191.44967651]
[32.76723480 203.37907410]
[23.67385292 215.30845642]
[28.25724792 230.13317871]
[23.21968842 244.80978394]
[10.49822140 253.69480896]
[-5.01549149 253.37181091]
[-17.35611153 243.96496582]
[-21.77841568 229.09140015]
[-16.58194160 214.47030640]
[-3.76483703 205.72380066]
[11.74445915 206.21508789]
[20.83784103 194.28569031]
[29.93122101 182.35629272]
[39.02460098 170.42691040]
[47.88780975 158.32551575]
[56.51758957 146.05657959]
[65.14736938 133.78762817]
[73.77714539 121.51869202]
[82.40692902 109.24975586]
[82.42287445 96.30598450]
[90.00490570 87.44757843]
[86.58710480 72.84214783]
[83.16930389 58.23671722]
[79.75149536 43.63128281]
[69.07330322 31.95709038]
[73.70713043 17.80163383]
[70.28932190 3.19620180]
[66.87152100 -11.40922928]
[63.45372009 -26.01466179]
[60.03591537 -40.62009048]
[56.61811447 -55.22552490]
[53.20030975 -69.83095551]
[39.16530228 -76.72679138]
[32.89374542 -91.05165100]
[37.34687042 -106.04177094]
[50.42205429 -114.61927032]
[65.94559479 -112.73413086]
[76.58774567 -101.27644348]
[77.32361603 -85.65618134]
[67.80574036 -73.24875641]
[71.22354889 -58.64332581]
[74.64134979 -44.03789520]
[78.05915070 -29.43246269]
[81.47695160 -14.82703209]
[84.89475250 -0.22160088]
[88.31256104 14.38383007]
[98.74628448 25.01334572]
[94.35692596 40.21348190]
[97.77473450 54.81891251]
[101.19253540 69.42434692]
[104.61033630 84.02977753]
[106.73214722 69.18060303]
[116.83089447 58.08937836]
[131.41673279 54.58892441]
[145.44920349 59.88889694]
[154.07907104 72.15778351]
[154.32408142 87.15577698]
[146.09957886 99.69999695]
[132.24771118 105.45550537]
[117.55500793 102.43318939]
[130.14549255 110.58670044]
[142.73597717 118.74021149]
[155.32644653 126.89372253]
[167.91693115 135.04724121]
[183.84274292 133.11123657]
[195.18450928 144.45777893]
[193.24179077 160.38276672]
[179.50488281 168.66992188]
[164.51155090 162.96203613]
[159.76341248 147.63772583]
[147.17294312 139.48420715]
[134.58245850 131.33068848]
[121.99197388 123.17717743]
[109.40149689 115.02366638]
[94.67587280 117.87953186]
[86.04608917 130.14846802]
[77.41631317 142.41741943]
[68.78652954 154.68635559]
[60.15674973 166.95529175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[23 53]
[24 52]
[25 51]
[26 50]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
