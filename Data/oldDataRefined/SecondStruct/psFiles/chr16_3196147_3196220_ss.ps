%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:32 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUACGGGUCGAUCGAGUCGGCCAUCUCGUGUUCUGAGAAUUAGAGUCCCAGCACCCAAACUCGGGACACAA\
) } def
/len { sequence length } bind def

/coor [
[131.67565918 131.89901733]
[122.61250305 138.85317993]
[112.08911896 143.29837036]
[100.78507233 144.94750977]
[89.43032837 143.69413757]
[78.75812531 139.61915588]
[69.45764160 132.98574829]
[62.12945938 124.22225189]
[57.24679947 113.89457703]
[42.40771484 116.08581543]
[27.56863022 118.27706146]
[12.72954464 120.46830750]
[-2.10954022 122.65955353]
[-16.94862556 124.85079956]
[-31.78771019 127.04204559]
[-46.57365799 135.33735657]
[-58.63793564 123.42561340]
[-50.53143692 108.53531647]
[-33.97895432 112.20295715]
[-19.13986969 110.01171875]
[-4.30078554 107.82047272]
[10.53829956 105.62922668]
[25.37738419 103.43798065]
[40.21646881 101.24673462]
[55.05555344 99.05548859]
[59.45956802 80.57402039]
[71.10466766 65.56230164]
[87.91088104 56.70163345]
[106.87637329 55.57466125]
[124.61365509 62.38267136]
[137.95458984 75.90966034]
[151.78253174 70.09693146]
[165.61048889 64.28419495]
[179.43843079 58.47145844]
[193.26637268 52.65872574]
[207.09432983 46.84599304]
[220.92227173 41.03326035]
[234.75021362 35.22052383]
[248.57817078 29.40779114]
[262.40612793 23.59505844]
[261.72085571 8.47038269]
[266.24310303 -5.94909334]
[275.40863037 -17.92880821]
[288.09585571 -26.03461838]
[302.76315308 -29.30446625]
[317.63607788 -27.36254311]
[330.92202759 -20.46236229]
[341.02639771 -9.45386410]
[354.85433960 -15.26659775]
[364.33285522 -28.64903641]
[380.63439941 -26.86240387]
[386.98931885 -11.74463463]
[376.86022949 1.15240693]
[360.66708374 -1.43865061]
[346.83914185 4.37408304]
[347.63473511 19.29562187]
[343.26904297 33.61587524]
[334.25045776 45.60085678]
[321.65206909 53.79244614]
[306.98388672 57.18579102]
[292.01193237 55.35253143]
[278.54556274 48.49477386]
[268.21884155 37.42300415]
[254.39089966 43.23573685]
[240.56295776 49.04847336]
[226.73500061 54.86120605]
[212.90705872 60.67393875]
[199.07911682 66.48667145]
[185.25115967 72.29940796]
[171.42321777 78.11214447]
[157.59527588 83.92487335]
[143.76731873 89.73760986]
[144.94088745 101.10088348]
[143.21235657 112.39306641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
