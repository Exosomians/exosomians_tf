%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:20:21 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCGGAAGACUACGAGUCUAAACCGAUCAAAGUAGUAACUAGGUGAAGUCAUUUUCGUCUAGAGUCUCUU\
) } def
/len { sequence length } bind def

/coor [
[116.17113495 122.79550171]
[104.72338104 127.54686737]
[92.34669495 126.88060760]
[81.47517395 120.92775726]
[74.24691772 110.85905457]
[59.36841202 112.76432037]
[44.48990631 114.66958618]
[29.61140060 116.57485199]
[14.49429798 129.59657288]
[-3.13793445 122.11880493]
[-17.80126381 125.27899170]
[-32.46459198 128.43917847]
[-47.12792206 131.59936523]
[-61.79124832 134.75956726]
[-76.00103760 144.00717163]
[-88.82090759 132.91270447]
[-81.70890045 117.52257538]
[-64.95143890 120.09622955]
[-50.28810883 116.93604279]
[-35.62478256 113.77585602]
[-20.96145248 110.61566925]
[-6.29812336 107.45547485]
[-1.33434367 98.10622406]
[8.23211098 93.07538605]
[19.19198799 94.33477020]
[27.70613289 101.69635010]
[42.58464050 99.79108429]
[57.46314621 97.88581085]
[72.34165192 95.98054504]
[79.98677826 80.49073792]
[95.27661896 72.45313263]
[112.37070465 74.93795776]
[124.73939514 86.99605560]
[139.40272522 83.83586121]
[154.06605530 80.67567444]
[162.07514954 75.67107391]
[169.41833496 77.70652008]
[184.20256042 75.17150879]
[191.13842773 61.41651154]
[204.68539429 54.46431351]
[219.55261230 56.79457092]
[230.07095337 67.30658722]
[244.85519409 64.77157593]
[259.63943481 62.23656082]
[274.42367554 59.70154953]
[289.20791626 57.16653442]
[303.99215698 54.63152313]
[318.77639771 52.09651184]
[333.56060791 49.56150055]
[348.34484863 47.02648544]
[363.12908936 44.49147415]
[375.38845825 33.59925842]
[390.86361694 39.02613068]
[393.63510132 55.18938828]
[380.85180664 65.46166229]
[365.66412354 59.27571487]
[350.87988281 61.81072617]
[336.09564209 64.34574127]
[321.31140137 66.88075256]
[306.52716064 69.41576385]
[291.74291992 71.95077515]
[276.95867920 74.48578644]
[262.17443848 77.02079773]
[247.39019775 79.55580902]
[232.60595703 82.09082031]
[226.19042969 95.50644684]
[212.94877625 102.65644836]
[197.85958862 100.61441040]
[186.73757935 89.95574951]
[171.95333862 92.49076080]
[157.22624207 95.33900452]
[142.56291199 98.49919128]
[127.89958191 101.65937805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[8 26]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[33 73]
[34 72]
[35 71]
[37 70]
[38 69]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
