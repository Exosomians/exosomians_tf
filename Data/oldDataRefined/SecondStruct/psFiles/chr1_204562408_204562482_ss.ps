%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:08 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUCGGAUGUCGUGGUCCAUAAGGGUCCGCCAGAGGGUAGGUUCAUGAUUGGUCCGGGCUGGGACGAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[113.51354218 132.53329468]
[106.88982391 134.54795837]
[100.00000000 135.22827148]
[93.11017609 134.54795837]
[86.48645782 132.53329468]
[80.38468170 129.26210022]
[75.04050446 124.86070251]
[70.66033936 119.49911499]
[56.68647385 124.95173645]
[42.71260452 130.40435791]
[28.73873901 135.85697937]
[22.62055016 150.42897034]
[7.95897818 156.32929993]
[-6.54752684 150.05738831]
[-12.29251194 135.33425903]
[-5.86757946 120.89487457]
[8.91547203 115.30587006]
[23.28611946 121.88311005]
[37.25998688 116.43048859]
[51.23385239 110.97786713]
[65.20771790 105.52524567]
[65.02699280 95.76679230]
[67.53075409 86.33327484]
[72.52681732 77.94879913]
[79.63169098 71.25694275]
[88.30001831 66.77137756]
[86.44462585 51.88656616]
[84.58923340 37.00175858]
[80.31462097 28.59454155]
[82.97790527 21.46508408]
[81.73921967 6.51631594]
[80.19184875 -8.40365887]
[78.33645630 -23.28846741]
[76.48106384 -38.17327499]
[66.16162872 -50.91851807]
[72.29140472 -66.12896729]
[88.56462097 -68.15741730]
[98.24077606 -54.91717911]
[91.36587524 -40.02866364]
[93.22126770 -25.14385605]
[95.07665253 -10.25904846]
[99.14633179 -3.82787395]
[96.68798065 5.27762604]
[97.92667389 20.22639275]
[99.47404480 35.14636612]
[101.32943726 50.03117752]
[103.18482208 64.91598511]
[127.80005646 78.36235046]
[134.79228210 105.52524567]
[148.76614380 110.97786713]
[162.74002075 116.43048859]
[176.71388245 121.88311005]
[190.68774414 127.33572388]
[206.35643005 125.14419556]
[215.40048218 136.97866821]
[229.37434387 142.43128967]
[243.34820557 147.88389587]
[257.32208252 153.33651733]
[271.69271851 146.75929260]
[286.47576904 152.34828186]
[292.90069580 166.78767395]
[287.15573120 181.51080322]
[272.64923096 187.78271484]
[257.98764038 181.88238525]
[251.86946106 167.31039429]
[237.89558411 161.85777283]
[223.92172241 156.40515137]
[209.94786072 150.95252991]
[195.27867126 153.53405762]
[185.23512268 141.30958557]
[171.26126099 135.85697937]
[157.28739929 130.40435791]
[143.31352234 124.95173645]
[129.33966064 119.49911499]
[124.95949554 124.86070251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 21]
[9 20]
[10 19]
[11 18]
[26 47]
[27 46]
[28 45]
[30 44]
[31 43]
[32 41]
[33 40]
[34 39]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
