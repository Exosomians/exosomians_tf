%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:03 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAUUCUUCUGACUCUCGGUGGUAUUCCGGUUUAUUCCUCGCUCCAACACUUUUGACCUUUUGUUUCCGAGAAAAGUCUCGGUAA\
) } def
/len { sequence length } bind def

/coor [
[154.74592590 81.79633331]
[141.24822998 88.33942413]
[127.75052643 94.88251495]
[114.25282288 101.42560577]
[106.24819183 112.88935852]
[92.29026794 112.07209015]
[78.91289520 118.85781097]
[65.66021729 125.88393402]
[57.09181213 139.18405151]
[42.22289658 138.30961609]
[28.97021866 145.33573914]
[15.71753693 152.36186218]
[2.46485639 159.38800049]
[-8.69705105 172.14918518]
[-24.04945946 164.95614624]
[-21.38749123 148.21247864]
[-4.56127024 146.13531494]
[8.69141006 139.10919189]
[21.94409180 132.08305359]
[35.19677353 125.05693054]
[42.81725311 112.25937653]
[58.63408661 112.63125610]
[71.88677216 105.60512543]
[76.42556763 99.55071259]
[85.74717712 98.57439423]
[93.75180817 87.11064148]
[107.70973206 87.92790985]
[121.20743561 81.38481140]
[134.70513916 74.84172058]
[148.20283508 68.29862976]
[145.54444885 59.81338501]
[143.82659912 51.08998871]
[143.06950378 42.23234558]
[143.28198242 33.34593582]
[144.46127319 24.53656578]
[146.59313965 15.90909481]
[149.65196228 7.56619358]
[153.60115051 -0.39287493]
[158.39346313 -7.87344265]
[163.97166443 -14.78655815]
[170.26916504 -21.05004501]
[177.21084595 -26.58948135]
[184.71389771 -31.33907890]
[192.68888855 -35.24246979]
[201.04075623 -38.25337219]
[209.66999817 -40.33613968]
[218.47381592 -41.46618652]
[227.34733582 -41.63026810]
[236.18492126 -40.82664871]
[244.88137817 -39.06511688]
[253.33317566 -36.36684799]
[261.43975830 -32.76418686]
[269.10470581 -28.30022049]
[276.23684692 -23.02828789]
[282.75137329 -17.01133156]
[288.57092285 -10.32115650]
[293.62631226 -3.03755808]
[297.85754395 4.75261593]
[301.21444702 12.95650768]
[303.65725708 21.47635460]
[305.15704346 30.21065712]
[305.69622803 39.05537796]
[305.26855469 47.90519714]
[303.87933350 56.65475464]
[301.54537964 65.19990540]
[298.29461670 73.43896484]
[294.16601562 81.27391052]
[289.20886230 88.61154938]
[300.28326416 98.72875214]
[311.35766602 108.84595490]
[322.43203735 118.96315765]
[333.50643921 129.08035278]
[344.58084106 139.19755554]
[360.70419312 142.19253540]
[365.91629028 157.74136353]
[354.85537720 169.84873962]
[338.89999390 166.05963135]
[334.46362305 150.27195740]
[323.38925171 140.15475464]
[312.31484985 130.03755188]
[301.24044800 119.92034912]
[290.16604614 109.80314636]
[279.09167480 99.68594360]
[254.99238586 114.92436981]
[227.08689880 120.89543152]
[198.81391907 116.84614563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[6 25]
[7 23]
[8 22]
[10 20]
[11 19]
[12 18]
[13 17]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
