%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:36 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCUAGUCUAGUGUCCUGGUAAAAUUACUUGGACAAUCUCUAAAAUCCCACGGUCCGAUCAAUCCACUCGACAAGAACCCAAUAUUAGUAACCGU\
) } def
/len { sequence length } bind def

/coor [
[120.75177002 134.74801636]
[105.94403076 140.03410339]
[90.23923492 139.27833557]
[76.00750732 132.59480286]
[65.39666748 120.99213409]
[60.00806808 106.22138977]
[45.01577377 105.74061584]
[30.02348137 105.25984192]
[23.20780182 117.59117126]
[11.77454948 125.71060944]
[-1.98272359 128.06011963]
[-15.33473396 124.23210144]
[-25.65791130 115.03873444]
[-30.94989586 102.34048462]
[-45.91907501 101.37943268]
[-60.88825607 100.41838074]
[-75.85743713 99.45732117]
[-90.82662201 98.49626923]
[-105.09416962 105.33349609]
[-117.29956055 96.79665375]
[-132.26873779 95.83560181]
[-147.23791504 94.87454224]
[-162.20710754 93.91349030]
[-176.65737915 101.66728973]
[-190.45309448 92.80105591]
[-189.40240479 76.43560028]
[-174.58616638 69.40631104]
[-161.24604797 78.94431305]
[-146.27687073 79.90536499]
[-131.30769348 80.86641693]
[-116.33850861 81.82746887]
[-103.14165497 74.92150879]
[-89.86556244 83.52709198]
[-74.89638519 84.48814392]
[-59.92720413 85.44919586]
[-44.95802307 86.41024780]
[-29.98884201 87.37129974]
[-21.43348312 73.76538086]
[-7.12674809 66.23954010]
[9.11828613 66.90521240]
[22.91870117 75.67638397]
[30.50425529 90.26754761]
[45.49654770 90.74832153]
[60.48884201 91.22909546]
[65.89421082 78.20882416]
[75.43762207 67.83246613]
[87.96118927 61.35899353]
[101.94541931 59.57382202]
[115.69361115 62.69355392]
[127.53769684 70.33966827]
[136.04064941 81.58445740]
[140.17079163 95.06360626]
[155.13996887 96.02466583]
[170.10914612 96.98571777]
[185.07833862 97.94676971]
[200.04751587 98.90782166]
[204.16780090 84.06240082]
[211.25737000 70.39022827]
[221.00961304 58.47757721]
[233.00376892 48.83472443]
[246.72315979 41.87411499]
[261.57736206 37.89270020]
[276.92767334 37.05928421]
[292.11450195 39.40735245]
[306.48587036 44.83375168]
[319.42514038 53.10319901]
[330.37774658 63.85850906]
[338.87478638 76.63599396]
[344.55319214 90.88545990]
[347.17117310 105.99392700]
[362.16345215 106.47470093]
[374.80191040 96.59293365]
[390.37368774 100.45290375]
[396.93347168 115.09355927]
[389.44912720 129.28385925]
[373.66204834 132.13819885]
[361.68267822 121.46699524]
[346.69039917 120.98622131]
[343.34185791 135.22703552]
[337.25442505 148.53504944]
[328.66439819 160.38905334]
[317.90603638 170.32437134]
[305.39874268 177.95104980]
[291.63052368 182.96917725]
[277.13909912 185.18067932]
[262.49081421 184.49713135]
[248.25862122 180.94331360]
[234.99946594 174.65626526]
[223.23268127 165.88006592]
[213.41957092 154.95629883]
[205.94532776 142.31082153]
[201.10389709 128.43710327]
[199.08645630 113.87700653]
[184.11727905 112.91594696]
[169.14810181 111.95489502]
[154.17892456 110.99384308]
[139.20973206 110.03279114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 31]
[21 30]
[22 29]
[23 28]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
