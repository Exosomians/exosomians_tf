%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:49 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAGGGCCCGGGGACACUCGUAGAAUGGCCUGUCACGACCUAAAGGGUCGAACUGAGAUUGUGACAGACCAUUGCUACAAGU\
) } def
/len { sequence length } bind def

/coor [
[114.83110046 124.73208618]
[110.40842438 130.87605286]
[103.47536469 144.17765808]
[96.54230499 157.47926331]
[97.78941345 173.83091736]
[84.10114288 182.86215210]
[69.55880737 175.28240967]
[69.12232208 158.88906860]
[83.24069977 150.54620361]
[90.17375946 137.24459839]
[97.10681915 123.94299316]
[87.20795441 112.67301178]
[73.12312317 117.83224487]
[59.03829956 122.99147797]
[48.94388199 135.91567993]
[32.74382401 133.36810303]
[27.10335350 117.96949768]
[37.82490540 105.56061554]
[53.87906647 108.90665436]
[67.96389008 103.74742126]
[82.04871368 98.58818817]
[94.01897430 89.54866791]
[102.83575439 77.41341400]
[111.65253448 65.27816010]
[120.46931458 53.14290237]
[129.06033325 40.84679413]
[137.42268372 28.39403534]
[145.78501892 15.94127464]
[154.14736938 3.48851442]
[162.50970459 -8.96424580]
[163.77976990 -24.73439217]
[177.29847717 -30.98690605]
[185.66081238 -43.43966675]
[194.02316284 -55.89242935]
[202.38549805 -68.34518433]
[210.74784851 -80.79795074]
[219.11018372 -93.25070953]
[227.47251892 -105.70346832]
[235.83486938 -118.15622711]
[244.19720459 -130.60899353]
[245.46726990 -146.37913513]
[258.98599243 -152.63165283]
[267.34832764 -165.08441162]
[265.64343262 -178.02790833]
[273.06222534 -188.27555847]
[285.09695435 -190.54653931]
[293.91372681 -202.68179321]
[289.95535278 -217.81008911]
[296.69403076 -231.92123413]
[310.94796753 -238.35237122]
[325.98687744 -234.06692505]
[334.70983887 -221.08834839]
[332.99816895 -205.54472351]
[321.66006470 -194.77528381]
[306.04898071 -193.86502075]
[297.23220825 -181.72976685]
[296.45898438 -164.30192566]
[279.80108643 -156.72207642]
[271.43875122 -144.26930237]
[270.76681519 -129.38986206]
[256.64996338 -122.24665070]
[248.28762817 -109.79389191]
[239.92529297 -97.34112549]
[231.56294250 -84.88836670]
[223.20060730 -72.43560791]
[214.83825684 -59.98284531]
[206.47592163 -47.53008652]
[198.11357117 -35.07732391]
[189.75123596 -22.62456512]
[189.07929993 -7.74512386]
[174.96246338 -0.60190451]
[166.60012817 11.85085583]
[158.23777771 24.30361557]
[149.87544250 36.75637817]
[141.51309204 49.20913696]
[140.37142944 56.69652939]
[132.60456848 61.95968246]
[123.78778839 74.09494019]
[114.97100830 86.23019409]
[106.15422821 98.36544800]
[110.10264587 99.54945374]
[113.65690613 102.35090637]
[116.31095123 106.61918640]
[117.61265564 112.06355286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[12 21]
[13 20]
[14 19]
[22 80]
[23 79]
[24 78]
[25 77]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[42 59]
[43 58]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
