%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:35 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUACAAGGAAUUGAGAUAUGUCGUUGUCGUCUUACCGUGUUCAGUCGACACGUUGUCUCUCGGUCCUUAAGAAAACGUGAUGUCGCA\
) } def
/len { sequence length } bind def

/coor [
[179.33799744 371.43579102]
[168.87257385 360.67169189]
[162.23767090 347.18167114]
[160.09437561 332.28128052]
[162.66500854 317.42800903]
[169.71026611 304.07858276]
[180.55126953 293.54623413]
[173.97570801 280.06433105]
[167.40013123 266.58242798]
[160.82456970 253.10050964]
[154.24899292 239.61860657]
[148.35899353 234.88446045]
[147.68846130 225.54946899]
[141.58740234 211.84628296]
[135.48635864 198.14311218]
[129.38529968 184.43992615]
[123.28425598 170.73674011]
[117.18320465 157.03355408]
[104.93817902 148.55366516]
[106.39352417 132.79953003]
[100.29247284 119.09635162]
[86.80330658 113.80592346]
[80.90988922 100.56908417]
[86.00434875 87.00469971]
[79.90329742 73.30151367]
[73.80224609 59.59833145]
[67.31368256 52.85369873]
[67.73670197 45.30880737]
[62.11760330 31.40105057]
[56.49850464 17.49329376]
[50.87940598 3.58553529]
[38.53586960 -6.31131792]
[40.94205093 -21.01028252]
[35.32295227 -34.91804123]
[20.57979202 -45.77935028]
[23.43817329 -62.99850845]
[17.33712387 -76.70169067]
[5.37116289 -88.71218872]
[13.59978008 -103.53535461]
[30.12155724 -99.73177338]
[31.04030609 -82.80274200]
[37.14135742 -69.09955597]
[48.42959213 -64.38510132]
[53.56225586 -52.83747101]
[49.23070908 -40.53713989]
[54.84980774 -26.62938118]
[66.79142761 -17.72730446]
[64.78716278 -2.03356361]
[70.40626526 11.87419415]
[76.02536011 25.78195190]
[81.64446259 39.68970871]
[87.50543213 53.49728394]
[93.60647583 67.20046234]
[99.70752716 80.90364838]
[113.19669342 86.19407654]
[119.09011078 99.43091583]
[113.99565125 112.99530029]
[120.09670258 126.69848633]
[132.77812195 136.15852356]
[130.88638306 150.93251038]
[136.98744202 164.63569641]
[143.08848572 178.33888245]
[149.18952942 192.04205322]
[155.29058838 205.74523926]
[161.39163208 219.44842529]
[167.73091125 233.04304504]
[174.30647278 246.52494812]
[180.88204956 260.00686646]
[187.45761108 273.48876953]
[194.03317261 286.97067261]
[209.00715637 284.91220093]
[223.86413574 287.57919312]
[237.15133667 294.69808960]
[247.57344055 305.56063843]
[254.11886597 319.09429932]
[256.15792847 333.96820068]
[253.50341797 348.72399902]
[246.42765808 361.91882324]
[235.63470459 372.26644897]
[242.21026611 385.74835205]
[248.78584290 399.23028564]
[262.67651367 407.94699097]
[261.80264282 424.32284546]
[247.06318665 431.51174927]
[233.62083435 422.11837769]
[235.30392456 405.80584717]
[228.72836304 392.32391357]
[222.15280151 378.84201050]
[207.35395813 380.97634888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[18 60]
[20 58]
[21 57]
[24 54]
[25 53]
[26 52]
[28 51]
[29 50]
[30 49]
[31 48]
[33 46]
[34 45]
[36 42]
[37 41]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
