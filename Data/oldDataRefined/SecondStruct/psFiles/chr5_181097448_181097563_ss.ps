%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUUUACCUCCUUAGUGUUGUUCGACCGUCGCCACCCUAAGCUUGGGUGCGGAGGCUUCUCUGACCUCGGAAUUAGGUCGCGGAAUCUGGCGAGCCGGUGCGAUGGGAGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[42.45826340 475.37915039]
[27.30888367 476.93356323]
[12.83902454 472.18560791]
[1.55567455 461.95791626]
[-4.58625650 448.02246094]
[-4.52264214 432.79370117]
[1.73549592 418.91003418]
[13.10389805 408.77697754]
[27.61291885 404.15005493]
[29.22089577 389.23651123]
[30.82887268 374.32293701]
[32.43685150 359.40936279]
[34.04482651 344.49581909]
[35.65280533 329.58224487]
[33.86441422 327.26315308]
[32.95007706 324.05050659]
[33.27288437 320.29809570]
[35.05157471 316.49084473]
[38.31728363 313.18704224]
[41.51470947 298.53179932]
[44.71213150 283.87652588]
[47.90955353 269.22128296]
[51.10697937 254.56602478]
[49.41222000 251.33294678]
[49.27951431 247.08908081]
[51.17937088 242.61647034]
[55.19672394 238.88250732]
[59.56303787 224.53205872]
[63.92935181 210.18162537]
[68.29566193 195.83117676]
[72.27512360 181.36866760]
[75.86486053 166.80455017]
[79.45458984 152.24041748]
[83.04432678 137.67628479]
[86.63406372 123.11216736]
[90.22380066 108.54803467]
[87.25356293 98.60372925]
[92.50000000 89.80181885]
[92.50000000 74.80181885]
[92.50000000 59.80182266]
[92.50000000 44.80182266]
[92.50000000 29.80182266]
[82.90930939 14.15361977]
[92.11476135 -0.72135830]
[91.71203613 -15.71595097]
[83.60702515 -29.30341721]
[90.99983215 -42.23383331]
[90.59711456 -57.22842407]
[90.19438934 -72.22302246]
[89.79167175 -87.21761322]
[86.39664459 -95.84188843]
[89.58488464 -102.61898041]
[89.58488464 -117.61898041]
[89.58488464 -132.61897278]
[89.58488464 -147.61897278]
[89.58488464 -162.61897278]
[80.92118073 -176.54278564]
[88.88531494 -190.87821960]
[105.28446198 -190.87821960]
[113.24858856 -176.54278564]
[104.58488464 -162.61897278]
[104.58488464 -147.61897278]
[104.58488464 -132.61897278]
[104.58488464 -117.61898041]
[104.58488464 -102.61898041]
[104.78626251 -87.62033081]
[105.18898773 -72.62574005]
[105.59170532 -57.63114548]
[105.99442291 -42.63655472]
[114.07064056 -30.12159920]
[106.70663452 -16.11867142]
[107.10935211 -1.12407815]
[115.71234131 7.49564505]
[116.09508514 20.07069397]
[107.50000000 29.80182266]
[107.50000000 44.80182266]
[107.50000000 59.80182266]
[107.50000000 74.80181885]
[107.50000000 89.80181885]
[117.76140594 78.86090851]
[132.02046204 74.20482635]
[146.76119995 76.98167419]
[158.34883118 86.50673676]
[163.92608643 100.43132782]
[162.11773682 115.32192230]
[153.36967468 127.50681305]
[139.83900452 133.98144531]
[124.86210632 133.14930725]
[112.13197327 125.21559143]
[104.78792572 112.13777161]
[101.19818878 126.70189667]
[97.60845184 141.26602173]
[94.01872253 155.83015442]
[90.42898560 170.39428711]
[86.83924866 184.95840454]
[88.35691071 191.61167908]
[86.47783661 197.15040588]
[82.64611053 200.19747925]
[78.27980042 214.54792786]
[73.91348267 228.89837646]
[69.54717255 243.24882507]
[65.76222992 257.76345825]
[62.56480789 272.41870117]
[59.36738586 287.07394409]
[56.16996384 301.72921753]
[52.97253799 316.38446045]
[50.56637192 331.19021606]
[48.95839310 346.10379028]
[47.35041428 361.01733398]
[45.74243927 375.93090820]
[44.13446045 390.84448242]
[42.52648163 405.75805664]
[55.71576691 413.37136841]
[64.66290283 425.69485474]
[67.81774902 440.59341431]
[64.63371277 455.48574829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 112]
[10 111]
[11 110]
[12 109]
[13 108]
[14 107]
[19 106]
[20 105]
[21 104]
[22 103]
[23 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[44 72]
[45 71]
[47 69]
[48 68]
[49 67]
[50 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
