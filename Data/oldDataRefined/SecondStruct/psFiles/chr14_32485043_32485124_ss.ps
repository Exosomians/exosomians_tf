%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:18 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUCCCGAAUCGAAUUAAUUUCACCGACUAAACGCAAGUCAACUACGUCUCACCCCAAAACGUCAGGAAUCGACGUUUAC\
) } def
/len { sequence length } bind def

/coor [
[133.98957825 187.20332336]
[122.12020874 190.94177246]
[109.85978699 193.07252502]
[97.42506409 193.55789185]
[85.03585815 192.38931274]
[72.91119385 189.58741760]
[61.26542282 185.20178223]
[50.30441666 179.30989075]
[40.22194672 172.01593018]
[31.19626427 163.44883728]
[23.38692093 153.76008606]
[16.93197823 143.12092590]
[11.94554901 131.71945190]
[8.51578426 119.75723267]
[-6.35278225 121.73857880]
[-21.22134972 123.71992493]
[-32.07054901 135.53831482]
[-48.06426239 134.28102112]
[-56.93347549 120.91252899]
[-51.87448883 105.68799591]
[-36.76812363 100.28639221]
[-23.20269394 108.85135651]
[-8.33412743 106.87001038]
[6.53443956 104.88866425]
[8.47137737 80.44951630]
[16.68830299 57.35177612]
[30.62143326 37.18022156]
[49.31478500 21.31887627]
[42.22819138 8.09843063]
[35.14159775 -5.12201500]
[28.05500603 -18.34246063]
[12.71229076 -21.36489868]
[2.94218612 -33.57469177]
[3.35783553 -49.20675278]
[13.76298237 -60.88009262]
[29.24463463 -63.08292770]
[42.49282837 -54.77513885]
[47.25217438 -39.87940979]
[41.27545166 -25.42905426]
[48.36204529 -12.20860863]
[55.44863892 1.01183748]
[62.53523254 14.23228359]
[74.71533203 9.88676262]
[87.37815857 7.26166296]
[100.28195953 6.40710211]
[113.18037415 7.33939505]
[125.82715607 10.04074287]
[137.98085022 14.45957184]
[149.40942383 20.51151848]
[159.89468384 28.08104134]
[169.23645020 37.02362442]
[177.25636292 47.16853714]
[183.80133057 58.32209778]
[188.74636841 70.27136230]
[191.99708557 82.78820038]
[193.49140930 95.63363647]
[193.20083618 108.56243896]
[191.13087463 121.32776642]
[187.32107544 133.68591309]
[181.84414673 145.40093994]
[194.33587646 153.70495605]
[206.82760620 162.00898743]
[219.31932068 170.31301880]
[231.81105042 178.61703491]
[244.30276489 186.92106628]
[256.79449463 195.22508240]
[271.74490356 190.64044189]
[286.12432861 196.78591919]
[293.14318848 210.75981140]
[289.48742676 225.96406555]
[276.88317871 235.21971130]
[261.28176880 234.15650940]
[250.04972839 223.27645874]
[248.49046326 207.71681213]
[235.99874878 199.41278076]
[223.50701904 191.10876465]
[211.01528931 182.80473328]
[198.52357483 174.50071716]
[186.03184509 166.19668579]
[173.54013062 157.89265442]
[165.20968628 167.13722229]
[155.72645569 175.19490051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 24]
[15 23]
[16 22]
[28 42]
[29 41]
[30 40]
[31 39]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
