%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:45 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCGUCAAUUCAGUUCGGCCGCGCAGUGUCCGUGAGCCGCACGUUCGGCGGGGCGUCCACGAUGGCAGAGAAUGGA\
) } def
/len { sequence length } bind def

/coor [
[111.04740143 297.68188477]
[121.65076447 286.35281372]
[118.68785858 271.64834595]
[115.72494507 256.94387817]
[105.62610626 245.99571228]
[110.48504639 230.93910217]
[107.52214050 216.23464966]
[104.55922699 201.53018188]
[101.59631348 186.82572937]
[97.95497894 183.35940552]
[96.63253784 177.47509766]
[99.03142548 170.83746338]
[97.24615479 155.94407654]
[93.21411896 149.50479126]
[95.69814301 140.42462158]
[94.50639343 125.47203827]
[80.56331635 117.35568237]
[74.07095337 102.58632660]
[77.51804352 86.82554626]
[89.58320618 76.11496735]
[87.79792786 61.22158432]
[86.01265717 46.32820129]
[76.68788147 33.54700089]
[82.85540771 19.98931313]
[81.07013702 5.09593248]
[79.28486633 -9.79744911]
[75.38516998 -15.68007660]
[75.27941895 -21.71023369]
[77.99835205 -25.93895721]
[77.40200806 -40.92709732]
[66.07344818 -51.61828995]
[65.68218231 -66.82688904]
[75.94441223 -77.56105042]
[75.34806824 -92.54919434]
[74.75171661 -107.53733063]
[74.15537262 -122.52547455]
[63.39212036 -134.42219543]
[66.12466431 -150.23081970]
[80.25683594 -157.82434082]
[94.94763184 -151.37762451]
[98.92754364 -135.83607483]
[89.14350891 -123.12181854]
[89.73986053 -108.13368225]
[90.33620453 -93.14553833]
[90.93255615 -78.15740204]
[102.01517487 -68.27250671]
[102.83347321 -53.08089828]
[92.39014435 -41.52344513]
[92.98649597 -26.53530502]
[94.17824554 -11.58272171]
[95.96351624 3.31065941]
[97.74879456 18.20404053]
[106.94586945 29.91996765]
[100.90603638 44.54293060]
[102.69131470 59.43630981]
[104.47658539 74.32968903]
[116.62972260 79.93867493]
[124.39501190 90.84095764]
[125.72352600 104.15990448]
[120.26473236 116.38124084]
[109.45897675 124.28028870]
[110.65072632 139.23286438]
[112.13953400 154.15879822]
[113.92480469 169.05218506]
[116.30077362 183.86280823]
[119.26368713 198.56727600]
[122.22660065 213.27172852]
[125.18950653 227.97619629]
[135.50027466 239.97613525]
[130.42941284 253.98097229]
[133.39231873 268.68542480]
[136.35522461 283.38989258]
[150.51860046 289.72854614]
[158.22203064 303.19839478]
[156.50340271 318.61999512]
[146.02355957 330.06344604]
[130.81221008 333.12850952]
[116.71843719 326.63656616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[6 68]
[7 67]
[8 66]
[9 65]
[12 64]
[13 63]
[15 62]
[16 61]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[26 50]
[29 49]
[30 48]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
