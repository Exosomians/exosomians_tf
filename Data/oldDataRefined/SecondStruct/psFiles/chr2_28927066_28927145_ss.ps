%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:15 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACGAUACUACUGUAGGUAUACCAAAGCGACGACCGACUCAAAGUCUCUACUGUGGAAAGAGAACCGACAGACUCGUAA\
) } def
/len { sequence length } bind def

/coor [
[69.38609314 337.64578247]
[75.43243408 321.80667114]
[75.43243408 306.80667114]
[75.43243408 291.80667114]
[75.43243408 276.80667114]
[75.43243408 261.80667114]
[66.11567688 256.52017212]
[59.90191269 247.69371033]
[58.03900909 236.97792053]
[60.95302582 226.41372681]
[68.15337372 218.04371643]
[78.31382751 213.51716614]
[80.05522156 198.61859131]
[81.79660797 183.72001648]
[83.53800201 168.82144165]
[77.33056641 155.28198242]
[86.61765289 142.47337341]
[88.35904694 127.57479095]
[90.10044098 112.67621613]
[85.62524414 126.99308777]
[77.02873993 139.28536987]
[65.11648560 148.40118408]
[51.00473785 153.48631287]
[36.01587677 154.06425476]
[21.55446434 150.08084106]
[8.97564125 141.90936279]
[-0.54186451 130.31552124]
[-6.10619402 116.38575745]
[-7.19592905 101.42539215]
[-3.70895386 86.83632660]
[4.02797699 73.98564911]
[15.28985691 64.07756805]
[29.02136612 58.04053879]
[43.93576050 56.44028473]
[58.63545609 59.42675018]
[71.74298096 66.72009277]
[82.03089142 77.63806915]
[83.77228546 62.73949051]
[85.51367950 47.84091568]
[87.25507355 32.94234085]
[83.08843231 16.50836754]
[97.72671509 7.95518112]
[109.99791718 19.65363693]
[102.15364838 34.68373489]
[100.41225433 49.58230972]
[98.67086029 64.48088074]
[96.92946625 79.37945557]
[108.78536224 88.56846619]
[122.77861786 83.16580200]
[136.77186584 77.76313782]
[143.87091064 71.59749603]
[151.41390991 72.43386841]
[165.60614014 67.57785797]
[172.33589172 53.27799606]
[187.23416138 48.00380325]
[201.46206665 54.88436508]
[206.57844543 69.83756256]
[199.54785156 83.99193573]
[184.54139709 88.94993591]
[170.46214294 81.77008057]
[156.26992798 86.62609100]
[142.17453003 91.75639343]
[128.18127441 97.15905762]
[114.18802643 102.56172180]
[104.99901581 114.41761017]
[103.25762177 129.31619263]
[101.51622772 144.21476746]
[107.59911346 158.81987000]
[98.43658447 170.56283569]
[96.69519043 185.46141052]
[94.95379639 200.35998535]
[93.21240234 215.25856018]
[106.53177643 229.95639038]
[105.18945312 249.45108032]
[90.43243408 261.80667114]
[90.43243408 276.80667114]
[90.43243408 291.80667114]
[90.43243408 306.80667114]
[90.43243408 321.80667114]
[96.47876740 337.64578247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[12 72]
[13 71]
[14 70]
[15 69]
[17 67]
[18 66]
[19 65]
[37 47]
[38 46]
[39 45]
[40 44]
[48 64]
[49 63]
[50 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
