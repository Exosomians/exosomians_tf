%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:50 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAUAUGAUUUUAACCUUGCUAUGUCUCUUCUAAUCGUACCGGGGACGCGUUCCUACUGUGCGUUUAAGCACUUCGCAAGGUAUAAAU\
) } def
/len { sequence length } bind def

/coor [
[63.21553040 380.27725220]
[49.33377838 386.21017456]
[34.36596680 388.17669678]
[19.42280388 386.03088379]
[5.61317682 379.93194580]
[-6.03815222 370.33251953]
[-14.66657639 357.94491577]
[-19.63180923 343.68838501]
[-20.56539917 328.62081909]
[-17.39806366 313.86038208]
[-10.36484337 300.50238037]
[0.01235042 289.53805542]
[12.96346188 281.78103638]
[27.52743149 277.80694580]
[42.62351990 277.91070557]
[46.75807953 263.49179077]
[50.89263916 249.07284546]
[55.02719879 234.65393066]
[59.16175842 220.23500061]
[63.29632187 205.81607056]
[67.43087769 191.39715576]
[58.13055038 179.79362488]
[57.43800735 164.76084900]
[65.82819366 152.05422974]
[80.25843048 146.66215515]
[84.39299011 132.24322510]
[88.27527618 117.75434113]
[91.90410614 103.19990540]
[90.36869812 100.28344727]
[89.96268463 96.70085907]
[90.95059967 92.91053772]
[93.40729523 89.46725464]
[97.18604279 86.94378662]
[102.80513763 73.03603363]
[108.42424011 59.12827301]
[106.41997528 43.43453217]
[118.36159515 34.53245544]
[123.98069000 20.62469864]
[129.59979248 6.71694088]
[135.21888733 -7.19081688]
[140.83798218 -21.09857559]
[136.94778442 -40.72749329]
[152.26205444 -52.31604767]
[156.89730835 -66.58189392]
[161.53256226 -80.84774017]
[166.16781616 -95.11359406]
[170.80307007 -109.37944031]
[166.86608887 -125.29899597]
[178.87033081 -136.47175598]
[194.46684265 -131.40412903]
[197.61128235 -115.30927277]
[185.06892395 -104.74418640]
[180.43367004 -90.47834015]
[175.79841614 -76.21248627]
[171.16316223 -61.94664001]
[166.52790833 -47.68079376]
[172.07664490 -38.78440094]
[171.68470764 -28.08428955]
[165.23793030 -19.25843430]
[154.74574280 -15.47947598]
[149.12664795 -1.57171822]
[143.50755310 12.33603954]
[137.88845825 26.24379730]
[132.26934814 40.15155411]
[134.67553711 54.85052109]
[122.33199310 64.74737549]
[116.71289825 78.65512848]
[111.09379578 92.56288910]
[106.45854187 106.82873535]
[102.82971191 121.38317108]
[103.79036713 130.69277954]
[98.81192017 136.37779236]
[94.67736053 150.79672241]
[104.05753326 163.01631165]
[104.43933105 178.23826599]
[95.88586426 190.61978149]
[81.84980774 195.53170776]
[77.71524811 209.95063782]
[73.58068848 224.36956787]
[69.44612122 238.78848267]
[65.31156158 253.20741272]
[61.17700577 267.62634277]
[57.04244232 282.04525757]
[69.89962769 289.95697021]
[80.14463806 301.04492188]
[87.01720428 314.48629761]
[90.00736237 329.28363037]
[88.89320374 344.33892822]
[83.75741577 358.53491211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[25 73]
[26 72]
[27 70]
[28 69]
[33 68]
[34 67]
[35 66]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
