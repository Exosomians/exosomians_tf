%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:01 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCGAGACUUUUCUCGGAAAACCUAUGCUACCUUGGAGGCCGGCUUGGCGGUGAAGAAUUCGGGCGAGAGGUGCCUACGCCGC\
) } def
/len { sequence length } bind def

/coor [
[123.96968079 140.32684326]
[110.08483887 145.81588745]
[95.17851257 146.66426086]
[80.76054382 142.78602600]
[68.29134369 134.57398987]
[56.51577759 143.86572266]
[44.74021912 153.15744019]
[32.96465683 162.44917297]
[21.18909645 171.74089050]
[9.41353416 181.03262329]
[3.84954476 196.45903015]
[-12.33767414 199.08694458]
[-22.49609947 186.21301270]
[-16.17561340 171.08081055]
[0.12180912 169.25706482]
[11.89737034 159.96533203]
[23.67293167 150.67361450]
[35.44849396 141.38188171]
[47.22405243 132.09016418]
[58.99961472 122.79843140]
[55.96082306 116.16635132]
[53.98696518 109.14334106]
[53.12577438 101.89923859]
[53.39807510 94.60919952]
[54.79728317 87.44952393]
[57.28955841 80.59333801]
[60.81464386 74.20643616]
[65.28728485 68.44326019]
[70.59934235 63.44317627]
[76.62234497 59.32709503]
[71.32275391 45.29447556]
[66.02316284 31.26185799]
[51.53375244 20.07446671]
[54.76948547 2.92806149]
[48.96673965 -10.90408039]
[43.16399384 -24.73622131]
[31.46104240 -37.00313950]
[40.00886536 -51.64455414]
[56.44436264 -47.48393250]
[56.99613571 -30.53896713]
[62.79888153 -16.70682526]
[68.60163116 -2.87468433]
[79.79161072 2.08867598]
[84.66880035 13.75557709]
[80.05578613 25.96226883]
[85.35536957 39.99488831]
[90.65496063 54.02750397]
[112.09803009 54.67409515]
[131.01119995 64.79907227]
[143.43942261 82.28514099]
[146.78375244 103.47567749]
[161.37245178 106.96419525]
[175.96116638 110.45270538]
[190.54986572 113.94121552]
[205.13856506 117.42972565]
[219.72727966 120.91824341]
[224.44760132 115.64105988]
[230.49249268 112.03436279]
[237.29829407 110.40585327]
[244.23889160 110.88008118]
[250.68321228 113.38932800]
[256.05270386 117.68194580]
[259.87319946 123.34741974]
[261.81677246 129.85552979]
[261.72976685 136.60592651]
[274.98245239 143.63204956]
[288.23513794 150.65817261]
[301.48782349 157.68429565]
[314.74047852 164.71043396]
[330.43719482 161.39491272]
[342.72396851 171.71067810]
[342.17541504 187.74435425]
[329.21237183 197.19627380]
[313.77896118 192.81573486]
[307.71435547 177.96310425]
[294.46166992 170.93698120]
[281.20901489 163.91085815]
[267.95632935 156.88471985]
[254.70364380 149.85859680]
[231.37411499 154.75302124]
[216.23876953 135.50694275]
[201.65005493 132.01843262]
[187.06135559 128.52992249]
[172.47265625 125.04141235]
[157.88394165 121.55289459]
[143.29524231 118.06438446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[30 47]
[31 46]
[32 45]
[34 42]
[35 41]
[36 40]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[56 81]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
