%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:17:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUUUGAGUGGAAAUUCACUAAGAAUGAGGUUUUGUCCCGAGCAGGCCCUAAACUUGGGCCCUGGAGAGCGUGGGAUUCGCUCUUAGUAUGGGGAUCUGGUUGCUCGGCUGUGUUUGAGGUGGAAUGA\
) } def
/len { sequence length } bind def

/coor [
[-58.71147537 293.51889038]
[-68.53438568 304.85513306]
[-78.35729218 316.19137573]
[-88.18020630 327.52761841]
[-98.00312042 338.86386108]
[-107.82602692 350.20010376]
[-110.84184265 368.31985474]
[-127.56482697 373.50152588]
[-137.11517334 385.06832886]
[-146.66552734 396.63513184]
[-156.21588135 408.20193481]
[-165.76623535 419.76873779]
[-167.95063782 436.02172852]
[-183.21916199 442.00540161]
[-195.86486816 431.56420898]
[-192.87893677 415.43920898]
[-177.33302307 410.21838379]
[-167.78268433 398.65158081]
[-158.23233032 387.08477783]
[-148.68197632 375.51797485]
[-139.13162231 363.95120239]
[-139.95600891 351.82168579]
[-132.00961304 342.09552002]
[-119.16226959 340.37719727]
[-109.33936310 329.04095459]
[-99.51644897 317.70471191]
[-89.69354248 306.36846924]
[-79.87062836 295.03222656]
[-70.04771423 283.69598389]
[-73.59573364 269.25473022]
[-67.89235687 255.32865906]
[-54.93087387 247.33782959]
[-39.57194901 248.52507019]
[-29.74903679 237.18882751]
[-19.92612648 225.85258484]
[-10.10321426 214.51634216]
[-0.28030363 203.18009949]
[9.54260731 191.84385681]
[11.56500149 184.65878296]
[19.73669434 180.35830688]
[29.82659912 169.25903320]
[39.78371429 158.04048157]
[49.60662460 146.70423889]
[59.42953491 135.36799622]
[69.25244904 124.03175354]
[79.07535553 112.69551086]
[88.89826965 101.35926819]
[98.58558655 89.90693665]
[108.13594055 78.34014130]
[117.68629456 66.77334595]
[127.23664093 55.20654678]
[122.78520966 38.93672562]
[128.81486511 23.36087418]
[142.78126526 14.50649738]
[159.11062622 15.67427349]
[168.38301086 3.88347745]
[177.65539551 -7.90731907]
[186.92778015 -19.69811440]
[189.37655640 -35.32866669]
[203.32595825 -40.55009460]
[201.64430237 -56.03588867]
[211.21578979 -67.86134338]
[225.98948669 -69.36911011]
[235.26187134 -81.15991211]
[244.53425598 -92.95070648]
[253.80664062 -104.74150085]
[263.07904053 -116.53229523]
[271.77987671 -128.75093079]
[279.88949585 -141.36973572]
[287.99911499 -153.98854065]
[296.10870361 -166.60734558]
[304.21832275 -179.22615051]
[312.32794189 -191.84495544]
[320.43756104 -204.46376038]
[315.62197876 -219.34140015]
[321.54406738 -233.81422424]
[335.40759277 -241.04861450]
[350.66665649 -237.62870789]
[360.11633301 -225.16928101]
[359.29483032 -209.55329895]
[348.58999634 -198.15412903]
[333.05636597 -196.35414124]
[324.94674683 -183.73533630]
[316.83712769 -171.11653137]
[308.72750854 -158.49772644]
[300.61791992 -145.87893677]
[292.50830078 -133.26013184]
[284.39868164 -120.64132690]
[284.93441772 -117.79499817]
[284.31854248 -114.55609894]
[282.39212036 -111.38384247]
[279.17333984 -108.78738403]
[274.86981201 -107.25991058]
[265.59744263 -95.46911621]
[256.32504272 -83.67832184]
[247.05267334 -71.88751984]
[237.78028870 -60.09672546]
[239.79804993 -45.38400269]
[230.56250000 -33.29437256]
[215.11676025 -31.27770996]
[213.33120728 -16.49051666]
[198.71858215 -10.42573071]
[189.44619751 1.36506593]
[180.17381287 13.15586185]
[170.90142822 24.94665909]
[175.72581482 37.45282364]
[173.69996643 50.81310272]
[165.25035095 61.49725342]
[152.51501465 66.62831879]
[138.80343628 64.75689697]
[129.25308228 76.32369232]
[119.70273590 87.89048767]
[110.15238190 99.45729065]
[107.82434082 107.26302338]
[100.23451233 111.18217468]
[90.41159821 122.51841736]
[80.58869171 133.85466003]
[70.76577759 145.19090271]
[60.94286728 156.52714539]
[51.11995697 167.86338806]
[47.82001877 176.48783875]
[40.92586899 179.34893799]
[30.83596420 190.44821167]
[20.87885094 201.66676331]
[11.05593967 213.00300598]
[1.23302901 224.33924866]
[-8.58988190 235.67549133]
[-18.41279221 247.01173401]
[-28.23570442 258.34799194]
[-24.87475014 273.38162231]
[-30.93963623 287.34838867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[33 129]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[40 123]
[41 122]
[42 120]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[48 113]
[49 112]
[50 111]
[51 110]
[55 105]
[56 104]
[57 103]
[58 102]
[60 100]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
