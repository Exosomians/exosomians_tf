%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:18:05 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCUCCAUUUGAUGUUGCGUCCCAAUUAUUACUACUACUGUCGAUCUUACGUCUCAAGUUGCGUCA\
) } def
/len { sequence length } bind def

/coor [
[76.29231262 207.50602722]
[72.15964508 222.19902039]
[62.05476379 233.63816833]
[47.98398590 239.55221558]
[32.74108505 238.76693726]
[19.35254288 231.43824768]
[10.47666836 219.02125549]
[7.87577200 203.98138428]
[12.06626320 189.30477905]
[22.21611786 177.90551758]
[36.31007385 172.04692078]
[51.54976654 172.89221191]
[58.75212097 159.73448181]
[65.95447540 146.57673645]
[73.15682983 133.41899109]
[80.35918427 120.26126099]
[87.56153870 107.10352325]
[87.43528748 93.12226105]
[99.28072357 85.69412231]
[106.48307800 72.53638458]
[94.55384827 63.39341736]
[84.16017151 52.53652954]
[75.54569244 40.22023392]
[68.91235352 26.73323250]
[64.41563416 12.39168644]
[62.16095352 -2.46822119]
[62.20116425 -17.49815178]
[64.53532410 -32.34578323]
[69.10871124 -46.66306305]
[75.81413269 -60.11437607]
[84.49438477 -72.38440704]
[94.94600677 -83.18552399]
[106.92398071 -92.26453400]
[120.14754486 -99.40860748]
[134.30670166 -104.45028687]
[149.06956482 -107.27138519]
[164.09004211 -107.80577087]
[179.01605225 -106.04091644]
[193.49769592 -102.01818848]
[207.19551086 -95.83189392]
[219.78840637 -87.62704468]
[230.98117065 -77.59597015]
[240.51144409 -65.97381592]
[248.15580750 -53.03302383]
[253.73507690 -39.07694626]
[257.11846924 -24.43272781]
[258.22665405 -9.44365406]
[257.03369141 5.53891039]
[253.56752014 20.16375351]
[247.90937805 34.08804703]
[240.19192505 46.98538589]
[230.59606934 58.55344009]
[219.34672546 68.52103424]
[206.70762634 76.65451813]
[192.97503662 82.76322174]
[178.47087097 86.70396423]
[163.53511047 88.38435364]
[148.51789856 87.76500702]
[133.77124023 84.86043549]
[119.64081573 79.73873901]
[112.43846130 92.89647675]
[112.56471252 106.87773895]
[100.71927643 114.30587769]
[93.51692200 127.46361542]
[86.31456757 140.62135315]
[79.11221313 153.77909851]
[71.90985870 166.93682861]
[64.70750427 180.09457397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[19 61]
[20 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
