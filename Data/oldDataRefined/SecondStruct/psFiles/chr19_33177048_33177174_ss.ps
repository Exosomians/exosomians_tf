%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:19:57 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGCCCACCGCGGCACCGAAUCAACCAAUUUCGCGGACAGAUCAUUUGUCCUCUAGGACCCAAGCUUAGGGUCGCCACGGAGUUGGCUCGCAGGUUCGAGAAAGGUAAAAACGAGGACGUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[250.31196594 220.87474060]
[245.83129883 212.43508911]
[243.88949585 203.05500793]
[244.65501404 193.48294067]
[248.07977295 184.48648071]
[236.96551514 174.41310120]
[225.85124207 164.33972168]
[207.73890686 166.39926147]
[193.56181335 154.44323730]
[192.49926758 135.61116028]
[180.90411377 126.09526062]
[169.30895996 116.57936096]
[154.56214905 114.48628235]
[148.80296326 99.75053406]
[137.20780945 90.23463440]
[125.61264801 80.71873474]
[126.10022736 111.54336548]
[102.31565094 124.91156006]
[82.27783966 112.17088318]
[67.72737122 115.81558228]
[53.17689896 119.46028900]
[38.62643051 123.10498810]
[33.78673172 137.75357056]
[21.78133583 147.44242859]
[6.44111824 149.07987976]
[-7.33891249 142.14343262]
[-15.16159821 128.84648132]
[-14.53074837 113.43202209]
[-5.64766550 100.81875610]
[8.65309143 95.03153992]
[23.80820274 97.91704559]
[34.98172760 108.55451965]
[49.53219604 104.90982056]
[64.08266449 101.26511383]
[78.63313293 97.62041473]
[76.09856415 87.92385101]
[78.24060059 76.45634460]
[66.19248962 67.52085114]
[54.14437485 58.58536530]
[42.09626389 49.64987564]
[30.04815102 40.71438599]
[18.00003815 31.77889633]
[5.95192432 22.84340668]
[-10.37198639 18.26451111]
[-10.49094486 1.31098115]
[5.76710367 -3.49653268]
[14.88741398 10.79529285]
[26.93552589 19.73078346]
[38.98363876 28.66627312]
[51.03175354 37.60176086]
[63.07986450 46.53725052]
[75.12797546 55.47274017]
[87.17609406 64.40823364]
[94.10518646 61.53810501]
[84.36360931 50.13189316]
[92.20140839 37.34248734]
[106.78682709 40.84471130]
[107.96337891 55.79785156]
[114.89247894 52.92772675]
[117.09343719 38.09008026]
[119.29439545 23.25243187]
[121.49534607 8.41478443]
[123.69630432 -6.42286301]
[113.18707275 -18.00259018]
[112.63150787 -33.63030243]
[122.29191589 -45.92707062]
[137.60696411 -49.08673477]
[151.34533691 -41.61740112]
[157.02021790 -27.04586029]
[151.95207214 -12.25234604]
[138.53395081 -4.22190619]
[136.33299255 10.61574173]
[134.13203430 25.45339012]
[131.93107605 40.29103851]
[129.73011780 55.12868500]
[135.12855530 69.12357330]
[146.72370911 78.63947296]
[158.31886292 88.15537262]
[173.89503479 90.92910004]
[178.82485962 104.98420715]
[190.42001343 114.50010681]
[202.01516724 124.01600647]
[213.51716614 120.54594421]
[225.13703918 123.08242798]
[233.96588135 130.87049866]
[237.85198975 141.85578918]
[235.92462158 153.22544861]
[247.03889465 163.29882812]
[258.15316772 173.37222290]
[278.53576660 167.39961243]
[298.35644531 174.66091919]
[309.91293335 192.16899109]
[308.81283569 212.98742676]
[321.28488159 221.32098389]
[337.05792236 222.55462646]
[343.34164429 236.05883789]
[355.81369019 244.39239502]
[368.28573608 252.72595215]
[380.75778198 261.05950928]
[392.78952026 251.86624146]
[407.15518188 247.08016968]
[422.29647827 247.22044373]
[436.57101440 252.27182007]
[448.43035889 261.68640137]
[456.58813477 274.44293213]
[460.15945435 289.15771484]
[458.75686646 304.23455811]
[452.53259277 318.03808594]
[442.16174316 329.07095337]
[428.76928711 336.13641357]
[413.80792236 338.46804810]
[398.90057373 335.81295776]
[385.66424561 328.45913696]
[375.53475952 317.20428467]
[369.61083984 303.26922607]
[368.53509521 288.16552734]
[372.42422485 273.53155518]
[359.95217896 265.19799805]
[347.48013306 256.86444092]
[335.00808716 248.53088379]
[320.12713623 247.89332581]
[312.95132446 233.79302979]
[300.47927856 225.45947266]
[292.82275391 230.93574524]
[283.91635132 234.05569458]
[274.46896362 234.55697632]
[265.23635864 232.38621521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[7 87]
[10 82]
[11 81]
[12 80]
[14 78]
[15 77]
[16 76]
[19 35]
[20 34]
[21 33]
[22 32]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[93 123]
[94 122]
[96 120]
[97 119]
[98 118]
[99 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
