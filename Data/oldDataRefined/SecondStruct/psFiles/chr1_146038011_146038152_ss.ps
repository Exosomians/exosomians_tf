%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.12
%%CreationDate: Wed Jul 24 19:16:59 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCGACAUCGCGCGGCGGACCAAUCACCGAGCGGCACUAGCAUAUCACCAAUCAUGAGACGCAACACCGGCGUCGUUGGAGCCAAGCUUAGGCUCAGUGCCGUCCACCAAGAUUGAACGACCCCACCGCCAAAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[119.91866302 201.10733032]
[131.86891174 191.86782837]
[126.39609528 177.90185547]
[120.92328644 163.93588257]
[115.45047760 149.96990967]
[109.97766113 136.00393677]
[102.55400085 134.93658447]
[100.41905212 149.78387451]
[85.57179260 147.64868164]
[87.70668030 132.80186462]
[80.28302002 131.73449707]
[71.09722900 143.59288025]
[61.91143417 155.45126343]
[56.99175644 171.67572021]
[40.03945160 171.43968201]
[35.57340240 155.08453369]
[50.05305481 146.26547241]
[59.23884583 134.40708923]
[68.42463684 122.54870605]
[64.65264893 105.69560242]
[68.66484070 90.28547668]
[78.41358185 79.44174957]
[90.82088470 74.80730438]
[89.83298492 59.83987045]
[88.84509277 44.87243652]
[87.85719299 29.90500450]
[86.86929321 14.93757153]
[70.87747955 8.86714363]
[59.15719223 -3.51606035]
[54.00826645 -19.71248245]
[56.41070175 -36.48139954]
[65.83856964 -50.48934555]
[80.37416840 -58.97275543]
[78.72978973 -73.88234711]
[77.08541107 -88.79194641]
[75.44104004 -103.70153809]
[73.79666138 -118.61113739]
[72.15228271 -133.52073669]
[70.50790405 -148.43032837]
[68.86353302 -163.33992004]
[69.08749390 -148.34159851]
[63.98603439 -134.23573303]
[54.22022629 -122.85026550]
[41.05557251 -115.66056061]
[26.19801140 -113.59830475]
[11.57286263 -116.93072510]
[-0.92467219 -125.22600555]
[-9.67510128 -137.40919495]
[-13.54450035 -151.90151978]
[-12.03145313 -166.82501221]
[-5.33202791 -180.24580383]
[5.68563080 -190.42477417]
[19.59379959 -196.04284668]
[34.59018707 -196.37203979]
[48.73325729 -191.36865234]
[46.11050797 -206.13758850]
[34.21709061 -212.55705261]
[28.30127907 -224.49151611]
[30.33373070 -237.45834351]
[39.34558105 -246.73054504]
[37.04789734 -261.55352783]
[34.75021362 -276.37649536]
[32.45253372 -291.19946289]
[30.15485001 -306.02246094]
[16.68463707 -313.96520996]
[11.52012730 -328.72534180]
[17.09984398 -343.33358765]
[30.78921509 -350.89236450]
[46.12454224 -347.83267212]
[55.86494446 -335.59915161]
[55.41131210 -319.96817017]
[44.97782898 -308.32012939]
[47.27550888 -293.49716187]
[49.57319260 -278.67419434]
[51.87087631 -263.85119629]
[54.16855621 -249.02822876]
[68.13741302 -239.72578430]
[71.15245056 -222.87377930]
[60.87943268 -208.76033020]
[63.50218582 -193.99140930]
[77.84729004 -189.60758972]
[88.27769470 -200.38749695]
[98.70810699 -211.16741943]
[109.13851166 -221.94734192]
[119.56891632 -232.72724915]
[117.76967621 -248.26098633]
[126.41938782 -261.28851318]
[141.43391418 -265.65866089]
[155.72386169 -259.30792236]
[162.54194641 -245.23498535]
[158.66888428 -230.08462524]
[145.93341064 -221.01039124]
[130.34883118 -222.29684448]
[119.91842651 -211.51693726]
[109.48802185 -200.73701477]
[99.05761719 -189.95709229]
[88.62721252 -179.17718506]
[83.77312469 -164.98429871]
[85.41750336 -150.07470703]
[87.06187439 -135.16510010]
[88.70625305 -120.25550842]
[90.35063171 -105.34591675]
[91.99501038 -90.43632507]
[93.63938904 -75.52672577]
[95.28376007 -60.61713028]
[107.92325592 -57.28166199]
[118.68981934 -49.81153488]
[126.27607727 -39.08718109]
[129.75175476 -26.38575935]
[128.67771912 -13.22906590]
[123.16130829 -1.20122671]
[113.84606934 8.24205780]
[101.83673096 13.94967365]
[102.82462311 28.91710663]
[103.81252289 43.88454056]
[104.80042267 58.85197449]
[105.78831482 73.81940460]
[125.42355347 82.59850311]
[134.39904785 105.29603577]
[123.94363403 130.53112793]
[129.41644287 144.49710083]
[134.88925171 158.46307373]
[140.36206055 172.42904663]
[145.83488464 186.39501953]
[160.88088989 185.05555725]
[175.69453430 188.01066589]
[189.07493591 195.02076721]
[199.93739319 205.51760864]
[207.40135193 218.65023804]
[210.86172485 233.35406494]
[210.03802490 248.43710327]
[204.99699402 262.67666626]
[196.14729309 274.91836548]
[184.20632935 284.16986084]
[170.14212036 289.68118286]
[155.09477234 291.00552368]
[140.28410339 288.03552246]
[126.91075134 281.01199341]
[116.05884552 270.50424194]
[108.60808563 257.36410522]
[105.16247559 242.65682983]
[106.00134277 227.57461548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[11 19]
[12 18]
[13 17]
[23 117]
[24 116]
[25 115]
[26 114]
[27 113]
[33 105]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[55 80]
[56 79]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
